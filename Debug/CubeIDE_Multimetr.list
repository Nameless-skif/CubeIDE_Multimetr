
CubeIDE_Multimetr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d158  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  0800d268  0800d268  0001d268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e664  0800e664  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e664  0800e664  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e664  0800e664  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e664  0800e664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e668  0800e668  0001e668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d74  200001f0  0800e85c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f64  0800e85c  00022f64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9af  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f01  00000000  00000000  0003ebc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00042ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  000445f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd42  00000000  00000000  00045f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f472  00000000  00000000  00061cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fdfd  00000000  00000000  0008114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120f49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089b4  00000000  00000000  00120f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d250 	.word	0x0800d250

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d250 	.word	0x0800d250

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <ILI9341_Write_Command+0x54>)
 8001192:	f002 f9a5 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001196:	2200      	movs	r2, #0
 8001198:	2102      	movs	r1, #2
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <ILI9341_Write_Command+0x54>)
 800119c:	f002 f9a0 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <ILI9341_Write_Command+0x58>)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80011a6:	bf00      	nop
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <ILI9341_Write_Command+0x58>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f9      	beq.n	80011a8 <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80011b4:	bf00      	nop
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <ILI9341_Write_Command+0x58>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f9      	bne.n	80011b6 <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 80011c2:	2201      	movs	r2, #1
 80011c4:	2102      	movs	r1, #2
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <ILI9341_Write_Command+0x54>)
 80011c8:	f002 f98a 	bl	80034e0 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010c00 	.word	0x40010c00
 80011d8:	40013000 	.word	0x40013000

080011dc <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <ILI9341_Write_Data+0x54>)
 80011ee:	f002 f977 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80011f2:	2200      	movs	r2, #0
 80011f4:	2102      	movs	r1, #2
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <ILI9341_Write_Data+0x54>)
 80011f8:	f002 f972 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <ILI9341_Write_Data+0x58>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001202:	bf00      	nop
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <ILI9341_Write_Data+0x58>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f9      	beq.n	8001204 <ILI9341_Write_Data+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001210:	bf00      	nop
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <ILI9341_Write_Data+0x58>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f9      	bne.n	8001212 <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 800121e:	2201      	movs	r2, #1
 8001220:	2102      	movs	r1, #2
 8001222:	4803      	ldr	r0, [pc, #12]	; (8001230 <ILI9341_Write_Data+0x54>)
 8001224:	f002 f95c 	bl	80034e0 <HAL_GPIO_WritePin>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40013000 	.word	0x40013000

08001238 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	80fb      	strh	r3, [r7, #6]
 800124a:	4603      	mov	r3, r0
 800124c:	80bb      	strh	r3, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800125c:	4864      	ldr	r0, [pc, #400]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 800125e:	f002 f93f 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	4862      	ldr	r0, [pc, #392]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 8001268:	f002 f93a 	bl	80034e0 <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 800126e:	222a      	movs	r2, #42	; 0x2a
 8001270:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001272:	bf00      	nop
 8001274:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f9      	beq.n	8001274 <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001280:	bf00      	nop
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 8001296:	f002 f923 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012a4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012a6:	bf00      	nop
 80012a8:	4b52      	ldr	r3, [pc, #328]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0f9      	beq.n	80012a8 <ILI9341_Set_Address+0x70>
	DISP_SPI->DR = (uint8_t)X1;
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012ba:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012bc:	bf00      	nop
 80012be:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f9      	beq.n	80012be <ILI9341_Set_Address+0x86>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012d4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012d6:	bf00      	nop
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <ILI9341_Set_Address+0xa0>
	DISP_SPI->DR = (uint8_t)X2;
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012ea:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012ec:	bf00      	nop
 80012ee:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f9      	beq.n	80012ee <ILI9341_Set_Address+0xb6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80012fa:	bf00      	nop
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f9      	bne.n	80012fc <ILI9341_Set_Address+0xc4>

	DISP_DC_CMD;
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 8001310:	f002 f8e6 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001316:	222b      	movs	r2, #43	; 0x2b
 8001318:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800131a:	bf00      	nop
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <ILI9341_Set_Address+0xe4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001328:	bf00      	nop
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <ILI9341_Set_Address+0xf2>

	DISP_DC_DATA;
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 800133e:	f002 f8cf 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b29b      	uxth	r3, r3
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 800134c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800134e:	bf00      	nop
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f9      	beq.n	8001350 <ILI9341_Set_Address+0x118>
	DISP_SPI->DR = (uint8_t)Y1;
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001362:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001364:	bf00      	nop
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <ILI9341_Set_Address+0x12e>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 8001372:	883b      	ldrh	r3, [r7, #0]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b29b      	uxth	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 800137c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800137e:	bf00      	nop
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f9      	beq.n	8001380 <ILI9341_Set_Address+0x148>
	DISP_SPI->DR = (uint8_t)Y2;
 800138c:	883b      	ldrh	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001392:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001394:	bf00      	nop
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f9      	beq.n	8001396 <ILI9341_Set_Address+0x15e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80013a2:	bf00      	nop
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <ILI9341_Set_Address+0x16c>

	DISP_DC_CMD;
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	480e      	ldr	r0, [pc, #56]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 80013b8:	f002 f892 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80013be:	222c      	movs	r2, #44	; 0x2c
 80013c0:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013c2:	bf00      	nop
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f9      	beq.n	80013c4 <ILI9341_Set_Address+0x18c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80013d0:	bf00      	nop
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <ILI9341_Set_Address+0x1bc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <ILI9341_Set_Address+0x19a>
	DISP_CS_UNSELECT;
 80013de:	2201      	movs	r2, #1
 80013e0:	2102      	movs	r1, #2
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <ILI9341_Set_Address+0x1b8>)
 80013e4:	f002 f87c 	bl	80034e0 <HAL_GPIO_WritePin>
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40013000 	.word	0x40013000

080013f8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <ILI9341_Reset+0x38>)
 8001404:	f002 f86c 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001408:	20c8      	movs	r0, #200	; 0xc8
 800140a:	f001 fabb 	bl	8002984 <HAL_Delay>
	DISP_CS_SELECT;
 800140e:	2200      	movs	r2, #0
 8001410:	2102      	movs	r1, #2
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <ILI9341_Reset+0x38>)
 8001414:	f002 f864 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001418:	20c8      	movs	r0, #200	; 0xc8
 800141a:	f001 fab3 	bl	8002984 <HAL_Delay>
	DISP_RST_WORK;
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <ILI9341_Reset+0x38>)
 8001426:	f002 f85b 	bl	80034e0 <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010c00 	.word	0x40010c00

08001434 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001444:	482e      	ldr	r0, [pc, #184]	; (8001500 <ILI9341_Set_Rotation+0xcc>)
 8001446:	f002 f84b 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800144a:	2200      	movs	r2, #0
 800144c:	2102      	movs	r1, #2
 800144e:	482c      	ldr	r0, [pc, #176]	; (8001500 <ILI9341_Set_Rotation+0xcc>)
 8001450:	f002 f846 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <ILI9341_Set_Rotation+0xd0>)
 8001456:	2236      	movs	r2, #54	; 0x36
 8001458:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800145a:	bf00      	nop
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <ILI9341_Set_Rotation+0xd0>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f9      	beq.n	800145c <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001468:	bf00      	nop
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <ILI9341_Set_Rotation+0xd0>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f9      	bne.n	800146a <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 8001476:	2201      	movs	r2, #1
 8001478:	2102      	movs	r1, #2
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <ILI9341_Set_Rotation+0xcc>)
 800147c:	f002 f830 	bl	80034e0 <HAL_GPIO_WritePin>

	switch(Rotation)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b03      	cmp	r3, #3
 8001484:	d836      	bhi.n	80014f4 <ILI9341_Set_Rotation+0xc0>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <ILI9341_Set_Rotation+0x58>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014b3 	.word	0x080014b3
 8001494:	080014c9 	.word	0x080014c9
 8001498:	080014df 	.word	0x080014df
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800149c:	2048      	movs	r0, #72	; 0x48
 800149e:	f7ff fe9d 	bl	80011dc <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <ILI9341_Set_Rotation+0xd4>)
 80014a4:	22f0      	movs	r2, #240	; 0xf0
 80014a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <ILI9341_Set_Rotation+0xd8>)
 80014aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014ae:	801a      	strh	r2, [r3, #0]
			break;
 80014b0:	e021      	b.n	80014f6 <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80014b2:	2028      	movs	r0, #40	; 0x28
 80014b4:	f7ff fe92 	bl	80011dc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <ILI9341_Set_Rotation+0xd4>)
 80014ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <ILI9341_Set_Rotation+0xd8>)
 80014c2:	22f0      	movs	r2, #240	; 0xf0
 80014c4:	801a      	strh	r2, [r3, #0]
			break;
 80014c6:	e016      	b.n	80014f6 <ILI9341_Set_Rotation+0xc2>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80014c8:	2088      	movs	r0, #136	; 0x88
 80014ca:	f7ff fe87 	bl	80011dc <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <ILI9341_Set_Rotation+0xd4>)
 80014d0:	22f0      	movs	r2, #240	; 0xf0
 80014d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <ILI9341_Set_Rotation+0xd8>)
 80014d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014da:	801a      	strh	r2, [r3, #0]
			break;
 80014dc:	e00b      	b.n	80014f6 <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80014de:	20e8      	movs	r0, #232	; 0xe8
 80014e0:	f7ff fe7c 	bl	80011dc <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <ILI9341_Set_Rotation+0xd4>)
 80014e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <ILI9341_Set_Rotation+0xd8>)
 80014ee:	22f0      	movs	r2, #240	; 0xf0
 80014f0:	801a      	strh	r2, [r3, #0]
			break;
 80014f2:	e000      	b.n	80014f6 <ILI9341_Set_Rotation+0xc2>
		default:
			break;
 80014f4:	bf00      	nop
	}
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40013000 	.word	0x40013000
 8001508:	20000002 	.word	0x20000002
 800150c:	20000000 	.word	0x20000000

08001510 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800151a:	4885      	ldr	r0, [pc, #532]	; (8001730 <ILI9341_Init+0x220>)
 800151c:	f001 ffe0 	bl	80034e0 <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8001520:	f7ff ff6a 	bl	80013f8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fe2b 	bl	8001180 <ILI9341_Write_Command>
	HAL_Delay(1000);
 800152a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800152e:	f001 fa29 	bl	8002984 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8001532:	20cb      	movs	r0, #203	; 0xcb
 8001534:	f7ff fe24 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8001538:	2039      	movs	r0, #57	; 0x39
 800153a:	f7ff fe4f 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800153e:	202c      	movs	r0, #44	; 0x2c
 8001540:	f7ff fe4c 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe49 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 800154a:	2034      	movs	r0, #52	; 0x34
 800154c:	f7ff fe46 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff fe43 	bl	80011dc <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8001556:	20cf      	movs	r0, #207	; 0xcf
 8001558:	f7ff fe12 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fe3d 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8001562:	20c1      	movs	r0, #193	; 0xc1
 8001564:	f7ff fe3a 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	f7ff fe37 	bl	80011dc <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 800156e:	20e8      	movs	r0, #232	; 0xe8
 8001570:	f7ff fe06 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8001574:	2085      	movs	r0, #133	; 0x85
 8001576:	f7ff fe31 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fe2e 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f7ff fe2b 	bl	80011dc <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8001586:	20ea      	movs	r0, #234	; 0xea
 8001588:	f7ff fdfa 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fe25 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fe22 	bl	80011dc <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8001598:	20ed      	movs	r0, #237	; 0xed
 800159a:	f7ff fdf1 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f7ff fe1c 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f7ff fe19 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80015aa:	2012      	movs	r0, #18
 80015ac:	f7ff fe16 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80015b0:	2081      	movs	r0, #129	; 0x81
 80015b2:	f7ff fe13 	bl	80011dc <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80015b6:	20f7      	movs	r0, #247	; 0xf7
 80015b8:	f7ff fde2 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80015bc:	2020      	movs	r0, #32
 80015be:	f7ff fe0d 	bl	80011dc <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80015c2:	20c0      	movs	r0, #192	; 0xc0
 80015c4:	f7ff fddc 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80015c8:	2023      	movs	r0, #35	; 0x23
 80015ca:	f7ff fe07 	bl	80011dc <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80015ce:	20c1      	movs	r0, #193	; 0xc1
 80015d0:	f7ff fdd6 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80015d4:	2010      	movs	r0, #16
 80015d6:	f7ff fe01 	bl	80011dc <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80015da:	20c5      	movs	r0, #197	; 0xc5
 80015dc:	f7ff fdd0 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80015e0:	203e      	movs	r0, #62	; 0x3e
 80015e2:	f7ff fdfb 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80015e6:	2028      	movs	r0, #40	; 0x28
 80015e8:	f7ff fdf8 	bl	80011dc <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80015ec:	20c7      	movs	r0, #199	; 0xc7
 80015ee:	f7ff fdc7 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80015f2:	2086      	movs	r0, #134	; 0x86
 80015f4:	f7ff fdf2 	bl	80011dc <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 80015f8:	2036      	movs	r0, #54	; 0x36
 80015fa:	f7ff fdc1 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 80015fe:	2048      	movs	r0, #72	; 0x48
 8001600:	f7ff fdec 	bl	80011dc <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8001604:	203a      	movs	r0, #58	; 0x3a
 8001606:	f7ff fdbb 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 800160a:	2055      	movs	r0, #85	; 0x55
 800160c:	f7ff fde6 	bl	80011dc <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8001610:	20b1      	movs	r0, #177	; 0xb1
 8001612:	f7ff fdb5 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff fde0 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 800161c:	2018      	movs	r0, #24
 800161e:	f7ff fddd 	bl	80011dc <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8001622:	20b6      	movs	r0, #182	; 0xb6
 8001624:	f7ff fdac 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8001628:	2008      	movs	r0, #8
 800162a:	f7ff fdd7 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800162e:	2082      	movs	r0, #130	; 0x82
 8001630:	f7ff fdd4 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8001634:	2027      	movs	r0, #39	; 0x27
 8001636:	f7ff fdd1 	bl	80011dc <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800163a:	20f2      	movs	r0, #242	; 0xf2
 800163c:	f7ff fda0 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fdcb 	bl	80011dc <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8001646:	2026      	movs	r0, #38	; 0x26
 8001648:	f7ff fd9a 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fdc5 	bl	80011dc <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8001652:	20e0      	movs	r0, #224	; 0xe0
 8001654:	f7ff fd94 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8001658:	200f      	movs	r0, #15
 800165a:	f7ff fdbf 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800165e:	2031      	movs	r0, #49	; 0x31
 8001660:	f7ff fdbc 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8001664:	202b      	movs	r0, #43	; 0x2b
 8001666:	f7ff fdb9 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800166a:	200c      	movs	r0, #12
 800166c:	f7ff fdb6 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001670:	200e      	movs	r0, #14
 8001672:	f7ff fdb3 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001676:	2008      	movs	r0, #8
 8001678:	f7ff fdb0 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 800167c:	204e      	movs	r0, #78	; 0x4e
 800167e:	f7ff fdad 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8001682:	20f1      	movs	r0, #241	; 0xf1
 8001684:	f7ff fdaa 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8001688:	2037      	movs	r0, #55	; 0x37
 800168a:	f7ff fda7 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800168e:	2007      	movs	r0, #7
 8001690:	f7ff fda4 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8001694:	2010      	movs	r0, #16
 8001696:	f7ff fda1 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800169a:	2003      	movs	r0, #3
 800169c:	f7ff fd9e 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016a0:	200e      	movs	r0, #14
 80016a2:	f7ff fd9b 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 80016a6:	2009      	movs	r0, #9
 80016a8:	f7ff fd98 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fd95 	bl	80011dc <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80016b2:	20e1      	movs	r0, #225	; 0xe1
 80016b4:	f7ff fd64 	bl	8001180 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd8f 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016be:	200e      	movs	r0, #14
 80016c0:	f7ff fd8c 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80016c4:	2014      	movs	r0, #20
 80016c6:	f7ff fd89 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80016ca:	2003      	movs	r0, #3
 80016cc:	f7ff fd86 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80016d0:	2011      	movs	r0, #17
 80016d2:	f7ff fd83 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80016d6:	2007      	movs	r0, #7
 80016d8:	f7ff fd80 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80016dc:	2031      	movs	r0, #49	; 0x31
 80016de:	f7ff fd7d 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80016e2:	20c1      	movs	r0, #193	; 0xc1
 80016e4:	f7ff fd7a 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80016e8:	2048      	movs	r0, #72	; 0x48
 80016ea:	f7ff fd77 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80016ee:	2008      	movs	r0, #8
 80016f0:	f7ff fd74 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80016f4:	200f      	movs	r0, #15
 80016f6:	f7ff fd71 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80016fa:	200c      	movs	r0, #12
 80016fc:	f7ff fd6e 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001700:	2031      	movs	r0, #49	; 0x31
 8001702:	f7ff fd6b 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8001706:	2036      	movs	r0, #54	; 0x36
 8001708:	f7ff fd68 	bl	80011dc <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 800170c:	200f      	movs	r0, #15
 800170e:	f7ff fd65 	bl	80011dc <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8001712:	2011      	movs	r0, #17
 8001714:	f7ff fd34 	bl	8001180 <ILI9341_Write_Command>
	HAL_Delay(120);
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f001 f933 	bl	8002984 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800171e:	2029      	movs	r0, #41	; 0x29
 8001720:	f7ff fd2e 	bl	8001180 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001724:	2003      	movs	r0, #3
 8001726:	f7ff fe85 	bl	8001434 <ILI9341_Set_Rotation>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40010c00 	.word	0x40010c00

08001734 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001746:	481e      	ldr	r0, [pc, #120]	; (80017c0 <ILI9341_Draw_Colour_Burst+0x8c>)
 8001748:	f001 feca 	bl	80034e0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800174c:	2200      	movs	r2, #0
 800174e:	2102      	movs	r1, #2
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <ILI9341_Draw_Colour_Burst+0x8c>)
 8001752:	f001 fec5 	bl	80034e0 <HAL_GPIO_WritePin>

	while(Size > 0)
 8001756:	e018      	b.n	800178a <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 8001760:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001762:	bf00      	nop
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f9      	beq.n	8001764 <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001776:	bf00      	nop
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f9      	beq.n	8001778 <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e3      	bne.n	8001758 <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001790:	bf00      	nop
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f9      	beq.n	8001792 <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800179e:	bf00      	nop
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <ILI9341_Draw_Colour_Burst+0x90>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f9      	bne.n	80017a0 <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 80017ac:	2201      	movs	r2, #1
 80017ae:	2102      	movs	r1, #2
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <ILI9341_Draw_Colour_Burst+0x8c>)
 80017b2:	f001 fe95 	bl	80034e0 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40013000 	.word	0x40013000

080017c8 <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <ILI9341_Fill_Screen+0x44>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <ILI9341_Fill_Screen+0x48>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2100      	movs	r1, #0
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff fd29 	bl	8001238 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <ILI9341_Fill_Screen+0x44>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <ILI9341_Fill_Screen+0x48>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff98 	bl	8001734 <ILI9341_Draw_Colour_Burst>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000002 	.word	0x20000002
 8001810:	20000000 	.word	0x20000000

08001814 <ILI9341_WriteChar>:
}


// Вывод символа
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001814:	b082      	sub	sp, #8
 8001816:	b590      	push	{r4, r7, lr}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 800182a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800182e:	b29a      	uxth	r2, r3
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b29c      	uxth	r4, r3
 800183a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800183e:	b29a      	uxth	r2, r3
 8001840:	88bb      	ldrh	r3, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	88b9      	ldrh	r1, [r7, #4]
 800184c:	88f8      	ldrh	r0, [r7, #6]
 800184e:	4622      	mov	r2, r4
 8001850:	f7ff fcf2 	bl	8001238 <ILI9341_Set_Address>

    for(i = 0; i < font.height; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e03d      	b.n	80018d6 <ILI9341_WriteChar+0xc2>
    {
        b = font.data[(ch - 32) * font.height + i];
 800185a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	3b20      	subs	r3, #32
 8001860:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4619      	mov	r1, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	440b      	add	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]

        for(j = 0; j < font.width; j++)
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e023      	b.n	80018c4 <ILI9341_WriteChar+0xb0>
        {
            if((b << j) & 0x8000)
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00c      	beq.n	80018a6 <ILI9341_WriteChar+0x92>
            {
                ILI9341_Write_Data(color >> 8);
 800188c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29b      	uxth	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fca1 	bl	80011dc <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 800189a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fc9c 	bl	80011dc <ILI9341_Write_Data>
 80018a4:	e00b      	b.n	80018be <ILI9341_WriteChar+0xaa>
            }
            else
            {
                ILI9341_Write_Data(bgcolor >> 8);
 80018a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc94 	bl	80011dc <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 80018b4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc8f 	bl	80011dc <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3301      	adds	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018c8:	461a      	mov	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d3d5      	bcc.n	800187c <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018da:	461a      	mov	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4293      	cmp	r3, r2
 80018e0:	d3bb      	bcc.n	800185a <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80018ee:	b002      	add	sp, #8
 80018f0:	4770      	bx	lr

080018f2 <ILI9341_WriteString>:

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80018f2:	b082      	sub	sp, #8
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	603a      	str	r2, [r7, #0]
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
 8001902:	460b      	mov	r3, r1
 8001904:	80bb      	strh	r3, [r7, #4]
    while(*str)
 8001906:	e02e      	b.n	8001966 <ILI9341_WriteString+0x74>
    {
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	7d3a      	ldrb	r2, [r7, #20]
 800190c:	4413      	add	r3, r2
 800190e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001912:	db13      	blt.n	800193c <ILI9341_WriteString+0x4a>
        {
            x = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001918:	7d7b      	ldrb	r3, [r7, #21]
 800191a:	b29a      	uxth	r2, r3
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	80bb      	strh	r3, [r7, #4]

            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	7d7a      	ldrb	r2, [r7, #21]
 8001926:	4413      	add	r3, r2
 8001928:	2bef      	cmp	r3, #239	; 0xef
 800192a:	dc21      	bgt.n	8001970 <ILI9341_WriteString+0x7e>
            {
                break;
            }

            if(*str == ' ')
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b20      	cmp	r3, #32
 8001932:	d103      	bne.n	800193c <ILI9341_WriteString+0x4a>
            {
                str++;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	603b      	str	r3, [r7, #0]
                continue;
 800193a:	e014      	b.n	8001966 <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	88b9      	ldrh	r1, [r7, #4]
 8001942:	88f8      	ldrh	r0, [r7, #6]
 8001944:	8c3b      	ldrh	r3, [r7, #32]
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	8bbb      	ldrh	r3, [r7, #28]
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f7ff ff5f 	bl	8001814 <ILI9341_WriteChar>
        x += font.width;
 8001956:	7d3b      	ldrb	r3, [r7, #20]
 8001958:	b29a      	uxth	r2, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4413      	add	r3, r2
 800195e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	3301      	adds	r3, #1
 8001964:	603b      	str	r3, [r7, #0]
    while(*str)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1cc      	bne.n	8001908 <ILI9341_WriteString+0x16>
    }
}
 800196e:	e000      	b.n	8001972 <ILI9341_WriteString+0x80>
                break;
 8001970:	bf00      	nop
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800197c:	b002      	add	sp, #8
 800197e:	4770      	bx	lr

08001980 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	b29a      	uxth	r2, r3
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2302      	movs	r3, #2
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2301      	movs	r3, #1
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	f002 f80a 	bl	80039c0 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7b7b      	ldrb	r3, [r7, #13]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	b29b      	uxth	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	4613      	mov	r3, r2
 80019d2:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80019d4:	883b      	ldrh	r3, [r7, #0]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80019de:	883b      	ldrh	r3, [r7, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2302      	movs	r3, #2
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2301      	movs	r3, #1
 80019fe:	2180      	movs	r1, #128	; 0x80
 8001a00:	f001 fee4 	bl	80037cc <HAL_I2C_Mem_Write>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001a16:	2102      	movs	r1, #2
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffb1 	bl	8001980 <Read16>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	08db      	lsrs	r3, r3, #3
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	b29b      	uxth	r3, r3

}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff9e 	bl	8001980 <Read16>
 8001a44:	4603      	mov	r3, r0
 8001a46:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <INA219_ReadCurrent>:
 *          	config settings and current LSB
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @return: 	The current reading convereted to milliamps
 */
int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe9 	bl	8001a34 <INA219_ReadCurrent_raw>
 8001a62:	4603      	mov	r3, r0
 8001a64:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8001a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <INA219_ReadCurrent+0x2c>)
 8001a6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a70:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a74:	b21b      	sxth	r3, r3
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000210 	.word	0x20000210
 8001a84:	00000000 	.word	0x00000000

08001a88 <INA219_ReadShuntVolage>:
 * @retval:		Returns voltage level in mili-volts. This value represents the difference
 * 				between the voltage of the power supply and the bus voltage after the shunt
 * 				resistor.
 */
uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001a90:	2101      	movs	r1, #1
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff74 	bl	8001980 <Read16>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcb0 	bl	8000404 <__aeabi_i2d>
 8001aa4:	a308      	add	r3, pc, #32	; (adr r3, 8001ac8 <INA219_ReadShuntVolage+0x40>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fd15 	bl	80004d8 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7fe ffe7 	bl	8000a88 <__aeabi_d2uiz>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b29b      	uxth	r3, r3
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	47ae147b 	.word	0x47ae147b
 8001acc:	3f847ae1 	.word	0x3f847ae1

08001ad0 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	switch(batteryState)
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d019      	beq.n	8001b18 <INA219_HealthCheck+0x48>
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	dc26      	bgt.n	8001b36 <INA219_HealthCheck+0x66>
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <INA219_HealthCheck+0x22>
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d004      	beq.n	8001afa <INA219_HealthCheck+0x2a>
 8001af0:	e021      	b.n	8001b36 <INA219_HealthCheck+0x66>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
			break;
 8001af8:	e021      	b.n	8001b3e <INA219_HealthCheck+0x6e>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fafd 	bl	80010fc <__aeabi_fcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <INA219_HealthCheck+0x40>
			{
				batteryState = Battery_OK;
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b0e:	e016      	b.n	8001b3e <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	701a      	strb	r2, [r3, #0]
			break;
 8001b16:	e012      	b.n	8001b3e <INA219_HealthCheck+0x6e>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff faee 	bl	80010fc <__aeabi_fcmpgt>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <INA219_HealthCheck+0x5e>
			{
				batteryState = Battery_OK;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b2c:	e007      	b.n	8001b3e <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b30:	2202      	movs	r2, #2
 8001b32:	701a      	strb	r2, [r3, #0]
			break;
 8001b34:	e003      	b.n	8001b3e <INA219_HealthCheck+0x6e>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
			break;
 8001b3c:	bf00      	nop
	}
	return batteryState;
 8001b3e:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <INA219_HealthCheck+0x7c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]

}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000020c 	.word	0x2000020c

08001b50 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001b58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff30 	bl	80019c4 <Write16>
	HAL_Delay(1);
 8001b64:	2001      	movs	r0, #1
 8001b66:	f000 ff0d 	bl	8002984 <HAL_Delay>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	461a      	mov	r2, r3
 8001b82:	2105      	movs	r1, #5
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff1d 	bl	80019c4 <Write16>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff0d 	bl	80019c4 <Write16>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001bbc:	f643 139f 	movw	r3, #14751	; 0x399f
 8001bc0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <INA219_setCalibration_32V_2A+0x40>)
 8001bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <INA219_setCalibration_32V_2A+0x44>)
 8001bcc:	220a      	movs	r2, #10
 8001bce:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <INA219_setCalibration_32V_2A+0x48>)
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <INA219_setCalibration_32V_2A+0x40>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffc8 	bl	8001b72 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001be2:	89fb      	ldrh	r3, [r7, #14]
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffd3 	bl	8001b92 <INA219_setConfig>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	2000020e 	.word	0x2000020e
 8001bf8:	20000210 	.word	0x20000210
 8001bfc:	20000212 	.word	0x20000212

08001c00 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <INA219_Init+0x78>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <INA219_Init+0x7c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <INA219_Init+0x80>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	b299      	uxth	r1, r3
 8001c34:	2302      	movs	r3, #2
 8001c36:	2203      	movs	r2, #3
 8001c38:	68b8      	ldr	r0, [r7, #8]
 8001c3a:	f002 f929 	bl	8003e90 <HAL_I2C_IsDeviceReady>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d111      	bne.n	8001c6c <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <INA219_Init+0x84>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001c4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff ff3a 	bl	8001ad0 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ff77 	bl	8001b50 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f7ff ffa6 	bl	8001bb4 <INA219_setCalibration_32V_2A>

		return 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8001c6c:	2300      	movs	r3, #0
	}
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2000020d 	.word	0x2000020d
 8001c7c:	20000210 	.word	0x20000210
 8001c80:	20000212 	.word	0x20000212
 8001c84:	2000020c 	.word	0x2000020c

08001c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b09e      	sub	sp, #120	; 0x78
 8001c8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c8e:	f000 fe47 	bl	8002920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c92:	f000 f8db 	bl	8001e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c96:	f000 fa01 	bl	800209c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c9a:	f000 f933 	bl	8001f04 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001c9e:	f000 f99d 	bl	8001fdc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001ca2:	f000 f9d1 	bl	8002048 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001ca6:	f000 f96b 	bl	8001f80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 8001caa:	4b4b      	ldr	r3, [pc, #300]	; (8001dd8 <main+0x150>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <main+0x150>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb8:	601a      	str	r2, [r3, #0]
  ILI9341_Init();
 8001cba:	f7ff fc29 	bl	8001510 <ILI9341_Init>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f7ff fbb8 	bl	8001434 <ILI9341_Set_Rotation>

  ILI9341_Fill_Screen(MYFON);
 8001cc4:	f642 1065 	movw	r0, #10597	; 0x2965
 8001cc8:	f7ff fd7e 	bl	80017c8 <ILI9341_Fill_Screen>
  ILI9341_WriteString(0, 0, "<---Pulsar--->", Font_11x18, WHITE, MYFON);
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <main+0x154>)
 8001cce:	f642 1265 	movw	r2, #10597	; 0x2965
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	9200      	str	r2, [sp, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a3f      	ldr	r2, [pc, #252]	; (8001de0 <main+0x158>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fe04 	bl	80018f2 <ILI9341_WriteString>
  ILI9341_WriteString(0, 18, "The value of the ADC", Font_11x18, WHITE, MYFON);
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <main+0x154>)
 8001cec:	f642 1265 	movw	r2, #10597	; 0x2965
 8001cf0:	9202      	str	r2, [sp, #8]
 8001cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf6:	9201      	str	r2, [sp, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	9200      	str	r2, [sp, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a39      	ldr	r2, [pc, #228]	; (8001de4 <main+0x15c>)
 8001d00:	2112      	movs	r1, #18
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fdf5 	bl	80018f2 <ILI9341_WriteString>
  ILI9341_WriteString(60, 36, "V", Font_11x18, WHITE, MYFON);
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <main+0x154>)
 8001d0a:	f642 1265 	movw	r2, #10597	; 0x2965
 8001d0e:	9202      	str	r2, [sp, #8]
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	9200      	str	r2, [sp, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <main+0x160>)
 8001d1e:	2124      	movs	r1, #36	; 0x24
 8001d20:	203c      	movs	r0, #60	; 0x3c
 8001d22:	f7ff fde6 	bl	80018f2 <ILI9341_WriteString>
  HAL_Delay(100);
 8001d26:	2064      	movs	r0, #100	; 0x64
 8001d28:	f000 fe2c 	bl	8002984 <HAL_Delay>

  unsigned char uart_tx_buff[100];
  uint16_t vbus, vshunt, current, config;
  float current_correctly;
  while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8001d2c:	bf00      	nop
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	492e      	ldr	r1, [pc, #184]	; (8001dec <main+0x164>)
 8001d32:	482f      	ldr	r0, [pc, #188]	; (8001df0 <main+0x168>)
 8001d34:	f7ff ff64 	bl	8001c00 <INA219_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f7      	beq.n	8001d2e <main+0xa6>
       {

        }
   sprintf(uart_tx_buff, "**********		Hello battery app	 **********\r\n");
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	492c      	ldr	r1, [pc, #176]	; (8001df4 <main+0x16c>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f007 fccc 	bl	80096e0 <siprintf>
   HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fa00 	bl	8000150 <strlen>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	1d39      	adds	r1, r7, #4
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	4827      	ldr	r0, [pc, #156]	; (8001df8 <main+0x170>)
 8001d5a:	f003 fd8f 	bl	800587c <HAL_UART_Transmit>
//   HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d5e:	f003 ff0d 	bl	8005b7c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, sizeof(QUEUE_t), &myQueue01_attributes);
 8001d62:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <main+0x174>)
 8001d64:	2164      	movs	r1, #100	; 0x64
 8001d66:	200a      	movs	r0, #10
 8001d68:	f004 f846 	bl	8005df8 <osMessageQueueNew>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <main+0x178>)
 8001d70:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <main+0x17c>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	4824      	ldr	r0, [pc, #144]	; (8001e08 <main+0x180>)
 8001d78:	f003 ff66 	bl	8005c48 <osThreadNew>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <main+0x184>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <main+0x188>)
 8001d84:	2100      	movs	r1, #0
 8001d86:	4823      	ldr	r0, [pc, #140]	; (8001e14 <main+0x18c>)
 8001d88:	f003 ff5e 	bl	8005c48 <osThreadNew>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <main+0x190>)
 8001d90:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <main+0x194>)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4822      	ldr	r0, [pc, #136]	; (8001e20 <main+0x198>)
 8001d98:	f003 ff56 	bl	8005c48 <osThreadNew>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <main+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8001da2:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <main+0x1a0>)
 8001da4:	2100      	movs	r1, #0
 8001da6:	4821      	ldr	r0, [pc, #132]	; (8001e2c <main+0x1a4>)
 8001da8:	f003 ff4e 	bl	8005c48 <osThreadNew>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <main+0x1a8>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* creation of TFT_Task */
  TFT_TaskHandle = osThreadNew(StartTFT_Task, NULL, &TFT_Task_attributes);
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <main+0x1ac>)
 8001db4:	2100      	movs	r1, #0
 8001db6:	4820      	ldr	r0, [pc, #128]	; (8001e38 <main+0x1b0>)
 8001db8:	f003 ff46 	bl	8005c48 <osThreadNew>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <main+0x1b4>)
 8001dc0:	6013      	str	r3, [r2, #0]

  /* creation of INA219_Task */
  INA219_TaskHandle = osThreadNew(StartINA219_Task, NULL, &INA219_Task_attributes);
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <main+0x1b8>)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	481f      	ldr	r0, [pc, #124]	; (8001e44 <main+0x1bc>)
 8001dc8:	f003 ff3e 	bl	8005c48 <osThreadNew>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <main+0x1c0>)
 8001dd0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001dd2:	f003 ff05 	bl	8005be0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <main+0x14e>
 8001dd8:	20000298 	.word	0x20000298
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	0800d2bc 	.word	0x0800d2bc
 8001de4:	0800d2cc 	.word	0x0800d2cc
 8001de8:	0800d2e4 	.word	0x0800d2e4
 8001dec:	20000244 	.word	0x20000244
 8001df0:	200015b4 	.word	0x200015b4
 8001df4:	0800d2e8 	.word	0x0800d2e8
 8001df8:	200002f0 	.word	0x200002f0
 8001dfc:	0800e178 	.word	0x0800e178
 8001e00:	20001178 	.word	0x20001178
 8001e04:	0800e0a0 	.word	0x0800e0a0
 8001e08:	0800215d 	.word	0x0800215d
 8001e0c:	20000338 	.word	0x20000338
 8001e10:	0800e0c4 	.word	0x0800e0c4
 8001e14:	0800216d 	.word	0x0800216d
 8001e18:	20000598 	.word	0x20000598
 8001e1c:	0800e0e8 	.word	0x0800e0e8
 8001e20:	08002189 	.word	0x08002189
 8001e24:	200007f8 	.word	0x200007f8
 8001e28:	0800e10c 	.word	0x0800e10c
 8001e2c:	08002221 	.word	0x08002221
 8001e30:	20000a58 	.word	0x20000a58
 8001e34:	0800e130 	.word	0x0800e130
 8001e38:	080022b1 	.word	0x080022b1
 8001e3c:	20000cb8 	.word	0x20000cb8
 8001e40:	0800e154 	.word	0x0800e154
 8001e44:	08002305 	.word	0x08002305
 8001e48:	20000f18 	.word	0x20000f18

08001e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b094      	sub	sp, #80	; 0x50
 8001e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2228      	movs	r2, #40	; 0x28
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f006 fdc6 	bl	80089ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e98:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fcd6 	bl	8004854 <HAL_RCC_OscConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eae:	f000 fa5f 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2102      	movs	r1, #2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 ff42 	bl	8004d58 <HAL_RCC_ClockConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001eda:	f000 fa49 	bl	8002370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 f8f2 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ef6:	f000 fa3b 	bl	8002370 <Error_Handler>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3750      	adds	r7, #80	; 0x50
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <MX_ADC1_Init+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f40:	480d      	ldr	r0, [pc, #52]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f42:	f000 fd43 	bl	80029cc <HAL_ADC_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fa10 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f54:	2301      	movs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_ADC1_Init+0x74>)
 8001f62:	f000 fec5 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f6c:	f000 fa00 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000214 	.word	0x20000214
 8001f7c:	40012400 	.word	0x40012400

08001f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001f86:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <MX_I2C1_Init+0x54>)
 8001f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_I2C1_Init+0x58>)
 8001f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001f9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fbc:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <MX_I2C1_Init+0x50>)
 8001fbe:	f001 fac1 	bl	8003544 <HAL_I2C_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fc8:	f000 f9d2 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000244 	.word	0x20000244
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	000186a0 	.word	0x000186a0

08001fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_SPI1_Init+0x64>)
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <MX_SPI1_Init+0x68>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	; (8002040 <MX_SPI1_Init+0x64>)
 8001fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_SPI1_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_SPI1_Init+0x64>)
 8002008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800200c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_SPI1_Init+0x64>)
 8002010:	2208      	movs	r2, #8
 8002012:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_SPI1_Init+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_SPI1_Init+0x64>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_SPI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_SPI1_Init+0x64>)
 8002028:	220a      	movs	r2, #10
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_SPI1_Init+0x64>)
 800202e:	f003 f907 	bl	8005240 <HAL_SPI_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002038:	f000 f99a 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000298 	.word	0x20000298
 8002044:	40013000 	.word	0x40013000

08002048 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART1_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002080:	f003 fbac 	bl	80057dc <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f000 f971 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002f0 	.word	0x200002f0
 8002098:	40013800 	.word	0x40013800

0800209c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020b6:	f043 0320 	orr.w	r3, r3, #32
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_GPIO_Init+0xb4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_Blink_GPIO_Port, LED1_Blink_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2110      	movs	r1, #16
 80020fc:	4815      	ldr	r0, [pc, #84]	; (8002154 <MX_GPIO_Init+0xb8>)
 80020fe:	f001 f9ef 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f640 4103 	movw	r1, #3075	; 0xc03
 8002108:	4813      	ldr	r0, [pc, #76]	; (8002158 <MX_GPIO_Init+0xbc>)
 800210a:	f001 f9e9 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Blink_Pin */
  GPIO_InitStruct.Pin = LED1_Blink_Pin;
 800210e:	2310      	movs	r3, #16
 8002110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2302      	movs	r3, #2
 800211c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_Blink_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4619      	mov	r1, r3
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <MX_GPIO_Init+0xb8>)
 8002126:	f001 f857 	bl	80031d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CS_Pin TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 800212a:	f640 4303 	movw	r3, #3075	; 0xc03
 800212e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2302      	movs	r3, #2
 800213a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	4619      	mov	r1, r3
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_GPIO_Init+0xbc>)
 8002144:	f001 f848 	bl	80031d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002148:	bf00      	nop
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40010800 	.word	0x40010800
 8002158:	40010c00 	.word	0x40010c00

0800215c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f003 fe19 	bl	8005d9c <osDelay>
 800216a:	e7fb      	b.n	8002164 <StartDefaultTask+0x8>

0800216c <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED1_Blink_GPIO_Port, LED1_Blink_Pin);
 8002174:	2110      	movs	r1, #16
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <StartLED1_Task+0x18>)
 8002178:	f001 f9ca 	bl	8003510 <HAL_GPIO_TogglePin>
    osDelay(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f003 fe0d 	bl	8005d9c <osDelay>
	HAL_GPIO_TogglePin(LED1_Blink_GPIO_Port, LED1_Blink_Pin);
 8002182:	e7f7      	b.n	8002174 <StartLED1_Task+0x8>
 8002184:	40010800 	.word	0x40010800

08002188 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b0a2      	sub	sp, #136	; 0x88
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
   QUEUE_t msg;
   float u_res =0;
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   char ADC_char_res[20];
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8002198:	481c      	ldr	r0, [pc, #112]	; (800220c <StartADC_Task+0x84>)
 800219a:	f000 fcef 	bl	8002b7c <HAL_ADC_Start>
	HAL_Delay(100);
 800219e:	2064      	movs	r0, #100	; 0x64
 80021a0:	f000 fbf0 	bl	8002984 <HAL_Delay>
	u_res = HAL_ADC_GetValue(&hadc1)* 3.3f / 4095.0f;
 80021a4:	4819      	ldr	r0, [pc, #100]	; (800220c <StartADC_Task+0x84>)
 80021a6:	f000 fd97 	bl	8002cd8 <HAL_ADC_GetValue>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fd91 	bl	8000cd4 <__aeabi_ui2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4916      	ldr	r1, [pc, #88]	; (8002210 <StartADC_Task+0x88>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fde4 	bl	8000d84 <__aeabi_fmul>
 80021bc:	4603      	mov	r3, r0
 80021be:	4915      	ldr	r1, [pc, #84]	; (8002214 <StartADC_Task+0x8c>)
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fe93 	bl	8000eec <__aeabi_fdiv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    sprintf(ADC_char_res, "%1.3f", u_res);
 80021cc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021d0:	f7fe f92a 	bl	8000428 <__aeabi_f2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	f107 000c 	add.w	r0, r7, #12
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <StartADC_Task+0x90>)
 80021de:	f007 fa7f 	bl	80096e0 <siprintf>
	strcpy(msg.Buf,ADC_char_res);
 80021e2:	f107 020c 	add.w	r2, r7, #12
 80021e6:	f107 0320 	add.w	r3, r7, #32
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f007 fa97 	bl	8009720 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <StartADC_Task+0x94>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	f107 0120 	add.w	r1, r7, #32
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	2200      	movs	r2, #0
 8002200:	f003 fe80 	bl	8005f04 <osMessageQueuePut>
	osDelay(100);
 8002204:	2064      	movs	r0, #100	; 0x64
 8002206:	f003 fdc9 	bl	8005d9c <osDelay>
	HAL_ADC_Start(&hadc1);
 800220a:	e7c5      	b.n	8002198 <StartADC_Task+0x10>
 800220c:	20000214 	.word	0x20000214
 8002210:	40533333 	.word	0x40533333
 8002214:	457ff000 	.word	0x457ff000
 8002218:	0800d314 	.word	0x0800d314
 800221c:	20001178 	.word	0x20001178

08002220 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b09e      	sub	sp, #120	; 0x78
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
   QUEUE_t msg;
   char message[] = "Value ADC ";
 8002228:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <StartUART_Task+0x80>)
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002230:	c303      	stmia	r3!, {r0, r1}
 8002232:	801a      	strh	r2, [r3, #0]
 8002234:	3302      	adds	r3, #2
 8002236:	0c12      	lsrs	r2, r2, #16
 8002238:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), osWaitForever);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7fd ff86 	bl	8000150 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	b29a      	uxth	r2, r3
 8002248:	f107 0108 	add.w	r1, r7, #8
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	4814      	ldr	r0, [pc, #80]	; (80022a4 <StartUART_Task+0x84>)
 8002252:	f003 fb13 	bl	800587c <HAL_UART_Transmit>
	osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <StartUART_Task+0x88>)
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	f107 0114 	add.w	r1, r7, #20
 800225e:	f04f 33ff 	mov.w	r3, #4294967295
 8002262:	2200      	movs	r2, #0
 8002264:	f003 fec2 	bl	8005fec <osMessageQueueGet>
	osDelay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f003 fd97 	bl	8005d9c <osDelay>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	4618      	mov	r0, r3
 8002274:	f7fd ff6c 	bl	8000150 <strlen>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	f107 0114 	add.w	r1, r7, #20
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	4807      	ldr	r0, [pc, #28]	; (80022a4 <StartUART_Task+0x84>)
 8002286:	f003 faf9 	bl	800587c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	2202      	movs	r2, #2
 8002290:	4906      	ldr	r1, [pc, #24]	; (80022ac <StartUART_Task+0x8c>)
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <StartUART_Task+0x84>)
 8002294:	f003 faf2 	bl	800587c <HAL_UART_Transmit>
    osDelay(100);
 8002298:	2064      	movs	r0, #100	; 0x64
 800229a:	f003 fd7f 	bl	8005d9c <osDelay>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), osWaitForever);
 800229e:	e7cc      	b.n	800223a <StartUART_Task+0x1a>
 80022a0:	0800d320 	.word	0x0800d320
 80022a4:	200002f0 	.word	0x200002f0
 80022a8:	20001178 	.word	0x20001178
 80022ac:	0800d31c 	.word	0x0800d31c

080022b0 <StartTFT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFT_Task */
void StartTFT_Task(void *argument)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b0a0      	sub	sp, #128	; 0x80
 80022b4:	af04      	add	r7, sp, #16
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFT_Task */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 80022b8:	4b10      	ldr	r3, [pc, #64]	; (80022fc <StartTFT_Task+0x4c>)
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	f107 010c 	add.w	r1, r7, #12
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	2200      	movs	r2, #0
 80022c6:	f003 fe91 	bl	8005fec <osMessageQueueGet>
	osDelay(100);
 80022ca:	2064      	movs	r0, #100	; 0x64
 80022cc:	f003 fd66 	bl	8005d9c <osDelay>
	ILI9341_WriteString(0, 36, msg.Buf, Font_11x18, WHITE, MYFON);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <StartTFT_Task+0x50>)
 80022d2:	f107 010c 	add.w	r1, r7, #12
 80022d6:	f642 1265 	movw	r2, #10597	; 0x2965
 80022da:	9202      	str	r2, [sp, #8]
 80022dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022e0:	9201      	str	r2, [sp, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	9200      	str	r2, [sp, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	460a      	mov	r2, r1
 80022ea:	2124      	movs	r1, #36	; 0x24
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff fb00 	bl	80018f2 <ILI9341_WriteString>

    osDelay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f003 fd52 	bl	8005d9c <osDelay>
	osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 80022f8:	e7de      	b.n	80022b8 <StartTFT_Task+0x8>
 80022fa:	bf00      	nop
 80022fc:	20001178 	.word	0x20001178
 8002300:	20000004 	.word	0x20000004

08002304 <StartINA219_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINA219_Task */
void StartINA219_Task(void *argument)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint16_t vbus, vshunt, current;
  float current_correctly;
  /* Infinite loop */
  for(;;)
  {
	vbus = INA219_ReadBusVoltage(&ina219);
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <StartINA219_Task+0x40>)
 800230e:	f7ff fb7e 	bl	8001a0e <INA219_ReadBusVoltage>
 8002312:	4603      	mov	r3, r0
 8002314:	83fb      	strh	r3, [r7, #30]
	vshunt = INA219_ReadShuntVolage(&ina219);
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <StartINA219_Task+0x40>)
 8002318:	f7ff fbb6 	bl	8001a88 <INA219_ReadShuntVolage>
 800231c:	4603      	mov	r3, r0
 800231e:	83bb      	strh	r3, [r7, #28]
	current_correctly = INA219_ReadCurrent(&ina219)/1.238f;
 8002320:	4808      	ldr	r0, [pc, #32]	; (8002344 <StartINA219_Task+0x40>)
 8002322:	f7ff fb97 	bl	8001a54 <INA219_ReadCurrent>
 8002326:	4603      	mov	r3, r0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fcd7 	bl	8000cdc <__aeabi_i2f>
 800232e:	4603      	mov	r3, r0
 8002330:	4905      	ldr	r1, [pc, #20]	; (8002348 <StartINA219_Task+0x44>)
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fdda 	bl	8000eec <__aeabi_fdiv>
 8002338:	4603      	mov	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]
//	HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
//
//	sprintf(uart_tx_buff, "current_correctly: %1.3f mA\r\n",current_correctly);
//    HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);

    osDelay(1);
 800233c:	2001      	movs	r0, #1
 800233e:	f003 fd2d 	bl	8005d9c <osDelay>
	vbus = INA219_ReadBusVoltage(&ina219);
 8002342:	e7e3      	b.n	800230c <StartINA219_Task+0x8>
 8002344:	200015b4 	.word	0x200015b4
 8002348:	3f9e76c9 	.word	0x3f9e76c9

0800234c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800235e:	f000 faf5 	bl	800294c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40000800 	.word	0x40000800

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	e7fe      	b.n	8002378 <Error_Handler+0x8>
	...

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <HAL_MspInit+0x68>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <HAL_MspInit+0x68>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_MspInit+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_MspInit+0x68>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a11      	ldr	r2, [pc, #68]	; (80023e4 <HAL_MspInit+0x68>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]
 80023a6:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_MspInit+0x68>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	210f      	movs	r1, #15
 80023b6:	f06f 0001 	mvn.w	r0, #1
 80023ba:	f000 fee2 	bl	8003182 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <HAL_MspInit+0x6c>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_MspInit+0x6c>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000

080023ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_ADC_MspInit+0x6c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d121      	bne.n	8002450 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_ADC_MspInit+0x70>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_ADC_MspInit+0x70>)
 8002412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <HAL_ADC_MspInit+0x70>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_ADC_MspInit+0x70>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a0c      	ldr	r2, [pc, #48]	; (800245c <HAL_ADC_MspInit+0x70>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <HAL_ADC_MspInit+0x70>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800243c:	2302      	movs	r3, #2
 800243e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002440:	2303      	movs	r3, #3
 8002442:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	4619      	mov	r1, r3
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_ADC_MspInit+0x74>)
 800244c:	f000 fec4 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002450:	bf00      	nop
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40012400 	.word	0x40012400
 800245c:	40021000 	.word	0x40021000
 8002460:	40010800 	.word	0x40010800

08002464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <HAL_I2C_MspInit+0x70>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d123      	bne.n	80024cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249c:	23c0      	movs	r3, #192	; 0xc0
 800249e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4619      	mov	r1, r3
 80024ae:	480b      	ldr	r0, [pc, #44]	; (80024dc <HAL_I2C_MspInit+0x78>)
 80024b0:	f000 fe92 	bl	80031d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 80024ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_I2C_MspInit+0x74>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40005400 	.word	0x40005400
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010c00 	.word	0x40010c00

080024e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_SPI_MspInit+0x88>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12f      	bne.n	8002560 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002530:	23a0      	movs	r3, #160	; 0xa0
 8002532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	4619      	mov	r1, r3
 8002542:	480b      	ldr	r0, [pc, #44]	; (8002570 <HAL_SPI_MspInit+0x90>)
 8002544:	f000 fe48 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_SPI_MspInit+0x90>)
 800255c:	f000 fe3c 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40013000 	.word	0x40013000
 800256c:	40021000 	.word	0x40021000
 8002570:	40010800 	.word	0x40010800

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1c      	ldr	r2, [pc, #112]	; (8002600 <HAL_UART_MspInit+0x8c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d131      	bne.n	80025f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_UART_MspInit+0x90>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <HAL_UART_MspInit+0x90>)
 800259a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x90>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x90>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <HAL_UART_MspInit+0x90>)
 80025b2:	f043 0304 	orr.w	r3, r3, #4
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <HAL_UART_MspInit+0x90>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	4619      	mov	r1, r3
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <HAL_UART_MspInit+0x94>)
 80025da:	f000 fdfd 	bl	80031d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_UART_MspInit+0x94>)
 80025f4:	f000 fdf0 	bl	80031d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40013800 	.word	0x40013800
 8002604:	40021000 	.word	0x40021000
 8002608:	40010800 	.word	0x40010800

0800260c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	; 0x38
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002622:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <HAL_InitTick+0xe8>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a33      	ldr	r2, [pc, #204]	; (80026f4 <HAL_InitTick+0xe8>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <HAL_InitTick+0xe8>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263a:	f107 0210 	add.w	r2, r7, #16
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fcf7 	bl	8005038 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002654:	f002 fcc8 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8002658:	6378      	str	r0, [r7, #52]	; 0x34
 800265a:	e004      	b.n	8002666 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800265c:	f002 fcc4 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8002660:	4603      	mov	r3, r0
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_InitTick+0xec>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	3b01      	subs	r3, #1
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_InitTick+0xf0>)
 8002676:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_InitTick+0xf4>)
 8002678:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_InitTick+0xf0>)
 800267c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002680:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002682:	4a1e      	ldr	r2, [pc, #120]	; (80026fc <HAL_InitTick+0xf0>)
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <HAL_InitTick+0xf0>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_InitTick+0xf0>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_InitTick+0xf0>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800269a:	4818      	ldr	r0, [pc, #96]	; (80026fc <HAL_InitTick+0xf0>)
 800269c:	f002 fe54 	bl	8005348 <HAL_TIM_Base_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11b      	bne.n	80026e6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80026ae:	4813      	ldr	r0, [pc, #76]	; (80026fc <HAL_InitTick+0xf0>)
 80026b0:	f002 fea2 	bl	80053f8 <HAL_TIM_Base_Start_IT>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d111      	bne.n	80026e6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026c2:	201e      	movs	r0, #30
 80026c4:	f000 fd79 	bl	80031ba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	d808      	bhi.n	80026e0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026ce:	2200      	movs	r2, #0
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	201e      	movs	r0, #30
 80026d4:	f000 fd55 	bl	8003182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <HAL_InitTick+0xf8>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e002      	b.n	80026e6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3738      	adds	r7, #56	; 0x38
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	200015bc 	.word	0x200015bc
 8002700:	40000800 	.word	0x40000800
 8002704:	20000010 	.word	0x20000010

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800270c:	e7fe      	b.n	800270c <NMI_Handler+0x4>

0800270e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <HardFault_Handler+0x4>

08002714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <MemManage_Handler+0x4>

0800271a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800271e:	e7fe      	b.n	800271e <BusFault_Handler+0x4>

08002720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <UsageFault_Handler+0x4>

08002726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM4_IRQHandler+0x10>)
 800273a:	f002 feaf 	bl	800549c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200015bc 	.word	0x200015bc

08002748 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return 1;
 800274c:	2301      	movs	r3, #1
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <_kill>:

int _kill(int pid, int sig)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002760:	f006 f90c 	bl	800897c <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	2216      	movs	r2, #22
 8002768:	601a      	str	r2, [r3, #0]
  return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <_exit>:

void _exit (int status)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800277e:	f04f 31ff 	mov.w	r1, #4294967295
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffe7 	bl	8002756 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002788:	e7fe      	b.n	8002788 <_exit+0x12>

0800278a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e00a      	b.n	80027b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800279c:	f3af 8000 	nop.w
 80027a0:	4601      	mov	r1, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	60ba      	str	r2, [r7, #8]
 80027a8:	b2ca      	uxtb	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbf0      	blt.n	800279c <_read+0x12>
  }

  return len;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e009      	b.n	80027ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbf1      	blt.n	80027d6 <_write+0x12>
  }
  return len;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_close>:

int _close(int file)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002822:	605a      	str	r2, [r3, #4]
  return 0;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <_isatty>:

int _isatty(int file)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <_sbrk+0x5c>)
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <_sbrk+0x60>)
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <_sbrk+0x64>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <_sbrk+0x64>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <_sbrk+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <_sbrk+0x64>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d207      	bcs.n	800289c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800288c:	f006 f876 	bl	800897c <__errno>
 8002890:	4603      	mov	r3, r0
 8002892:	220c      	movs	r2, #12
 8002894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e009      	b.n	80028b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <_sbrk+0x64>)
 80028ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ae:	68fb      	ldr	r3, [r7, #12]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20005000 	.word	0x20005000
 80028bc:	00000400 	.word	0x00000400
 80028c0:	20001604 	.word	0x20001604
 80028c4:	20002f68 	.word	0x20002f68

080028c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
;    bl  SystemInit
 80028d4:	f7ff fff8 	bl	80028c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480b      	ldr	r0, [pc, #44]	; (8002908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028da:	490c      	ldr	r1, [pc, #48]	; (800290c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028f0:	4c09      	ldr	r4, [pc, #36]	; (8002918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f006 f843 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002902:	f7ff f9c1 	bl	8001c88 <main>
  bx lr
 8002906:	4770      	bx	lr
  ldr r0, =_sdata
 8002908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800290c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002910:	0800e66c 	.word	0x0800e66c
  ldr r2, =_sbss
 8002914:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002918:	20002f64 	.word	0x20002f64

0800291c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800291c:	e7fe      	b.n	800291c <ADC1_2_IRQHandler>
	...

08002920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_Init+0x28>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_Init+0x28>)
 800292a:	f043 0310 	orr.w	r3, r3, #16
 800292e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 fc1b 	bl	800316c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	200f      	movs	r0, #15
 8002938:	f7ff fe68 	bl	800260c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7ff fd1e 	bl	800237c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40022000 	.word	0x40022000

0800294c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_IncTick+0x1c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	461a      	mov	r2, r3
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_IncTick+0x20>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4413      	add	r3, r2
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <HAL_IncTick+0x20>)
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000014 	.word	0x20000014
 800296c:	20001608 	.word	0x20001608

08002970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return uwTick;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_GetTick+0x10>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20001608 	.word	0x20001608

08002984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800298c:	f7ff fff0 	bl	8002970 <HAL_GetTick>
 8002990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d005      	beq.n	80029aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_Delay+0x44>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029aa:	bf00      	nop
 80029ac:	f7ff ffe0 	bl	8002970 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8f7      	bhi.n	80029ac <HAL_Delay+0x28>
  {
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0be      	b.n	8002b6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fcee 	bl	80023ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fabf 	bl	8002f94 <ADC_ConversionStop_Disable>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8099 	bne.w	8002b5a <HAL_ADC_Init+0x18e>
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8095 	bne.w	8002b5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a38:	f023 0302 	bic.w	r3, r3, #2
 8002a3c:	f043 0202 	orr.w	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7b1b      	ldrb	r3, [r3, #12]
 8002a52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a64:	d003      	beq.n	8002a6e <HAL_ADC_Init+0xa2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_Init+0xa8>
 8002a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a72:	e000      	b.n	8002a76 <HAL_ADC_Init+0xaa>
 8002a74:	2300      	movs	r3, #0
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7d1b      	ldrb	r3, [r3, #20]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d119      	bne.n	8002ab8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	035a      	lsls	r2, r3, #13
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_ADC_Init+0x1a8>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae8:	d003      	beq.n	8002af2 <HAL_ADC_Init+0x126>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d104      	bne.n	8002afc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	051b      	lsls	r3, r3, #20
 8002afa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_ADC_Init+0x1ac>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	f023 0303 	bic.w	r3, r3, #3
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b36:	e018      	b.n	8002b6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	f023 0312 	bic.w	r3, r3, #18
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b58:	e007      	b.n	8002b6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	ffe1f7fd 	.word	0xffe1f7fd
 8002b78:	ff1f0efe 	.word	0xff1f0efe

08002b7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_Start+0x1a>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e098      	b.n	8002cc8 <HAL_ADC_Start+0x14c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f99e 	bl	8002ee0 <ADC_Enable>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8087 	bne.w	8002cbe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a41      	ldr	r2, [pc, #260]	; (8002cd0 <HAL_ADC_Start+0x154>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d105      	bne.n	8002bda <HAL_ADC_Start+0x5e>
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_ADC_Start+0x158>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d026      	beq.n	8002c42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bfc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c04:	e01d      	b.n	8002c42 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <HAL_ADC_Start+0x158>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_Start+0xaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2b      	ldr	r2, [pc, #172]	; (8002cd0 <HAL_ADC_Start+0x154>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <HAL_ADC_Start+0xc6>
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_ADC_Start+0x158>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d007      	beq.n	8002c42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	f023 0206 	bic.w	r2, r3, #6
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c5a:	e002      	b.n	8002c62 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0202 	mvn.w	r2, #2
 8002c72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c82:	d113      	bne.n	8002cac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_ADC_Start+0x154>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d105      	bne.n	8002c9a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <HAL_ADC_Start+0x158>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	e00c      	b.n	8002cc6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40012800 	.word	0x40012800
 8002cd4:	40012400 	.word	0x40012400

08002cd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x20>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e0dc      	b.n	8002eca <HAL_ADC_ConfigChannel+0x1da>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d81c      	bhi.n	8002d5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	3b05      	subs	r3, #5
 8002d32:	221f      	movs	r2, #31
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	4019      	ands	r1, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b05      	subs	r3, #5
 8002d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	635a      	str	r2, [r3, #52]	; 0x34
 8002d58:	e03c      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d81c      	bhi.n	8002d9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	3b23      	subs	r3, #35	; 0x23
 8002d74:	221f      	movs	r2, #31
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	4019      	ands	r1, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b23      	subs	r3, #35	; 0x23
 8002d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9a:	e01b      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b41      	subs	r3, #65	; 0x41
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b41      	subs	r3, #65	; 0x41
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d91c      	bls.n	8002e16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4019      	ands	r1, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6898      	ldr	r0, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	3b1e      	subs	r3, #30
 8002e08:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	e019      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6919      	ldr	r1, [r3, #16]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	2207      	movs	r2, #7
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	4019      	ands	r1, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d003      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e56:	2b11      	cmp	r3, #17
 8002e58:	d132      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d125      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d126      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e80:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d11a      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8a:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_ADC_ConfigChannel+0x1ec>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	0c9a      	lsrs	r2, r3, #18
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f9      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x1b2>
 8002eae:	e007      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f043 0220 	orr.w	r2, r3, #32
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40012400 	.word	0x40012400
 8002ed8:	2000000c 	.word	0x2000000c
 8002edc:	431bde83 	.word	0x431bde83

08002ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d040      	beq.n	8002f80 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <ADC_Enable+0xac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <ADC_Enable+0xb0>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	0c9b      	lsrs	r3, r3, #18
 8002f1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f1c:	e002      	b.n	8002f24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f2a:	f7ff fd21 	bl	8002970 <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f30:	e01f      	b.n	8002f72 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f32:	f7ff fd1d 	bl	8002970 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d918      	bls.n	8002f72 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d011      	beq.n	8002f72 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f043 0210 	orr.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e007      	b.n	8002f82 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d1d8      	bne.n	8002f32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000000c 	.word	0x2000000c
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12e      	bne.n	800300c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fbe:	f7ff fcd7 	bl	8002970 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fc4:	e01b      	b.n	8002ffe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fc6:	f7ff fcd3 	bl	8002970 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d914      	bls.n	8002ffe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10d      	bne.n	8002ffe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f043 0210 	orr.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	f043 0201 	orr.w	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e007      	b.n	800300e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d0dc      	beq.n	8002fc6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	; (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4906      	ldr	r1, [pc, #24]	; (80030b0 <__NVIC_EnableIRQ+0x34>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	; (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	; 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff4f 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003194:	f7ff ff64 	bl	8003060 <__NVIC_GetPriorityGrouping>
 8003198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68b9      	ldr	r1, [r7, #8]
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f7ff ffb2 	bl	8003108 <NVIC_EncodePriority>
 80031a4:	4602      	mov	r2, r0
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff81 	bl	80030b4 <__NVIC_SetPriority>
}
 80031b2:	bf00      	nop
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff57 	bl	800307c <__NVIC_EnableIRQ>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	; 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e169      	b.n	80034c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031ec:	2201      	movs	r2, #1
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	429a      	cmp	r2, r3
 8003206:	f040 8158 	bne.w	80034ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4a9a      	ldr	r2, [pc, #616]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d05e      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003214:	4a98      	ldr	r2, [pc, #608]	; (8003478 <HAL_GPIO_Init+0x2a0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d875      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800321a:	4a98      	ldr	r2, [pc, #608]	; (800347c <HAL_GPIO_Init+0x2a4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d058      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003220:	4a96      	ldr	r2, [pc, #600]	; (800347c <HAL_GPIO_Init+0x2a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d86f      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003226:	4a96      	ldr	r2, [pc, #600]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d052      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 800322c:	4a94      	ldr	r2, [pc, #592]	; (8003480 <HAL_GPIO_Init+0x2a8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d869      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003232:	4a94      	ldr	r2, [pc, #592]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d04c      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003238:	4a92      	ldr	r2, [pc, #584]	; (8003484 <HAL_GPIO_Init+0x2ac>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d863      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800323e:	4a92      	ldr	r2, [pc, #584]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d046      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
 8003244:	4a90      	ldr	r2, [pc, #576]	; (8003488 <HAL_GPIO_Init+0x2b0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d85d      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 800324a:	2b12      	cmp	r3, #18
 800324c:	d82a      	bhi.n	80032a4 <HAL_GPIO_Init+0xcc>
 800324e:	2b12      	cmp	r3, #18
 8003250:	d859      	bhi.n	8003306 <HAL_GPIO_Init+0x12e>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_GPIO_Init+0x80>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	080032d3 	.word	0x080032d3
 800325c:	080032ad 	.word	0x080032ad
 8003260:	080032bf 	.word	0x080032bf
 8003264:	08003301 	.word	0x08003301
 8003268:	08003307 	.word	0x08003307
 800326c:	08003307 	.word	0x08003307
 8003270:	08003307 	.word	0x08003307
 8003274:	08003307 	.word	0x08003307
 8003278:	08003307 	.word	0x08003307
 800327c:	08003307 	.word	0x08003307
 8003280:	08003307 	.word	0x08003307
 8003284:	08003307 	.word	0x08003307
 8003288:	08003307 	.word	0x08003307
 800328c:	08003307 	.word	0x08003307
 8003290:	08003307 	.word	0x08003307
 8003294:	08003307 	.word	0x08003307
 8003298:	08003307 	.word	0x08003307
 800329c:	080032b5 	.word	0x080032b5
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	4a79      	ldr	r2, [pc, #484]	; (800348c <HAL_GPIO_Init+0x2b4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032aa:	e02c      	b.n	8003306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	623b      	str	r3, [r7, #32]
          break;
 80032b2:	e029      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e024      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	3308      	adds	r3, #8
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e01f      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	330c      	adds	r3, #12
 80032ce:	623b      	str	r3, [r7, #32]
          break;
 80032d0:	e01a      	b.n	8003308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032da:	2304      	movs	r3, #4
 80032dc:	623b      	str	r3, [r7, #32]
          break;
 80032de:	e013      	b.n	8003308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e8:	2308      	movs	r3, #8
 80032ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	611a      	str	r2, [r3, #16]
          break;
 80032f2:	e009      	b.n	8003308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f4:	2308      	movs	r3, #8
 80032f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	615a      	str	r2, [r3, #20]
          break;
 80032fe:	e003      	b.n	8003308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003300:	2300      	movs	r3, #0
 8003302:	623b      	str	r3, [r7, #32]
          break;
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x130>
          break;
 8003306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2bff      	cmp	r3, #255	; 0xff
 800330c:	d801      	bhi.n	8003312 <HAL_GPIO_Init+0x13a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	e001      	b.n	8003316 <HAL_GPIO_Init+0x13e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2bff      	cmp	r3, #255	; 0xff
 800331c:	d802      	bhi.n	8003324 <HAL_GPIO_Init+0x14c>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	e002      	b.n	800332a <HAL_GPIO_Init+0x152>
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	3b08      	subs	r3, #8
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	210f      	movs	r1, #15
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	401a      	ands	r2, r3
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	fa01 f303 	lsl.w	r3, r1, r3
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80b1 	beq.w	80034ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_GPIO_Init+0x2b8>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003370:	4a48      	ldr	r2, [pc, #288]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	089b      	lsrs	r3, r3, #2
 8003376:	3302      	adds	r3, #2
 8003378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_GPIO_Init+0x2c0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <HAL_GPIO_Init+0x1ec>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a3f      	ldr	r2, [pc, #252]	; (800349c <HAL_GPIO_Init+0x2c4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00d      	beq.n	80033c0 <HAL_GPIO_Init+0x1e8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3e      	ldr	r2, [pc, #248]	; (80034a0 <HAL_GPIO_Init+0x2c8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <HAL_GPIO_Init+0x1e4>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_GPIO_Init+0x2cc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_GPIO_Init+0x1e0>
 80033b4:	2303      	movs	r3, #3
 80033b6:	e006      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033b8:	2304      	movs	r3, #4
 80033ba:	e004      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033bc:	2302      	movs	r3, #2
 80033be:	e002      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_GPIO_Init+0x1ee>
 80033c4:	2300      	movs	r3, #0
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	f002 0203 	and.w	r2, r2, #3
 80033cc:	0092      	lsls	r2, r2, #2
 80033ce:	4093      	lsls	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033d6:	492f      	ldr	r1, [pc, #188]	; (8003494 <HAL_GPIO_Init+0x2bc>)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	3302      	adds	r3, #2
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d006      	beq.n	80033fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033f0:	4b2d      	ldr	r3, [pc, #180]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	492c      	ldr	r1, [pc, #176]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]
 80033fc:	e006      	b.n	800340c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	43db      	mvns	r3, r3
 8003406:	4928      	ldr	r1, [pc, #160]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003408:	4013      	ands	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003418:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	4922      	ldr	r1, [pc, #136]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	60cb      	str	r3, [r1, #12]
 8003424:	e006      	b.n	8003434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	43db      	mvns	r3, r3
 800342e:	491e      	ldr	r1, [pc, #120]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003430:	4013      	ands	r3, r2
 8003432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4918      	ldr	r1, [pc, #96]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
 800344c:	e006      	b.n	800345c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	43db      	mvns	r3, r3
 8003456:	4914      	ldr	r1, [pc, #80]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 8003458:	4013      	ands	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d021      	beq.n	80034ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	490e      	ldr	r1, [pc, #56]	; (80034a8 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]
 8003474:	e021      	b.n	80034ba <HAL_GPIO_Init+0x2e2>
 8003476:	bf00      	nop
 8003478:	10320000 	.word	0x10320000
 800347c:	10310000 	.word	0x10310000
 8003480:	10220000 	.word	0x10220000
 8003484:	10210000 	.word	0x10210000
 8003488:	10120000 	.word	0x10120000
 800348c:	10110000 	.word	0x10110000
 8003490:	40021000 	.word	0x40021000
 8003494:	40010000 	.word	0x40010000
 8003498:	40010800 	.word	0x40010800
 800349c:	40010c00 	.word	0x40010c00
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_GPIO_Init+0x304>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4909      	ldr	r1, [pc, #36]	; (80034dc <HAL_GPIO_Init+0x304>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f ae8e 	bne.w	80031ec <HAL_GPIO_Init+0x14>
  }
}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	372c      	adds	r7, #44	; 0x2c
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40010400 	.word	0x40010400

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4013      	ands	r3, r2
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43d9      	mvns	r1, r3
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	400b      	ands	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
	...

08003544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e12b      	b.n	80037ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fe ff7a 	bl	8002464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2224      	movs	r2, #36	; 0x24
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a8:	f001 fd1e 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 80035ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a81      	ldr	r2, [pc, #516]	; (80037b8 <HAL_I2C_Init+0x274>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d807      	bhi.n	80035c8 <HAL_I2C_Init+0x84>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4a80      	ldr	r2, [pc, #512]	; (80037bc <HAL_I2C_Init+0x278>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	bf94      	ite	ls
 80035c0:	2301      	movls	r3, #1
 80035c2:	2300      	movhi	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	e006      	b.n	80035d6 <HAL_I2C_Init+0x92>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a7d      	ldr	r2, [pc, #500]	; (80037c0 <HAL_I2C_Init+0x27c>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bf94      	ite	ls
 80035d0:	2301      	movls	r3, #1
 80035d2:	2300      	movhi	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0e7      	b.n	80037ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a78      	ldr	r2, [pc, #480]	; (80037c4 <HAL_I2C_Init+0x280>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9b      	lsrs	r3, r3, #18
 80035e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4a6a      	ldr	r2, [pc, #424]	; (80037b8 <HAL_I2C_Init+0x274>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <HAL_I2C_Init+0xd4>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3301      	adds	r3, #1
 8003616:	e009      	b.n	800362c <HAL_I2C_Init+0xe8>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800361e:	fb02 f303 	mul.w	r3, r2, r3
 8003622:	4a69      	ldr	r2, [pc, #420]	; (80037c8 <HAL_I2C_Init+0x284>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	099b      	lsrs	r3, r3, #6
 800362a:	3301      	adds	r3, #1
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800363e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	495c      	ldr	r1, [pc, #368]	; (80037b8 <HAL_I2C_Init+0x274>)
 8003648:	428b      	cmp	r3, r1
 800364a:	d819      	bhi.n	8003680 <HAL_I2C_Init+0x13c>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e59      	subs	r1, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fbb1 f3f3 	udiv	r3, r1, r3
 800365a:	1c59      	adds	r1, r3, #1
 800365c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003660:	400b      	ands	r3, r1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_I2C_Init+0x138>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1e59      	subs	r1, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fbb1 f3f3 	udiv	r3, r1, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367a:	e051      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 800367c:	2304      	movs	r3, #4
 800367e:	e04f      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d111      	bne.n	80036ac <HAL_I2C_Init+0x168>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e58      	subs	r0, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6859      	ldr	r1, [r3, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	440b      	add	r3, r1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e012      	b.n	80036d2 <HAL_I2C_Init+0x18e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	0099      	lsls	r1, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_I2C_Init+0x196>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e022      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10e      	bne.n	8003700 <HAL_I2C_Init+0x1bc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1e58      	subs	r0, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	440b      	add	r3, r1
 80036f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f4:	3301      	adds	r3, #1
 80036f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Init+0x1dc>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e58      	subs	r0, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	0099      	lsls	r1, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	fbb0 f3f3 	udiv	r3, r0, r3
 8003716:	3301      	adds	r3, #1
 8003718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	6809      	ldr	r1, [r1, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800374e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6911      	ldr	r1, [r2, #16]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68d2      	ldr	r2, [r2, #12]
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	000186a0 	.word	0x000186a0
 80037bc:	001e847f 	.word	0x001e847f
 80037c0:	003d08ff 	.word	0x003d08ff
 80037c4:	431bde83 	.word	0x431bde83
 80037c8:	10624dd3 	.word	0x10624dd3

080037cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037e6:	f7ff f8c3 	bl	8002970 <HAL_GetTick>
 80037ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	f040 80d9 	bne.w	80039ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2319      	movs	r3, #25
 8003800:	2201      	movs	r2, #1
 8003802:	496d      	ldr	r1, [pc, #436]	; (80039b8 <HAL_I2C_Mem_Write+0x1ec>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fdef 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	e0cc      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Mem_Write+0x56>
 800381e:	2302      	movs	r3, #2
 8003820:	e0c5      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d007      	beq.n	8003848 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2221      	movs	r2, #33	; 0x21
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a3a      	ldr	r2, [r7, #32]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <HAL_I2C_Mem_Write+0x1f0>)
 8003888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800388a:	88f8      	ldrh	r0, [r7, #6]
 800388c:	893a      	ldrh	r2, [r7, #8]
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4603      	mov	r3, r0
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fc26 	bl	80040ec <I2C_RequestMemoryWrite>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d052      	beq.n	800394c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e081      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 feb4 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d107      	bne.n	80038d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06b      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_I2C_Mem_Write+0x180>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d017      	beq.n	800394c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1aa      	bne.n	80038aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fea7 	bl	80046ac <I2C_WaitOnBTFFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b04      	cmp	r3, #4
 800396a:	d107      	bne.n	800397c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e016      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	00100002 	.word	0x00100002
 80039bc:	ffff0000 	.word	0xffff0000

080039c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039de:	f7fe ffc7 	bl	8002970 <HAL_GetTick>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	f040 8244 	bne.w	8003e7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2319      	movs	r3, #25
 80039f8:	2201      	movs	r2, #1
 80039fa:	4982      	ldr	r1, [pc, #520]	; (8003c04 <HAL_I2C_Mem_Read+0x244>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fcf3 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e237      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x5a>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e230      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d007      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2222      	movs	r2, #34	; 0x22
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a62      	ldr	r2, [pc, #392]	; (8003c08 <HAL_I2C_Mem_Read+0x248>)
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a82:	88f8      	ldrh	r0, [r7, #6]
 8003a84:	893a      	ldrh	r2, [r7, #8]
 8003a86:	8979      	ldrh	r1, [r7, #10]
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4603      	mov	r3, r0
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fbc0 	bl	8004218 <I2C_RequestMemoryRead>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1ec      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d113      	bne.n	8003ad2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e1c0      	b.n	8003e54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d11e      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aea:	b672      	cpsid	i
}
 8003aec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b14:	b662      	cpsie	i
}
 8003b16:	e035      	b.n	8003b84 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d11e      	bne.n	8003b5e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b30:	b672      	cpsid	i
}
 8003b32:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b5a:	b662      	cpsie	i
}
 8003b5c:	e012      	b.n	8003b84 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b84:	e166      	b.n	8003e54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	f200 811f 	bhi.w	8003dce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d123      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 fdcd 	bl	800473c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e167      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bde:	e139      	b.n	8003e54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d152      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4906      	ldr	r1, [pc, #24]	; (8003c0c <HAL_I2C_Mem_Read+0x24c>)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fbf8 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e13c      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
 8003c02:	bf00      	nop
 8003c04:	00100002 	.word	0x00100002
 8003c08:	ffff0000 	.word	0xffff0000
 8003c0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c10:	b672      	cpsid	i
}
 8003c12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c56:	b662      	cpsie	i
}
 8003c58:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6c:	1c5a      	adds	r2, r3, #1
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c8c:	e0e2      	b.n	8003e54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2200      	movs	r2, #0
 8003c96:	497b      	ldr	r1, [pc, #492]	; (8003e84 <HAL_I2C_Mem_Read+0x4c4>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fba5 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0e9      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb8:	b672      	cpsid	i
}
 8003cba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cee:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <HAL_I2C_Mem_Read+0x4c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	08db      	lsrs	r3, r3, #3
 8003cf4:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <HAL_I2C_Mem_Read+0x4cc>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a1a      	lsrs	r2, r3, #8
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00da      	lsls	r2, r3, #3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f043 0220 	orr.w	r2, r3, #32
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d36:	b662      	cpsie	i
}
 8003d38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e09a      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d1d9      	bne.n	8003d08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d96:	b662      	cpsie	i
}
 8003d98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dcc:	e042      	b.n	8003e54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fcb2 	bl	800473c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e04c      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d118      	bne.n	8003e54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f ae94 	bne.w	8003b86 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3728      	adds	r7, #40	; 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	00010004 	.word	0x00010004
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	14f8b589 	.word	0x14f8b589

08003e90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ea0:	f7fe fd66 	bl	8002970 <HAL_GetTick>
 8003ea4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	f040 8111 	bne.w	80040da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2319      	movs	r3, #25
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4988      	ldr	r1, [pc, #544]	; (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fa90 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e104      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_IsDeviceReady+0x50>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e0fd      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d007      	beq.n	8003f06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2224      	movs	r2, #36	; 0x24
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a70      	ldr	r2, [pc, #448]	; (80040e8 <HAL_I2C_IsDeviceReady+0x258>)
 8003f28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fa4e 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d103      	bne.n	8003f6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0b6      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6e:	897b      	ldrh	r3, [r7, #10]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7fe fcf7 	bl	8002970 <HAL_GetTick>
 8003f82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fb2:	e025      	b.n	8004000 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7fe fcdc 	bl	8002970 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d302      	bcc.n	8003fca <HAL_I2C_IsDeviceReady+0x13a>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	22a0      	movs	r2, #160	; 0xa0
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2ba0      	cmp	r3, #160	; 0xa0
 800400a:	d005      	beq.n	8004018 <HAL_I2C_IsDeviceReady+0x188>
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <HAL_I2C_IsDeviceReady+0x188>
 8004012:	7dbb      	ldrb	r3, [r7, #22]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0cd      	beq.n	8003fb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d129      	bne.n	8004082 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2319      	movs	r3, #25
 800405a:	2201      	movs	r2, #1
 800405c:	4921      	ldr	r1, [pc, #132]	; (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f9c2 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e036      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	e02c      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004090:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2319      	movs	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	490f      	ldr	r1, [pc, #60]	; (80040e4 <HAL_I2C_IsDeviceReady+0x254>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f99e 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e012      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	f4ff af32 	bcc.w	8003f2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040da:	2302      	movs	r3, #2
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	00100002 	.word	0x00100002
 80040e8:	ffff0000 	.word	0xffff0000

080040ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2200      	movs	r2, #0
 800411e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f960 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d103      	bne.n	8004146 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e05f      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	492d      	ldr	r1, [pc, #180]	; (8004214 <I2C_RequestMemoryWrite+0x128>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f9bb 	bl	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e04c      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa46 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e02b      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e021      	b.n	8004208 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fa20 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e005      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	00010002 	.word	0x00010002

08004218 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	4608      	mov	r0, r1
 8004222:	4611      	mov	r1, r2
 8004224:	461a      	mov	r2, r3
 8004226:	4603      	mov	r3, r0
 8004228:	817b      	strh	r3, [r7, #10]
 800422a:	460b      	mov	r3, r1
 800422c:	813b      	strh	r3, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004240:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004250:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	2200      	movs	r2, #0
 800425a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8c2 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004278:	d103      	bne.n	8004282 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e0aa      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004294:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	4952      	ldr	r1, [pc, #328]	; (80043e4 <I2C_RequestMemoryRead+0x1cc>)
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f91d 	bl	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e097      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c4:	6a39      	ldr	r1, [r7, #32]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f9a8 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e076      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042f4:	893b      	ldrh	r3, [r7, #8]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]
 80042fe:	e021      	b.n	8004344 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004300:	893b      	ldrh	r3, [r7, #8]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	b29b      	uxth	r3, r3
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800430e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004310:	6a39      	ldr	r1, [r7, #32]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f982 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00d      	beq.n	800433a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b04      	cmp	r3, #4
 8004324:	d107      	bne.n	8004336 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e050      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800433a:	893b      	ldrh	r3, [r7, #8]
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f967 	bl	800461c <I2C_WaitOnTXEFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b04      	cmp	r3, #4
 800435a:	d107      	bne.n	800436c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e035      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800437e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2200      	movs	r2, #0
 8004388:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f82b 	bl	80043e8 <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d103      	bne.n	80043b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e013      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043b4:	897b      	ldrh	r3, [r7, #10]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	6a3a      	ldr	r2, [r7, #32]
 80043c8:	4906      	ldr	r1, [pc, #24]	; (80043e4 <I2C_RequestMemoryRead+0x1cc>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f886 	bl	80044dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	00010002 	.word	0x00010002

080043e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f8:	e048      	b.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d044      	beq.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004402:	f7fe fab5 	bl	8002970 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d302      	bcc.n	8004418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d139      	bne.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d10d      	bne.n	800443e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	e00c      	b.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x70>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d116      	bne.n	800448c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e023      	b.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10d      	bne.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	e00c      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d093      	beq.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ea:	e071      	b.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fa:	d123      	bne.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e067      	b.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454a:	d041      	beq.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800454c:	f7fe fa10 	bl	8002970 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d302      	bcc.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d136      	bne.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10c      	bne.n	8004586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	43da      	mvns	r2, r3
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4013      	ands	r3, r2
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	bf14      	ite	ne
 800457e:	2301      	movne	r3, #1
 8004580:	2300      	moveq	r3, #0
 8004582:	b2db      	uxtb	r3, r3
 8004584:	e00b      	b.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	43da      	mvns	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4013      	ands	r3, r2
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf14      	ite	ne
 8004598:	2301      	movne	r3, #1
 800459a:	2300      	moveq	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e021      	b.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	0c1b      	lsrs	r3, r3, #16
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10c      	bne.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	43da      	mvns	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	bf14      	ite	ne
 80045ec:	2301      	movne	r3, #1
 80045ee:	2300      	moveq	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	e00b      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf14      	ite	ne
 8004606:	2301      	movne	r3, #1
 8004608:	2300      	moveq	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f af6d 	bne.w	80044ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004628:	e034      	b.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f8e3 	bl	80047f6 <I2C_IsAcknowledgeFailed>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e034      	b.n	80046a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d028      	beq.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fe f995 	bl	8002970 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11d      	bne.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d016      	beq.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e007      	b.n	80046a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b80      	cmp	r3, #128	; 0x80
 80046a0:	d1c3      	bne.n	800462a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046b8:	e034      	b.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f89b 	bl	80047f6 <I2C_IsAcknowledgeFailed>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e034      	b.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d0:	d028      	beq.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d2:	f7fe f94d 	bl	8002970 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11d      	bne.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d016      	beq.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d1c3      	bne.n	80046ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004748:	e049      	b.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d119      	bne.n	800478c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0210 	mvn.w	r2, #16
 8004760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e030      	b.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478c:	f7fe f8f0 	bl	8002970 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11d      	bne.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d016      	beq.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d1ae      	bne.n	800474a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d11b      	bne.n	8004846 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004816:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
	...

08004854 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e272      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8087 	beq.w	8004982 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004874:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00c      	beq.n	800489a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004880:	4b8f      	ldr	r3, [pc, #572]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d112      	bne.n	80048b2 <HAL_RCC_OscConfig+0x5e>
 800488c:	4b8c      	ldr	r3, [pc, #560]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d10b      	bne.n	80048b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489a:	4b89      	ldr	r3, [pc, #548]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d06c      	beq.n	8004980 <HAL_RCC_OscConfig+0x12c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d168      	bne.n	8004980 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e24c      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x76>
 80048bc:	4b80      	ldr	r3, [pc, #512]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7f      	ldr	r2, [pc, #508]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e02e      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x98>
 80048d2:	4b7b      	ldr	r3, [pc, #492]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7a      	ldr	r2, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b78      	ldr	r3, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a77      	ldr	r2, [pc, #476]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e01d      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0xbc>
 80048f6:	4b72      	ldr	r3, [pc, #456]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a71      	ldr	r2, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	4b6f      	ldr	r3, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e00b      	b.n	8004928 <HAL_RCC_OscConfig+0xd4>
 8004910:	4b6b      	ldr	r3, [pc, #428]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6a      	ldr	r2, [pc, #424]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b68      	ldr	r3, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a67      	ldr	r2, [pc, #412]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004926:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d013      	beq.n	8004958 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fe f81e 	bl	8002970 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004938:	f7fe f81a 	bl	8002970 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e200      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0xe4>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fe f80a 	bl	8002970 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fe f806 	bl	8002970 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1ec      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	4b53      	ldr	r3, [pc, #332]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x10c>
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d063      	beq.n	8004a56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800498e:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d11c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x18c>
 80049a6:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d116      	bne.n	80049e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_RCC_OscConfig+0x176>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d001      	beq.n	80049ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e1c0      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ca:	4b3d      	ldr	r3, [pc, #244]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4939      	ldr	r1, [pc, #228]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	e03a      	b.n	8004a56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d020      	beq.n	8004a2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCC_OscConfig+0x270>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7fd ffbf 	bl	8002970 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f6:	f7fd ffbb 	bl	8002970 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e1a1      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4927      	ldr	r1, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	600b      	str	r3, [r1, #0]
 8004a28:	e015      	b.n	8004a56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd ff9e 	bl	8002970 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fd ff9a 	bl	8002970 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e180      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03a      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fd ff7e 	bl	8002970 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a78:	f7fd ff7a 	bl	8002970 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e160      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a96:	2001      	movs	r0, #1
 8004a98:	f000 fafe 	bl	8005098 <RCC_Delay>
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fd ff64 	bl	8002970 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aaa:	e00f      	b.n	8004acc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fd ff60 	bl	8002970 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d908      	bls.n	8004acc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e146      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	42420000 	.word	0x42420000
 8004ac8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b92      	ldr	r3, [pc, #584]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e9      	bne.n	8004aac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a6 	beq.w	8004c32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b8b      	ldr	r3, [pc, #556]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a87      	ldr	r2, [pc, #540]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]
 8004b02:	4b85      	ldr	r3, [pc, #532]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b82      	ldr	r3, [pc, #520]	; (8004d1c <HAL_RCC_OscConfig+0x4c8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <HAL_RCC_OscConfig+0x4c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a7e      	ldr	r2, [pc, #504]	; (8004d1c <HAL_RCC_OscConfig+0x4c8>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd ff21 	bl	8002970 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fd ff1d 	bl	8002970 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b64      	cmp	r3, #100	; 0x64
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e103      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x4c8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x312>
 8004b58:	4b6f      	ldr	r3, [pc, #444]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6213      	str	r3, [r2, #32]
 8004b64:	e02d      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x334>
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	4a69      	ldr	r2, [pc, #420]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	6213      	str	r3, [r2, #32]
 8004b7a:	4b67      	ldr	r3, [pc, #412]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	4a66      	ldr	r2, [pc, #408]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	6213      	str	r3, [r2, #32]
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x356>
 8004b90:	4b61      	ldr	r3, [pc, #388]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4a60      	ldr	r2, [pc, #384]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6213      	str	r3, [r2, #32]
 8004b9c:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4a5d      	ldr	r2, [pc, #372]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6213      	str	r3, [r2, #32]
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x36e>
 8004baa:	4b5b      	ldr	r3, [pc, #364]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	4a5a      	ldr	r2, [pc, #360]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6213      	str	r3, [r2, #32]
 8004bb6:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bca:	f7fd fed1 	bl	8002970 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fd fecd 	bl	8002970 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0b1      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b4b      	ldr	r3, [pc, #300]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x37e>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fd febb 	bl	8002970 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fd feb7 	bl	8002970 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e09b      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4a3b      	ldr	r2, [pc, #236]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8087 	beq.w	8004d4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d061      	beq.n	8004d0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d146      	bne.n	8004cde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b33      	ldr	r3, [pc, #204]	; (8004d20 <HAL_RCC_OscConfig+0x4cc>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fd fe8b 	bl	8002970 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fd fe87 	bl	8002970 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e06d      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d108      	bne.n	8004c98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	4921      	ldr	r1, [pc, #132]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c98:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a19      	ldr	r1, [r3, #32]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	491b      	ldr	r1, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x4cc>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fd fe5b 	bl	8002970 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fd fe57 	bl	8002970 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e03d      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46a>
 8004cdc:	e035      	b.n	8004d4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cde:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <HAL_RCC_OscConfig+0x4cc>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fe44 	bl	8002970 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd fe40 	bl	8002970 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e026      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x498>
 8004d0a:	e01e      	b.n	8004d4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e019      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCC_OscConfig+0x500>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d106      	bne.n	8004d46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000

08004d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0d0      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d910      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 0207 	bic.w	r2, r3, #7
 8004d82:	4965      	ldr	r1, [pc, #404]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0b8      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	494d      	ldr	r1, [pc, #308]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d040      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d115      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e07f      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e073      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e06b      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 0203 	bic.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4936      	ldr	r1, [pc, #216]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fd fd92 	bl	8002970 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e50:	f7fd fd8e 	bl	8002970 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e053      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 020c 	and.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1eb      	bne.n	8004e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d210      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	4922      	ldr	r1, [pc, #136]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e032      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4916      	ldr	r1, [pc, #88]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	490e      	ldr	r1, [pc, #56]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ee6:	f000 f821 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	490a      	ldr	r1, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	5ccb      	ldrb	r3, [r1, r3]
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1cc>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_RCC_ClockConfig+0x1d0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fb80 	bl	800260c <HAL_InitTick>

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	0800e190 	.word	0x0800e190
 8004f24:	2000000c 	.word	0x2000000c
 8004f28:	20000010 	.word	0x20000010

08004f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d002      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x30>
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_GetSysClockFreq+0x36>
 8004f5a:	e027      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f5c:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f5e:	613b      	str	r3, [r7, #16]
      break;
 8004f60:	e027      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	0c9b      	lsrs	r3, r3, #18
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f6c:	5cd3      	ldrb	r3, [r2, r3]
 8004f6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d010      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f7a:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	0c5b      	lsrs	r3, r3, #17
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	4a11      	ldr	r2, [pc, #68]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f8e:	fb03 f202 	mul.w	r2, r3, r2
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e004      	b.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	613b      	str	r3, [r7, #16]
      break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fae:	613b      	str	r3, [r7, #16]
      break;
 8004fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb2:	693b      	ldr	r3, [r7, #16]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	007a1200 	.word	0x007a1200
 8004fc8:	0800e1a8 	.word	0x0800e1a8
 8004fcc:	0800e1b8 	.word	0x0800e1b8
 8004fd0:	003d0900 	.word	0x003d0900

08004fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	2000000c 	.word	0x2000000c

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fec:	f7ff fff2 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	; (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	0800e1a0 	.word	0x0800e1a0

08005010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005014:	f7ff ffde 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	0adb      	lsrs	r3, r3, #11
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4903      	ldr	r1, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	0800e1a0 	.word	0x0800e1a0

08005038 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	220f      	movs	r2, #15
 8005046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_RCC_GetClockConfig+0x58>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0203 	and.w	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_RCC_GetClockConfig+0x58>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetClockConfig+0x58>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCC_GetClockConfig+0x58>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	08db      	lsrs	r3, r3, #3
 8005072:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_RCC_GetClockConfig+0x5c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0207 	and.w	r2, r3, #7
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40021000 	.word	0x40021000
 8005094:	40022000 	.word	0x40022000

08005098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <RCC_Delay+0x34>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <RCC_Delay+0x38>)
 80050a6:	fba2 2303 	umull	r2, r3, r2, r3
 80050aa:	0a5b      	lsrs	r3, r3, #9
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050b4:	bf00      	nop
  }
  while (Delay --);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	60fa      	str	r2, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f9      	bne.n	80050b4 <RCC_Delay+0x1c>
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr
 80050cc:	2000000c 	.word	0x2000000c
 80050d0:	10624dd3 	.word	0x10624dd3

080050d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d07d      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80050f0:	2300      	movs	r3, #0
 80050f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f4:	4b4f      	ldr	r3, [pc, #316]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005100:	4b4c      	ldr	r3, [pc, #304]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	4a4b      	ldr	r2, [pc, #300]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	61d3      	str	r3, [r2, #28]
 800510c:	4b49      	ldr	r3, [pc, #292]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511c:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d118      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005128:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a42      	ldr	r2, [pc, #264]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005134:	f7fd fc1c 	bl	8002970 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513a:	e008      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513c:	f7fd fc18 	bl	8002970 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e06d      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514e:	4b3a      	ldr	r3, [pc, #232]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800515a:	4b36      	ldr	r3, [pc, #216]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d02e      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d027      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005178:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005180:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005184:	2201      	movs	r2, #1
 8005186:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005188:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800518e:	4a29      	ldr	r2, [pc, #164]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd fbe7 	bl	8002970 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a4:	e00a      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fd fbe3 	bl	8002970 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e036      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ee      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4917      	ldr	r1, [pc, #92]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d105      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4a13      	ldr	r2, [pc, #76]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051f8:	4b0e      	ldr	r3, [pc, #56]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	490b      	ldr	r1, [pc, #44]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4904      	ldr	r1, [pc, #16]	; (8005234 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	40007000 	.word	0x40007000
 800523c:	42420440 	.word	0x42420440

08005240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e076      	b.n	8005340 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005262:	d009      	beq.n	8005278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	61da      	str	r2, [r3, #28]
 800526a:	e005      	b.n	8005278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fd f924 	bl	80024e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	ea42 0103 	orr.w	r1, r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	0c1a      	lsrs	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f002 0204 	and.w	r2, r2, #4
 800531e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800532e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e041      	b.n	80053de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f839 	bl	80053e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 f9b4 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e03a      	b.n	8005486 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_TIM_Base_Start_IT+0x98>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d009      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <HAL_TIM_Base_Start_IT+0x9c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <HAL_TIM_Base_Start_IT+0x58>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <HAL_TIM_Base_Start_IT+0xa0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d111      	bne.n	8005474 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b06      	cmp	r3, #6
 8005460:	d010      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	e007      	b.n	8005484 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800

0800549c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0202 	mvn.w	r2, #2
 80054c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8ed 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f8e0 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8ef 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b04      	cmp	r3, #4
 8005504:	d122      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b04      	cmp	r3, #4
 8005512:	d11b      	bne.n	800554c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0204 	mvn.w	r2, #4
 800551c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8c3 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 8005538:	e005      	b.n	8005546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8b6 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f8c5 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b08      	cmp	r3, #8
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f899 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f88c 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f89b 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0310 	and.w	r3, r3, #16
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d122      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0310 	and.w	r3, r3, #16
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d11b      	bne.n	80055f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0210 	mvn.w	r2, #16
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f86f 	bl	80056be <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f862 	bl	80056ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f871 	bl	80056d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10e      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0201 	mvn.w	r2, #1
 8005618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc fe96 	bl	800234c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d10e      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d107      	bne.n	800564c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f8bf 	bl	80057ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f835 	bl	80056e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b20      	cmp	r3, #32
 8005684:	d10e      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b20      	cmp	r3, #32
 8005692:	d107      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0220 	mvn.w	r2, #32
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f88a 	bl	80057b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00b      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d007      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0xbc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_Base_SetConfig+0x30>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0xc0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d108      	bne.n	8005736 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d007      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <TIM_Base_SetConfig+0xbc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_Base_SetConfig+0x62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <TIM_Base_SetConfig+0xc0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d108      	bne.n	8005768 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a07      	ldr	r2, [pc, #28]	; (80057ac <TIM_Base_SetConfig+0xb8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d103      	bne.n	800579c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	615a      	str	r2, [r3, #20]
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800

080057b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr

080057ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e042      	b.n	8005874 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc feb6 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68da      	ldr	r2, [r3, #12]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800581e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f91d 	bl	8005a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	603b      	str	r3, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b20      	cmp	r3, #32
 800589a:	d16d      	bne.n	8005978 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_UART_Transmit+0x2c>
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e066      	b.n	800597a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2221      	movs	r2, #33	; 0x21
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ba:	f7fd f859 	bl	8002970 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d4:	d108      	bne.n	80058e8 <HAL_UART_Transmit+0x6c>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e003      	b.n	80058f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058f0:	e02a      	b.n	8005948 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f840 	bl	8005982 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e036      	b.n	800597a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3302      	adds	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1cf      	bne.n	80058f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	2140      	movs	r1, #64	; 0x40
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f810 	bl	8005982 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e006      	b.n	800597a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b090      	sub	sp, #64	; 0x40
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005992:	e050      	b.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d04c      	beq.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800599c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059a2:	f7fc ffe5 	bl	8002970 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d241      	bcs.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059d2:	637a      	str	r2, [r7, #52]	; 0x34
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3314      	adds	r3, #20
 80059ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3314      	adds	r3, #20
 8005a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a06:	623a      	str	r2, [r7, #32]
 8005a08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	69f9      	ldr	r1, [r7, #28]
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e00f      	b.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	bf0c      	ite	eq
 8005a46:	2301      	moveq	r3, #1
 8005a48:	2300      	movne	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d09f      	beq.n	8005994 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3740      	adds	r7, #64	; 0x40
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a9a:	f023 030c 	bic.w	r3, r3, #12
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <UART_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ac8:	f7ff faa2 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	e002      	b.n	8005ad6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7ff fa8a 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009a      	lsls	r2, r3, #2
 8005ae0:	441a      	add	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <UART_SetConfig+0x118>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	0119      	lsls	r1, r3, #4
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4613      	mov	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	009a      	lsls	r2, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <UART_SetConfig+0x118>)
 8005b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2064      	movs	r0, #100	; 0x64
 8005b16:	fb00 f303 	mul.w	r3, r0, r3
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	3332      	adds	r3, #50	; 0x32
 8005b20:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <UART_SetConfig+0x118>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b2c:	4419      	add	r1, r3
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009a      	lsls	r2, r3, #2
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <UART_SetConfig+0x118>)
 8005b46:	fba3 0302 	umull	r0, r3, r3, r2
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	2064      	movs	r0, #100	; 0x64
 8005b4e:	fb00 f303 	mul.w	r3, r0, r3
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	3332      	adds	r3, #50	; 0x32
 8005b58:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <UART_SetConfig+0x118>)
 8005b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	440a      	add	r2, r1
 8005b6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40013800 	.word	0x40013800
 8005b78:	51eb851f 	.word	0x51eb851f

08005b7c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b82:	f3ef 8305 	mrs	r3, IPSR
 8005b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b92:	607b      	str	r3, [r7, #4]
  return(result);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <osKernelInitialize+0x32>
 8005b9a:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <osKernelInitialize+0x60>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d109      	bne.n	8005bb6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005bae:	f06f 0305 	mvn.w	r3, #5
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e00c      	b.n	8005bd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <osKernelInitialize+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <osKernelInitialize+0x60>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	2000160c 	.word	0x2000160c

08005be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10f      	bne.n	8005c12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf6:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <osKernelStart+0x32>
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <osKernelStart+0x64>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d109      	bne.n	8005c1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c06:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c12:	f06f 0305 	mvn.w	r3, #5
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e00e      	b.n	8005c38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <osKernelStart+0x64>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <osKernelStart+0x64>)
 8005c24:	2202      	movs	r2, #2
 8005c26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c28:	f001 faa2 	bl	8007170 <vTaskStartScheduler>
      stat = osOK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e002      	b.n	8005c38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295
 8005c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000160c 	.word	0x2000160c

08005c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b092      	sub	sp, #72	; 0x48
 8005c4c:	af04      	add	r7, sp, #16
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c58:	f3ef 8305 	mrs	r3, IPSR
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 8094 	bne.w	8005d8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c66:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 808d 	bne.w	8005d8e <osThreadNew+0x146>
 8005c74:	4b48      	ldr	r3, [pc, #288]	; (8005d98 <osThreadNew+0x150>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d106      	bne.n	8005c8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c80:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8082 	bne.w	8005d8e <osThreadNew+0x146>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d07e      	beq.n	8005d8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c94:	2318      	movs	r3, #24
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c98:	2300      	movs	r3, #0
 8005c9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c9c:	f107 031b 	add.w	r3, r7, #27
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d045      	beq.n	8005d3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <osThreadNew+0x74>
        name = attr->name;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <osThreadNew+0x9a>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b38      	cmp	r3, #56	; 0x38
 8005cd4:	d805      	bhi.n	8005ce2 <osThreadNew+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <osThreadNew+0x9e>
        return (NULL);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e054      	b.n	8005d90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00e      	beq.n	8005d1c <osThreadNew+0xd4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b5b      	cmp	r3, #91	; 0x5b
 8005d04:	d90a      	bls.n	8005d1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <osThreadNew+0xd4>
        mem = 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1a:	e010      	b.n	8005d3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10c      	bne.n	8005d3e <osThreadNew+0xf6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <osThreadNew+0xf6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <osThreadNew+0xf6>
          mem = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d38:	e001      	b.n	8005d3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d110      	bne.n	8005d66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d4c:	9202      	str	r2, [sp, #8]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f001 f83c 	bl	8006dd8 <xTaskCreateStatic>
 8005d60:	4603      	mov	r3, r0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e013      	b.n	8005d8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d110      	bne.n	8005d8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f001 f886 	bl	8006e90 <xTaskCreate>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <osThreadNew+0x146>
          hTask = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d8e:	697b      	ldr	r3, [r7, #20]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	2000160c 	.word	0x2000160c

08005d9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da4:	f3ef 8305 	mrs	r3, IPSR
 8005da8:	613b      	str	r3, [r7, #16]
  return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <osDelay+0x34>
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <osDelay+0x58>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d109      	bne.n	8005dd8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <osDelay+0x3c>
    stat = osErrorISR;
 8005dd0:	f06f 0305 	mvn.w	r3, #5
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e007      	b.n	8005de8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 f990 	bl	8007108 <vTaskDelay>
    }
  }

  return (stat);
 8005de8:	697b      	ldr	r3, [r7, #20]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	2000160c 	.word	0x2000160c

08005df8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	; 0x30
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
 8005e0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d16f      	bne.n	8005ef4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e14:	f3ef 8310 	mrs	r3, PRIMASK
 8005e18:	617b      	str	r3, [r7, #20]
  return(result);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d169      	bne.n	8005ef4 <osMessageQueueNew+0xfc>
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <osMessageQueueNew+0x108>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d105      	bne.n	8005e34 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e28:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d15f      	bne.n	8005ef4 <osMessageQueueNew+0xfc>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d05c      	beq.n	8005ef4 <osMessageQueueNew+0xfc>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d059      	beq.n	8005ef4 <osMessageQueueNew+0xfc>
    mem = -1;
 8005e40:	f04f 33ff 	mov.w	r3, #4294967295
 8005e44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d029      	beq.n	8005ea0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d012      	beq.n	8005e7a <osMessageQueueNew+0x82>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b4f      	cmp	r3, #79	; 0x4f
 8005e5a:	d90e      	bls.n	8005e7a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d302      	bcc.n	8005e7a <osMessageQueueNew+0x82>
        mem = 1;
 8005e74:	2301      	movs	r3, #1
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	e014      	b.n	8005ea4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d110      	bne.n	8005ea4 <osMessageQueueNew+0xac>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10c      	bne.n	8005ea4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <osMessageQueueNew+0xac>
          mem = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	623b      	str	r3, [r7, #32]
 8005e9e:	e001      	b.n	8005ea4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d10b      	bne.n	8005ec2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	9100      	str	r1, [sp, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fa53 	bl	8006364 <xQueueGenericCreateStatic>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec0:	e008      	b.n	8005ed4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fac0 	bl	8006452 <xQueueGenericCreate>
 8005ed2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e001      	b.n	8005eec <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef0:	f000 ff16 	bl	8006d20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	; 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000160c 	.word	0x2000160c

08005f04 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1c:	f3ef 8305 	mrs	r3, IPSR
 8005f20:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f22:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10f      	bne.n	8005f48 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f28:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <osMessageQueuePut+0x44>
 8005f34:	4b2b      	ldr	r3, [pc, #172]	; (8005fe4 <osMessageQueuePut+0xe0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d12e      	bne.n	8005f9a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f40:	617b      	str	r3, [r7, #20]
  return(result);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d028      	beq.n	8005f9a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <osMessageQueuePut+0x56>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <osMessageQueuePut+0x56>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005f5a:	f06f 0303 	mvn.w	r3, #3
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f60:	e039      	b.n	8005fd6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005f66:	f107 0210 	add.w	r2, r7, #16
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	6a38      	ldr	r0, [r7, #32]
 8005f70:	f000 fbce 	bl	8006710 <xQueueGenericSendFromISR>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d003      	beq.n	8005f82 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005f7a:	f06f 0302 	mvn.w	r3, #2
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f80:	e029      	b.n	8005fd6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d026      	beq.n	8005fd6 <osMessageQueuePut+0xd2>
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <osMessageQueuePut+0xe4>)
 8005f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f98:	e01d      	b.n	8005fd6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <osMessageQueuePut+0xa2>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005fa6:	f06f 0303 	mvn.w	r3, #3
 8005faa:	627b      	str	r3, [r7, #36]	; 0x24
 8005fac:	e014      	b.n	8005fd8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fae:	2300      	movs	r3, #0
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	6a38      	ldr	r0, [r7, #32]
 8005fb6:	f000 faad 	bl	8006514 <xQueueGenericSend>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d00b      	beq.n	8005fd8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005fc6:	f06f 0301 	mvn.w	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
 8005fcc:	e004      	b.n	8005fd8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005fce:	f06f 0302 	mvn.w	r3, #2
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	e000      	b.n	8005fd8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fd6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3728      	adds	r7, #40	; 0x28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000160c 	.word	0x2000160c
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08a      	sub	sp, #40	; 0x28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006002:	f3ef 8305 	mrs	r3, IPSR
 8006006:	61fb      	str	r3, [r7, #28]
  return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600e:	f3ef 8310 	mrs	r3, PRIMASK
 8006012:	61bb      	str	r3, [r7, #24]
  return(result);
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <osMessageQueueGet+0x42>
 800601a:	4b2b      	ldr	r3, [pc, #172]	; (80060c8 <osMessageQueueGet+0xdc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d12e      	bne.n	8006080 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006022:	f3ef 8311 	mrs	r3, BASEPRI
 8006026:	617b      	str	r3, [r7, #20]
  return(result);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d028      	beq.n	8006080 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <osMessageQueueGet+0x54>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <osMessageQueueGet+0x54>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006040:	f06f 0303 	mvn.w	r3, #3
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006046:	e038      	b.n	80060ba <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	461a      	mov	r2, r3
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	6a38      	ldr	r0, [r7, #32]
 8006056:	f000 fcd3 	bl	8006a00 <xQueueReceiveFromISR>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d003      	beq.n	8006068 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006060:	f06f 0302 	mvn.w	r3, #2
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006066:	e028      	b.n	80060ba <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d025      	beq.n	80060ba <osMessageQueueGet+0xce>
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <osMessageQueueGet+0xe0>)
 8006070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800607e:	e01c      	b.n	80060ba <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <osMessageQueueGet+0xa0>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800608c:	f06f 0303 	mvn.w	r3, #3
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	e013      	b.n	80060bc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	6a38      	ldr	r0, [r7, #32]
 800609a:	f000 fbd1 	bl	8006840 <xQueueReceive>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d00b      	beq.n	80060bc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80060aa:	f06f 0301 	mvn.w	r3, #1
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
 80060b0:	e004      	b.n	80060bc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80060b2:	f06f 0302 	mvn.w	r3, #2
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
 80060b8:	e000      	b.n	80060bc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060ba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3728      	adds	r7, #40	; 0x28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000160c 	.word	0x2000160c
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <vApplicationGetIdleTaskMemory+0x28>)
 80060e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4a05      	ldr	r2, [pc, #20]	; (80060fc <vApplicationGetIdleTaskMemory+0x2c>)
 80060e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2280      	movs	r2, #128	; 0x80
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr
 80060f8:	20001610 	.word	0x20001610
 80060fc:	2000166c 	.word	0x2000166c

08006100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a07      	ldr	r2, [pc, #28]	; (800612c <vApplicationGetTimerTaskMemory+0x2c>)
 8006110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4a06      	ldr	r2, [pc, #24]	; (8006130 <vApplicationGetTimerTaskMemory+0x30>)
 8006116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2000186c 	.word	0x2000186c
 8006130:	200018c8 	.word	0x200018c8

08006134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f103 0208 	add.w	r2, r3, #8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 0208 	add.w	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f103 0208 	add.w	r2, r3, #8
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	bc80      	pop	{r7}
 8006170:	4770      	bx	lr

08006172 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d103      	bne.n	80061f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e00c      	b.n	800620a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3308      	adds	r3, #8
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e002      	b.n	80061fe <vListInsert+0x2e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	429a      	cmp	r2, r3
 8006208:	d2f6      	bcs.n	80061f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6852      	ldr	r2, [r2, #4]
 8006260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d103      	bne.n	8006274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1e5a      	subs	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	bc80      	pop	{r7}
 8006290:	4770      	bx	lr
	...

08006294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062be:	f002 f885 	bl	80083cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	3b01      	subs	r3, #1
 80062f0:	68f9      	ldr	r1, [r7, #12]
 80062f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80062f4:	fb01 f303 	mul.w	r3, r1, r3
 80062f8:	441a      	add	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	22ff      	movs	r2, #255	; 0xff
 8006302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d114      	bne.n	800633e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3310      	adds	r3, #16
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f9af 	bl	8007684 <xTaskRemoveFromEventList>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d012      	beq.n	8006352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <xQueueGenericReset+0xcc>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	e009      	b.n	8006352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3310      	adds	r3, #16
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fef6 	bl	8006134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fef1 	bl	8006134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006352:	f002 f86b 	bl	800842c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006356:	2301      	movs	r3, #1
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08e      	sub	sp, #56	; 0x38
 8006368:	af02      	add	r7, sp, #8
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <xQueueGenericCreateStatic+0x52>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <xQueueGenericCreateStatic+0x56>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericCreateStatic+0x58>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	623b      	str	r3, [r7, #32]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d102      	bne.n	80063e2 <xQueueGenericCreateStatic+0x7e>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <xQueueGenericCreateStatic+0x82>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <xQueueGenericCreateStatic+0x84>
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	61fb      	str	r3, [r7, #28]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006402:	2350      	movs	r3, #80	; 0x50
 8006404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b50      	cmp	r3, #80	; 0x50
 800640a:	d00a      	beq.n	8006422 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	61bb      	str	r3, [r7, #24]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00d      	beq.n	8006448 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006434:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f843 	bl	80064ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3730      	adds	r7, #48	; 0x30
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006452:	b580      	push	{r7, lr}
 8006454:	b08a      	sub	sp, #40	; 0x28
 8006456:	af02      	add	r7, sp, #8
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <xQueueGenericCreate+0x2a>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	613b      	str	r3, [r7, #16]
}
 8006478:	bf00      	nop
 800647a:	e7fe      	b.n	800647a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e004      	b.n	8006492 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	fb02 f303 	mul.w	r3, r2, r3
 8006490:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3350      	adds	r3, #80	; 0x50
 8006496:	4618      	mov	r0, r3
 8006498:	f002 f898 	bl	80085cc <pvPortMalloc>
 800649c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00f      	beq.n	80064c4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	3350      	adds	r3, #80	; 0x50
 80064a8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064b2:	79fa      	ldrb	r2, [r7, #7]
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f805 	bl	80064ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80064c4:	69bb      	ldr	r3, [r7, #24]
	}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3720      	adds	r7, #32
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e002      	b.n	80064f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064fc:	2101      	movs	r1, #1
 80064fe:	69b8      	ldr	r0, [r7, #24]
 8006500:	f7ff fec8 	bl	8006294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006522:	2300      	movs	r3, #0
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueGenericSend+0x32>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d103      	bne.n	8006554 <xQueueGenericSend+0x40>
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <xQueueGenericSend+0x44>
 8006554:	2301      	movs	r3, #1
 8006556:	e000      	b.n	800655a <xQueueGenericSend+0x46>
 8006558:	2300      	movs	r3, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <xQueueGenericSend+0x60>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d103      	bne.n	8006582 <xQueueGenericSend+0x6e>
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <xQueueGenericSend+0x72>
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <xQueueGenericSend+0x74>
 8006586:	2300      	movs	r3, #0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	623b      	str	r3, [r7, #32]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065a2:	f001 fa31 	bl	8007a08 <xTaskGetSchedulerState>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <xQueueGenericSend+0x9e>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <xQueueGenericSend+0xa2>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <xQueueGenericSend+0xa4>
 80065b6:	2300      	movs	r3, #0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	61fb      	str	r3, [r7, #28]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065d2:	f001 fefb 	bl	80083cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <xQueueGenericSend+0xd4>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d129      	bne.n	800663c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ee:	f000 fa87 	bl	8006b00 <prvCopyDataToQueue>
 80065f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f001 f83f 	bl	8007684 <xTaskRemoveFromEventList>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d013      	beq.n	8006634 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800660c:	4b3f      	ldr	r3, [pc, #252]	; (800670c <xQueueGenericSend+0x1f8>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	e00a      	b.n	8006634 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006624:	4b39      	ldr	r3, [pc, #228]	; (800670c <xQueueGenericSend+0x1f8>)
 8006626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f3bf 8f4f 	dsb	sy
 8006630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006634:	f001 fefa 	bl	800842c <vPortExitCritical>
				return pdPASS;
 8006638:	2301      	movs	r3, #1
 800663a:	e063      	b.n	8006704 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006642:	f001 fef3 	bl	800842c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006646:	2300      	movs	r3, #0
 8006648:	e05c      	b.n	8006704 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800664a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	4618      	mov	r0, r3
 8006656:	f001 f879 	bl	800774c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800665a:	2301      	movs	r3, #1
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800665e:	f001 fee5 	bl	800842c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006662:	f000 fdeb 	bl	800723c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006666:	f001 feb1 	bl	80083cc <vPortEnterCritical>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006670:	b25b      	sxtb	r3, r3
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d103      	bne.n	8006680 <xQueueGenericSend+0x16c>
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006686:	b25b      	sxtb	r3, r3
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668c:	d103      	bne.n	8006696 <xQueueGenericSend+0x182>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006696:	f001 fec9 	bl	800842c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800669a:	1d3a      	adds	r2, r7, #4
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	4611      	mov	r1, r2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f001 f868 	bl	8007778 <xTaskCheckForTimeOut>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d124      	bne.n	80066f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b0:	f000 fb1e 	bl	8006cf0 <prvIsQueueFull>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d018      	beq.n	80066ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	3310      	adds	r3, #16
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	4611      	mov	r1, r2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 ff8e 	bl	80075e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ca:	f000 faa9 	bl	8006c20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066ce:	f000 fdc3 	bl	8007258 <xTaskResumeAll>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f47f af7c 	bne.w	80065d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066da:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xQueueGenericSend+0x1f8>)
 80066dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	e772      	b.n	80065d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ee:	f000 fa97 	bl	8006c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066f2:	f000 fdb1 	bl	8007258 <xTaskResumeAll>
 80066f6:	e76c      	b.n	80065d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066fa:	f000 fa91 	bl	8006c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066fe:	f000 fdab 	bl	8007258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006702:	2300      	movs	r3, #0
		}
	}
}
 8006704:	4618      	mov	r0, r3
 8006706:	3738      	adds	r7, #56	; 0x38
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08e      	sub	sp, #56	; 0x38
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <xQueueGenericSendFromISR+0x3c>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <xQueueGenericSendFromISR+0x40>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <xQueueGenericSendFromISR+0x42>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	623b      	str	r3, [r7, #32]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <xQueueGenericSendFromISR+0x6a>
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <xQueueGenericSendFromISR+0x6e>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <xQueueGenericSendFromISR+0x70>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	61fb      	str	r3, [r7, #28]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800679a:	f001 fed9 	bl	8008550 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800679e:	f3ef 8211 	mrs	r2, BASEPRI
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	61ba      	str	r2, [r7, #24]
 80067b4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067b6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <xQueueGenericSendFromISR+0xbc>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d12c      	bne.n	8006826 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	68b9      	ldr	r1, [r7, #8]
 80067da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067dc:	f000 f990 	bl	8006b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d112      	bne.n	8006810 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d016      	beq.n	8006820 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	3324      	adds	r3, #36	; 0x24
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 ff44 	bl	8007684 <xTaskRemoveFromEventList>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00e      	beq.n	8006820 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00b      	beq.n	8006820 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e007      	b.n	8006820 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006814:	3301      	adds	r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	b25a      	sxtb	r2, r3
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006820:	2301      	movs	r3, #1
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006824:	e001      	b.n	800682a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006838:	4618      	mov	r0, r3
 800683a:	3738      	adds	r7, #56	; 0x38
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <xQueueReceive+0x30>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	623b      	str	r3, [r7, #32]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueReceive+0x3e>
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <xQueueReceive+0x42>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <xQueueReceive+0x44>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueReceive+0x5e>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	61fb      	str	r3, [r7, #28]
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800689e:	f001 f8b3 	bl	8007a08 <xTaskGetSchedulerState>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d102      	bne.n	80068ae <xQueueReceive+0x6e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <xQueueReceive+0x72>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <xQueueReceive+0x74>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueReceive+0x8e>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	61bb      	str	r3, [r7, #24]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ce:	f001 fd7d 	bl	80083cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01f      	beq.n	800691e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e2:	f000 f977 	bl	8006bd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	1e5a      	subs	r2, r3, #1
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00f      	beq.n	8006916 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	3310      	adds	r3, #16
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fec2 	bl	8007684 <xTaskRemoveFromEventList>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006906:	4b3d      	ldr	r3, [pc, #244]	; (80069fc <xQueueReceive+0x1bc>)
 8006908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006916:	f001 fd89 	bl	800842c <vPortExitCritical>
				return pdPASS;
 800691a:	2301      	movs	r3, #1
 800691c:	e069      	b.n	80069f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d103      	bne.n	800692c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006924:	f001 fd82 	bl	800842c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006928:	2300      	movs	r3, #0
 800692a:	e062      	b.n	80069f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ff08 	bl	800774c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800693c:	2301      	movs	r3, #1
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006940:	f001 fd74 	bl	800842c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006944:	f000 fc7a 	bl	800723c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006948:	f001 fd40 	bl	80083cc <vPortEnterCritical>
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006952:	b25b      	sxtb	r3, r3
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d103      	bne.n	8006962 <xQueueReceive+0x122>
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d103      	bne.n	8006978 <xQueueReceive+0x138>
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006978:	f001 fd58 	bl	800842c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800697c:	1d3a      	adds	r2, r7, #4
 800697e:	f107 0310 	add.w	r3, r7, #16
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fef7 	bl	8007778 <xTaskCheckForTimeOut>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d123      	bne.n	80069d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006992:	f000 f997 	bl	8006cc4 <prvIsQueueEmpty>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d017      	beq.n	80069cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	3324      	adds	r3, #36	; 0x24
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fe1d 	bl	80075e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ac:	f000 f938 	bl	8006c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069b0:	f000 fc52 	bl	8007258 <xTaskResumeAll>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d189      	bne.n	80068ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <xQueueReceive+0x1bc>)
 80069bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	e780      	b.n	80068ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ce:	f000 f927 	bl	8006c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069d2:	f000 fc41 	bl	8007258 <xTaskResumeAll>
 80069d6:	e77a      	b.n	80068ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	f000 f921 	bl	8006c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069de:	f000 fc3b 	bl	8007258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e4:	f000 f96e 	bl	8006cc4 <prvIsQueueEmpty>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f43f af6f 	beq.w	80068ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3730      	adds	r7, #48	; 0x30
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	; 0x38
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	623b      	str	r3, [r7, #32]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <xQueueReceiveFromISR+0x3a>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <xQueueReceiveFromISR+0x3e>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <xQueueReceiveFromISR+0x40>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	61fb      	str	r3, [r7, #28]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a5a:	f001 fd79 	bl	8008550 <vPortValidateInterruptPriority>
	__asm volatile
 8006a5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	61ba      	str	r2, [r7, #24]
 8006a74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d02f      	beq.n	8006ae6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a94:	f000 f89e 	bl	8006bd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006aa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa8:	d112      	bne.n	8006ad0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	3310      	adds	r3, #16
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fde4 	bl	8007684 <xTaskRemoveFromEventList>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e007      	b.n	8006ae0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	b25a      	sxtb	r2, r3
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	e001      	b.n	8006aea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3738      	adds	r7, #56	; 0x38
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d14d      	bne.n	8006bc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 ff8a 	bl	8007a44 <xTaskPriorityDisinherit>
 8006b30:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	605a      	str	r2, [r3, #4]
 8006b38:	e043      	b.n	8006bc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d119      	bne.n	8006b74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6898      	ldr	r0, [r3, #8]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	461a      	mov	r2, r3
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	f001 ff40 	bl	80089d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	441a      	add	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d32b      	bcc.n	8006bc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	e026      	b.n	8006bc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68d8      	ldr	r0, [r3, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	f001 ff26 	bl	80089d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	425b      	negs	r3, r3
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d207      	bcs.n	8006bb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	425b      	negs	r3, r3
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d105      	bne.n	8006bc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	441a      	add	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d303      	bcc.n	8006c08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68d9      	ldr	r1, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	461a      	mov	r2, r3
 8006c12:	6838      	ldr	r0, [r7, #0]
 8006c14:	f001 fedc 	bl	80089d0 <memcpy>
	}
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c28:	f001 fbd0 	bl	80083cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c34:	e011      	b.n	8006c5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d012      	beq.n	8006c64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3324      	adds	r3, #36	; 0x24
 8006c42:	4618      	mov	r0, r3
 8006c44:	f000 fd1e 	bl	8007684 <xTaskRemoveFromEventList>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c4e:	f000 fdf5 	bl	800783c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	dce9      	bgt.n	8006c36 <prvUnlockQueue+0x16>
 8006c62:	e000      	b.n	8006c66 <prvUnlockQueue+0x46>
					break;
 8006c64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	22ff      	movs	r2, #255	; 0xff
 8006c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c6e:	f001 fbdd 	bl	800842c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c72:	f001 fbab 	bl	80083cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c7e:	e011      	b.n	8006ca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3310      	adds	r3, #16
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fcf9 	bl	8007684 <xTaskRemoveFromEventList>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c98:	f000 fdd0 	bl	800783c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	dce9      	bgt.n	8006c80 <prvUnlockQueue+0x60>
 8006cac:	e000      	b.n	8006cb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	22ff      	movs	r2, #255	; 0xff
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006cb8:	f001 fbb8 	bl	800842c <vPortExitCritical>
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ccc:	f001 fb7e 	bl	80083cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e001      	b.n	8006ce2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f001 fba3 	bl	800842c <vPortExitCritical>

	return xReturn;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cf8:	f001 fb68 	bl	80083cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d102      	bne.n	8006d0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	e001      	b.n	8006d12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d12:	f001 fb8b 	bl	800842c <vPortExitCritical>

	return xReturn;
 8006d16:	68fb      	ldr	r3, [r7, #12]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	e014      	b.n	8006d5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d30:	4a0e      	ldr	r2, [pc, #56]	; (8006d6c <vQueueAddToRegistry+0x4c>)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006d3c:	490b      	ldr	r1, [pc, #44]	; (8006d6c <vQueueAddToRegistry+0x4c>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <vQueueAddToRegistry+0x4c>)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006d52:	e006      	b.n	8006d62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b07      	cmp	r3, #7
 8006d5e:	d9e7      	bls.n	8006d30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	20001cc8 	.word	0x20001cc8

08006d70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d80:	f001 fb24 	bl	80083cc <vPortEnterCritical>
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d8a:	b25b      	sxtb	r3, r3
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d103      	bne.n	8006d9a <vQueueWaitForMessageRestricted+0x2a>
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da0:	b25b      	sxtb	r3, r3
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d103      	bne.n	8006db0 <vQueueWaitForMessageRestricted+0x40>
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db0:	f001 fb3c 	bl	800842c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d106      	bne.n	8006dca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3324      	adds	r3, #36	; 0x24
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	68b9      	ldr	r1, [r7, #8]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 fc31 	bl	800762c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006dca:	6978      	ldr	r0, [r7, #20]
 8006dcc:	f7ff ff28 	bl	8006c20 <prvUnlockQueue>
	}
 8006dd0:	bf00      	nop
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08e      	sub	sp, #56	; 0x38
 8006ddc:	af04      	add	r7, sp, #16
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	623b      	str	r3, [r7, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xTaskCreateStatic+0x46>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61fb      	str	r3, [r7, #28]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e1e:	235c      	movs	r3, #92	; 0x5c
 8006e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b5c      	cmp	r3, #92	; 0x5c
 8006e26:	d00a      	beq.n	8006e3e <xTaskCreateStatic+0x66>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	61bb      	str	r3, [r7, #24]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01e      	beq.n	8006e82 <xTaskCreateStatic+0xaa>
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d01b      	beq.n	8006e82 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9303      	str	r3, [sp, #12]
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	9302      	str	r3, [sp, #8]
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f850 	bl	8006f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e7c:	f000 f8d4 	bl	8007028 <prvAddNewTaskToReadyList>
 8006e80:	e001      	b.n	8006e86 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e86:	697b      	ldr	r3, [r7, #20]
	}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	; 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08c      	sub	sp, #48	; 0x30
 8006e94:	af04      	add	r7, sp, #16
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	603b      	str	r3, [r7, #0]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fb91 	bl	80085cc <pvPortMalloc>
 8006eaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00e      	beq.n	8006ed0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006eb2:	205c      	movs	r0, #92	; 0x5c
 8006eb4:	f001 fb8a 	bl	80085cc <pvPortMalloc>
 8006eb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ec6:	e005      	b.n	8006ed4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ec8:	6978      	ldr	r0, [r7, #20]
 8006eca:	f001 fc43 	bl	8008754 <vPortFree>
 8006ece:	e001      	b.n	8006ed4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d017      	beq.n	8006f0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	9302      	str	r3, [sp, #8]
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	9301      	str	r3, [sp, #4]
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f80e 	bl	8006f1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006efe:	69f8      	ldr	r0, [r7, #28]
 8006f00:	f000 f892 	bl	8007028 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	e002      	b.n	8006f10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f10:	69bb      	ldr	r3, [r7, #24]
	}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b088      	sub	sp, #32
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	607a      	str	r2, [r7, #4]
 8006f26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	461a      	mov	r2, r3
 8006f32:	21a5      	movs	r1, #165	; 0xa5
 8006f34:	f001 fd5a 	bl	80089ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f42:	3b01      	subs	r3, #1
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f023 0307 	bic.w	r3, r3, #7
 8006f50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	617b      	str	r3, [r7, #20]
}
 8006f6e:	bf00      	nop
 8006f70:	e7fe      	b.n	8006f70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
 8006f76:	e012      	b.n	8006f9e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	7819      	ldrb	r1, [r3, #0]
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	3334      	adds	r3, #52	; 0x34
 8006f88:	460a      	mov	r2, r1
 8006f8a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d9e9      	bls.n	8006f78 <prvInitialiseNewTask+0x5e>
 8006fa4:	e000      	b.n	8006fa8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006fa6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb2:	2b37      	cmp	r3, #55	; 0x37
 8006fb4:	d901      	bls.n	8006fba <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006fb6:	2337      	movs	r3, #55	; 0x37
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7ff f8ce 	bl	8006172 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	3318      	adds	r3, #24
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f8c9 	bl	8006172 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	69b8      	ldr	r0, [r7, #24]
 800700a:	f001 f8ef 	bl	80081ec <pxPortInitialiseStack>
 800700e:	4602      	mov	r2, r0
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007020:	bf00      	nop
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007030:	f001 f9cc 	bl	80083cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <prvAddNewTaskToReadyList+0xc4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3301      	adds	r3, #1
 800703a:	4a2c      	ldr	r2, [pc, #176]	; (80070ec <prvAddNewTaskToReadyList+0xc4>)
 800703c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800703e:	4b2c      	ldr	r3, [pc, #176]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007046:	4a2a      	ldr	r2, [pc, #168]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800704c:	4b27      	ldr	r3, [pc, #156]	; (80070ec <prvAddNewTaskToReadyList+0xc4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d110      	bne.n	8007076 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007054:	f000 fc16 	bl	8007884 <prvInitialiseTaskLists>
 8007058:	e00d      	b.n	8007076 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800705a:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <prvAddNewTaskToReadyList+0xcc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007062:	4b23      	ldr	r3, [pc, #140]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	429a      	cmp	r2, r3
 800706e:	d802      	bhi.n	8007076 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007070:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007076:	4b20      	ldr	r3, [pc, #128]	; (80070f8 <prvAddNewTaskToReadyList+0xd0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3301      	adds	r3, #1
 800707c:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <prvAddNewTaskToReadyList+0xd0>)
 800707e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007080:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <prvAddNewTaskToReadyList+0xd0>)
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <prvAddNewTaskToReadyList+0xd4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <prvAddNewTaskToReadyList+0x74>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <prvAddNewTaskToReadyList+0xd4>)
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	4613      	mov	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4a15      	ldr	r2, [pc, #84]	; (8007100 <prvAddNewTaskToReadyList+0xd8>)
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f7ff f869 	bl	800618a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070b8:	f001 f9b8 	bl	800842c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070bc:	4b0d      	ldr	r3, [pc, #52]	; (80070f4 <prvAddNewTaskToReadyList+0xcc>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <prvAddNewTaskToReadyList+0xc8>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d207      	bcs.n	80070e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <prvAddNewTaskToReadyList+0xdc>)
 80070d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	200021dc 	.word	0x200021dc
 80070f0:	20001d08 	.word	0x20001d08
 80070f4:	200021e8 	.word	0x200021e8
 80070f8:	200021f8 	.word	0x200021f8
 80070fc:	200021e4 	.word	0x200021e4
 8007100:	20001d0c 	.word	0x20001d0c
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d017      	beq.n	800714a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <vTaskDelay+0x60>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <vTaskDelay+0x30>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	60bb      	str	r3, [r7, #8]
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007138:	f000 f880 	bl	800723c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800713c:	2100      	movs	r1, #0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fcee 	bl	8007b20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007144:	f000 f888 	bl	8007258 <xTaskResumeAll>
 8007148:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <vTaskDelay+0x64>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20002204 	.word	0x20002204
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	; 0x28
 8007174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800717e:	463a      	mov	r2, r7
 8007180:	1d39      	adds	r1, r7, #4
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe ffa2 	bl	80060d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	9202      	str	r2, [sp, #8]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	2300      	movs	r3, #0
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	2300      	movs	r3, #0
 800719c:	460a      	mov	r2, r1
 800719e:	4921      	ldr	r1, [pc, #132]	; (8007224 <vTaskStartScheduler+0xb4>)
 80071a0:	4821      	ldr	r0, [pc, #132]	; (8007228 <vTaskStartScheduler+0xb8>)
 80071a2:	f7ff fe19 	bl	8006dd8 <xTaskCreateStatic>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a20      	ldr	r2, [pc, #128]	; (800722c <vTaskStartScheduler+0xbc>)
 80071aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80071ac:	4b1f      	ldr	r3, [pc, #124]	; (800722c <vTaskStartScheduler+0xbc>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	e001      	b.n	80071be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d102      	bne.n	80071ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071c4:	f000 fd00 	bl	8007bc8 <xTimerCreateTimerTask>
 80071c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d116      	bne.n	80071fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	613b      	str	r3, [r7, #16]
}
 80071e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071e4:	4b12      	ldr	r3, [pc, #72]	; (8007230 <vTaskStartScheduler+0xc0>)
 80071e6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ec:	4b11      	ldr	r3, [pc, #68]	; (8007234 <vTaskStartScheduler+0xc4>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80071f2:	4b11      	ldr	r3, [pc, #68]	; (8007238 <vTaskStartScheduler+0xc8>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071f8:	f001 f876 	bl	80082e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071fc:	e00e      	b.n	800721c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d10a      	bne.n	800721c <vTaskStartScheduler+0xac>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60fb      	str	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <vTaskStartScheduler+0xaa>
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	0800d32c 	.word	0x0800d32c
 8007228:	08007855 	.word	0x08007855
 800722c:	20002200 	.word	0x20002200
 8007230:	200021fc 	.word	0x200021fc
 8007234:	200021e8 	.word	0x200021e8
 8007238:	200021e0 	.word	0x200021e0

0800723c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <vTaskSuspendAll+0x18>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	4a03      	ldr	r2, [pc, #12]	; (8007254 <vTaskSuspendAll+0x18>)
 8007248:	6013      	str	r3, [r2, #0]
}
 800724a:	bf00      	nop
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20002204 	.word	0x20002204

08007258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007266:	4b42      	ldr	r3, [pc, #264]	; (8007370 <xTaskResumeAll+0x118>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <xTaskResumeAll+0x2c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	603b      	str	r3, [r7, #0]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007284:	f001 f8a2 	bl	80083cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007288:	4b39      	ldr	r3, [pc, #228]	; (8007370 <xTaskResumeAll+0x118>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3b01      	subs	r3, #1
 800728e:	4a38      	ldr	r2, [pc, #224]	; (8007370 <xTaskResumeAll+0x118>)
 8007290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007292:	4b37      	ldr	r3, [pc, #220]	; (8007370 <xTaskResumeAll+0x118>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d162      	bne.n	8007360 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800729a:	4b36      	ldr	r3, [pc, #216]	; (8007374 <xTaskResumeAll+0x11c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d05e      	beq.n	8007360 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072a2:	e02f      	b.n	8007304 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80072a4:	4b34      	ldr	r3, [pc, #208]	; (8007378 <xTaskResumeAll+0x120>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3318      	adds	r3, #24
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe ffc5 	bl	8006240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe ffc0 	bl	8006240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c4:	4b2d      	ldr	r3, [pc, #180]	; (800737c <xTaskResumeAll+0x124>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d903      	bls.n	80072d4 <xTaskResumeAll+0x7c>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	4a2a      	ldr	r2, [pc, #168]	; (800737c <xTaskResumeAll+0x124>)
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4a27      	ldr	r2, [pc, #156]	; (8007380 <xTaskResumeAll+0x128>)
 80072e2:	441a      	add	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	f7fe ff4d 	bl	800618a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	4b23      	ldr	r3, [pc, #140]	; (8007384 <xTaskResumeAll+0x12c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072fe:	4b22      	ldr	r3, [pc, #136]	; (8007388 <xTaskResumeAll+0x130>)
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007304:	4b1c      	ldr	r3, [pc, #112]	; (8007378 <xTaskResumeAll+0x120>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1cb      	bne.n	80072a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007312:	f000 fb55 	bl	80079c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <xTaskResumeAll+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d010      	beq.n	8007344 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007322:	f000 f845 	bl	80073b0 <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800732c:	4b16      	ldr	r3, [pc, #88]	; (8007388 <xTaskResumeAll+0x130>)
 800732e:	2201      	movs	r2, #1
 8007330:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f1      	bne.n	8007322 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <xTaskResumeAll+0x134>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007344:	4b10      	ldr	r3, [pc, #64]	; (8007388 <xTaskResumeAll+0x130>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800734c:	2301      	movs	r3, #1
 800734e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <xTaskResumeAll+0x138>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007360:	f001 f864 	bl	800842c <vPortExitCritical>

	return xAlreadyYielded;
 8007364:	68bb      	ldr	r3, [r7, #8]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	20002204 	.word	0x20002204
 8007374:	200021dc 	.word	0x200021dc
 8007378:	2000219c 	.word	0x2000219c
 800737c:	200021e4 	.word	0x200021e4
 8007380:	20001d0c 	.word	0x20001d0c
 8007384:	20001d08 	.word	0x20001d08
 8007388:	200021f0 	.word	0x200021f0
 800738c:	200021ec 	.word	0x200021ec
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800739a:	4b04      	ldr	r3, [pc, #16]	; (80073ac <xTaskGetTickCount+0x18>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073a0:	687b      	ldr	r3, [r7, #4]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr
 80073ac:	200021e0 	.word	0x200021e0

080073b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ba:	4b51      	ldr	r3, [pc, #324]	; (8007500 <xTaskIncrementTick+0x150>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f040 808e 	bne.w	80074e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c4:	4b4f      	ldr	r3, [pc, #316]	; (8007504 <xTaskIncrementTick+0x154>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073cc:	4a4d      	ldr	r2, [pc, #308]	; (8007504 <xTaskIncrementTick+0x154>)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d120      	bne.n	800741a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d8:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <xTaskIncrementTick+0x158>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	603b      	str	r3, [r7, #0]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskIncrementTick+0x46>
 80073f8:	4b43      	ldr	r3, [pc, #268]	; (8007508 <xTaskIncrementTick+0x158>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b43      	ldr	r3, [pc, #268]	; (800750c <xTaskIncrementTick+0x15c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a41      	ldr	r2, [pc, #260]	; (8007508 <xTaskIncrementTick+0x158>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4a41      	ldr	r2, [pc, #260]	; (800750c <xTaskIncrementTick+0x15c>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	4b40      	ldr	r3, [pc, #256]	; (8007510 <xTaskIncrementTick+0x160>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a3f      	ldr	r2, [pc, #252]	; (8007510 <xTaskIncrementTick+0x160>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f000 fad3 	bl	80079c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800741a:	4b3e      	ldr	r3, [pc, #248]	; (8007514 <xTaskIncrementTick+0x164>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d34e      	bcc.n	80074c2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007424:	4b38      	ldr	r3, [pc, #224]	; (8007508 <xTaskIncrementTick+0x158>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <xTaskIncrementTick+0x82>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xTaskIncrementTick+0x84>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007438:	4b36      	ldr	r3, [pc, #216]	; (8007514 <xTaskIncrementTick+0x164>)
 800743a:	f04f 32ff 	mov.w	r2, #4294967295
 800743e:	601a      	str	r2, [r3, #0]
					break;
 8007440:	e03f      	b.n	80074c2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007442:	4b31      	ldr	r3, [pc, #196]	; (8007508 <xTaskIncrementTick+0x158>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d203      	bcs.n	8007462 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800745a:	4a2e      	ldr	r2, [pc, #184]	; (8007514 <xTaskIncrementTick+0x164>)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6013      	str	r3, [r2, #0]
						break;
 8007460:	e02f      	b.n	80074c2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	3304      	adds	r3, #4
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe feea 	bl	8006240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3318      	adds	r3, #24
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe fee1 	bl	8006240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	4b25      	ldr	r3, [pc, #148]	; (8007518 <xTaskIncrementTick+0x168>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d903      	bls.n	8007492 <xTaskIncrementTick+0xe2>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	4a22      	ldr	r2, [pc, #136]	; (8007518 <xTaskIncrementTick+0x168>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4a1f      	ldr	r2, [pc, #124]	; (800751c <xTaskIncrementTick+0x16c>)
 80074a0:	441a      	add	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7fe fe6e 	bl	800618a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <xTaskIncrementTick+0x170>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d3b3      	bcc.n	8007424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c0:	e7b0      	b.n	8007424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074c2:	4b17      	ldr	r3, [pc, #92]	; (8007520 <xTaskIncrementTick+0x170>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	4914      	ldr	r1, [pc, #80]	; (800751c <xTaskIncrementTick+0x16c>)
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d907      	bls.n	80074ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e004      	b.n	80074ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074e0:	4b10      	ldr	r3, [pc, #64]	; (8007524 <xTaskIncrementTick+0x174>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a0f      	ldr	r2, [pc, #60]	; (8007524 <xTaskIncrementTick+0x174>)
 80074e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074ea:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <xTaskIncrementTick+0x178>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074f6:	697b      	ldr	r3, [r7, #20]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20002204 	.word	0x20002204
 8007504:	200021e0 	.word	0x200021e0
 8007508:	20002194 	.word	0x20002194
 800750c:	20002198 	.word	0x20002198
 8007510:	200021f4 	.word	0x200021f4
 8007514:	200021fc 	.word	0x200021fc
 8007518:	200021e4 	.word	0x200021e4
 800751c:	20001d0c 	.word	0x20001d0c
 8007520:	20001d08 	.word	0x20001d08
 8007524:	200021ec 	.word	0x200021ec
 8007528:	200021f0 	.word	0x200021f0

0800752c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007532:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <vTaskSwitchContext+0xa4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800753a:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <vTaskSwitchContext+0xa8>)
 800753c:	2201      	movs	r2, #1
 800753e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007540:	e041      	b.n	80075c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007542:	4b24      	ldr	r3, [pc, #144]	; (80075d4 <vTaskSwitchContext+0xa8>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007548:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <vTaskSwitchContext+0xac>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	e010      	b.n	8007572 <vTaskSwitchContext+0x46>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10a      	bne.n	800756c <vTaskSwitchContext+0x40>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	607b      	str	r3, [r7, #4]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <vTaskSwitchContext+0x3e>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3b01      	subs	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	491a      	ldr	r1, [pc, #104]	; (80075dc <vTaskSwitchContext+0xb0>)
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0e4      	beq.n	8007550 <vTaskSwitchContext+0x24>
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a12      	ldr	r2, [pc, #72]	; (80075dc <vTaskSwitchContext+0xb0>)
 8007592:	4413      	add	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3308      	adds	r3, #8
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d104      	bne.n	80075b6 <vTaskSwitchContext+0x8a>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	605a      	str	r2, [r3, #4]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <vTaskSwitchContext+0xb4>)
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <vTaskSwitchContext+0xac>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6013      	str	r3, [r2, #0]
}
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr
 80075d0:	20002204 	.word	0x20002204
 80075d4:	200021f0 	.word	0x200021f0
 80075d8:	200021e4 	.word	0x200021e4
 80075dc:	20001d0c 	.word	0x20001d0c
 80075e0:	20001d08 	.word	0x20001d08

080075e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	60fb      	str	r3, [r7, #12]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <vTaskPlaceOnEventList+0x44>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3318      	adds	r3, #24
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe fddc 	bl	80061d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007618:	2101      	movs	r1, #1
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f000 fa80 	bl	8007b20 <prvAddCurrentTaskToDelayedList>
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20001d08 	.word	0x20001d08

0800762c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <vTaskPlaceOnEventListRestricted+0x54>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	3318      	adds	r3, #24
 800765a:	4619      	mov	r1, r3
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7fe fd94 	bl	800618a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	68b8      	ldr	r0, [r7, #8]
 8007672:	f000 fa55 	bl	8007b20 <prvAddCurrentTaskToDelayedList>
	}
 8007676:	bf00      	nop
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20001d08 	.word	0x20001d08

08007684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10a      	bne.n	80076b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60fb      	str	r3, [r7, #12]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3318      	adds	r3, #24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fe fdc3 	bl	8006240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ba:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <xTaskRemoveFromEventList+0xb0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d11d      	bne.n	80076fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fdba 	bl	8006240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <xTaskRemoveFromEventList+0xb4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d903      	bls.n	80076e0 <xTaskRemoveFromEventList+0x5c>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	4a16      	ldr	r2, [pc, #88]	; (8007738 <xTaskRemoveFromEventList+0xb4>)
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4a13      	ldr	r2, [pc, #76]	; (800773c <xTaskRemoveFromEventList+0xb8>)
 80076ee:	441a      	add	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7fe fd47 	bl	800618a <vListInsertEnd>
 80076fc:	e005      	b.n	800770a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3318      	adds	r3, #24
 8007702:	4619      	mov	r1, r3
 8007704:	480e      	ldr	r0, [pc, #56]	; (8007740 <xTaskRemoveFromEventList+0xbc>)
 8007706:	f7fe fd40 	bl	800618a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <xTaskRemoveFromEventList+0xc0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	429a      	cmp	r2, r3
 8007716:	d905      	bls.n	8007724 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800771c:	4b0a      	ldr	r3, [pc, #40]	; (8007748 <xTaskRemoveFromEventList+0xc4>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e001      	b.n	8007728 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007728:	697b      	ldr	r3, [r7, #20]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20002204 	.word	0x20002204
 8007738:	200021e4 	.word	0x200021e4
 800773c:	20001d0c 	.word	0x20001d0c
 8007740:	2000219c 	.word	0x2000219c
 8007744:	20001d08 	.word	0x20001d08
 8007748:	200021f0 	.word	0x200021f0

0800774c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <vTaskInternalSetTimeOutState+0x24>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <vTaskInternalSetTimeOutState+0x28>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	605a      	str	r2, [r3, #4]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	200021f4 	.word	0x200021f4
 8007774:	200021e0 	.word	0x200021e0

08007778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	613b      	str	r3, [r7, #16]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	60fb      	str	r3, [r7, #12]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077ba:	f000 fe07 	bl	80083cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <xTaskCheckForTimeOut+0xbc>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d6:	d102      	bne.n	80077de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077d8:	2300      	movs	r3, #0
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e023      	b.n	8007826 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b15      	ldr	r3, [pc, #84]	; (8007838 <xTaskCheckForTimeOut+0xc0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d007      	beq.n	80077fa <xTaskCheckForTimeOut+0x82>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d302      	bcc.n	80077fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077f4:	2301      	movs	r3, #1
 80077f6:	61fb      	str	r3, [r7, #28]
 80077f8:	e015      	b.n	8007826 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	429a      	cmp	r2, r3
 8007802:	d20b      	bcs.n	800781c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	1ad2      	subs	r2, r2, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7ff ff9b 	bl	800774c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007816:	2300      	movs	r3, #0
 8007818:	61fb      	str	r3, [r7, #28]
 800781a:	e004      	b.n	8007826 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007822:	2301      	movs	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007826:	f000 fe01 	bl	800842c <vPortExitCritical>

	return xReturn;
 800782a:	69fb      	ldr	r3, [r7, #28]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	200021e0 	.word	0x200021e0
 8007838:	200021f4 	.word	0x200021f4

0800783c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <vTaskMissedYield+0x14>)
 8007842:	2201      	movs	r2, #1
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200021f0 	.word	0x200021f0

08007854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800785c:	f000 f852 	bl	8007904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <prvIdleTask+0x28>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d9f9      	bls.n	800785c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <prvIdleTask+0x2c>)
 800786a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007878:	e7f0      	b.n	800785c <prvIdleTask+0x8>
 800787a:	bf00      	nop
 800787c:	20001d0c 	.word	0x20001d0c
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	e00c      	b.n	80078aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <prvInitialiseTaskLists+0x60>)
 800789c:	4413      	add	r3, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fc48 	bl	8006134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3301      	adds	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b37      	cmp	r3, #55	; 0x37
 80078ae:	d9ef      	bls.n	8007890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078b0:	480d      	ldr	r0, [pc, #52]	; (80078e8 <prvInitialiseTaskLists+0x64>)
 80078b2:	f7fe fc3f 	bl	8006134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b6:	480d      	ldr	r0, [pc, #52]	; (80078ec <prvInitialiseTaskLists+0x68>)
 80078b8:	f7fe fc3c 	bl	8006134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078bc:	480c      	ldr	r0, [pc, #48]	; (80078f0 <prvInitialiseTaskLists+0x6c>)
 80078be:	f7fe fc39 	bl	8006134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c2:	480c      	ldr	r0, [pc, #48]	; (80078f4 <prvInitialiseTaskLists+0x70>)
 80078c4:	f7fe fc36 	bl	8006134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078c8:	480b      	ldr	r0, [pc, #44]	; (80078f8 <prvInitialiseTaskLists+0x74>)
 80078ca:	f7fe fc33 	bl	8006134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <prvInitialiseTaskLists+0x78>)
 80078d0:	4a05      	ldr	r2, [pc, #20]	; (80078e8 <prvInitialiseTaskLists+0x64>)
 80078d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvInitialiseTaskLists+0x7c>)
 80078d6:	4a05      	ldr	r2, [pc, #20]	; (80078ec <prvInitialiseTaskLists+0x68>)
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20001d0c 	.word	0x20001d0c
 80078e8:	2000216c 	.word	0x2000216c
 80078ec:	20002180 	.word	0x20002180
 80078f0:	2000219c 	.word	0x2000219c
 80078f4:	200021b0 	.word	0x200021b0
 80078f8:	200021c8 	.word	0x200021c8
 80078fc:	20002194 	.word	0x20002194
 8007900:	20002198 	.word	0x20002198

08007904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790a:	e019      	b.n	8007940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800790c:	f000 fd5e 	bl	80083cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <prvCheckTasksWaitingTermination+0x50>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe fc8f 	bl	8006240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3b01      	subs	r3, #1
 8007928:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 800792a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	4a0a      	ldr	r2, [pc, #40]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007936:	f000 fd79 	bl	800842c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f810 	bl	8007960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e1      	bne.n	800790c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	200021b0 	.word	0x200021b0
 8007958:	200021dc 	.word	0x200021dc
 800795c:	200021c4 	.word	0x200021c4

08007960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800796e:	2b00      	cmp	r3, #0
 8007970:	d108      	bne.n	8007984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	4618      	mov	r0, r3
 8007978:	f000 feec 	bl	8008754 <vPortFree>
				vPortFree( pxTCB );
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fee9 	bl	8008754 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007982:	e018      	b.n	80079b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800798a:	2b01      	cmp	r3, #1
 800798c:	d103      	bne.n	8007996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fee0 	bl	8008754 <vPortFree>
	}
 8007994:	e00f      	b.n	80079b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800799c:	2b02      	cmp	r3, #2
 800799e:	d00a      	beq.n	80079b6 <prvDeleteTCB+0x56>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <prvDeleteTCB+0x54>
	}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <prvResetNextTaskUnblockTime+0x40>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <prvResetNextTaskUnblockTime+0x14>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <prvResetNextTaskUnblockTime+0x16>
 80079d4:	2300      	movs	r3, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079da:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <prvResetNextTaskUnblockTime+0x44>)
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079e2:	e008      	b.n	80079f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <prvResetNextTaskUnblockTime+0x40>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <prvResetNextTaskUnblockTime+0x44>)
 80079f4:	6013      	str	r3, [r2, #0]
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr
 8007a00:	20002194 	.word	0x20002194
 8007a04:	200021fc 	.word	0x200021fc

08007a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <xTaskGetSchedulerState+0x34>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a16:	2301      	movs	r3, #1
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	e008      	b.n	8007a2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1c:	4b08      	ldr	r3, [pc, #32]	; (8007a40 <xTaskGetSchedulerState+0x38>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a24:	2302      	movs	r3, #2
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	e001      	b.n	8007a2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a2e:	687b      	ldr	r3, [r7, #4]
	}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	200021e8 	.word	0x200021e8
 8007a40:	20002204 	.word	0x20002204

08007a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d056      	beq.n	8007b08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a5a:	4b2e      	ldr	r3, [pc, #184]	; (8007b14 <xTaskPriorityDisinherit+0xd0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d00a      	beq.n	8007a7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60fb      	str	r3, [r7, #12]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d02c      	beq.n	8007b08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d128      	bne.n	8007b08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe fbc0 	bl	8006240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <xTaskPriorityDisinherit+0xd4>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d903      	bls.n	8007ae8 <xTaskPriorityDisinherit+0xa4>
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	4a0c      	ldr	r2, [pc, #48]	; (8007b18 <xTaskPriorityDisinherit+0xd4>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a09      	ldr	r2, [pc, #36]	; (8007b1c <xTaskPriorityDisinherit+0xd8>)
 8007af6:	441a      	add	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fe fb43 	bl	800618a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b08:	697b      	ldr	r3, [r7, #20]
	}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20001d08 	.word	0x20001d08
 8007b18:	200021e4 	.word	0x200021e4
 8007b1c:	20001d0c 	.word	0x20001d0c

08007b20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b2a:	4b21      	ldr	r3, [pc, #132]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b30:	4b20      	ldr	r3, [pc, #128]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe fb82 	bl	8006240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b42:	d10a      	bne.n	8007b5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4819      	ldr	r0, [pc, #100]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b54:	f7fe fb19 	bl	800618a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b58:	e026      	b.n	8007ba8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4413      	add	r3, r2
 8007b60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b62:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d209      	bcs.n	8007b86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b72:	4b12      	ldr	r3, [pc, #72]	; (8007bbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	f7fe fb26 	bl	80061d0 <vListInsert>
}
 8007b84:	e010      	b.n	8007ba8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b86:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe fb1c 	bl	80061d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d202      	bcs.n	8007ba8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ba2:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	6013      	str	r3, [r2, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	200021e0 	.word	0x200021e0
 8007bb4:	20001d08 	.word	0x20001d08
 8007bb8:	200021c8 	.word	0x200021c8
 8007bbc:	20002198 	.word	0x20002198
 8007bc0:	20002194 	.word	0x20002194
 8007bc4:	200021fc 	.word	0x200021fc

08007bc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bd2:	f000 facb 	bl	800816c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <xTimerCreateTimerTask+0x80>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d021      	beq.n	8007c22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007be6:	1d3a      	adds	r2, r7, #4
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	f107 030c 	add.w	r3, r7, #12
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fa85 	bl	8006100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	9202      	str	r2, [sp, #8]
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	2302      	movs	r3, #2
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	2300      	movs	r3, #0
 8007c06:	460a      	mov	r2, r1
 8007c08:	4910      	ldr	r1, [pc, #64]	; (8007c4c <xTimerCreateTimerTask+0x84>)
 8007c0a:	4811      	ldr	r0, [pc, #68]	; (8007c50 <xTimerCreateTimerTask+0x88>)
 8007c0c:	f7ff f8e4 	bl	8006dd8 <xTaskCreateStatic>
 8007c10:	4603      	mov	r3, r0
 8007c12:	4a10      	ldr	r2, [pc, #64]	; (8007c54 <xTimerCreateTimerTask+0x8c>)
 8007c14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <xTimerCreateTimerTask+0x8c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10a      	bne.n	8007c3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2c:	f383 8811 	msr	BASEPRI, r3
 8007c30:	f3bf 8f6f 	isb	sy
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	613b      	str	r3, [r7, #16]
}
 8007c3a:	bf00      	nop
 8007c3c:	e7fe      	b.n	8007c3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c3e:	697b      	ldr	r3, [r7, #20]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	20002238 	.word	0x20002238
 8007c4c:	0800d334 	.word	0x0800d334
 8007c50:	08007d75 	.word	0x08007d75
 8007c54:	2000223c 	.word	0x2000223c

08007c58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	623b      	str	r3, [r7, #32]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c86:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <xTimerGenericCommand+0x98>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d02a      	beq.n	8007ce4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	dc18      	bgt.n	8007cd2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ca0:	f7ff feb2 	bl	8007a08 <xTaskGetSchedulerState>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d109      	bne.n	8007cbe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007caa:	4b11      	ldr	r3, [pc, #68]	; (8007cf0 <xTimerGenericCommand+0x98>)
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f107 0110 	add.w	r1, r7, #16
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb6:	f7fe fc2d 	bl	8006514 <xQueueGenericSend>
 8007cba:	6278      	str	r0, [r7, #36]	; 0x24
 8007cbc:	e012      	b.n	8007ce4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <xTimerGenericCommand+0x98>)
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	f107 0110 	add.w	r1, r7, #16
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f7fe fc23 	bl	8006514 <xQueueGenericSend>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
 8007cd0:	e008      	b.n	8007ce4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <xTimerGenericCommand+0x98>)
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f107 0110 	add.w	r1, r7, #16
 8007cda:	2300      	movs	r3, #0
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	f7fe fd17 	bl	8006710 <xQueueGenericSendFromISR>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3728      	adds	r7, #40	; 0x28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20002238 	.word	0x20002238

08007cf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cfe:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <prvProcessExpiredTimer+0x7c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe fa97 	bl	8006240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d122      	bne.n	8007d60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	18d1      	adds	r1, r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	6978      	ldr	r0, [r7, #20]
 8007d28:	f000 f8c8 	bl	8007ebc <prvInsertTimerInActiveList>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d32:	2300      	movs	r3, #0
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	6978      	ldr	r0, [r7, #20]
 8007d3e:	f7ff ff8b 	bl	8007c58 <xTimerGenericCommand>
 8007d42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	4798      	blx	r3
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20002230 	.word	0x20002230

08007d74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d7c:	f107 0308 	add.w	r3, r7, #8
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f857 	bl	8007e34 <prvGetNextExpireTime>
 8007d86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f803 	bl	8007d98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d92:	f000 f8d5 	bl	8007f40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d96:	e7f1      	b.n	8007d7c <prvTimerTask+0x8>

08007d98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007da2:	f7ff fa4b 	bl	800723c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 f866 	bl	8007e7c <prvSampleTimeNow>
 8007db0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d130      	bne.n	8007e1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <prvProcessTimerOrBlockTask+0x3c>
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d806      	bhi.n	8007dd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dc6:	f7ff fa47 	bl	8007258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff ff91 	bl	8007cf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dd2:	e024      	b.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dda:	4b13      	ldr	r3, [pc, #76]	; (8007e28 <prvProcessTimerOrBlockTask+0x90>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <prvProcessTimerOrBlockTask+0x94>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7fe ffb9 	bl	8006d70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dfe:	f7ff fa2b 	bl	8007258 <xTaskResumeAll>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <prvProcessTimerOrBlockTask+0x98>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
}
 8007e18:	e001      	b.n	8007e1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e1a:	f7ff fa1d 	bl	8007258 <xTaskResumeAll>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20002234 	.word	0x20002234
 8007e2c:	20002238 	.word	0x20002238
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <prvGetNextExpireTime+0x44>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <prvGetNextExpireTime+0x44>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	e001      	b.n	8007e6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20002230 	.word	0x20002230

08007e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e84:	f7ff fa86 	bl	8007394 <xTaskGetTickCount>
 8007e88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <prvSampleTimeNow+0x3c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d205      	bcs.n	8007ea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e94:	f000 f908 	bl	80080a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e002      	b.n	8007ea6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ea6:	4a04      	ldr	r2, [pc, #16]	; (8007eb8 <prvSampleTimeNow+0x3c>)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20002240 	.word	0x20002240

08007ebc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d812      	bhi.n	8007f08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	1ad2      	subs	r2, r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d302      	bcc.n	8007ef6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e01b      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ef6:	4b10      	ldr	r3, [pc, #64]	; (8007f38 <prvInsertTimerInActiveList+0x7c>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7fe f965 	bl	80061d0 <vListInsert>
 8007f06:	e012      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d206      	bcs.n	8007f1e <prvInsertTimerInActiveList+0x62>
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e007      	b.n	8007f2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <prvInsertTimerInActiveList+0x80>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fe f951 	bl	80061d0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f2e:	697b      	ldr	r3, [r7, #20]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20002234 	.word	0x20002234
 8007f3c:	20002230 	.word	0x20002230

08007f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08e      	sub	sp, #56	; 0x38
 8007f44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f46:	e09d      	b.n	8008084 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da18      	bge.n	8007f80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	3304      	adds	r3, #4
 8007f52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10a      	bne.n	8007f70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	61fb      	str	r3, [r7, #28]
}
 8007f6c:	bf00      	nop
 8007f6e:	e7fe      	b.n	8007f6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	6850      	ldr	r0, [r2, #4]
 8007f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f7a:	6892      	ldr	r2, [r2, #8]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	db7d      	blt.n	8008082 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	3304      	adds	r3, #4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe f952 	bl	8006240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff ff6c 	bl	8007e7c <prvSampleTimeNow>
 8007fa4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b09      	cmp	r3, #9
 8007faa:	d86b      	bhi.n	8008084 <prvProcessReceivedCommands+0x144>
 8007fac:	a201      	add	r2, pc, #4	; (adr r2, 8007fb4 <prvProcessReceivedCommands+0x74>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fdd 	.word	0x08007fdd
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007fdd 	.word	0x08007fdd
 8007fc0:	08008085 	.word	0x08008085
 8007fc4:	08008039 	.word	0x08008039
 8007fc8:	08008071 	.word	0x08008071
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08007fdd 	.word	0x08007fdd
 8007fd4:	08008085 	.word	0x08008085
 8007fd8:	08008039 	.word	0x08008039
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	18d1      	adds	r1, r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fea:	f7ff ff67 	bl	8007ebc <prvInsertTimerInActiveList>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d047      	beq.n	8008084 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ffa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d13f      	bne.n	8008084 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	441a      	add	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	2300      	movs	r3, #0
 8008012:	2100      	movs	r1, #0
 8008014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008016:	f7ff fe1f 	bl	8007c58 <xTimerGenericCommand>
 800801a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d130      	bne.n	8008084 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	61bb      	str	r3, [r7, #24]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	699a      	ldr	r2, [r3, #24]
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	18d1      	adds	r1, r2, r3
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800806a:	f7ff ff27 	bl	8007ebc <prvInsertTimerInActiveList>
					break;
 800806e:	e009      	b.n	8008084 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800807a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800807c:	f000 fb6a 	bl	8008754 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008080:	e000      	b.n	8008084 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008082:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008084:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <prvProcessReceivedCommands+0x164>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	1d39      	adds	r1, r7, #4
 800808a:	2200      	movs	r2, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fbd7 	bl	8006840 <xQueueReceive>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	f47f af57 	bne.w	8007f48 <prvProcessReceivedCommands+0x8>
	}
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	3730      	adds	r7, #48	; 0x30
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20002238 	.word	0x20002238

080080a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080ae:	e045      	b.n	800813c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080b0:	4b2c      	ldr	r3, [pc, #176]	; (8008164 <prvSwitchTimerLists+0xbc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ba:	4b2a      	ldr	r3, [pc, #168]	; (8008164 <prvSwitchTimerLists+0xbc>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe f8b9 	bl	8006240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d12e      	bne.n	800813c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d90e      	bls.n	800810e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <prvSwitchTimerLists+0xbc>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe f862 	bl	80061d0 <vListInsert>
 800810c:	e016      	b.n	800813c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800810e:	2300      	movs	r3, #0
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	2100      	movs	r1, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fd9d 	bl	8007c58 <xTimerGenericCommand>
 800811e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	603b      	str	r3, [r7, #0]
}
 8008138:	bf00      	nop
 800813a:	e7fe      	b.n	800813a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800813c:	4b09      	ldr	r3, [pc, #36]	; (8008164 <prvSwitchTimerLists+0xbc>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1b4      	bne.n	80080b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <prvSwitchTimerLists+0xbc>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <prvSwitchTimerLists+0xc0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a04      	ldr	r2, [pc, #16]	; (8008164 <prvSwitchTimerLists+0xbc>)
 8008152:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008154:	4a04      	ldr	r2, [pc, #16]	; (8008168 <prvSwitchTimerLists+0xc0>)
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6013      	str	r3, [r2, #0]
}
 800815a:	bf00      	nop
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20002230 	.word	0x20002230
 8008168:	20002234 	.word	0x20002234

0800816c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008172:	f000 f92b 	bl	80083cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008176:	4b15      	ldr	r3, [pc, #84]	; (80081cc <prvCheckForValidListAndQueue+0x60>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d120      	bne.n	80081c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800817e:	4814      	ldr	r0, [pc, #80]	; (80081d0 <prvCheckForValidListAndQueue+0x64>)
 8008180:	f7fd ffd8 	bl	8006134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008184:	4813      	ldr	r0, [pc, #76]	; (80081d4 <prvCheckForValidListAndQueue+0x68>)
 8008186:	f7fd ffd5 	bl	8006134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800818a:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <prvCheckForValidListAndQueue+0x6c>)
 800818c:	4a10      	ldr	r2, [pc, #64]	; (80081d0 <prvCheckForValidListAndQueue+0x64>)
 800818e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008190:	4b12      	ldr	r3, [pc, #72]	; (80081dc <prvCheckForValidListAndQueue+0x70>)
 8008192:	4a10      	ldr	r2, [pc, #64]	; (80081d4 <prvCheckForValidListAndQueue+0x68>)
 8008194:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008196:	2300      	movs	r3, #0
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <prvCheckForValidListAndQueue+0x74>)
 800819c:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <prvCheckForValidListAndQueue+0x78>)
 800819e:	2110      	movs	r1, #16
 80081a0:	200a      	movs	r0, #10
 80081a2:	f7fe f8df 	bl	8006364 <xQueueGenericCreateStatic>
 80081a6:	4603      	mov	r3, r0
 80081a8:	4a08      	ldr	r2, [pc, #32]	; (80081cc <prvCheckForValidListAndQueue+0x60>)
 80081aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081ac:	4b07      	ldr	r3, [pc, #28]	; (80081cc <prvCheckForValidListAndQueue+0x60>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081b4:	4b05      	ldr	r3, [pc, #20]	; (80081cc <prvCheckForValidListAndQueue+0x60>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	490b      	ldr	r1, [pc, #44]	; (80081e8 <prvCheckForValidListAndQueue+0x7c>)
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fe fdb0 	bl	8006d20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081c0:	f000 f934 	bl	800842c <vPortExitCritical>
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20002238 	.word	0x20002238
 80081d0:	20002208 	.word	0x20002208
 80081d4:	2000221c 	.word	0x2000221c
 80081d8:	20002230 	.word	0x20002230
 80081dc:	20002234 	.word	0x20002234
 80081e0:	200022e4 	.word	0x200022e4
 80081e4:	20002244 	.word	0x20002244
 80081e8:	0800d33c 	.word	0x0800d33c

080081ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3b04      	subs	r3, #4
 80081fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3b04      	subs	r3, #4
 800820a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f023 0201 	bic.w	r2, r3, #1
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3b04      	subs	r3, #4
 800821a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800821c:	4a08      	ldr	r2, [pc, #32]	; (8008240 <pxPortInitialiseStack+0x54>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3b14      	subs	r3, #20
 8008226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3b20      	subs	r3, #32
 8008232:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008234:	68fb      	ldr	r3, [r7, #12]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	bc80      	pop	{r7}
 800823e:	4770      	bx	lr
 8008240:	08008245 	.word	0x08008245

08008244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800824a:	2300      	movs	r3, #0
 800824c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <prvTaskExitError+0x54>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d00a      	beq.n	800826e <prvTaskExitError+0x2a>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	60fb      	str	r3, [r7, #12]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <prvTaskExitError+0x28>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60bb      	str	r3, [r7, #8]
}
 8008280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008282:	bf00      	nop
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0fc      	beq.n	8008284 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000018 	.word	0x20000018
 800829c:	00000000 	.word	0x00000000

080082a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082a0:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <pxCurrentTCBConst2>)
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	6808      	ldr	r0, [r1, #0]
 80082a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082aa:	f380 8809 	msr	PSP, r0
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f04f 0000 	mov.w	r0, #0
 80082b6:	f380 8811 	msr	BASEPRI, r0
 80082ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80082be:	4770      	bx	lr

080082c0 <pxCurrentTCBConst2>:
 80082c0:	20001d08 	.word	0x20001d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80082c8:	4806      	ldr	r0, [pc, #24]	; (80082e4 <prvPortStartFirstTask+0x1c>)
 80082ca:	6800      	ldr	r0, [r0, #0]
 80082cc:	6800      	ldr	r0, [r0, #0]
 80082ce:	f380 8808 	msr	MSP, r0
 80082d2:	b662      	cpsie	i
 80082d4:	b661      	cpsie	f
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	df00      	svc	0
 80082e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082e2:	bf00      	nop
 80082e4:	e000ed08 	.word	0xe000ed08

080082e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082ee:	4b32      	ldr	r3, [pc, #200]	; (80083b8 <xPortStartScheduler+0xd0>)
 80082f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008310:	b2da      	uxtb	r2, r3
 8008312:	4b2a      	ldr	r3, [pc, #168]	; (80083bc <xPortStartScheduler+0xd4>)
 8008314:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008316:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008318:	2207      	movs	r2, #7
 800831a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800831c:	e009      	b.n	8008332 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800831e:	4b28      	ldr	r3, [pc, #160]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3b01      	subs	r3, #1
 8008324:	4a26      	ldr	r2, [pc, #152]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008326:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	b2db      	uxtb	r3, r3
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	b2db      	uxtb	r3, r3
 8008336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833a:	2b80      	cmp	r3, #128	; 0x80
 800833c:	d0ef      	beq.n	800831e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800833e:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f1c3 0307 	rsb	r3, r3, #7
 8008346:	2b04      	cmp	r3, #4
 8008348:	d00a      	beq.n	8008360 <xPortStartScheduler+0x78>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	60bb      	str	r3, [r7, #8]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008360:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008368:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800836a:	4b15      	ldr	r3, [pc, #84]	; (80083c0 <xPortStartScheduler+0xd8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008372:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <xPortStartScheduler+0xd8>)
 8008374:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800837e:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <xPortStartScheduler+0xdc>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a10      	ldr	r2, [pc, #64]	; (80083c4 <xPortStartScheduler+0xdc>)
 8008384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008388:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <xPortStartScheduler+0xdc>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <xPortStartScheduler+0xdc>)
 8008390:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008394:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008396:	f000 f8b9 	bl	800850c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <xPortStartScheduler+0xe0>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083a0:	f7ff ff92 	bl	80082c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083a4:	f7ff f8c2 	bl	800752c <vTaskSwitchContext>
	prvTaskExitError();
 80083a8:	f7ff ff4c 	bl	8008244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000e400 	.word	0xe000e400
 80083bc:	20002334 	.word	0x20002334
 80083c0:	20002338 	.word	0x20002338
 80083c4:	e000ed20 	.word	0xe000ed20
 80083c8:	20000018 	.word	0x20000018

080083cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	607b      	str	r3, [r7, #4]
}
 80083e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083e6:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <vPortEnterCritical+0x58>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	4a0d      	ldr	r2, [pc, #52]	; (8008424 <vPortEnterCritical+0x58>)
 80083ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083f0:	4b0c      	ldr	r3, [pc, #48]	; (8008424 <vPortEnterCritical+0x58>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d10f      	bne.n	8008418 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083f8:	4b0b      	ldr	r3, [pc, #44]	; (8008428 <vPortEnterCritical+0x5c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <vPortEnterCritical+0x4c>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	603b      	str	r3, [r7, #0]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <vPortEnterCritical+0x4a>
	}
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000018 	.word	0x20000018
 8008428:	e000ed04 	.word	0xe000ed04

0800842c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008432:	4b11      	ldr	r3, [pc, #68]	; (8008478 <vPortExitCritical+0x4c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <vPortExitCritical+0x24>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	607b      	str	r3, [r7, #4]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <vPortExitCritical+0x4c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3b01      	subs	r3, #1
 8008456:	4a08      	ldr	r2, [pc, #32]	; (8008478 <vPortExitCritical+0x4c>)
 8008458:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <vPortExitCritical+0x4c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <vPortExitCritical+0x42>
 8008462:	2300      	movs	r3, #0
 8008464:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	f383 8811 	msr	BASEPRI, r3
}
 800846c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr
 8008478:	20000018 	.word	0x20000018
 800847c:	00000000 	.word	0x00000000

08008480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008480:	f3ef 8009 	mrs	r0, PSP
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <pxCurrentTCBConst>)
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008490:	6010      	str	r0, [r2, #0]
 8008492:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008496:	f04f 0050 	mov.w	r0, #80	; 0x50
 800849a:	f380 8811 	msr	BASEPRI, r0
 800849e:	f7ff f845 	bl	800752c <vTaskSwitchContext>
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f380 8811 	msr	BASEPRI, r0
 80084aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	6808      	ldr	r0, [r1, #0]
 80084b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084b6:	f380 8809 	msr	PSP, r0
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	4770      	bx	lr

080084c0 <pxCurrentTCBConst>:
 80084c0:	20001d08 	.word	0x20001d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
}
 80084e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084e2:	f7fe ff65 	bl	80073b0 <xTaskIncrementTick>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <SysTick_Handler+0x40>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f383 8811 	msr	BASEPRI, r3
}
 80084fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <vPortSetupTimerInterrupt+0x30>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <vPortSetupTimerInterrupt+0x34>)
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <vPortSetupTimerInterrupt+0x38>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a09      	ldr	r2, [pc, #36]	; (8008548 <vPortSetupTimerInterrupt+0x3c>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	099b      	lsrs	r3, r3, #6
 8008528:	4a08      	ldr	r2, [pc, #32]	; (800854c <vPortSetupTimerInterrupt+0x40>)
 800852a:	3b01      	subs	r3, #1
 800852c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <vPortSetupTimerInterrupt+0x30>)
 8008530:	2207      	movs	r2, #7
 8008532:	601a      	str	r2, [r3, #0]
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr
 800853c:	e000e010 	.word	0xe000e010
 8008540:	e000e018 	.word	0xe000e018
 8008544:	2000000c 	.word	0x2000000c
 8008548:	10624dd3 	.word	0x10624dd3
 800854c:	e000e014 	.word	0xe000e014

08008550 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008556:	f3ef 8305 	mrs	r3, IPSR
 800855a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d914      	bls.n	800858c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008562:	4a16      	ldr	r2, [pc, #88]	; (80085bc <vPortValidateInterruptPriority+0x6c>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800856c:	4b14      	ldr	r3, [pc, #80]	; (80085c0 <vPortValidateInterruptPriority+0x70>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	7afa      	ldrb	r2, [r7, #11]
 8008572:	429a      	cmp	r2, r3
 8008574:	d20a      	bcs.n	800858c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	607b      	str	r3, [r7, #4]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <vPortValidateInterruptPriority+0x74>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <vPortValidateInterruptPriority+0x78>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d90a      	bls.n	80085b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	603b      	str	r3, [r7, #0]
}
 80085ae:	bf00      	nop
 80085b0:	e7fe      	b.n	80085b0 <vPortValidateInterruptPriority+0x60>
	}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr
 80085bc:	e000e3f0 	.word	0xe000e3f0
 80085c0:	20002334 	.word	0x20002334
 80085c4:	e000ed0c 	.word	0xe000ed0c
 80085c8:	20002338 	.word	0x20002338

080085cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085d8:	f7fe fe30 	bl	800723c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085dc:	4b58      	ldr	r3, [pc, #352]	; (8008740 <pvPortMalloc+0x174>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085e4:	f000 f910 	bl	8008808 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085e8:	4b56      	ldr	r3, [pc, #344]	; (8008744 <pvPortMalloc+0x178>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 808e 	bne.w	8008712 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01d      	beq.n	8008638 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085fc:	2208      	movs	r2, #8
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	2b00      	cmp	r3, #0
 800860c:	d014      	beq.n	8008638 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f023 0307 	bic.w	r3, r3, #7
 8008614:	3308      	adds	r3, #8
 8008616:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f003 0307 	and.w	r3, r3, #7
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <pvPortMalloc+0x6c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	617b      	str	r3, [r7, #20]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d069      	beq.n	8008712 <pvPortMalloc+0x146>
 800863e:	4b42      	ldr	r3, [pc, #264]	; (8008748 <pvPortMalloc+0x17c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d864      	bhi.n	8008712 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008648:	4b40      	ldr	r3, [pc, #256]	; (800874c <pvPortMalloc+0x180>)
 800864a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800864c:	4b3f      	ldr	r3, [pc, #252]	; (800874c <pvPortMalloc+0x180>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008652:	e004      	b.n	800865e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	429a      	cmp	r2, r3
 8008666:	d903      	bls.n	8008670 <pvPortMalloc+0xa4>
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f1      	bne.n	8008654 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008670:	4b33      	ldr	r3, [pc, #204]	; (8008740 <pvPortMalloc+0x174>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008676:	429a      	cmp	r2, r3
 8008678:	d04b      	beq.n	8008712 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2208      	movs	r2, #8
 8008680:	4413      	add	r3, r2
 8008682:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	2308      	movs	r3, #8
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	429a      	cmp	r2, r3
 800869a:	d91f      	bls.n	80086dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800869c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <pvPortMalloc+0xf8>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	613b      	str	r3, [r7, #16]
}
 80086c0:	bf00      	nop
 80086c2:	e7fe      	b.n	80086c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086d6:	69b8      	ldr	r0, [r7, #24]
 80086d8:	f000 f8f8 	bl	80088cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086dc:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <pvPortMalloc+0x17c>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	4a18      	ldr	r2, [pc, #96]	; (8008748 <pvPortMalloc+0x17c>)
 80086e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ea:	4b17      	ldr	r3, [pc, #92]	; (8008748 <pvPortMalloc+0x17c>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b18      	ldr	r3, [pc, #96]	; (8008750 <pvPortMalloc+0x184>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d203      	bcs.n	80086fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <pvPortMalloc+0x17c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a15      	ldr	r2, [pc, #84]	; (8008750 <pvPortMalloc+0x184>)
 80086fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <pvPortMalloc+0x178>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	431a      	orrs	r2, r3
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008712:	f7fe fda1 	bl	8007258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <pvPortMalloc+0x16a>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <pvPortMalloc+0x168>
	return pvReturn;
 8008736:	69fb      	ldr	r3, [r7, #28]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3728      	adds	r7, #40	; 0x28
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20002f44 	.word	0x20002f44
 8008744:	20002f50 	.word	0x20002f50
 8008748:	20002f48 	.word	0x20002f48
 800874c:	20002f3c 	.word	0x20002f3c
 8008750:	20002f4c 	.word	0x20002f4c

08008754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d048      	beq.n	80087f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008766:	2308      	movs	r3, #8
 8008768:	425b      	negs	r3, r3
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4413      	add	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	4b21      	ldr	r3, [pc, #132]	; (8008800 <vPortFree+0xac>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <vPortFree+0x44>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	60fb      	str	r3, [r7, #12]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <vPortFree+0x62>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60bb      	str	r3, [r7, #8]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	4b11      	ldr	r3, [pc, #68]	; (8008800 <vPortFree+0xac>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4013      	ands	r3, r2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d019      	beq.n	80087f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d115      	bne.n	80087f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <vPortFree+0xac>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	43db      	mvns	r3, r3
 80087d6:	401a      	ands	r2, r3
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087dc:	f7fe fd2e 	bl	800723c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <vPortFree+0xb0>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4413      	add	r3, r2
 80087ea:	4a06      	ldr	r2, [pc, #24]	; (8008804 <vPortFree+0xb0>)
 80087ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ee:	6938      	ldr	r0, [r7, #16]
 80087f0:	f000 f86c 	bl	80088cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087f4:	f7fe fd30 	bl	8007258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087f8:	bf00      	nop
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20002f50 	.word	0x20002f50
 8008804:	20002f48 	.word	0x20002f48

08008808 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800880e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008812:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008814:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <prvHeapInit+0xac>)
 8008816:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00c      	beq.n	800883c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3307      	adds	r3, #7
 8008826:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0307 	bic.w	r3, r3, #7
 800882e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	4a1f      	ldr	r2, [pc, #124]	; (80088b4 <prvHeapInit+0xac>)
 8008838:	4413      	add	r3, r2
 800883a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008840:	4a1d      	ldr	r2, [pc, #116]	; (80088b8 <prvHeapInit+0xb0>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008846:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <prvHeapInit+0xb0>)
 8008848:	2200      	movs	r2, #0
 800884a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008854:	2208      	movs	r2, #8
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f023 0307 	bic.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a15      	ldr	r2, [pc, #84]	; (80088bc <prvHeapInit+0xb4>)
 8008868:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800886a:	4b14      	ldr	r3, [pc, #80]	; (80088bc <prvHeapInit+0xb4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <prvHeapInit+0xb4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008888:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <prvHeapInit+0xb4>)
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4a0a      	ldr	r2, [pc, #40]	; (80088c0 <prvHeapInit+0xb8>)
 8008896:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	4a09      	ldr	r2, [pc, #36]	; (80088c4 <prvHeapInit+0xbc>)
 800889e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <prvHeapInit+0xc0>)
 80088a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088a6:	601a      	str	r2, [r3, #0]
}
 80088a8:	bf00      	nop
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	2000233c 	.word	0x2000233c
 80088b8:	20002f3c 	.word	0x20002f3c
 80088bc:	20002f44 	.word	0x20002f44
 80088c0:	20002f4c 	.word	0x20002f4c
 80088c4:	20002f48 	.word	0x20002f48
 80088c8:	20002f50 	.word	0x20002f50

080088cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088d4:	4b27      	ldr	r3, [pc, #156]	; (8008974 <prvInsertBlockIntoFreeList+0xa8>)
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e002      	b.n	80088e0 <prvInsertBlockIntoFreeList+0x14>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d8f7      	bhi.n	80088da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	4413      	add	r3, r2
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d108      	bne.n	800890e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	441a      	add	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	d118      	bne.n	8008954 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <prvInsertBlockIntoFreeList+0xac>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	429a      	cmp	r2, r3
 800892c:	d00d      	beq.n	800894a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	441a      	add	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e008      	b.n	800895c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800894a:	4b0b      	ldr	r3, [pc, #44]	; (8008978 <prvInsertBlockIntoFreeList+0xac>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e003      	b.n	800895c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d002      	beq.n	800896a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr
 8008974:	20002f3c 	.word	0x20002f3c
 8008978:	20002f44 	.word	0x20002f44

0800897c <__errno>:
 800897c:	4b01      	ldr	r3, [pc, #4]	; (8008984 <__errno+0x8>)
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	2000001c 	.word	0x2000001c

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	2600      	movs	r6, #0
 800898c:	4d0c      	ldr	r5, [pc, #48]	; (80089c0 <__libc_init_array+0x38>)
 800898e:	4c0d      	ldr	r4, [pc, #52]	; (80089c4 <__libc_init_array+0x3c>)
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	42a6      	cmp	r6, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	f004 fc5a 	bl	800d250 <_init>
 800899c:	2600      	movs	r6, #0
 800899e:	4d0a      	ldr	r5, [pc, #40]	; (80089c8 <__libc_init_array+0x40>)
 80089a0:	4c0a      	ldr	r4, [pc, #40]	; (80089cc <__libc_init_array+0x44>)
 80089a2:	1b64      	subs	r4, r4, r5
 80089a4:	10a4      	asrs	r4, r4, #2
 80089a6:	42a6      	cmp	r6, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b0:	4798      	blx	r3
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ba:	4798      	blx	r3
 80089bc:	3601      	adds	r6, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	0800e664 	.word	0x0800e664
 80089c4:	0800e664 	.word	0x0800e664
 80089c8:	0800e664 	.word	0x0800e664
 80089cc:	0800e668 	.word	0x0800e668

080089d0 <memcpy>:
 80089d0:	440a      	add	r2, r1
 80089d2:	4291      	cmp	r1, r2
 80089d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089d8:	d100      	bne.n	80089dc <memcpy+0xc>
 80089da:	4770      	bx	lr
 80089dc:	b510      	push	{r4, lr}
 80089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089e2:	4291      	cmp	r1, r2
 80089e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089e8:	d1f9      	bne.n	80089de <memcpy+0xe>
 80089ea:	bd10      	pop	{r4, pc}

080089ec <memset>:
 80089ec:	4603      	mov	r3, r0
 80089ee:	4402      	add	r2, r0
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d100      	bne.n	80089f6 <memset+0xa>
 80089f4:	4770      	bx	lr
 80089f6:	f803 1b01 	strb.w	r1, [r3], #1
 80089fa:	e7f9      	b.n	80089f0 <memset+0x4>

080089fc <__cvt>:
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a02:	461f      	mov	r7, r3
 8008a04:	bfbb      	ittet	lt
 8008a06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a0a:	461f      	movlt	r7, r3
 8008a0c:	2300      	movge	r3, #0
 8008a0e:	232d      	movlt	r3, #45	; 0x2d
 8008a10:	b088      	sub	sp, #32
 8008a12:	4614      	mov	r4, r2
 8008a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a18:	7013      	strb	r3, [r2, #0]
 8008a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a20:	f023 0820 	bic.w	r8, r3, #32
 8008a24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a28:	d005      	beq.n	8008a36 <__cvt+0x3a>
 8008a2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a2e:	d100      	bne.n	8008a32 <__cvt+0x36>
 8008a30:	3501      	adds	r5, #1
 8008a32:	2302      	movs	r3, #2
 8008a34:	e000      	b.n	8008a38 <__cvt+0x3c>
 8008a36:	2303      	movs	r3, #3
 8008a38:	aa07      	add	r2, sp, #28
 8008a3a:	9204      	str	r2, [sp, #16]
 8008a3c:	aa06      	add	r2, sp, #24
 8008a3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008a42:	e9cd 3500 	strd	r3, r5, [sp]
 8008a46:	4622      	mov	r2, r4
 8008a48:	463b      	mov	r3, r7
 8008a4a:	f001 fd8d 	bl	800a568 <_dtoa_r>
 8008a4e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a52:	4606      	mov	r6, r0
 8008a54:	d102      	bne.n	8008a5c <__cvt+0x60>
 8008a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a58:	07db      	lsls	r3, r3, #31
 8008a5a:	d522      	bpl.n	8008aa2 <__cvt+0xa6>
 8008a5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a60:	eb06 0905 	add.w	r9, r6, r5
 8008a64:	d110      	bne.n	8008a88 <__cvt+0x8c>
 8008a66:	7833      	ldrb	r3, [r6, #0]
 8008a68:	2b30      	cmp	r3, #48	; 0x30
 8008a6a:	d10a      	bne.n	8008a82 <__cvt+0x86>
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4620      	mov	r0, r4
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f7 ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8008a78:	b918      	cbnz	r0, 8008a82 <__cvt+0x86>
 8008a7a:	f1c5 0501 	rsb	r5, r5, #1
 8008a7e:	f8ca 5000 	str.w	r5, [sl]
 8008a82:	f8da 3000 	ldr.w	r3, [sl]
 8008a86:	4499      	add	r9, r3
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f7 ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008a94:	b108      	cbz	r0, 8008a9a <__cvt+0x9e>
 8008a96:	f8cd 901c 	str.w	r9, [sp, #28]
 8008a9a:	2230      	movs	r2, #48	; 0x30
 8008a9c:	9b07      	ldr	r3, [sp, #28]
 8008a9e:	454b      	cmp	r3, r9
 8008aa0:	d307      	bcc.n	8008ab2 <__cvt+0xb6>
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008aa8:	1b9b      	subs	r3, r3, r6
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	b008      	add	sp, #32
 8008aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab2:	1c59      	adds	r1, r3, #1
 8008ab4:	9107      	str	r1, [sp, #28]
 8008ab6:	701a      	strb	r2, [r3, #0]
 8008ab8:	e7f0      	b.n	8008a9c <__cvt+0xa0>

08008aba <__exponent>:
 8008aba:	4603      	mov	r3, r0
 8008abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	f803 2b02 	strb.w	r2, [r3], #2
 8008ac4:	bfb6      	itet	lt
 8008ac6:	222d      	movlt	r2, #45	; 0x2d
 8008ac8:	222b      	movge	r2, #43	; 0x2b
 8008aca:	4249      	neglt	r1, r1
 8008acc:	2909      	cmp	r1, #9
 8008ace:	7042      	strb	r2, [r0, #1]
 8008ad0:	dd2b      	ble.n	8008b2a <__exponent+0x70>
 8008ad2:	f10d 0407 	add.w	r4, sp, #7
 8008ad6:	46a4      	mov	ip, r4
 8008ad8:	270a      	movs	r7, #10
 8008ada:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ade:	460a      	mov	r2, r1
 8008ae0:	46a6      	mov	lr, r4
 8008ae2:	fb07 1516 	mls	r5, r7, r6, r1
 8008ae6:	2a63      	cmp	r2, #99	; 0x63
 8008ae8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008aec:	4631      	mov	r1, r6
 8008aee:	f104 34ff 	add.w	r4, r4, #4294967295
 8008af2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008af6:	dcf0      	bgt.n	8008ada <__exponent+0x20>
 8008af8:	3130      	adds	r1, #48	; 0x30
 8008afa:	f1ae 0502 	sub.w	r5, lr, #2
 8008afe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b02:	4629      	mov	r1, r5
 8008b04:	1c44      	adds	r4, r0, #1
 8008b06:	4561      	cmp	r1, ip
 8008b08:	d30a      	bcc.n	8008b20 <__exponent+0x66>
 8008b0a:	f10d 0209 	add.w	r2, sp, #9
 8008b0e:	eba2 020e 	sub.w	r2, r2, lr
 8008b12:	4565      	cmp	r5, ip
 8008b14:	bf88      	it	hi
 8008b16:	2200      	movhi	r2, #0
 8008b18:	4413      	add	r3, r2
 8008b1a:	1a18      	subs	r0, r3, r0
 8008b1c:	b003      	add	sp, #12
 8008b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b24:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b28:	e7ed      	b.n	8008b06 <__exponent+0x4c>
 8008b2a:	2330      	movs	r3, #48	; 0x30
 8008b2c:	3130      	adds	r1, #48	; 0x30
 8008b2e:	7083      	strb	r3, [r0, #2]
 8008b30:	70c1      	strb	r1, [r0, #3]
 8008b32:	1d03      	adds	r3, r0, #4
 8008b34:	e7f1      	b.n	8008b1a <__exponent+0x60>
	...

08008b38 <_printf_float>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	b091      	sub	sp, #68	; 0x44
 8008b3e:	460c      	mov	r4, r1
 8008b40:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008b44:	4616      	mov	r6, r2
 8008b46:	461f      	mov	r7, r3
 8008b48:	4605      	mov	r5, r0
 8008b4a:	f002 fe61 	bl	800b810 <_localeconv_r>
 8008b4e:	6803      	ldr	r3, [r0, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	9309      	str	r3, [sp, #36]	; 0x24
 8008b54:	f7f7 fafc 	bl	8000150 <strlen>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b60:	900a      	str	r0, [sp, #40]	; 0x28
 8008b62:	3307      	adds	r3, #7
 8008b64:	f023 0307 	bic.w	r3, r3, #7
 8008b68:	f103 0208 	add.w	r2, r3, #8
 8008b6c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008b70:	f8d4 b000 	ldr.w	fp, [r4]
 8008b74:	f8c8 2000 	str.w	r2, [r8]
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b80:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008b84:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008b88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8e:	4640      	mov	r0, r8
 8008b90:	4b9c      	ldr	r3, [pc, #624]	; (8008e04 <_printf_float+0x2cc>)
 8008b92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b94:	f7f7 ff3a 	bl	8000a0c <__aeabi_dcmpun>
 8008b98:	bb70      	cbnz	r0, 8008bf8 <_printf_float+0xc0>
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	4b98      	ldr	r3, [pc, #608]	; (8008e04 <_printf_float+0x2cc>)
 8008ba2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ba4:	f7f7 ff14 	bl	80009d0 <__aeabi_dcmple>
 8008ba8:	bb30      	cbnz	r0, 8008bf8 <_printf_float+0xc0>
 8008baa:	2200      	movs	r2, #0
 8008bac:	2300      	movs	r3, #0
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4651      	mov	r1, sl
 8008bb2:	f7f7 ff03 	bl	80009bc <__aeabi_dcmplt>
 8008bb6:	b110      	cbz	r0, 8008bbe <_printf_float+0x86>
 8008bb8:	232d      	movs	r3, #45	; 0x2d
 8008bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbe:	4b92      	ldr	r3, [pc, #584]	; (8008e08 <_printf_float+0x2d0>)
 8008bc0:	4892      	ldr	r0, [pc, #584]	; (8008e0c <_printf_float+0x2d4>)
 8008bc2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008bc6:	bf94      	ite	ls
 8008bc8:	4698      	movls	r8, r3
 8008bca:	4680      	movhi	r8, r0
 8008bcc:	2303      	movs	r3, #3
 8008bce:	f04f 0a00 	mov.w	sl, #0
 8008bd2:	6123      	str	r3, [r4, #16]
 8008bd4:	f02b 0304 	bic.w	r3, fp, #4
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	4633      	mov	r3, r6
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	9700      	str	r7, [sp, #0]
 8008be2:	aa0f      	add	r2, sp, #60	; 0x3c
 8008be4:	f000 f9d4 	bl	8008f90 <_printf_common>
 8008be8:	3001      	adds	r0, #1
 8008bea:	f040 8090 	bne.w	8008d0e <_printf_float+0x1d6>
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	b011      	add	sp, #68	; 0x44
 8008bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf8:	4642      	mov	r2, r8
 8008bfa:	4653      	mov	r3, sl
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4651      	mov	r1, sl
 8008c00:	f7f7 ff04 	bl	8000a0c <__aeabi_dcmpun>
 8008c04:	b148      	cbz	r0, 8008c1a <_printf_float+0xe2>
 8008c06:	f1ba 0f00 	cmp.w	sl, #0
 8008c0a:	bfb8      	it	lt
 8008c0c:	232d      	movlt	r3, #45	; 0x2d
 8008c0e:	4880      	ldr	r0, [pc, #512]	; (8008e10 <_printf_float+0x2d8>)
 8008c10:	bfb8      	it	lt
 8008c12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c16:	4b7f      	ldr	r3, [pc, #508]	; (8008e14 <_printf_float+0x2dc>)
 8008c18:	e7d3      	b.n	8008bc2 <_printf_float+0x8a>
 8008c1a:	6863      	ldr	r3, [r4, #4]
 8008c1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	d142      	bne.n	8008caa <_printf_float+0x172>
 8008c24:	2306      	movs	r3, #6
 8008c26:	6063      	str	r3, [r4, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	9206      	str	r2, [sp, #24]
 8008c2c:	aa0e      	add	r2, sp, #56	; 0x38
 8008c2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c32:	aa0d      	add	r2, sp, #52	; 0x34
 8008c34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008c38:	9203      	str	r2, [sp, #12]
 8008c3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008c3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	4642      	mov	r2, r8
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	4653      	mov	r3, sl
 8008c4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c50:	f7ff fed4 	bl	80089fc <__cvt>
 8008c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c56:	4680      	mov	r8, r0
 8008c58:	2947      	cmp	r1, #71	; 0x47
 8008c5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c5c:	d108      	bne.n	8008c70 <_printf_float+0x138>
 8008c5e:	1cc8      	adds	r0, r1, #3
 8008c60:	db02      	blt.n	8008c68 <_printf_float+0x130>
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	4299      	cmp	r1, r3
 8008c66:	dd40      	ble.n	8008cea <_printf_float+0x1b2>
 8008c68:	f1a9 0902 	sub.w	r9, r9, #2
 8008c6c:	fa5f f989 	uxtb.w	r9, r9
 8008c70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c74:	d81f      	bhi.n	8008cb6 <_printf_float+0x17e>
 8008c76:	464a      	mov	r2, r9
 8008c78:	3901      	subs	r1, #1
 8008c7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c7e:	910d      	str	r1, [sp, #52]	; 0x34
 8008c80:	f7ff ff1b 	bl	8008aba <__exponent>
 8008c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c86:	4682      	mov	sl, r0
 8008c88:	1813      	adds	r3, r2, r0
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	dc02      	bgt.n	8008c96 <_printf_float+0x15e>
 8008c90:	6822      	ldr	r2, [r4, #0]
 8008c92:	07d2      	lsls	r2, r2, #31
 8008c94:	d501      	bpl.n	8008c9a <_printf_float+0x162>
 8008c96:	3301      	adds	r3, #1
 8008c98:	6123      	str	r3, [r4, #16]
 8008c9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d09b      	beq.n	8008bda <_printf_float+0xa2>
 8008ca2:	232d      	movs	r3, #45	; 0x2d
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ca8:	e797      	b.n	8008bda <_printf_float+0xa2>
 8008caa:	2947      	cmp	r1, #71	; 0x47
 8008cac:	d1bc      	bne.n	8008c28 <_printf_float+0xf0>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1ba      	bne.n	8008c28 <_printf_float+0xf0>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e7b7      	b.n	8008c26 <_printf_float+0xee>
 8008cb6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008cba:	d118      	bne.n	8008cee <_printf_float+0x1b6>
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	dd0b      	ble.n	8008cda <_printf_float+0x1a2>
 8008cc2:	6121      	str	r1, [r4, #16]
 8008cc4:	b913      	cbnz	r3, 8008ccc <_printf_float+0x194>
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	07d0      	lsls	r0, r2, #31
 8008cca:	d502      	bpl.n	8008cd2 <_printf_float+0x19a>
 8008ccc:	3301      	adds	r3, #1
 8008cce:	440b      	add	r3, r1
 8008cd0:	6123      	str	r3, [r4, #16]
 8008cd2:	f04f 0a00 	mov.w	sl, #0
 8008cd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cd8:	e7df      	b.n	8008c9a <_printf_float+0x162>
 8008cda:	b913      	cbnz	r3, 8008ce2 <_printf_float+0x1aa>
 8008cdc:	6822      	ldr	r2, [r4, #0]
 8008cde:	07d2      	lsls	r2, r2, #31
 8008ce0:	d501      	bpl.n	8008ce6 <_printf_float+0x1ae>
 8008ce2:	3302      	adds	r3, #2
 8008ce4:	e7f4      	b.n	8008cd0 <_printf_float+0x198>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e7f2      	b.n	8008cd0 <_printf_float+0x198>
 8008cea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	db05      	blt.n	8008d00 <_printf_float+0x1c8>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	6121      	str	r1, [r4, #16]
 8008cf8:	07d8      	lsls	r0, r3, #31
 8008cfa:	d5ea      	bpl.n	8008cd2 <_printf_float+0x19a>
 8008cfc:	1c4b      	adds	r3, r1, #1
 8008cfe:	e7e7      	b.n	8008cd0 <_printf_float+0x198>
 8008d00:	2900      	cmp	r1, #0
 8008d02:	bfcc      	ite	gt
 8008d04:	2201      	movgt	r2, #1
 8008d06:	f1c1 0202 	rsble	r2, r1, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	e7e0      	b.n	8008cd0 <_printf_float+0x198>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	055a      	lsls	r2, r3, #21
 8008d12:	d407      	bmi.n	8008d24 <_printf_float+0x1ec>
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	4642      	mov	r2, r8
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d12b      	bne.n	8008d7a <_printf_float+0x242>
 8008d22:	e764      	b.n	8008bee <_printf_float+0xb6>
 8008d24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d28:	f240 80dd 	bls.w	8008ee6 <_printf_float+0x3ae>
 8008d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d30:	2200      	movs	r2, #0
 8008d32:	2300      	movs	r3, #0
 8008d34:	f7f7 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d033      	beq.n	8008da4 <_printf_float+0x26c>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	4a35      	ldr	r2, [pc, #212]	; (8008e18 <_printf_float+0x2e0>)
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f af51 	beq.w	8008bee <_printf_float+0xb6>
 8008d4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d50:	429a      	cmp	r2, r3
 8008d52:	db02      	blt.n	8008d5a <_printf_float+0x222>
 8008d54:	6823      	ldr	r3, [r4, #0]
 8008d56:	07d8      	lsls	r0, r3, #31
 8008d58:	d50f      	bpl.n	8008d7a <_printf_float+0x242>
 8008d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4628      	mov	r0, r5
 8008d62:	47b8      	blx	r7
 8008d64:	3001      	adds	r0, #1
 8008d66:	f43f af42 	beq.w	8008bee <_printf_float+0xb6>
 8008d6a:	f04f 0800 	mov.w	r8, #0
 8008d6e:	f104 091a 	add.w	r9, r4, #26
 8008d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d74:	3b01      	subs	r3, #1
 8008d76:	4543      	cmp	r3, r8
 8008d78:	dc09      	bgt.n	8008d8e <_printf_float+0x256>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	079b      	lsls	r3, r3, #30
 8008d7e:	f100 8102 	bmi.w	8008f86 <_printf_float+0x44e>
 8008d82:	68e0      	ldr	r0, [r4, #12]
 8008d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d86:	4298      	cmp	r0, r3
 8008d88:	bfb8      	it	lt
 8008d8a:	4618      	movlt	r0, r3
 8008d8c:	e731      	b.n	8008bf2 <_printf_float+0xba>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	464a      	mov	r2, r9
 8008d92:	4631      	mov	r1, r6
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b8      	blx	r7
 8008d98:	3001      	adds	r0, #1
 8008d9a:	f43f af28 	beq.w	8008bee <_printf_float+0xb6>
 8008d9e:	f108 0801 	add.w	r8, r8, #1
 8008da2:	e7e6      	b.n	8008d72 <_printf_float+0x23a>
 8008da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dc38      	bgt.n	8008e1c <_printf_float+0x2e4>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4631      	mov	r1, r6
 8008dae:	4628      	mov	r0, r5
 8008db0:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <_printf_float+0x2e0>)
 8008db2:	47b8      	blx	r7
 8008db4:	3001      	adds	r0, #1
 8008db6:	f43f af1a 	beq.w	8008bee <_printf_float+0xb6>
 8008dba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	d102      	bne.n	8008dc8 <_printf_float+0x290>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	07d9      	lsls	r1, r3, #31
 8008dc6:	d5d8      	bpl.n	8008d7a <_printf_float+0x242>
 8008dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dcc:	4631      	mov	r1, r6
 8008dce:	4628      	mov	r0, r5
 8008dd0:	47b8      	blx	r7
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	f43f af0b 	beq.w	8008bee <_printf_float+0xb6>
 8008dd8:	f04f 0900 	mov.w	r9, #0
 8008ddc:	f104 0a1a 	add.w	sl, r4, #26
 8008de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008de2:	425b      	negs	r3, r3
 8008de4:	454b      	cmp	r3, r9
 8008de6:	dc01      	bgt.n	8008dec <_printf_float+0x2b4>
 8008de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dea:	e794      	b.n	8008d16 <_printf_float+0x1de>
 8008dec:	2301      	movs	r3, #1
 8008dee:	4652      	mov	r2, sl
 8008df0:	4631      	mov	r1, r6
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	f43f aef9 	beq.w	8008bee <_printf_float+0xb6>
 8008dfc:	f109 0901 	add.w	r9, r9, #1
 8008e00:	e7ee      	b.n	8008de0 <_printf_float+0x2a8>
 8008e02:	bf00      	nop
 8008e04:	7fefffff 	.word	0x7fefffff
 8008e08:	0800e1c0 	.word	0x0800e1c0
 8008e0c:	0800e1c4 	.word	0x0800e1c4
 8008e10:	0800e1cc 	.word	0x0800e1cc
 8008e14:	0800e1c8 	.word	0x0800e1c8
 8008e18:	0800e1d0 	.word	0x0800e1d0
 8008e1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e20:	429a      	cmp	r2, r3
 8008e22:	bfa8      	it	ge
 8008e24:	461a      	movge	r2, r3
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	4691      	mov	r9, r2
 8008e2a:	dc37      	bgt.n	8008e9c <_printf_float+0x364>
 8008e2c:	f04f 0b00 	mov.w	fp, #0
 8008e30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e34:	f104 021a 	add.w	r2, r4, #26
 8008e38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e3c:	ebaa 0309 	sub.w	r3, sl, r9
 8008e40:	455b      	cmp	r3, fp
 8008e42:	dc33      	bgt.n	8008eac <_printf_float+0x374>
 8008e44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	db3b      	blt.n	8008ec4 <_printf_float+0x38c>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	07da      	lsls	r2, r3, #31
 8008e50:	d438      	bmi.n	8008ec4 <_printf_float+0x38c>
 8008e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008e56:	eba3 020a 	sub.w	r2, r3, sl
 8008e5a:	eba3 0901 	sub.w	r9, r3, r1
 8008e5e:	4591      	cmp	r9, r2
 8008e60:	bfa8      	it	ge
 8008e62:	4691      	movge	r9, r2
 8008e64:	f1b9 0f00 	cmp.w	r9, #0
 8008e68:	dc34      	bgt.n	8008ed4 <_printf_float+0x39c>
 8008e6a:	f04f 0800 	mov.w	r8, #0
 8008e6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e72:	f104 0a1a 	add.w	sl, r4, #26
 8008e76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	eba3 0309 	sub.w	r3, r3, r9
 8008e80:	4543      	cmp	r3, r8
 8008e82:	f77f af7a 	ble.w	8008d7a <_printf_float+0x242>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f aeac 	beq.w	8008bee <_printf_float+0xb6>
 8008e96:	f108 0801 	add.w	r8, r8, #1
 8008e9a:	e7ec      	b.n	8008e76 <_printf_float+0x33e>
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d1c0      	bne.n	8008e2c <_printf_float+0x2f4>
 8008eaa:	e6a0      	b.n	8008bee <_printf_float+0xb6>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f ae99 	beq.w	8008bee <_printf_float+0xb6>
 8008ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ebe:	f10b 0b01 	add.w	fp, fp, #1
 8008ec2:	e7b9      	b.n	8008e38 <_printf_float+0x300>
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d1bf      	bne.n	8008e52 <_printf_float+0x31a>
 8008ed2:	e68c      	b.n	8008bee <_printf_float+0xb6>
 8008ed4:	464b      	mov	r3, r9
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	eb08 020a 	add.w	r2, r8, sl
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d1c2      	bne.n	8008e6a <_printf_float+0x332>
 8008ee4:	e683      	b.n	8008bee <_printf_float+0xb6>
 8008ee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ee8:	2a01      	cmp	r2, #1
 8008eea:	dc01      	bgt.n	8008ef0 <_printf_float+0x3b8>
 8008eec:	07db      	lsls	r3, r3, #31
 8008eee:	d537      	bpl.n	8008f60 <_printf_float+0x428>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	4642      	mov	r2, r8
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f ae77 	beq.w	8008bee <_printf_float+0xb6>
 8008f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f04:	4631      	mov	r1, r6
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	f43f ae6f 	beq.w	8008bee <_printf_float+0xb6>
 8008f10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f14:	2200      	movs	r2, #0
 8008f16:	2300      	movs	r3, #0
 8008f18:	f7f7 fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_printf_float+0x41e>
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f20:	f108 0201 	add.w	r2, r8, #1
 8008f24:	3b01      	subs	r3, #1
 8008f26:	4631      	mov	r1, r6
 8008f28:	4628      	mov	r0, r5
 8008f2a:	47b8      	blx	r7
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d10e      	bne.n	8008f4e <_printf_float+0x416>
 8008f30:	e65d      	b.n	8008bee <_printf_float+0xb6>
 8008f32:	2301      	movs	r3, #1
 8008f34:	464a      	mov	r2, r9
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f ae56 	beq.w	8008bee <_printf_float+0xb6>
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4543      	cmp	r3, r8
 8008f4c:	dcf1      	bgt.n	8008f32 <_printf_float+0x3fa>
 8008f4e:	4653      	mov	r3, sl
 8008f50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f54:	e6e0      	b.n	8008d18 <_printf_float+0x1e0>
 8008f56:	f04f 0800 	mov.w	r8, #0
 8008f5a:	f104 091a 	add.w	r9, r4, #26
 8008f5e:	e7f2      	b.n	8008f46 <_printf_float+0x40e>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4642      	mov	r2, r8
 8008f64:	e7df      	b.n	8008f26 <_printf_float+0x3ee>
 8008f66:	2301      	movs	r3, #1
 8008f68:	464a      	mov	r2, r9
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f ae3c 	beq.w	8008bee <_printf_float+0xb6>
 8008f76:	f108 0801 	add.w	r8, r8, #1
 8008f7a:	68e3      	ldr	r3, [r4, #12]
 8008f7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f7e:	1a5b      	subs	r3, r3, r1
 8008f80:	4543      	cmp	r3, r8
 8008f82:	dcf0      	bgt.n	8008f66 <_printf_float+0x42e>
 8008f84:	e6fd      	b.n	8008d82 <_printf_float+0x24a>
 8008f86:	f04f 0800 	mov.w	r8, #0
 8008f8a:	f104 0919 	add.w	r9, r4, #25
 8008f8e:	e7f4      	b.n	8008f7a <_printf_float+0x442>

08008f90 <_printf_common>:
 8008f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f94:	4616      	mov	r6, r2
 8008f96:	4699      	mov	r9, r3
 8008f98:	688a      	ldr	r2, [r1, #8]
 8008f9a:	690b      	ldr	r3, [r1, #16]
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	bfb8      	it	lt
 8008fa2:	4613      	movlt	r3, r2
 8008fa4:	6033      	str	r3, [r6, #0]
 8008fa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008faa:	460c      	mov	r4, r1
 8008fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fb0:	b10a      	cbz	r2, 8008fb6 <_printf_common+0x26>
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	0699      	lsls	r1, r3, #26
 8008fba:	bf42      	ittt	mi
 8008fbc:	6833      	ldrmi	r3, [r6, #0]
 8008fbe:	3302      	addmi	r3, #2
 8008fc0:	6033      	strmi	r3, [r6, #0]
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	f015 0506 	ands.w	r5, r5, #6
 8008fc8:	d106      	bne.n	8008fd8 <_printf_common+0x48>
 8008fca:	f104 0a19 	add.w	sl, r4, #25
 8008fce:	68e3      	ldr	r3, [r4, #12]
 8008fd0:	6832      	ldr	r2, [r6, #0]
 8008fd2:	1a9b      	subs	r3, r3, r2
 8008fd4:	42ab      	cmp	r3, r5
 8008fd6:	dc28      	bgt.n	800902a <_printf_common+0x9a>
 8008fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fdc:	1e13      	subs	r3, r2, #0
 8008fde:	6822      	ldr	r2, [r4, #0]
 8008fe0:	bf18      	it	ne
 8008fe2:	2301      	movne	r3, #1
 8008fe4:	0692      	lsls	r2, r2, #26
 8008fe6:	d42d      	bmi.n	8009044 <_printf_common+0xb4>
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4638      	mov	r0, r7
 8008fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff0:	47c0      	blx	r8
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d020      	beq.n	8009038 <_printf_common+0xa8>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	68e5      	ldr	r5, [r4, #12]
 8008ffa:	f003 0306 	and.w	r3, r3, #6
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	bf18      	it	ne
 8009002:	2500      	movne	r5, #0
 8009004:	6832      	ldr	r2, [r6, #0]
 8009006:	f04f 0600 	mov.w	r6, #0
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	bf08      	it	eq
 800900e:	1aad      	subeq	r5, r5, r2
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	bf08      	it	eq
 8009014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009018:	4293      	cmp	r3, r2
 800901a:	bfc4      	itt	gt
 800901c:	1a9b      	subgt	r3, r3, r2
 800901e:	18ed      	addgt	r5, r5, r3
 8009020:	341a      	adds	r4, #26
 8009022:	42b5      	cmp	r5, r6
 8009024:	d11a      	bne.n	800905c <_printf_common+0xcc>
 8009026:	2000      	movs	r0, #0
 8009028:	e008      	b.n	800903c <_printf_common+0xac>
 800902a:	2301      	movs	r3, #1
 800902c:	4652      	mov	r2, sl
 800902e:	4649      	mov	r1, r9
 8009030:	4638      	mov	r0, r7
 8009032:	47c0      	blx	r8
 8009034:	3001      	adds	r0, #1
 8009036:	d103      	bne.n	8009040 <_printf_common+0xb0>
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009040:	3501      	adds	r5, #1
 8009042:	e7c4      	b.n	8008fce <_printf_common+0x3e>
 8009044:	2030      	movs	r0, #48	; 0x30
 8009046:	18e1      	adds	r1, r4, r3
 8009048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009052:	4422      	add	r2, r4
 8009054:	3302      	adds	r3, #2
 8009056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800905a:	e7c5      	b.n	8008fe8 <_printf_common+0x58>
 800905c:	2301      	movs	r3, #1
 800905e:	4622      	mov	r2, r4
 8009060:	4649      	mov	r1, r9
 8009062:	4638      	mov	r0, r7
 8009064:	47c0      	blx	r8
 8009066:	3001      	adds	r0, #1
 8009068:	d0e6      	beq.n	8009038 <_printf_common+0xa8>
 800906a:	3601      	adds	r6, #1
 800906c:	e7d9      	b.n	8009022 <_printf_common+0x92>
	...

08009070 <_printf_i>:
 8009070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009074:	7e0f      	ldrb	r7, [r1, #24]
 8009076:	4691      	mov	r9, r2
 8009078:	2f78      	cmp	r7, #120	; 0x78
 800907a:	4680      	mov	r8, r0
 800907c:	460c      	mov	r4, r1
 800907e:	469a      	mov	sl, r3
 8009080:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009086:	d807      	bhi.n	8009098 <_printf_i+0x28>
 8009088:	2f62      	cmp	r7, #98	; 0x62
 800908a:	d80a      	bhi.n	80090a2 <_printf_i+0x32>
 800908c:	2f00      	cmp	r7, #0
 800908e:	f000 80d9 	beq.w	8009244 <_printf_i+0x1d4>
 8009092:	2f58      	cmp	r7, #88	; 0x58
 8009094:	f000 80a4 	beq.w	80091e0 <_printf_i+0x170>
 8009098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800909c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a0:	e03a      	b.n	8009118 <_printf_i+0xa8>
 80090a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090a6:	2b15      	cmp	r3, #21
 80090a8:	d8f6      	bhi.n	8009098 <_printf_i+0x28>
 80090aa:	a101      	add	r1, pc, #4	; (adr r1, 80090b0 <_printf_i+0x40>)
 80090ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b0:	08009109 	.word	0x08009109
 80090b4:	0800911d 	.word	0x0800911d
 80090b8:	08009099 	.word	0x08009099
 80090bc:	08009099 	.word	0x08009099
 80090c0:	08009099 	.word	0x08009099
 80090c4:	08009099 	.word	0x08009099
 80090c8:	0800911d 	.word	0x0800911d
 80090cc:	08009099 	.word	0x08009099
 80090d0:	08009099 	.word	0x08009099
 80090d4:	08009099 	.word	0x08009099
 80090d8:	08009099 	.word	0x08009099
 80090dc:	0800922b 	.word	0x0800922b
 80090e0:	0800914d 	.word	0x0800914d
 80090e4:	0800920d 	.word	0x0800920d
 80090e8:	08009099 	.word	0x08009099
 80090ec:	08009099 	.word	0x08009099
 80090f0:	0800924d 	.word	0x0800924d
 80090f4:	08009099 	.word	0x08009099
 80090f8:	0800914d 	.word	0x0800914d
 80090fc:	08009099 	.word	0x08009099
 8009100:	08009099 	.word	0x08009099
 8009104:	08009215 	.word	0x08009215
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	1d1a      	adds	r2, r3, #4
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	602a      	str	r2, [r5, #0]
 8009110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009118:	2301      	movs	r3, #1
 800911a:	e0a4      	b.n	8009266 <_printf_i+0x1f6>
 800911c:	6820      	ldr	r0, [r4, #0]
 800911e:	6829      	ldr	r1, [r5, #0]
 8009120:	0606      	lsls	r6, r0, #24
 8009122:	f101 0304 	add.w	r3, r1, #4
 8009126:	d50a      	bpl.n	800913e <_printf_i+0xce>
 8009128:	680e      	ldr	r6, [r1, #0]
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	2e00      	cmp	r6, #0
 800912e:	da03      	bge.n	8009138 <_printf_i+0xc8>
 8009130:	232d      	movs	r3, #45	; 0x2d
 8009132:	4276      	negs	r6, r6
 8009134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009138:	230a      	movs	r3, #10
 800913a:	485e      	ldr	r0, [pc, #376]	; (80092b4 <_printf_i+0x244>)
 800913c:	e019      	b.n	8009172 <_printf_i+0x102>
 800913e:	680e      	ldr	r6, [r1, #0]
 8009140:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	bf18      	it	ne
 8009148:	b236      	sxthne	r6, r6
 800914a:	e7ef      	b.n	800912c <_printf_i+0xbc>
 800914c:	682b      	ldr	r3, [r5, #0]
 800914e:	6820      	ldr	r0, [r4, #0]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	6029      	str	r1, [r5, #0]
 8009154:	0601      	lsls	r1, r0, #24
 8009156:	d501      	bpl.n	800915c <_printf_i+0xec>
 8009158:	681e      	ldr	r6, [r3, #0]
 800915a:	e002      	b.n	8009162 <_printf_i+0xf2>
 800915c:	0646      	lsls	r6, r0, #25
 800915e:	d5fb      	bpl.n	8009158 <_printf_i+0xe8>
 8009160:	881e      	ldrh	r6, [r3, #0]
 8009162:	2f6f      	cmp	r7, #111	; 0x6f
 8009164:	bf0c      	ite	eq
 8009166:	2308      	moveq	r3, #8
 8009168:	230a      	movne	r3, #10
 800916a:	4852      	ldr	r0, [pc, #328]	; (80092b4 <_printf_i+0x244>)
 800916c:	2100      	movs	r1, #0
 800916e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009172:	6865      	ldr	r5, [r4, #4]
 8009174:	2d00      	cmp	r5, #0
 8009176:	bfa8      	it	ge
 8009178:	6821      	ldrge	r1, [r4, #0]
 800917a:	60a5      	str	r5, [r4, #8]
 800917c:	bfa4      	itt	ge
 800917e:	f021 0104 	bicge.w	r1, r1, #4
 8009182:	6021      	strge	r1, [r4, #0]
 8009184:	b90e      	cbnz	r6, 800918a <_printf_i+0x11a>
 8009186:	2d00      	cmp	r5, #0
 8009188:	d04d      	beq.n	8009226 <_printf_i+0x1b6>
 800918a:	4615      	mov	r5, r2
 800918c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009190:	fb03 6711 	mls	r7, r3, r1, r6
 8009194:	5dc7      	ldrb	r7, [r0, r7]
 8009196:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800919a:	4637      	mov	r7, r6
 800919c:	42bb      	cmp	r3, r7
 800919e:	460e      	mov	r6, r1
 80091a0:	d9f4      	bls.n	800918c <_printf_i+0x11c>
 80091a2:	2b08      	cmp	r3, #8
 80091a4:	d10b      	bne.n	80091be <_printf_i+0x14e>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07de      	lsls	r6, r3, #31
 80091aa:	d508      	bpl.n	80091be <_printf_i+0x14e>
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	6861      	ldr	r1, [r4, #4]
 80091b0:	4299      	cmp	r1, r3
 80091b2:	bfde      	ittt	le
 80091b4:	2330      	movle	r3, #48	; 0x30
 80091b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091be:	1b52      	subs	r2, r2, r5
 80091c0:	6122      	str	r2, [r4, #16]
 80091c2:	464b      	mov	r3, r9
 80091c4:	4621      	mov	r1, r4
 80091c6:	4640      	mov	r0, r8
 80091c8:	f8cd a000 	str.w	sl, [sp]
 80091cc:	aa03      	add	r2, sp, #12
 80091ce:	f7ff fedf 	bl	8008f90 <_printf_common>
 80091d2:	3001      	adds	r0, #1
 80091d4:	d14c      	bne.n	8009270 <_printf_i+0x200>
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295
 80091da:	b004      	add	sp, #16
 80091dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e0:	4834      	ldr	r0, [pc, #208]	; (80092b4 <_printf_i+0x244>)
 80091e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091e6:	6829      	ldr	r1, [r5, #0]
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80091ee:	6029      	str	r1, [r5, #0]
 80091f0:	061d      	lsls	r5, r3, #24
 80091f2:	d514      	bpl.n	800921e <_printf_i+0x1ae>
 80091f4:	07df      	lsls	r7, r3, #31
 80091f6:	bf44      	itt	mi
 80091f8:	f043 0320 	orrmi.w	r3, r3, #32
 80091fc:	6023      	strmi	r3, [r4, #0]
 80091fe:	b91e      	cbnz	r6, 8009208 <_printf_i+0x198>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	f023 0320 	bic.w	r3, r3, #32
 8009206:	6023      	str	r3, [r4, #0]
 8009208:	2310      	movs	r3, #16
 800920a:	e7af      	b.n	800916c <_printf_i+0xfc>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	f043 0320 	orr.w	r3, r3, #32
 8009212:	6023      	str	r3, [r4, #0]
 8009214:	2378      	movs	r3, #120	; 0x78
 8009216:	4828      	ldr	r0, [pc, #160]	; (80092b8 <_printf_i+0x248>)
 8009218:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800921c:	e7e3      	b.n	80091e6 <_printf_i+0x176>
 800921e:	0659      	lsls	r1, r3, #25
 8009220:	bf48      	it	mi
 8009222:	b2b6      	uxthmi	r6, r6
 8009224:	e7e6      	b.n	80091f4 <_printf_i+0x184>
 8009226:	4615      	mov	r5, r2
 8009228:	e7bb      	b.n	80091a2 <_printf_i+0x132>
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	6826      	ldr	r6, [r4, #0]
 800922e:	1d18      	adds	r0, r3, #4
 8009230:	6961      	ldr	r1, [r4, #20]
 8009232:	6028      	str	r0, [r5, #0]
 8009234:	0635      	lsls	r5, r6, #24
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	d501      	bpl.n	800923e <_printf_i+0x1ce>
 800923a:	6019      	str	r1, [r3, #0]
 800923c:	e002      	b.n	8009244 <_printf_i+0x1d4>
 800923e:	0670      	lsls	r0, r6, #25
 8009240:	d5fb      	bpl.n	800923a <_printf_i+0x1ca>
 8009242:	8019      	strh	r1, [r3, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	4615      	mov	r5, r2
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	e7ba      	b.n	80091c2 <_printf_i+0x152>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	2100      	movs	r1, #0
 8009250:	1d1a      	adds	r2, r3, #4
 8009252:	602a      	str	r2, [r5, #0]
 8009254:	681d      	ldr	r5, [r3, #0]
 8009256:	6862      	ldr	r2, [r4, #4]
 8009258:	4628      	mov	r0, r5
 800925a:	f002 faf7 	bl	800b84c <memchr>
 800925e:	b108      	cbz	r0, 8009264 <_printf_i+0x1f4>
 8009260:	1b40      	subs	r0, r0, r5
 8009262:	6060      	str	r0, [r4, #4]
 8009264:	6863      	ldr	r3, [r4, #4]
 8009266:	6123      	str	r3, [r4, #16]
 8009268:	2300      	movs	r3, #0
 800926a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926e:	e7a8      	b.n	80091c2 <_printf_i+0x152>
 8009270:	462a      	mov	r2, r5
 8009272:	4649      	mov	r1, r9
 8009274:	4640      	mov	r0, r8
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	47d0      	blx	sl
 800927a:	3001      	adds	r0, #1
 800927c:	d0ab      	beq.n	80091d6 <_printf_i+0x166>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	079b      	lsls	r3, r3, #30
 8009282:	d413      	bmi.n	80092ac <_printf_i+0x23c>
 8009284:	68e0      	ldr	r0, [r4, #12]
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	4298      	cmp	r0, r3
 800928a:	bfb8      	it	lt
 800928c:	4618      	movlt	r0, r3
 800928e:	e7a4      	b.n	80091da <_printf_i+0x16a>
 8009290:	2301      	movs	r3, #1
 8009292:	4632      	mov	r2, r6
 8009294:	4649      	mov	r1, r9
 8009296:	4640      	mov	r0, r8
 8009298:	47d0      	blx	sl
 800929a:	3001      	adds	r0, #1
 800929c:	d09b      	beq.n	80091d6 <_printf_i+0x166>
 800929e:	3501      	adds	r5, #1
 80092a0:	68e3      	ldr	r3, [r4, #12]
 80092a2:	9903      	ldr	r1, [sp, #12]
 80092a4:	1a5b      	subs	r3, r3, r1
 80092a6:	42ab      	cmp	r3, r5
 80092a8:	dcf2      	bgt.n	8009290 <_printf_i+0x220>
 80092aa:	e7eb      	b.n	8009284 <_printf_i+0x214>
 80092ac:	2500      	movs	r5, #0
 80092ae:	f104 0619 	add.w	r6, r4, #25
 80092b2:	e7f5      	b.n	80092a0 <_printf_i+0x230>
 80092b4:	0800e1d2 	.word	0x0800e1d2
 80092b8:	0800e1e3 	.word	0x0800e1e3

080092bc <_scanf_float>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	b087      	sub	sp, #28
 80092c2:	9303      	str	r3, [sp, #12]
 80092c4:	688b      	ldr	r3, [r1, #8]
 80092c6:	4617      	mov	r7, r2
 80092c8:	1e5a      	subs	r2, r3, #1
 80092ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80092ce:	bf85      	ittet	hi
 80092d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80092d4:	195b      	addhi	r3, r3, r5
 80092d6:	2300      	movls	r3, #0
 80092d8:	9302      	strhi	r3, [sp, #8]
 80092da:	bf88      	it	hi
 80092dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80092e0:	468b      	mov	fp, r1
 80092e2:	f04f 0500 	mov.w	r5, #0
 80092e6:	bf8c      	ite	hi
 80092e8:	608b      	strhi	r3, [r1, #8]
 80092ea:	9302      	strls	r3, [sp, #8]
 80092ec:	680b      	ldr	r3, [r1, #0]
 80092ee:	4680      	mov	r8, r0
 80092f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80092f4:	f84b 3b1c 	str.w	r3, [fp], #28
 80092f8:	460c      	mov	r4, r1
 80092fa:	465e      	mov	r6, fp
 80092fc:	46aa      	mov	sl, r5
 80092fe:	46a9      	mov	r9, r5
 8009300:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009304:	9501      	str	r5, [sp, #4]
 8009306:	68a2      	ldr	r2, [r4, #8]
 8009308:	b152      	cbz	r2, 8009320 <_scanf_float+0x64>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b4e      	cmp	r3, #78	; 0x4e
 8009310:	d864      	bhi.n	80093dc <_scanf_float+0x120>
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d83c      	bhi.n	8009390 <_scanf_float+0xd4>
 8009316:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800931a:	b2c8      	uxtb	r0, r1
 800931c:	280e      	cmp	r0, #14
 800931e:	d93a      	bls.n	8009396 <_scanf_float+0xda>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	d003      	beq.n	800932e <_scanf_float+0x72>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009332:	f1ba 0f01 	cmp.w	sl, #1
 8009336:	f200 8113 	bhi.w	8009560 <_scanf_float+0x2a4>
 800933a:	455e      	cmp	r6, fp
 800933c:	f200 8105 	bhi.w	800954a <_scanf_float+0x28e>
 8009340:	2501      	movs	r5, #1
 8009342:	4628      	mov	r0, r5
 8009344:	b007      	add	sp, #28
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800934e:	2a0d      	cmp	r2, #13
 8009350:	d8e6      	bhi.n	8009320 <_scanf_float+0x64>
 8009352:	a101      	add	r1, pc, #4	; (adr r1, 8009358 <_scanf_float+0x9c>)
 8009354:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009358:	08009497 	.word	0x08009497
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	08009321 	.word	0x08009321
 8009368:	080094f7 	.word	0x080094f7
 800936c:	080094cf 	.word	0x080094cf
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094a5 	.word	0x080094a5
 800937c:	08009321 	.word	0x08009321
 8009380:	08009321 	.word	0x08009321
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	0800945d 	.word	0x0800945d
 8009390:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009394:	e7db      	b.n	800934e <_scanf_float+0x92>
 8009396:	290e      	cmp	r1, #14
 8009398:	d8c2      	bhi.n	8009320 <_scanf_float+0x64>
 800939a:	a001      	add	r0, pc, #4	; (adr r0, 80093a0 <_scanf_float+0xe4>)
 800939c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093a0:	0800944f 	.word	0x0800944f
 80093a4:	08009321 	.word	0x08009321
 80093a8:	0800944f 	.word	0x0800944f
 80093ac:	080094e3 	.word	0x080094e3
 80093b0:	08009321 	.word	0x08009321
 80093b4:	080093fd 	.word	0x080093fd
 80093b8:	08009439 	.word	0x08009439
 80093bc:	08009439 	.word	0x08009439
 80093c0:	08009439 	.word	0x08009439
 80093c4:	08009439 	.word	0x08009439
 80093c8:	08009439 	.word	0x08009439
 80093cc:	08009439 	.word	0x08009439
 80093d0:	08009439 	.word	0x08009439
 80093d4:	08009439 	.word	0x08009439
 80093d8:	08009439 	.word	0x08009439
 80093dc:	2b6e      	cmp	r3, #110	; 0x6e
 80093de:	d809      	bhi.n	80093f4 <_scanf_float+0x138>
 80093e0:	2b60      	cmp	r3, #96	; 0x60
 80093e2:	d8b2      	bhi.n	800934a <_scanf_float+0x8e>
 80093e4:	2b54      	cmp	r3, #84	; 0x54
 80093e6:	d077      	beq.n	80094d8 <_scanf_float+0x21c>
 80093e8:	2b59      	cmp	r3, #89	; 0x59
 80093ea:	d199      	bne.n	8009320 <_scanf_float+0x64>
 80093ec:	2d07      	cmp	r5, #7
 80093ee:	d197      	bne.n	8009320 <_scanf_float+0x64>
 80093f0:	2508      	movs	r5, #8
 80093f2:	e029      	b.n	8009448 <_scanf_float+0x18c>
 80093f4:	2b74      	cmp	r3, #116	; 0x74
 80093f6:	d06f      	beq.n	80094d8 <_scanf_float+0x21c>
 80093f8:	2b79      	cmp	r3, #121	; 0x79
 80093fa:	e7f6      	b.n	80093ea <_scanf_float+0x12e>
 80093fc:	6821      	ldr	r1, [r4, #0]
 80093fe:	05c8      	lsls	r0, r1, #23
 8009400:	d51a      	bpl.n	8009438 <_scanf_float+0x17c>
 8009402:	9b02      	ldr	r3, [sp, #8]
 8009404:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009408:	6021      	str	r1, [r4, #0]
 800940a:	f109 0901 	add.w	r9, r9, #1
 800940e:	b11b      	cbz	r3, 8009418 <_scanf_float+0x15c>
 8009410:	3b01      	subs	r3, #1
 8009412:	3201      	adds	r2, #1
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	60a2      	str	r2, [r4, #8]
 8009418:	68a3      	ldr	r3, [r4, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	3301      	adds	r3, #1
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3b01      	subs	r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	607b      	str	r3, [r7, #4]
 800942c:	f340 8084 	ble.w	8009538 <_scanf_float+0x27c>
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	3301      	adds	r3, #1
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	e766      	b.n	8009306 <_scanf_float+0x4a>
 8009438:	eb1a 0f05 	cmn.w	sl, r5
 800943c:	f47f af70 	bne.w	8009320 <_scanf_float+0x64>
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009446:	6022      	str	r2, [r4, #0]
 8009448:	f806 3b01 	strb.w	r3, [r6], #1
 800944c:	e7e4      	b.n	8009418 <_scanf_float+0x15c>
 800944e:	6822      	ldr	r2, [r4, #0]
 8009450:	0610      	lsls	r0, r2, #24
 8009452:	f57f af65 	bpl.w	8009320 <_scanf_float+0x64>
 8009456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800945a:	e7f4      	b.n	8009446 <_scanf_float+0x18a>
 800945c:	f1ba 0f00 	cmp.w	sl, #0
 8009460:	d10e      	bne.n	8009480 <_scanf_float+0x1c4>
 8009462:	f1b9 0f00 	cmp.w	r9, #0
 8009466:	d10e      	bne.n	8009486 <_scanf_float+0x1ca>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800946e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009472:	d108      	bne.n	8009486 <_scanf_float+0x1ca>
 8009474:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009478:	f04f 0a01 	mov.w	sl, #1
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	e7e3      	b.n	8009448 <_scanf_float+0x18c>
 8009480:	f1ba 0f02 	cmp.w	sl, #2
 8009484:	d055      	beq.n	8009532 <_scanf_float+0x276>
 8009486:	2d01      	cmp	r5, #1
 8009488:	d002      	beq.n	8009490 <_scanf_float+0x1d4>
 800948a:	2d04      	cmp	r5, #4
 800948c:	f47f af48 	bne.w	8009320 <_scanf_float+0x64>
 8009490:	3501      	adds	r5, #1
 8009492:	b2ed      	uxtb	r5, r5
 8009494:	e7d8      	b.n	8009448 <_scanf_float+0x18c>
 8009496:	f1ba 0f01 	cmp.w	sl, #1
 800949a:	f47f af41 	bne.w	8009320 <_scanf_float+0x64>
 800949e:	f04f 0a02 	mov.w	sl, #2
 80094a2:	e7d1      	b.n	8009448 <_scanf_float+0x18c>
 80094a4:	b97d      	cbnz	r5, 80094c6 <_scanf_float+0x20a>
 80094a6:	f1b9 0f00 	cmp.w	r9, #0
 80094aa:	f47f af3c 	bne.w	8009326 <_scanf_float+0x6a>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80094b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80094b8:	f47f af39 	bne.w	800932e <_scanf_float+0x72>
 80094bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80094c0:	2501      	movs	r5, #1
 80094c2:	6022      	str	r2, [r4, #0]
 80094c4:	e7c0      	b.n	8009448 <_scanf_float+0x18c>
 80094c6:	2d03      	cmp	r5, #3
 80094c8:	d0e2      	beq.n	8009490 <_scanf_float+0x1d4>
 80094ca:	2d05      	cmp	r5, #5
 80094cc:	e7de      	b.n	800948c <_scanf_float+0x1d0>
 80094ce:	2d02      	cmp	r5, #2
 80094d0:	f47f af26 	bne.w	8009320 <_scanf_float+0x64>
 80094d4:	2503      	movs	r5, #3
 80094d6:	e7b7      	b.n	8009448 <_scanf_float+0x18c>
 80094d8:	2d06      	cmp	r5, #6
 80094da:	f47f af21 	bne.w	8009320 <_scanf_float+0x64>
 80094de:	2507      	movs	r5, #7
 80094e0:	e7b2      	b.n	8009448 <_scanf_float+0x18c>
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	0591      	lsls	r1, r2, #22
 80094e6:	f57f af1b 	bpl.w	8009320 <_scanf_float+0x64>
 80094ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80094f4:	e7a8      	b.n	8009448 <_scanf_float+0x18c>
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80094fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009500:	d006      	beq.n	8009510 <_scanf_float+0x254>
 8009502:	0550      	lsls	r0, r2, #21
 8009504:	f57f af0c 	bpl.w	8009320 <_scanf_float+0x64>
 8009508:	f1b9 0f00 	cmp.w	r9, #0
 800950c:	f43f af0f 	beq.w	800932e <_scanf_float+0x72>
 8009510:	0591      	lsls	r1, r2, #22
 8009512:	bf58      	it	pl
 8009514:	9901      	ldrpl	r1, [sp, #4]
 8009516:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800951a:	bf58      	it	pl
 800951c:	eba9 0101 	subpl.w	r1, r9, r1
 8009520:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009524:	f04f 0900 	mov.w	r9, #0
 8009528:	bf58      	it	pl
 800952a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800952e:	6022      	str	r2, [r4, #0]
 8009530:	e78a      	b.n	8009448 <_scanf_float+0x18c>
 8009532:	f04f 0a03 	mov.w	sl, #3
 8009536:	e787      	b.n	8009448 <_scanf_float+0x18c>
 8009538:	4639      	mov	r1, r7
 800953a:	4640      	mov	r0, r8
 800953c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009540:	4798      	blx	r3
 8009542:	2800      	cmp	r0, #0
 8009544:	f43f aedf 	beq.w	8009306 <_scanf_float+0x4a>
 8009548:	e6ea      	b.n	8009320 <_scanf_float+0x64>
 800954a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800954e:	463a      	mov	r2, r7
 8009550:	4640      	mov	r0, r8
 8009552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009556:	4798      	blx	r3
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	3b01      	subs	r3, #1
 800955c:	6123      	str	r3, [r4, #16]
 800955e:	e6ec      	b.n	800933a <_scanf_float+0x7e>
 8009560:	1e6b      	subs	r3, r5, #1
 8009562:	2b06      	cmp	r3, #6
 8009564:	d825      	bhi.n	80095b2 <_scanf_float+0x2f6>
 8009566:	2d02      	cmp	r5, #2
 8009568:	d836      	bhi.n	80095d8 <_scanf_float+0x31c>
 800956a:	455e      	cmp	r6, fp
 800956c:	f67f aee8 	bls.w	8009340 <_scanf_float+0x84>
 8009570:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009574:	463a      	mov	r2, r7
 8009576:	4640      	mov	r0, r8
 8009578:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800957c:	4798      	blx	r3
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	3b01      	subs	r3, #1
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	e7f1      	b.n	800956a <_scanf_float+0x2ae>
 8009586:	9802      	ldr	r0, [sp, #8]
 8009588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800958c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009590:	463a      	mov	r2, r7
 8009592:	9002      	str	r0, [sp, #8]
 8009594:	4640      	mov	r0, r8
 8009596:	4798      	blx	r3
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	3b01      	subs	r3, #1
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095a2:	fa5f fa8a 	uxtb.w	sl, sl
 80095a6:	f1ba 0f02 	cmp.w	sl, #2
 80095aa:	d1ec      	bne.n	8009586 <_scanf_float+0x2ca>
 80095ac:	3d03      	subs	r5, #3
 80095ae:	b2ed      	uxtb	r5, r5
 80095b0:	1b76      	subs	r6, r6, r5
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	05da      	lsls	r2, r3, #23
 80095b6:	d52f      	bpl.n	8009618 <_scanf_float+0x35c>
 80095b8:	055b      	lsls	r3, r3, #21
 80095ba:	d510      	bpl.n	80095de <_scanf_float+0x322>
 80095bc:	455e      	cmp	r6, fp
 80095be:	f67f aebf 	bls.w	8009340 <_scanf_float+0x84>
 80095c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095c6:	463a      	mov	r2, r7
 80095c8:	4640      	mov	r0, r8
 80095ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ce:	4798      	blx	r3
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	3b01      	subs	r3, #1
 80095d4:	6123      	str	r3, [r4, #16]
 80095d6:	e7f1      	b.n	80095bc <_scanf_float+0x300>
 80095d8:	46aa      	mov	sl, r5
 80095da:	9602      	str	r6, [sp, #8]
 80095dc:	e7df      	b.n	800959e <_scanf_float+0x2e2>
 80095de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	2965      	cmp	r1, #101	; 0x65
 80095e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80095ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	d00c      	beq.n	800960c <_scanf_float+0x350>
 80095f2:	2945      	cmp	r1, #69	; 0x45
 80095f4:	d00a      	beq.n	800960c <_scanf_float+0x350>
 80095f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095fa:	463a      	mov	r2, r7
 80095fc:	4640      	mov	r0, r8
 80095fe:	4798      	blx	r3
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009606:	3b01      	subs	r3, #1
 8009608:	1eb5      	subs	r5, r6, #2
 800960a:	6123      	str	r3, [r4, #16]
 800960c:	463a      	mov	r2, r7
 800960e:	4640      	mov	r0, r8
 8009610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009614:	4798      	blx	r3
 8009616:	462e      	mov	r6, r5
 8009618:	6825      	ldr	r5, [r4, #0]
 800961a:	f015 0510 	ands.w	r5, r5, #16
 800961e:	d155      	bne.n	80096cc <_scanf_float+0x410>
 8009620:	7035      	strb	r5, [r6, #0]
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962c:	d11b      	bne.n	8009666 <_scanf_float+0x3aa>
 800962e:	9b01      	ldr	r3, [sp, #4]
 8009630:	454b      	cmp	r3, r9
 8009632:	eba3 0209 	sub.w	r2, r3, r9
 8009636:	d123      	bne.n	8009680 <_scanf_float+0x3c4>
 8009638:	2200      	movs	r2, #0
 800963a:	4659      	mov	r1, fp
 800963c:	4640      	mov	r0, r8
 800963e:	f000 fe83 	bl	800a348 <_strtod_r>
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	f012 0f02 	tst.w	r2, #2
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	d021      	beq.n	8009696 <_scanf_float+0x3da>
 8009652:	1d1a      	adds	r2, r3, #4
 8009654:	9903      	ldr	r1, [sp, #12]
 8009656:	600a      	str	r2, [r1, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	e9c3 6700 	strd	r6, r7, [r3]
 800965e:	68e3      	ldr	r3, [r4, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60e3      	str	r3, [r4, #12]
 8009664:	e66d      	b.n	8009342 <_scanf_float+0x86>
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0e5      	beq.n	8009638 <_scanf_float+0x37c>
 800966c:	9905      	ldr	r1, [sp, #20]
 800966e:	230a      	movs	r3, #10
 8009670:	462a      	mov	r2, r5
 8009672:	4640      	mov	r0, r8
 8009674:	3101      	adds	r1, #1
 8009676:	f000 fee9 	bl	800a44c <_strtol_r>
 800967a:	9b04      	ldr	r3, [sp, #16]
 800967c:	9e05      	ldr	r6, [sp, #20]
 800967e:	1ac2      	subs	r2, r0, r3
 8009680:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009684:	429e      	cmp	r6, r3
 8009686:	bf28      	it	cs
 8009688:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800968c:	4630      	mov	r0, r6
 800968e:	4910      	ldr	r1, [pc, #64]	; (80096d0 <_scanf_float+0x414>)
 8009690:	f000 f826 	bl	80096e0 <siprintf>
 8009694:	e7d0      	b.n	8009638 <_scanf_float+0x37c>
 8009696:	f012 0f04 	tst.w	r2, #4
 800969a:	f103 0204 	add.w	r2, r3, #4
 800969e:	d1d9      	bne.n	8009654 <_scanf_float+0x398>
 80096a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80096a4:	f8cc 2000 	str.w	r2, [ip]
 80096a8:	f8d3 8000 	ldr.w	r8, [r3]
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	f7f7 f9ac 	bl	8000a0c <__aeabi_dcmpun>
 80096b4:	b128      	cbz	r0, 80096c2 <_scanf_float+0x406>
 80096b6:	4807      	ldr	r0, [pc, #28]	; (80096d4 <_scanf_float+0x418>)
 80096b8:	f000 f80e 	bl	80096d8 <nanf>
 80096bc:	f8c8 0000 	str.w	r0, [r8]
 80096c0:	e7cd      	b.n	800965e <_scanf_float+0x3a2>
 80096c2:	4630      	mov	r0, r6
 80096c4:	4639      	mov	r1, r7
 80096c6:	f7f7 f9ff 	bl	8000ac8 <__aeabi_d2f>
 80096ca:	e7f7      	b.n	80096bc <_scanf_float+0x400>
 80096cc:	2500      	movs	r5, #0
 80096ce:	e638      	b.n	8009342 <_scanf_float+0x86>
 80096d0:	0800e1f4 	.word	0x0800e1f4
 80096d4:	0800e600 	.word	0x0800e600

080096d8 <nanf>:
 80096d8:	4800      	ldr	r0, [pc, #0]	; (80096dc <nanf+0x4>)
 80096da:	4770      	bx	lr
 80096dc:	7fc00000 	.word	0x7fc00000

080096e0 <siprintf>:
 80096e0:	b40e      	push	{r1, r2, r3}
 80096e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096e6:	b500      	push	{lr}
 80096e8:	b09c      	sub	sp, #112	; 0x70
 80096ea:	ab1d      	add	r3, sp, #116	; 0x74
 80096ec:	9002      	str	r0, [sp, #8]
 80096ee:	9006      	str	r0, [sp, #24]
 80096f0:	9107      	str	r1, [sp, #28]
 80096f2:	9104      	str	r1, [sp, #16]
 80096f4:	4808      	ldr	r0, [pc, #32]	; (8009718 <siprintf+0x38>)
 80096f6:	4909      	ldr	r1, [pc, #36]	; (800971c <siprintf+0x3c>)
 80096f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fc:	9105      	str	r1, [sp, #20]
 80096fe:	6800      	ldr	r0, [r0, #0]
 8009700:	a902      	add	r1, sp, #8
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	f002 feb4 	bl	800c470 <_svfiprintf_r>
 8009708:	2200      	movs	r2, #0
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	b01c      	add	sp, #112	; 0x70
 8009710:	f85d eb04 	ldr.w	lr, [sp], #4
 8009714:	b003      	add	sp, #12
 8009716:	4770      	bx	lr
 8009718:	2000001c 	.word	0x2000001c
 800971c:	ffff0208 	.word	0xffff0208

08009720 <strcpy>:
 8009720:	4603      	mov	r3, r0
 8009722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009726:	f803 2b01 	strb.w	r2, [r3], #1
 800972a:	2a00      	cmp	r2, #0
 800972c:	d1f9      	bne.n	8009722 <strcpy+0x2>
 800972e:	4770      	bx	lr

08009730 <sulp>:
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	460f      	mov	r7, r1
 8009736:	4690      	mov	r8, r2
 8009738:	f002 fc06 	bl	800bf48 <__ulp>
 800973c:	4604      	mov	r4, r0
 800973e:	460d      	mov	r5, r1
 8009740:	f1b8 0f00 	cmp.w	r8, #0
 8009744:	d011      	beq.n	800976a <sulp+0x3a>
 8009746:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800974a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd0b      	ble.n	800976a <sulp+0x3a>
 8009752:	2400      	movs	r4, #0
 8009754:	051b      	lsls	r3, r3, #20
 8009756:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800975a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	f7f6 feb9 	bl	80004d8 <__aeabi_dmul>
 8009766:	4604      	mov	r4, r0
 8009768:	460d      	mov	r5, r1
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009772:	0000      	movs	r0, r0
 8009774:	0000      	movs	r0, r0
	...

08009778 <_strtod_l>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	469b      	mov	fp, r3
 800977e:	2300      	movs	r3, #0
 8009780:	b09f      	sub	sp, #124	; 0x7c
 8009782:	931a      	str	r3, [sp, #104]	; 0x68
 8009784:	4b9e      	ldr	r3, [pc, #632]	; (8009a00 <_strtod_l+0x288>)
 8009786:	4682      	mov	sl, r0
 8009788:	681f      	ldr	r7, [r3, #0]
 800978a:	460e      	mov	r6, r1
 800978c:	4638      	mov	r0, r7
 800978e:	9215      	str	r2, [sp, #84]	; 0x54
 8009790:	f7f6 fcde 	bl	8000150 <strlen>
 8009794:	f04f 0800 	mov.w	r8, #0
 8009798:	4604      	mov	r4, r0
 800979a:	f04f 0900 	mov.w	r9, #0
 800979e:	9619      	str	r6, [sp, #100]	; 0x64
 80097a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	2a2b      	cmp	r2, #43	; 0x2b
 80097a6:	d04c      	beq.n	8009842 <_strtod_l+0xca>
 80097a8:	d83a      	bhi.n	8009820 <_strtod_l+0xa8>
 80097aa:	2a0d      	cmp	r2, #13
 80097ac:	d833      	bhi.n	8009816 <_strtod_l+0x9e>
 80097ae:	2a08      	cmp	r2, #8
 80097b0:	d833      	bhi.n	800981a <_strtod_l+0xa2>
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	d03d      	beq.n	8009832 <_strtod_l+0xba>
 80097b6:	2300      	movs	r3, #0
 80097b8:	930a      	str	r3, [sp, #40]	; 0x28
 80097ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80097bc:	782b      	ldrb	r3, [r5, #0]
 80097be:	2b30      	cmp	r3, #48	; 0x30
 80097c0:	f040 80aa 	bne.w	8009918 <_strtod_l+0x1a0>
 80097c4:	786b      	ldrb	r3, [r5, #1]
 80097c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80097ca:	2b58      	cmp	r3, #88	; 0x58
 80097cc:	d166      	bne.n	800989c <_strtod_l+0x124>
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	4650      	mov	r0, sl
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	ab1a      	add	r3, sp, #104	; 0x68
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	4a8a      	ldr	r2, [pc, #552]	; (8009a04 <_strtod_l+0x28c>)
 80097da:	f8cd b008 	str.w	fp, [sp, #8]
 80097de:	ab1b      	add	r3, sp, #108	; 0x6c
 80097e0:	a919      	add	r1, sp, #100	; 0x64
 80097e2:	f001 fd17 	bl	800b214 <__gethex>
 80097e6:	f010 0607 	ands.w	r6, r0, #7
 80097ea:	4604      	mov	r4, r0
 80097ec:	d005      	beq.n	80097fa <_strtod_l+0x82>
 80097ee:	2e06      	cmp	r6, #6
 80097f0:	d129      	bne.n	8009846 <_strtod_l+0xce>
 80097f2:	2300      	movs	r3, #0
 80097f4:	3501      	adds	r5, #1
 80097f6:	9519      	str	r5, [sp, #100]	; 0x64
 80097f8:	930a      	str	r3, [sp, #40]	; 0x28
 80097fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 858a 	bne.w	800a316 <_strtod_l+0xb9e>
 8009802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009804:	b1d3      	cbz	r3, 800983c <_strtod_l+0xc4>
 8009806:	4642      	mov	r2, r8
 8009808:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800980c:	4610      	mov	r0, r2
 800980e:	4619      	mov	r1, r3
 8009810:	b01f      	add	sp, #124	; 0x7c
 8009812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	2a20      	cmp	r2, #32
 8009818:	d1cd      	bne.n	80097b6 <_strtod_l+0x3e>
 800981a:	3301      	adds	r3, #1
 800981c:	9319      	str	r3, [sp, #100]	; 0x64
 800981e:	e7bf      	b.n	80097a0 <_strtod_l+0x28>
 8009820:	2a2d      	cmp	r2, #45	; 0x2d
 8009822:	d1c8      	bne.n	80097b6 <_strtod_l+0x3e>
 8009824:	2201      	movs	r2, #1
 8009826:	920a      	str	r2, [sp, #40]	; 0x28
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	9219      	str	r2, [sp, #100]	; 0x64
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1c3      	bne.n	80097ba <_strtod_l+0x42>
 8009832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009834:	9619      	str	r6, [sp, #100]	; 0x64
 8009836:	2b00      	cmp	r3, #0
 8009838:	f040 856b 	bne.w	800a312 <_strtod_l+0xb9a>
 800983c:	4642      	mov	r2, r8
 800983e:	464b      	mov	r3, r9
 8009840:	e7e4      	b.n	800980c <_strtod_l+0x94>
 8009842:	2200      	movs	r2, #0
 8009844:	e7ef      	b.n	8009826 <_strtod_l+0xae>
 8009846:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009848:	b13a      	cbz	r2, 800985a <_strtod_l+0xe2>
 800984a:	2135      	movs	r1, #53	; 0x35
 800984c:	a81c      	add	r0, sp, #112	; 0x70
 800984e:	f002 fc7f 	bl	800c150 <__copybits>
 8009852:	4650      	mov	r0, sl
 8009854:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009856:	f002 f847 	bl	800b8e8 <_Bfree>
 800985a:	3e01      	subs	r6, #1
 800985c:	2e04      	cmp	r6, #4
 800985e:	d806      	bhi.n	800986e <_strtod_l+0xf6>
 8009860:	e8df f006 	tbb	[pc, r6]
 8009864:	1714030a 	.word	0x1714030a
 8009868:	0a          	.byte	0x0a
 8009869:	00          	.byte	0x00
 800986a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800986e:	0721      	lsls	r1, r4, #28
 8009870:	d5c3      	bpl.n	80097fa <_strtod_l+0x82>
 8009872:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009876:	e7c0      	b.n	80097fa <_strtod_l+0x82>
 8009878:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800987a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800987e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009886:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800988a:	e7f0      	b.n	800986e <_strtod_l+0xf6>
 800988c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a08 <_strtod_l+0x290>
 8009890:	e7ed      	b.n	800986e <_strtod_l+0xf6>
 8009892:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009896:	f04f 38ff 	mov.w	r8, #4294967295
 800989a:	e7e8      	b.n	800986e <_strtod_l+0xf6>
 800989c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	9219      	str	r2, [sp, #100]	; 0x64
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b30      	cmp	r3, #48	; 0x30
 80098a6:	d0f9      	beq.n	800989c <_strtod_l+0x124>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0a6      	beq.n	80097fa <_strtod_l+0x82>
 80098ac:	2301      	movs	r3, #1
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098b2:	220a      	movs	r2, #10
 80098b4:	9308      	str	r3, [sp, #32]
 80098b6:	2300      	movs	r3, #0
 80098b8:	469b      	mov	fp, r3
 80098ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80098be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80098c0:	7805      	ldrb	r5, [r0, #0]
 80098c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80098c6:	b2d9      	uxtb	r1, r3
 80098c8:	2909      	cmp	r1, #9
 80098ca:	d927      	bls.n	800991c <_strtod_l+0x1a4>
 80098cc:	4622      	mov	r2, r4
 80098ce:	4639      	mov	r1, r7
 80098d0:	f002 fee4 	bl	800c69c <strncmp>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d033      	beq.n	8009940 <_strtod_l+0x1c8>
 80098d8:	2000      	movs	r0, #0
 80098da:	462a      	mov	r2, r5
 80098dc:	465c      	mov	r4, fp
 80098de:	4603      	mov	r3, r0
 80098e0:	9004      	str	r0, [sp, #16]
 80098e2:	2a65      	cmp	r2, #101	; 0x65
 80098e4:	d001      	beq.n	80098ea <_strtod_l+0x172>
 80098e6:	2a45      	cmp	r2, #69	; 0x45
 80098e8:	d114      	bne.n	8009914 <_strtod_l+0x19c>
 80098ea:	b91c      	cbnz	r4, 80098f4 <_strtod_l+0x17c>
 80098ec:	9a07      	ldr	r2, [sp, #28]
 80098ee:	4302      	orrs	r2, r0
 80098f0:	d09f      	beq.n	8009832 <_strtod_l+0xba>
 80098f2:	2400      	movs	r4, #0
 80098f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80098f6:	1c72      	adds	r2, r6, #1
 80098f8:	9219      	str	r2, [sp, #100]	; 0x64
 80098fa:	7872      	ldrb	r2, [r6, #1]
 80098fc:	2a2b      	cmp	r2, #43	; 0x2b
 80098fe:	d079      	beq.n	80099f4 <_strtod_l+0x27c>
 8009900:	2a2d      	cmp	r2, #45	; 0x2d
 8009902:	f000 8083 	beq.w	8009a0c <_strtod_l+0x294>
 8009906:	2700      	movs	r7, #0
 8009908:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800990c:	2909      	cmp	r1, #9
 800990e:	f240 8083 	bls.w	8009a18 <_strtod_l+0x2a0>
 8009912:	9619      	str	r6, [sp, #100]	; 0x64
 8009914:	2500      	movs	r5, #0
 8009916:	e09f      	b.n	8009a58 <_strtod_l+0x2e0>
 8009918:	2300      	movs	r3, #0
 800991a:	e7c8      	b.n	80098ae <_strtod_l+0x136>
 800991c:	f1bb 0f08 	cmp.w	fp, #8
 8009920:	bfd5      	itete	le
 8009922:	9906      	ldrle	r1, [sp, #24]
 8009924:	9905      	ldrgt	r1, [sp, #20]
 8009926:	fb02 3301 	mlale	r3, r2, r1, r3
 800992a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800992e:	f100 0001 	add.w	r0, r0, #1
 8009932:	bfd4      	ite	le
 8009934:	9306      	strle	r3, [sp, #24]
 8009936:	9305      	strgt	r3, [sp, #20]
 8009938:	f10b 0b01 	add.w	fp, fp, #1
 800993c:	9019      	str	r0, [sp, #100]	; 0x64
 800993e:	e7be      	b.n	80098be <_strtod_l+0x146>
 8009940:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009942:	191a      	adds	r2, r3, r4
 8009944:	9219      	str	r2, [sp, #100]	; 0x64
 8009946:	5d1a      	ldrb	r2, [r3, r4]
 8009948:	f1bb 0f00 	cmp.w	fp, #0
 800994c:	d036      	beq.n	80099bc <_strtod_l+0x244>
 800994e:	465c      	mov	r4, fp
 8009950:	9004      	str	r0, [sp, #16]
 8009952:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009956:	2b09      	cmp	r3, #9
 8009958:	d912      	bls.n	8009980 <_strtod_l+0x208>
 800995a:	2301      	movs	r3, #1
 800995c:	e7c1      	b.n	80098e2 <_strtod_l+0x16a>
 800995e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009960:	3001      	adds	r0, #1
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	9219      	str	r2, [sp, #100]	; 0x64
 8009966:	785a      	ldrb	r2, [r3, #1]
 8009968:	2a30      	cmp	r2, #48	; 0x30
 800996a:	d0f8      	beq.n	800995e <_strtod_l+0x1e6>
 800996c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009970:	2b08      	cmp	r3, #8
 8009972:	f200 84d5 	bhi.w	800a320 <_strtod_l+0xba8>
 8009976:	9004      	str	r0, [sp, #16]
 8009978:	2000      	movs	r0, #0
 800997a:	4604      	mov	r4, r0
 800997c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800997e:	9308      	str	r3, [sp, #32]
 8009980:	3a30      	subs	r2, #48	; 0x30
 8009982:	f100 0301 	add.w	r3, r0, #1
 8009986:	d013      	beq.n	80099b0 <_strtod_l+0x238>
 8009988:	9904      	ldr	r1, [sp, #16]
 800998a:	1905      	adds	r5, r0, r4
 800998c:	4419      	add	r1, r3
 800998e:	9104      	str	r1, [sp, #16]
 8009990:	4623      	mov	r3, r4
 8009992:	210a      	movs	r1, #10
 8009994:	42ab      	cmp	r3, r5
 8009996:	d113      	bne.n	80099c0 <_strtod_l+0x248>
 8009998:	1823      	adds	r3, r4, r0
 800999a:	2b08      	cmp	r3, #8
 800999c:	f104 0401 	add.w	r4, r4, #1
 80099a0:	4404      	add	r4, r0
 80099a2:	dc1b      	bgt.n	80099dc <_strtod_l+0x264>
 80099a4:	230a      	movs	r3, #10
 80099a6:	9906      	ldr	r1, [sp, #24]
 80099a8:	fb03 2301 	mla	r3, r3, r1, r2
 80099ac:	9306      	str	r3, [sp, #24]
 80099ae:	2300      	movs	r3, #0
 80099b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099b2:	4618      	mov	r0, r3
 80099b4:	1c51      	adds	r1, r2, #1
 80099b6:	9119      	str	r1, [sp, #100]	; 0x64
 80099b8:	7852      	ldrb	r2, [r2, #1]
 80099ba:	e7ca      	b.n	8009952 <_strtod_l+0x1da>
 80099bc:	4658      	mov	r0, fp
 80099be:	e7d3      	b.n	8009968 <_strtod_l+0x1f0>
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	dc04      	bgt.n	80099ce <_strtod_l+0x256>
 80099c4:	9f06      	ldr	r7, [sp, #24]
 80099c6:	434f      	muls	r7, r1
 80099c8:	9706      	str	r7, [sp, #24]
 80099ca:	3301      	adds	r3, #1
 80099cc:	e7e2      	b.n	8009994 <_strtod_l+0x21c>
 80099ce:	1c5f      	adds	r7, r3, #1
 80099d0:	2f10      	cmp	r7, #16
 80099d2:	bfde      	ittt	le
 80099d4:	9f05      	ldrle	r7, [sp, #20]
 80099d6:	434f      	mulle	r7, r1
 80099d8:	9705      	strle	r7, [sp, #20]
 80099da:	e7f6      	b.n	80099ca <_strtod_l+0x252>
 80099dc:	2c10      	cmp	r4, #16
 80099de:	bfdf      	itttt	le
 80099e0:	230a      	movle	r3, #10
 80099e2:	9905      	ldrle	r1, [sp, #20]
 80099e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80099e8:	9305      	strle	r3, [sp, #20]
 80099ea:	e7e0      	b.n	80099ae <_strtod_l+0x236>
 80099ec:	2300      	movs	r3, #0
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	2301      	movs	r3, #1
 80099f2:	e77b      	b.n	80098ec <_strtod_l+0x174>
 80099f4:	2700      	movs	r7, #0
 80099f6:	1cb2      	adds	r2, r6, #2
 80099f8:	9219      	str	r2, [sp, #100]	; 0x64
 80099fa:	78b2      	ldrb	r2, [r6, #2]
 80099fc:	e784      	b.n	8009908 <_strtod_l+0x190>
 80099fe:	bf00      	nop
 8009a00:	0800e448 	.word	0x0800e448
 8009a04:	0800e1fc 	.word	0x0800e1fc
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	2701      	movs	r7, #1
 8009a0e:	e7f2      	b.n	80099f6 <_strtod_l+0x27e>
 8009a10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a12:	1c51      	adds	r1, r2, #1
 8009a14:	9119      	str	r1, [sp, #100]	; 0x64
 8009a16:	7852      	ldrb	r2, [r2, #1]
 8009a18:	2a30      	cmp	r2, #48	; 0x30
 8009a1a:	d0f9      	beq.n	8009a10 <_strtod_l+0x298>
 8009a1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a20:	2908      	cmp	r1, #8
 8009a22:	f63f af77 	bhi.w	8009914 <_strtod_l+0x19c>
 8009a26:	f04f 0e0a 	mov.w	lr, #10
 8009a2a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009a2e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a30:	9209      	str	r2, [sp, #36]	; 0x24
 8009a32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a34:	1c51      	adds	r1, r2, #1
 8009a36:	9119      	str	r1, [sp, #100]	; 0x64
 8009a38:	7852      	ldrb	r2, [r2, #1]
 8009a3a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009a3e:	2d09      	cmp	r5, #9
 8009a40:	d935      	bls.n	8009aae <_strtod_l+0x336>
 8009a42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a44:	1b49      	subs	r1, r1, r5
 8009a46:	2908      	cmp	r1, #8
 8009a48:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009a4c:	dc02      	bgt.n	8009a54 <_strtod_l+0x2dc>
 8009a4e:	4565      	cmp	r5, ip
 8009a50:	bfa8      	it	ge
 8009a52:	4665      	movge	r5, ip
 8009a54:	b107      	cbz	r7, 8009a58 <_strtod_l+0x2e0>
 8009a56:	426d      	negs	r5, r5
 8009a58:	2c00      	cmp	r4, #0
 8009a5a:	d14c      	bne.n	8009af6 <_strtod_l+0x37e>
 8009a5c:	9907      	ldr	r1, [sp, #28]
 8009a5e:	4301      	orrs	r1, r0
 8009a60:	f47f aecb 	bne.w	80097fa <_strtod_l+0x82>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f47f aee4 	bne.w	8009832 <_strtod_l+0xba>
 8009a6a:	2a69      	cmp	r2, #105	; 0x69
 8009a6c:	d026      	beq.n	8009abc <_strtod_l+0x344>
 8009a6e:	dc23      	bgt.n	8009ab8 <_strtod_l+0x340>
 8009a70:	2a49      	cmp	r2, #73	; 0x49
 8009a72:	d023      	beq.n	8009abc <_strtod_l+0x344>
 8009a74:	2a4e      	cmp	r2, #78	; 0x4e
 8009a76:	f47f aedc 	bne.w	8009832 <_strtod_l+0xba>
 8009a7a:	499d      	ldr	r1, [pc, #628]	; (8009cf0 <_strtod_l+0x578>)
 8009a7c:	a819      	add	r0, sp, #100	; 0x64
 8009a7e:	f001 fe17 	bl	800b6b0 <__match>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f aed5 	beq.w	8009832 <_strtod_l+0xba>
 8009a88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b28      	cmp	r3, #40	; 0x28
 8009a8e:	d12c      	bne.n	8009aea <_strtod_l+0x372>
 8009a90:	4998      	ldr	r1, [pc, #608]	; (8009cf4 <_strtod_l+0x57c>)
 8009a92:	aa1c      	add	r2, sp, #112	; 0x70
 8009a94:	a819      	add	r0, sp, #100	; 0x64
 8009a96:	f001 fe1f 	bl	800b6d8 <__hexnan>
 8009a9a:	2805      	cmp	r0, #5
 8009a9c:	d125      	bne.n	8009aea <_strtod_l+0x372>
 8009a9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aa0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009aa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009aa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009aac:	e6a5      	b.n	80097fa <_strtod_l+0x82>
 8009aae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009ab2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009ab6:	e7bc      	b.n	8009a32 <_strtod_l+0x2ba>
 8009ab8:	2a6e      	cmp	r2, #110	; 0x6e
 8009aba:	e7dc      	b.n	8009a76 <_strtod_l+0x2fe>
 8009abc:	498e      	ldr	r1, [pc, #568]	; (8009cf8 <_strtod_l+0x580>)
 8009abe:	a819      	add	r0, sp, #100	; 0x64
 8009ac0:	f001 fdf6 	bl	800b6b0 <__match>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	f43f aeb4 	beq.w	8009832 <_strtod_l+0xba>
 8009aca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009acc:	498b      	ldr	r1, [pc, #556]	; (8009cfc <_strtod_l+0x584>)
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	a819      	add	r0, sp, #100	; 0x64
 8009ad2:	9319      	str	r3, [sp, #100]	; 0x64
 8009ad4:	f001 fdec 	bl	800b6b0 <__match>
 8009ad8:	b910      	cbnz	r0, 8009ae0 <_strtod_l+0x368>
 8009ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009adc:	3301      	adds	r3, #1
 8009ade:	9319      	str	r3, [sp, #100]	; 0x64
 8009ae0:	f04f 0800 	mov.w	r8, #0
 8009ae4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009d00 <_strtod_l+0x588>
 8009ae8:	e687      	b.n	80097fa <_strtod_l+0x82>
 8009aea:	4886      	ldr	r0, [pc, #536]	; (8009d04 <_strtod_l+0x58c>)
 8009aec:	f002 fdc0 	bl	800c670 <nan>
 8009af0:	4680      	mov	r8, r0
 8009af2:	4689      	mov	r9, r1
 8009af4:	e681      	b.n	80097fa <_strtod_l+0x82>
 8009af6:	9b04      	ldr	r3, [sp, #16]
 8009af8:	f1bb 0f00 	cmp.w	fp, #0
 8009afc:	bf08      	it	eq
 8009afe:	46a3      	moveq	fp, r4
 8009b00:	1aeb      	subs	r3, r5, r3
 8009b02:	2c10      	cmp	r4, #16
 8009b04:	9806      	ldr	r0, [sp, #24]
 8009b06:	4626      	mov	r6, r4
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	bfa8      	it	ge
 8009b0c:	2610      	movge	r6, #16
 8009b0e:	f7f6 fc69 	bl	80003e4 <__aeabi_ui2d>
 8009b12:	2c09      	cmp	r4, #9
 8009b14:	4680      	mov	r8, r0
 8009b16:	4689      	mov	r9, r1
 8009b18:	dd13      	ble.n	8009b42 <_strtod_l+0x3ca>
 8009b1a:	4b7b      	ldr	r3, [pc, #492]	; (8009d08 <_strtod_l+0x590>)
 8009b1c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b20:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b24:	f7f6 fcd8 	bl	80004d8 <__aeabi_dmul>
 8009b28:	4680      	mov	r8, r0
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	f7f6 fc59 	bl	80003e4 <__aeabi_ui2d>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	4640      	mov	r0, r8
 8009b38:	4649      	mov	r1, r9
 8009b3a:	f7f6 fb17 	bl	800016c <__adddf3>
 8009b3e:	4680      	mov	r8, r0
 8009b40:	4689      	mov	r9, r1
 8009b42:	2c0f      	cmp	r4, #15
 8009b44:	dc36      	bgt.n	8009bb4 <_strtod_l+0x43c>
 8009b46:	9b07      	ldr	r3, [sp, #28]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f43f ae56 	beq.w	80097fa <_strtod_l+0x82>
 8009b4e:	dd22      	ble.n	8009b96 <_strtod_l+0x41e>
 8009b50:	2b16      	cmp	r3, #22
 8009b52:	dc09      	bgt.n	8009b68 <_strtod_l+0x3f0>
 8009b54:	496c      	ldr	r1, [pc, #432]	; (8009d08 <_strtod_l+0x590>)
 8009b56:	4642      	mov	r2, r8
 8009b58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b5c:	464b      	mov	r3, r9
 8009b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b62:	f7f6 fcb9 	bl	80004d8 <__aeabi_dmul>
 8009b66:	e7c3      	b.n	8009af0 <_strtod_l+0x378>
 8009b68:	9a07      	ldr	r2, [sp, #28]
 8009b6a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	db20      	blt.n	8009bb4 <_strtod_l+0x43c>
 8009b72:	4d65      	ldr	r5, [pc, #404]	; (8009d08 <_strtod_l+0x590>)
 8009b74:	f1c4 040f 	rsb	r4, r4, #15
 8009b78:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b82:	464b      	mov	r3, r9
 8009b84:	f7f6 fca8 	bl	80004d8 <__aeabi_dmul>
 8009b88:	9b07      	ldr	r3, [sp, #28]
 8009b8a:	1b1c      	subs	r4, r3, r4
 8009b8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b94:	e7e5      	b.n	8009b62 <_strtod_l+0x3ea>
 8009b96:	9b07      	ldr	r3, [sp, #28]
 8009b98:	3316      	adds	r3, #22
 8009b9a:	db0b      	blt.n	8009bb4 <_strtod_l+0x43c>
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	1b5d      	subs	r5, r3, r5
 8009ba2:	4b59      	ldr	r3, [pc, #356]	; (8009d08 <_strtod_l+0x590>)
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009baa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bae:	f7f6 fdbd 	bl	800072c <__aeabi_ddiv>
 8009bb2:	e79d      	b.n	8009af0 <_strtod_l+0x378>
 8009bb4:	9b07      	ldr	r3, [sp, #28]
 8009bb6:	1ba6      	subs	r6, r4, r6
 8009bb8:	441e      	add	r6, r3
 8009bba:	2e00      	cmp	r6, #0
 8009bbc:	dd74      	ble.n	8009ca8 <_strtod_l+0x530>
 8009bbe:	f016 030f 	ands.w	r3, r6, #15
 8009bc2:	d00a      	beq.n	8009bda <_strtod_l+0x462>
 8009bc4:	4950      	ldr	r1, [pc, #320]	; (8009d08 <_strtod_l+0x590>)
 8009bc6:	4642      	mov	r2, r8
 8009bc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bd0:	464b      	mov	r3, r9
 8009bd2:	f7f6 fc81 	bl	80004d8 <__aeabi_dmul>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	f036 060f 	bics.w	r6, r6, #15
 8009bde:	d052      	beq.n	8009c86 <_strtod_l+0x50e>
 8009be0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009be4:	dd27      	ble.n	8009c36 <_strtod_l+0x4be>
 8009be6:	f04f 0b00 	mov.w	fp, #0
 8009bea:	f8cd b010 	str.w	fp, [sp, #16]
 8009bee:	f8cd b020 	str.w	fp, [sp, #32]
 8009bf2:	f8cd b018 	str.w	fp, [sp, #24]
 8009bf6:	2322      	movs	r3, #34	; 0x22
 8009bf8:	f04f 0800 	mov.w	r8, #0
 8009bfc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009d00 <_strtod_l+0x588>
 8009c00:	f8ca 3000 	str.w	r3, [sl]
 8009c04:	9b08      	ldr	r3, [sp, #32]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f43f adf7 	beq.w	80097fa <_strtod_l+0x82>
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c10:	f001 fe6a 	bl	800b8e8 <_Bfree>
 8009c14:	4650      	mov	r0, sl
 8009c16:	9906      	ldr	r1, [sp, #24]
 8009c18:	f001 fe66 	bl	800b8e8 <_Bfree>
 8009c1c:	4650      	mov	r0, sl
 8009c1e:	9904      	ldr	r1, [sp, #16]
 8009c20:	f001 fe62 	bl	800b8e8 <_Bfree>
 8009c24:	4650      	mov	r0, sl
 8009c26:	9908      	ldr	r1, [sp, #32]
 8009c28:	f001 fe5e 	bl	800b8e8 <_Bfree>
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	4650      	mov	r0, sl
 8009c30:	f001 fe5a 	bl	800b8e8 <_Bfree>
 8009c34:	e5e1      	b.n	80097fa <_strtod_l+0x82>
 8009c36:	4b35      	ldr	r3, [pc, #212]	; (8009d0c <_strtod_l+0x594>)
 8009c38:	4640      	mov	r0, r8
 8009c3a:	9305      	str	r3, [sp, #20]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	4649      	mov	r1, r9
 8009c40:	461f      	mov	r7, r3
 8009c42:	1136      	asrs	r6, r6, #4
 8009c44:	2e01      	cmp	r6, #1
 8009c46:	dc21      	bgt.n	8009c8c <_strtod_l+0x514>
 8009c48:	b10b      	cbz	r3, 8009c4e <_strtod_l+0x4d6>
 8009c4a:	4680      	mov	r8, r0
 8009c4c:	4689      	mov	r9, r1
 8009c4e:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <_strtod_l+0x594>)
 8009c50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009c54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c58:	4642      	mov	r2, r8
 8009c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c5e:	464b      	mov	r3, r9
 8009c60:	f7f6 fc3a 	bl	80004d8 <__aeabi_dmul>
 8009c64:	4b26      	ldr	r3, [pc, #152]	; (8009d00 <_strtod_l+0x588>)
 8009c66:	460a      	mov	r2, r1
 8009c68:	400b      	ands	r3, r1
 8009c6a:	4929      	ldr	r1, [pc, #164]	; (8009d10 <_strtod_l+0x598>)
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	428b      	cmp	r3, r1
 8009c70:	d8b9      	bhi.n	8009be6 <_strtod_l+0x46e>
 8009c72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c76:	428b      	cmp	r3, r1
 8009c78:	bf86      	itte	hi
 8009c7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009c7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009d14 <_strtod_l+0x59c>
 8009c82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009c86:	2300      	movs	r3, #0
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	e07f      	b.n	8009d8c <_strtod_l+0x614>
 8009c8c:	07f2      	lsls	r2, r6, #31
 8009c8e:	d505      	bpl.n	8009c9c <_strtod_l+0x524>
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f7f6 fc1f 	bl	80004d8 <__aeabi_dmul>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	9a05      	ldr	r2, [sp, #20]
 8009c9e:	3701      	adds	r7, #1
 8009ca0:	3208      	adds	r2, #8
 8009ca2:	1076      	asrs	r6, r6, #1
 8009ca4:	9205      	str	r2, [sp, #20]
 8009ca6:	e7cd      	b.n	8009c44 <_strtod_l+0x4cc>
 8009ca8:	d0ed      	beq.n	8009c86 <_strtod_l+0x50e>
 8009caa:	4276      	negs	r6, r6
 8009cac:	f016 020f 	ands.w	r2, r6, #15
 8009cb0:	d00a      	beq.n	8009cc8 <_strtod_l+0x550>
 8009cb2:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <_strtod_l+0x590>)
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cba:	4649      	mov	r1, r9
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fd34 	bl	800072c <__aeabi_ddiv>
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	1136      	asrs	r6, r6, #4
 8009cca:	d0dc      	beq.n	8009c86 <_strtod_l+0x50e>
 8009ccc:	2e1f      	cmp	r6, #31
 8009cce:	dd23      	ble.n	8009d18 <_strtod_l+0x5a0>
 8009cd0:	f04f 0b00 	mov.w	fp, #0
 8009cd4:	f8cd b010 	str.w	fp, [sp, #16]
 8009cd8:	f8cd b020 	str.w	fp, [sp, #32]
 8009cdc:	f8cd b018 	str.w	fp, [sp, #24]
 8009ce0:	2322      	movs	r3, #34	; 0x22
 8009ce2:	f04f 0800 	mov.w	r8, #0
 8009ce6:	f04f 0900 	mov.w	r9, #0
 8009cea:	f8ca 3000 	str.w	r3, [sl]
 8009cee:	e789      	b.n	8009c04 <_strtod_l+0x48c>
 8009cf0:	0800e1cd 	.word	0x0800e1cd
 8009cf4:	0800e210 	.word	0x0800e210
 8009cf8:	0800e1c5 	.word	0x0800e1c5
 8009cfc:	0800e354 	.word	0x0800e354
 8009d00:	7ff00000 	.word	0x7ff00000
 8009d04:	0800e600 	.word	0x0800e600
 8009d08:	0800e4e0 	.word	0x0800e4e0
 8009d0c:	0800e4b8 	.word	0x0800e4b8
 8009d10:	7ca00000 	.word	0x7ca00000
 8009d14:	7fefffff 	.word	0x7fefffff
 8009d18:	f016 0310 	ands.w	r3, r6, #16
 8009d1c:	bf18      	it	ne
 8009d1e:	236a      	movne	r3, #106	; 0x6a
 8009d20:	4640      	mov	r0, r8
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	4649      	mov	r1, r9
 8009d26:	2300      	movs	r3, #0
 8009d28:	4fb0      	ldr	r7, [pc, #704]	; (8009fec <_strtod_l+0x874>)
 8009d2a:	07f2      	lsls	r2, r6, #31
 8009d2c:	d504      	bpl.n	8009d38 <_strtod_l+0x5c0>
 8009d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d32:	f7f6 fbd1 	bl	80004d8 <__aeabi_dmul>
 8009d36:	2301      	movs	r3, #1
 8009d38:	1076      	asrs	r6, r6, #1
 8009d3a:	f107 0708 	add.w	r7, r7, #8
 8009d3e:	d1f4      	bne.n	8009d2a <_strtod_l+0x5b2>
 8009d40:	b10b      	cbz	r3, 8009d46 <_strtod_l+0x5ce>
 8009d42:	4680      	mov	r8, r0
 8009d44:	4689      	mov	r9, r1
 8009d46:	9b05      	ldr	r3, [sp, #20]
 8009d48:	b1c3      	cbz	r3, 8009d7c <_strtod_l+0x604>
 8009d4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009d4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	4649      	mov	r1, r9
 8009d56:	dd11      	ble.n	8009d7c <_strtod_l+0x604>
 8009d58:	2b1f      	cmp	r3, #31
 8009d5a:	f340 8127 	ble.w	8009fac <_strtod_l+0x834>
 8009d5e:	2b34      	cmp	r3, #52	; 0x34
 8009d60:	bfd8      	it	le
 8009d62:	f04f 33ff 	movle.w	r3, #4294967295
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	bfcf      	iteee	gt
 8009d6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009d70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d74:	fa03 f202 	lslle.w	r2, r3, r2
 8009d78:	ea02 0901 	andle.w	r9, r2, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1a1      	bne.n	8009cd0 <_strtod_l+0x558>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	465a      	mov	r2, fp
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	4650      	mov	r0, sl
 8009d94:	4623      	mov	r3, r4
 8009d96:	9908      	ldr	r1, [sp, #32]
 8009d98:	f001 fe0e 	bl	800b9b8 <__s2b>
 8009d9c:	9008      	str	r0, [sp, #32]
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f af21 	beq.w	8009be6 <_strtod_l+0x46e>
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	f04f 0b00 	mov.w	fp, #0
 8009daa:	1b5d      	subs	r5, r3, r5
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	f8cd b010 	str.w	fp, [sp, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	bfb4      	ite	lt
 8009db6:	462b      	movlt	r3, r5
 8009db8:	2300      	movge	r3, #0
 8009dba:	930e      	str	r3, [sp, #56]	; 0x38
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009dc2:	9314      	str	r3, [sp, #80]	; 0x50
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	6859      	ldr	r1, [r3, #4]
 8009dca:	f001 fd4d 	bl	800b868 <_Balloc>
 8009dce:	9006      	str	r0, [sp, #24]
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	f43f af10 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009dd6:	9b08      	ldr	r3, [sp, #32]
 8009dd8:	300c      	adds	r0, #12
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	f103 010c 	add.w	r1, r3, #12
 8009de0:	3202      	adds	r2, #2
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	f7fe fdf4 	bl	80089d0 <memcpy>
 8009de8:	ab1c      	add	r3, sp, #112	; 0x70
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	ab1b      	add	r3, sp, #108	; 0x6c
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	4650      	mov	r0, sl
 8009df6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009dfa:	f002 f91f 	bl	800c03c <__d2b>
 8009dfe:	901a      	str	r0, [sp, #104]	; 0x68
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f43f aef8 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009e06:	2101      	movs	r1, #1
 8009e08:	4650      	mov	r0, sl
 8009e0a:	f001 fe6d 	bl	800bae8 <__i2b>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	9004      	str	r0, [sp, #16]
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f43f aeef 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009e18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009e1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e1c:	2d00      	cmp	r5, #0
 8009e1e:	bfab      	itete	ge
 8009e20:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009e22:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009e24:	18ee      	addge	r6, r5, r3
 8009e26:	1b5c      	sublt	r4, r3, r5
 8009e28:	9b05      	ldr	r3, [sp, #20]
 8009e2a:	bfa8      	it	ge
 8009e2c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009e2e:	eba5 0503 	sub.w	r5, r5, r3
 8009e32:	4415      	add	r5, r2
 8009e34:	4b6e      	ldr	r3, [pc, #440]	; (8009ff0 <_strtod_l+0x878>)
 8009e36:	f105 35ff 	add.w	r5, r5, #4294967295
 8009e3a:	bfb8      	it	lt
 8009e3c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e44:	f280 80c4 	bge.w	8009fd0 <_strtod_l+0x858>
 8009e48:	1b5b      	subs	r3, r3, r5
 8009e4a:	2b1f      	cmp	r3, #31
 8009e4c:	f04f 0701 	mov.w	r7, #1
 8009e50:	eba2 0203 	sub.w	r2, r2, r3
 8009e54:	f300 80b1 	bgt.w	8009fba <_strtod_l+0x842>
 8009e58:	2500      	movs	r5, #0
 8009e5a:	fa07 f303 	lsl.w	r3, r7, r3
 8009e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e60:	18b7      	adds	r7, r6, r2
 8009e62:	9b05      	ldr	r3, [sp, #20]
 8009e64:	42be      	cmp	r6, r7
 8009e66:	4414      	add	r4, r2
 8009e68:	441c      	add	r4, r3
 8009e6a:	4633      	mov	r3, r6
 8009e6c:	bfa8      	it	ge
 8009e6e:	463b      	movge	r3, r7
 8009e70:	42a3      	cmp	r3, r4
 8009e72:	bfa8      	it	ge
 8009e74:	4623      	movge	r3, r4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfc2      	ittt	gt
 8009e7a:	1aff      	subgt	r7, r7, r3
 8009e7c:	1ae4      	subgt	r4, r4, r3
 8009e7e:	1af6      	subgt	r6, r6, r3
 8009e80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd17      	ble.n	8009eb6 <_strtod_l+0x73e>
 8009e86:	461a      	mov	r2, r3
 8009e88:	4650      	mov	r0, sl
 8009e8a:	9904      	ldr	r1, [sp, #16]
 8009e8c:	f001 feea 	bl	800bc64 <__pow5mult>
 8009e90:	9004      	str	r0, [sp, #16]
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f43f aeaf 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009e98:	4601      	mov	r1, r0
 8009e9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	f001 fe39 	bl	800bb14 <__multiply>
 8009ea2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f aea6 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009eaa:	4650      	mov	r0, sl
 8009eac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009eae:	f001 fd1b 	bl	800b8e8 <_Bfree>
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	f300 808e 	bgt.w	8009fd8 <_strtod_l+0x860>
 8009ebc:	9b07      	ldr	r3, [sp, #28]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x75c>
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ec6:	9906      	ldr	r1, [sp, #24]
 8009ec8:	f001 fecc 	bl	800bc64 <__pow5mult>
 8009ecc:	9006      	str	r0, [sp, #24]
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae91 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009ed4:	2c00      	cmp	r4, #0
 8009ed6:	dd08      	ble.n	8009eea <_strtod_l+0x772>
 8009ed8:	4622      	mov	r2, r4
 8009eda:	4650      	mov	r0, sl
 8009edc:	9906      	ldr	r1, [sp, #24]
 8009ede:	f001 ff1b 	bl	800bd18 <__lshift>
 8009ee2:	9006      	str	r0, [sp, #24]
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	f43f ae86 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	dd08      	ble.n	8009f00 <_strtod_l+0x788>
 8009eee:	4632      	mov	r2, r6
 8009ef0:	4650      	mov	r0, sl
 8009ef2:	9904      	ldr	r1, [sp, #16]
 8009ef4:	f001 ff10 	bl	800bd18 <__lshift>
 8009ef8:	9004      	str	r0, [sp, #16]
 8009efa:	2800      	cmp	r0, #0
 8009efc:	f43f ae7b 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009f00:	4650      	mov	r0, sl
 8009f02:	9a06      	ldr	r2, [sp, #24]
 8009f04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f06:	f001 ff93 	bl	800be30 <__mdiff>
 8009f0a:	4683      	mov	fp, r0
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f43f ae72 	beq.w	8009bf6 <_strtod_l+0x47e>
 8009f12:	2400      	movs	r4, #0
 8009f14:	68c3      	ldr	r3, [r0, #12]
 8009f16:	9904      	ldr	r1, [sp, #16]
 8009f18:	60c4      	str	r4, [r0, #12]
 8009f1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1c:	f001 ff6c 	bl	800bdf8 <__mcmp>
 8009f20:	42a0      	cmp	r0, r4
 8009f22:	da6b      	bge.n	8009ffc <_strtod_l+0x884>
 8009f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f26:	ea53 0308 	orrs.w	r3, r3, r8
 8009f2a:	f040 8091 	bne.w	800a050 <_strtod_l+0x8d8>
 8009f2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f040 808c 	bne.w	800a050 <_strtod_l+0x8d8>
 8009f38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f3c:	0d1b      	lsrs	r3, r3, #20
 8009f3e:	051b      	lsls	r3, r3, #20
 8009f40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f44:	f240 8084 	bls.w	800a050 <_strtod_l+0x8d8>
 8009f48:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009f4c:	b91b      	cbnz	r3, 8009f56 <_strtod_l+0x7de>
 8009f4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	dd7c      	ble.n	800a050 <_strtod_l+0x8d8>
 8009f56:	4659      	mov	r1, fp
 8009f58:	2201      	movs	r2, #1
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	f001 fedc 	bl	800bd18 <__lshift>
 8009f60:	9904      	ldr	r1, [sp, #16]
 8009f62:	4683      	mov	fp, r0
 8009f64:	f001 ff48 	bl	800bdf8 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dd71      	ble.n	800a050 <_strtod_l+0x8d8>
 8009f6c:	9905      	ldr	r1, [sp, #20]
 8009f6e:	464b      	mov	r3, r9
 8009f70:	4a20      	ldr	r2, [pc, #128]	; (8009ff4 <_strtod_l+0x87c>)
 8009f72:	2900      	cmp	r1, #0
 8009f74:	f000 808c 	beq.w	800a090 <_strtod_l+0x918>
 8009f78:	ea02 0109 	and.w	r1, r2, r9
 8009f7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f80:	f300 8086 	bgt.w	800a090 <_strtod_l+0x918>
 8009f84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f88:	f77f aeaa 	ble.w	8009ce0 <_strtod_l+0x568>
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	4b19      	ldr	r3, [pc, #100]	; (8009ff8 <_strtod_l+0x880>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 faa0 	bl	80004d8 <__aeabi_dmul>
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4303      	orrs	r3, r0
 8009f9c:	bf08      	it	eq
 8009f9e:	2322      	moveq	r3, #34	; 0x22
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	4689      	mov	r9, r1
 8009fa4:	bf08      	it	eq
 8009fa6:	f8ca 3000 	streq.w	r3, [sl]
 8009faa:	e62f      	b.n	8009c0c <_strtod_l+0x494>
 8009fac:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	ea03 0808 	and.w	r8, r3, r8
 8009fb8:	e6e0      	b.n	8009d7c <_strtod_l+0x604>
 8009fba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009fbe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009fc2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009fc6:	35e2      	adds	r5, #226	; 0xe2
 8009fc8:	fa07 f505 	lsl.w	r5, r7, r5
 8009fcc:	970f      	str	r7, [sp, #60]	; 0x3c
 8009fce:	e747      	b.n	8009e60 <_strtod_l+0x6e8>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	2500      	movs	r5, #0
 8009fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fd6:	e743      	b.n	8009e60 <_strtod_l+0x6e8>
 8009fd8:	463a      	mov	r2, r7
 8009fda:	4650      	mov	r0, sl
 8009fdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009fde:	f001 fe9b 	bl	800bd18 <__lshift>
 8009fe2:	901a      	str	r0, [sp, #104]	; 0x68
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f47f af69 	bne.w	8009ebc <_strtod_l+0x744>
 8009fea:	e604      	b.n	8009bf6 <_strtod_l+0x47e>
 8009fec:	0800e228 	.word	0x0800e228
 8009ff0:	fffffc02 	.word	0xfffffc02
 8009ff4:	7ff00000 	.word	0x7ff00000
 8009ff8:	39500000 	.word	0x39500000
 8009ffc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a000:	d165      	bne.n	800a0ce <_strtod_l+0x956>
 800a002:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a008:	b35a      	cbz	r2, 800a062 <_strtod_l+0x8ea>
 800a00a:	4a99      	ldr	r2, [pc, #612]	; (800a270 <_strtod_l+0xaf8>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d12b      	bne.n	800a068 <_strtod_l+0x8f0>
 800a010:	9b05      	ldr	r3, [sp, #20]
 800a012:	4641      	mov	r1, r8
 800a014:	b303      	cbz	r3, 800a058 <_strtod_l+0x8e0>
 800a016:	464a      	mov	r2, r9
 800a018:	4b96      	ldr	r3, [pc, #600]	; (800a274 <_strtod_l+0xafc>)
 800a01a:	4013      	ands	r3, r2
 800a01c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a020:	f04f 32ff 	mov.w	r2, #4294967295
 800a024:	d81b      	bhi.n	800a05e <_strtod_l+0x8e6>
 800a026:	0d1b      	lsrs	r3, r3, #20
 800a028:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a02c:	fa02 f303 	lsl.w	r3, r2, r3
 800a030:	4299      	cmp	r1, r3
 800a032:	d119      	bne.n	800a068 <_strtod_l+0x8f0>
 800a034:	4b90      	ldr	r3, [pc, #576]	; (800a278 <_strtod_l+0xb00>)
 800a036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a038:	429a      	cmp	r2, r3
 800a03a:	d102      	bne.n	800a042 <_strtod_l+0x8ca>
 800a03c:	3101      	adds	r1, #1
 800a03e:	f43f adda 	beq.w	8009bf6 <_strtod_l+0x47e>
 800a042:	f04f 0800 	mov.w	r8, #0
 800a046:	4b8b      	ldr	r3, [pc, #556]	; (800a274 <_strtod_l+0xafc>)
 800a048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a04a:	401a      	ands	r2, r3
 800a04c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a050:	9b05      	ldr	r3, [sp, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d19a      	bne.n	8009f8c <_strtod_l+0x814>
 800a056:	e5d9      	b.n	8009c0c <_strtod_l+0x494>
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
 800a05c:	e7e8      	b.n	800a030 <_strtod_l+0x8b8>
 800a05e:	4613      	mov	r3, r2
 800a060:	e7e6      	b.n	800a030 <_strtod_l+0x8b8>
 800a062:	ea53 0308 	orrs.w	r3, r3, r8
 800a066:	d081      	beq.n	8009f6c <_strtod_l+0x7f4>
 800a068:	b1e5      	cbz	r5, 800a0a4 <_strtod_l+0x92c>
 800a06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06c:	421d      	tst	r5, r3
 800a06e:	d0ef      	beq.n	800a050 <_strtod_l+0x8d8>
 800a070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a072:	4640      	mov	r0, r8
 800a074:	4649      	mov	r1, r9
 800a076:	9a05      	ldr	r2, [sp, #20]
 800a078:	b1c3      	cbz	r3, 800a0ac <_strtod_l+0x934>
 800a07a:	f7ff fb59 	bl	8009730 <sulp>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a086:	f7f6 f871 	bl	800016c <__adddf3>
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	e7df      	b.n	800a050 <_strtod_l+0x8d8>
 800a090:	4013      	ands	r3, r2
 800a092:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a096:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a09a:	f04f 38ff 	mov.w	r8, #4294967295
 800a09e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a0a2:	e7d5      	b.n	800a050 <_strtod_l+0x8d8>
 800a0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0a6:	ea13 0f08 	tst.w	r3, r8
 800a0aa:	e7e0      	b.n	800a06e <_strtod_l+0x8f6>
 800a0ac:	f7ff fb40 	bl	8009730 <sulp>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0b8:	f7f6 f856 	bl	8000168 <__aeabi_dsub>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4680      	mov	r8, r0
 800a0c2:	4689      	mov	r9, r1
 800a0c4:	f7f6 fc70 	bl	80009a8 <__aeabi_dcmpeq>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0c1      	beq.n	800a050 <_strtod_l+0x8d8>
 800a0cc:	e608      	b.n	8009ce0 <_strtod_l+0x568>
 800a0ce:	4658      	mov	r0, fp
 800a0d0:	9904      	ldr	r1, [sp, #16]
 800a0d2:	f002 f80f 	bl	800c0f4 <__ratio>
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	f7f6 fc76 	bl	80009d0 <__aeabi_dcmple>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d070      	beq.n	800a1ca <_strtod_l+0xa52>
 800a0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d042      	beq.n	800a174 <_strtod_l+0x9fc>
 800a0ee:	2600      	movs	r6, #0
 800a0f0:	4f62      	ldr	r7, [pc, #392]	; (800a27c <_strtod_l+0xb04>)
 800a0f2:	4d62      	ldr	r5, [pc, #392]	; (800a27c <_strtod_l+0xb04>)
 800a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0fa:	0d1b      	lsrs	r3, r3, #20
 800a0fc:	051b      	lsls	r3, r3, #20
 800a0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a100:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a102:	4b5f      	ldr	r3, [pc, #380]	; (800a280 <_strtod_l+0xb08>)
 800a104:	429a      	cmp	r2, r3
 800a106:	f040 80c3 	bne.w	800a290 <_strtod_l+0xb18>
 800a10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10c:	4640      	mov	r0, r8
 800a10e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a112:	4649      	mov	r1, r9
 800a114:	f001 ff18 	bl	800bf48 <__ulp>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 f9da 	bl	80004d8 <__aeabi_dmul>
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	f7f6 f820 	bl	800016c <__adddf3>
 800a12c:	460b      	mov	r3, r1
 800a12e:	4951      	ldr	r1, [pc, #324]	; (800a274 <_strtod_l+0xafc>)
 800a130:	4a54      	ldr	r2, [pc, #336]	; (800a284 <_strtod_l+0xb0c>)
 800a132:	4019      	ands	r1, r3
 800a134:	4291      	cmp	r1, r2
 800a136:	4680      	mov	r8, r0
 800a138:	d95d      	bls.n	800a1f6 <_strtod_l+0xa7e>
 800a13a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a13c:	4b4e      	ldr	r3, [pc, #312]	; (800a278 <_strtod_l+0xb00>)
 800a13e:	429a      	cmp	r2, r3
 800a140:	d103      	bne.n	800a14a <_strtod_l+0x9d2>
 800a142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a144:	3301      	adds	r3, #1
 800a146:	f43f ad56 	beq.w	8009bf6 <_strtod_l+0x47e>
 800a14a:	f04f 38ff 	mov.w	r8, #4294967295
 800a14e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a278 <_strtod_l+0xb00>
 800a152:	4650      	mov	r0, sl
 800a154:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a156:	f001 fbc7 	bl	800b8e8 <_Bfree>
 800a15a:	4650      	mov	r0, sl
 800a15c:	9906      	ldr	r1, [sp, #24]
 800a15e:	f001 fbc3 	bl	800b8e8 <_Bfree>
 800a162:	4650      	mov	r0, sl
 800a164:	9904      	ldr	r1, [sp, #16]
 800a166:	f001 fbbf 	bl	800b8e8 <_Bfree>
 800a16a:	4659      	mov	r1, fp
 800a16c:	4650      	mov	r0, sl
 800a16e:	f001 fbbb 	bl	800b8e8 <_Bfree>
 800a172:	e627      	b.n	8009dc4 <_strtod_l+0x64c>
 800a174:	f1b8 0f00 	cmp.w	r8, #0
 800a178:	d119      	bne.n	800a1ae <_strtod_l+0xa36>
 800a17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a180:	b9e3      	cbnz	r3, 800a1bc <_strtod_l+0xa44>
 800a182:	2200      	movs	r2, #0
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	4b3c      	ldr	r3, [pc, #240]	; (800a27c <_strtod_l+0xb04>)
 800a18a:	f7f6 fc17 	bl	80009bc <__aeabi_dcmplt>
 800a18e:	b9c8      	cbnz	r0, 800a1c4 <_strtod_l+0xa4c>
 800a190:	2200      	movs	r2, #0
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	4b3c      	ldr	r3, [pc, #240]	; (800a288 <_strtod_l+0xb10>)
 800a198:	f7f6 f99e 	bl	80004d8 <__aeabi_dmul>
 800a19c:	4604      	mov	r4, r0
 800a19e:	460d      	mov	r5, r1
 800a1a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a1a4:	9416      	str	r4, [sp, #88]	; 0x58
 800a1a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1a8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a1ac:	e7a2      	b.n	800a0f4 <_strtod_l+0x97c>
 800a1ae:	f1b8 0f01 	cmp.w	r8, #1
 800a1b2:	d103      	bne.n	800a1bc <_strtod_l+0xa44>
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f43f ad92 	beq.w	8009ce0 <_strtod_l+0x568>
 800a1bc:	2600      	movs	r6, #0
 800a1be:	2400      	movs	r4, #0
 800a1c0:	4f32      	ldr	r7, [pc, #200]	; (800a28c <_strtod_l+0xb14>)
 800a1c2:	e796      	b.n	800a0f2 <_strtod_l+0x97a>
 800a1c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a1c6:	4d30      	ldr	r5, [pc, #192]	; (800a288 <_strtod_l+0xb10>)
 800a1c8:	e7ea      	b.n	800a1a0 <_strtod_l+0xa28>
 800a1ca:	4b2f      	ldr	r3, [pc, #188]	; (800a288 <_strtod_l+0xb10>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	f7f6 f981 	bl	80004d8 <__aeabi_dmul>
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	b933      	cbnz	r3, 800a1ec <_strtod_l+0xa74>
 800a1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e2:	9010      	str	r0, [sp, #64]	; 0x40
 800a1e4:	9311      	str	r3, [sp, #68]	; 0x44
 800a1e6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a1ea:	e783      	b.n	800a0f4 <_strtod_l+0x97c>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a1f4:	e7f7      	b.n	800a1e6 <_strtod_l+0xa6e>
 800a1f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a1fa:	9b05      	ldr	r3, [sp, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1a8      	bne.n	800a152 <_strtod_l+0x9da>
 800a200:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a204:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a206:	0d1b      	lsrs	r3, r3, #20
 800a208:	051b      	lsls	r3, r3, #20
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d1a1      	bne.n	800a152 <_strtod_l+0x9da>
 800a20e:	4620      	mov	r0, r4
 800a210:	4629      	mov	r1, r5
 800a212:	f7f6 ff7d 	bl	8001110 <__aeabi_d2lz>
 800a216:	f7f6 f931 	bl	800047c <__aeabi_l2d>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f5 ffa1 	bl	8000168 <__aeabi_dsub>
 800a226:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a22c:	ea43 0308 	orr.w	r3, r3, r8
 800a230:	4313      	orrs	r3, r2
 800a232:	4604      	mov	r4, r0
 800a234:	460d      	mov	r5, r1
 800a236:	d066      	beq.n	800a306 <_strtod_l+0xb8e>
 800a238:	a309      	add	r3, pc, #36	; (adr r3, 800a260 <_strtod_l+0xae8>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f6 fbbd 	bl	80009bc <__aeabi_dcmplt>
 800a242:	2800      	cmp	r0, #0
 800a244:	f47f ace2 	bne.w	8009c0c <_strtod_l+0x494>
 800a248:	a307      	add	r3, pc, #28	; (adr r3, 800a268 <_strtod_l+0xaf0>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	4620      	mov	r0, r4
 800a250:	4629      	mov	r1, r5
 800a252:	f7f6 fbd1 	bl	80009f8 <__aeabi_dcmpgt>
 800a256:	2800      	cmp	r0, #0
 800a258:	f43f af7b 	beq.w	800a152 <_strtod_l+0x9da>
 800a25c:	e4d6      	b.n	8009c0c <_strtod_l+0x494>
 800a25e:	bf00      	nop
 800a260:	94a03595 	.word	0x94a03595
 800a264:	3fdfffff 	.word	0x3fdfffff
 800a268:	35afe535 	.word	0x35afe535
 800a26c:	3fe00000 	.word	0x3fe00000
 800a270:	000fffff 	.word	0x000fffff
 800a274:	7ff00000 	.word	0x7ff00000
 800a278:	7fefffff 	.word	0x7fefffff
 800a27c:	3ff00000 	.word	0x3ff00000
 800a280:	7fe00000 	.word	0x7fe00000
 800a284:	7c9fffff 	.word	0x7c9fffff
 800a288:	3fe00000 	.word	0x3fe00000
 800a28c:	bff00000 	.word	0xbff00000
 800a290:	9b05      	ldr	r3, [sp, #20]
 800a292:	b313      	cbz	r3, 800a2da <_strtod_l+0xb62>
 800a294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a296:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a29a:	d81e      	bhi.n	800a2da <_strtod_l+0xb62>
 800a29c:	a326      	add	r3, pc, #152	; (adr r3, 800a338 <_strtod_l+0xbc0>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f7f6 fb93 	bl	80009d0 <__aeabi_dcmple>
 800a2aa:	b190      	cbz	r0, 800a2d2 <_strtod_l+0xb5a>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7f6 fbea 	bl	8000a88 <__aeabi_d2uiz>
 800a2b4:	2801      	cmp	r0, #1
 800a2b6:	bf38      	it	cc
 800a2b8:	2001      	movcc	r0, #1
 800a2ba:	f7f6 f893 	bl	80003e4 <__aeabi_ui2d>
 800a2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	b9d3      	cbnz	r3, 800a2fc <_strtod_l+0xb84>
 800a2c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ca:	9012      	str	r0, [sp, #72]	; 0x48
 800a2cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a2d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a2d8:	1a9f      	subs	r7, r3, r2
 800a2da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2de:	f001 fe33 	bl	800bf48 <__ulp>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f6 f8f5 	bl	80004d8 <__aeabi_dmul>
 800a2ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2f2:	f7f5 ff3b 	bl	800016c <__adddf3>
 800a2f6:	4680      	mov	r8, r0
 800a2f8:	4689      	mov	r9, r1
 800a2fa:	e77e      	b.n	800a1fa <_strtod_l+0xa82>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a304:	e7e3      	b.n	800a2ce <_strtod_l+0xb56>
 800a306:	a30e      	add	r3, pc, #56	; (adr r3, 800a340 <_strtod_l+0xbc8>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f6 fb56 	bl	80009bc <__aeabi_dcmplt>
 800a310:	e7a1      	b.n	800a256 <_strtod_l+0xade>
 800a312:	2300      	movs	r3, #0
 800a314:	930a      	str	r3, [sp, #40]	; 0x28
 800a316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a318:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	f7ff ba71 	b.w	8009802 <_strtod_l+0x8a>
 800a320:	2a65      	cmp	r2, #101	; 0x65
 800a322:	f43f ab63 	beq.w	80099ec <_strtod_l+0x274>
 800a326:	2a45      	cmp	r2, #69	; 0x45
 800a328:	f43f ab60 	beq.w	80099ec <_strtod_l+0x274>
 800a32c:	2301      	movs	r3, #1
 800a32e:	f7ff bb95 	b.w	8009a5c <_strtod_l+0x2e4>
 800a332:	bf00      	nop
 800a334:	f3af 8000 	nop.w
 800a338:	ffc00000 	.word	0xffc00000
 800a33c:	41dfffff 	.word	0x41dfffff
 800a340:	94a03595 	.word	0x94a03595
 800a344:	3fcfffff 	.word	0x3fcfffff

0800a348 <_strtod_r>:
 800a348:	4b01      	ldr	r3, [pc, #4]	; (800a350 <_strtod_r+0x8>)
 800a34a:	f7ff ba15 	b.w	8009778 <_strtod_l>
 800a34e:	bf00      	nop
 800a350:	20000084 	.word	0x20000084

0800a354 <_strtol_l.constprop.0>:
 800a354:	2b01      	cmp	r3, #1
 800a356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35a:	4680      	mov	r8, r0
 800a35c:	d001      	beq.n	800a362 <_strtol_l.constprop.0+0xe>
 800a35e:	2b24      	cmp	r3, #36	; 0x24
 800a360:	d906      	bls.n	800a370 <_strtol_l.constprop.0+0x1c>
 800a362:	f7fe fb0b 	bl	800897c <__errno>
 800a366:	2316      	movs	r3, #22
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	2000      	movs	r0, #0
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	460d      	mov	r5, r1
 800a372:	4f35      	ldr	r7, [pc, #212]	; (800a448 <_strtol_l.constprop.0+0xf4>)
 800a374:	4628      	mov	r0, r5
 800a376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a37a:	5de6      	ldrb	r6, [r4, r7]
 800a37c:	f016 0608 	ands.w	r6, r6, #8
 800a380:	d1f8      	bne.n	800a374 <_strtol_l.constprop.0+0x20>
 800a382:	2c2d      	cmp	r4, #45	; 0x2d
 800a384:	d12f      	bne.n	800a3e6 <_strtol_l.constprop.0+0x92>
 800a386:	2601      	movs	r6, #1
 800a388:	782c      	ldrb	r4, [r5, #0]
 800a38a:	1c85      	adds	r5, r0, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d057      	beq.n	800a440 <_strtol_l.constprop.0+0xec>
 800a390:	2b10      	cmp	r3, #16
 800a392:	d109      	bne.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a394:	2c30      	cmp	r4, #48	; 0x30
 800a396:	d107      	bne.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a398:	7828      	ldrb	r0, [r5, #0]
 800a39a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a39e:	2858      	cmp	r0, #88	; 0x58
 800a3a0:	d149      	bne.n	800a436 <_strtol_l.constprop.0+0xe2>
 800a3a2:	2310      	movs	r3, #16
 800a3a4:	786c      	ldrb	r4, [r5, #1]
 800a3a6:	3502      	adds	r5, #2
 800a3a8:	2700      	movs	r7, #0
 800a3aa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a3ae:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a3b2:	fbbe f9f3 	udiv	r9, lr, r3
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	fb03 ea19 	mls	sl, r3, r9, lr
 800a3bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a3c0:	f1bc 0f09 	cmp.w	ip, #9
 800a3c4:	d814      	bhi.n	800a3f0 <_strtol_l.constprop.0+0x9c>
 800a3c6:	4664      	mov	r4, ip
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	dd22      	ble.n	800a412 <_strtol_l.constprop.0+0xbe>
 800a3cc:	2f00      	cmp	r7, #0
 800a3ce:	db1d      	blt.n	800a40c <_strtol_l.constprop.0+0xb8>
 800a3d0:	4581      	cmp	r9, r0
 800a3d2:	d31b      	bcc.n	800a40c <_strtol_l.constprop.0+0xb8>
 800a3d4:	d101      	bne.n	800a3da <_strtol_l.constprop.0+0x86>
 800a3d6:	45a2      	cmp	sl, r4
 800a3d8:	db18      	blt.n	800a40c <_strtol_l.constprop.0+0xb8>
 800a3da:	2701      	movs	r7, #1
 800a3dc:	fb00 4003 	mla	r0, r0, r3, r4
 800a3e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3e4:	e7ea      	b.n	800a3bc <_strtol_l.constprop.0+0x68>
 800a3e6:	2c2b      	cmp	r4, #43	; 0x2b
 800a3e8:	bf04      	itt	eq
 800a3ea:	782c      	ldrbeq	r4, [r5, #0]
 800a3ec:	1c85      	addeq	r5, r0, #2
 800a3ee:	e7cd      	b.n	800a38c <_strtol_l.constprop.0+0x38>
 800a3f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a3f4:	f1bc 0f19 	cmp.w	ip, #25
 800a3f8:	d801      	bhi.n	800a3fe <_strtol_l.constprop.0+0xaa>
 800a3fa:	3c37      	subs	r4, #55	; 0x37
 800a3fc:	e7e4      	b.n	800a3c8 <_strtol_l.constprop.0+0x74>
 800a3fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a402:	f1bc 0f19 	cmp.w	ip, #25
 800a406:	d804      	bhi.n	800a412 <_strtol_l.constprop.0+0xbe>
 800a408:	3c57      	subs	r4, #87	; 0x57
 800a40a:	e7dd      	b.n	800a3c8 <_strtol_l.constprop.0+0x74>
 800a40c:	f04f 37ff 	mov.w	r7, #4294967295
 800a410:	e7e6      	b.n	800a3e0 <_strtol_l.constprop.0+0x8c>
 800a412:	2f00      	cmp	r7, #0
 800a414:	da07      	bge.n	800a426 <_strtol_l.constprop.0+0xd2>
 800a416:	2322      	movs	r3, #34	; 0x22
 800a418:	4670      	mov	r0, lr
 800a41a:	f8c8 3000 	str.w	r3, [r8]
 800a41e:	2a00      	cmp	r2, #0
 800a420:	d0a4      	beq.n	800a36c <_strtol_l.constprop.0+0x18>
 800a422:	1e69      	subs	r1, r5, #1
 800a424:	e005      	b.n	800a432 <_strtol_l.constprop.0+0xde>
 800a426:	b106      	cbz	r6, 800a42a <_strtol_l.constprop.0+0xd6>
 800a428:	4240      	negs	r0, r0
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	d09e      	beq.n	800a36c <_strtol_l.constprop.0+0x18>
 800a42e:	2f00      	cmp	r7, #0
 800a430:	d1f7      	bne.n	800a422 <_strtol_l.constprop.0+0xce>
 800a432:	6011      	str	r1, [r2, #0]
 800a434:	e79a      	b.n	800a36c <_strtol_l.constprop.0+0x18>
 800a436:	2430      	movs	r4, #48	; 0x30
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1b5      	bne.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a43c:	2308      	movs	r3, #8
 800a43e:	e7b3      	b.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a440:	2c30      	cmp	r4, #48	; 0x30
 800a442:	d0a9      	beq.n	800a398 <_strtol_l.constprop.0+0x44>
 800a444:	230a      	movs	r3, #10
 800a446:	e7af      	b.n	800a3a8 <_strtol_l.constprop.0+0x54>
 800a448:	0800e251 	.word	0x0800e251

0800a44c <_strtol_r>:
 800a44c:	f7ff bf82 	b.w	800a354 <_strtol_l.constprop.0>

0800a450 <quorem>:
 800a450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	6903      	ldr	r3, [r0, #16]
 800a456:	690c      	ldr	r4, [r1, #16]
 800a458:	4607      	mov	r7, r0
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	f2c0 8082 	blt.w	800a564 <quorem+0x114>
 800a460:	3c01      	subs	r4, #1
 800a462:	f100 0514 	add.w	r5, r0, #20
 800a466:	f101 0814 	add.w	r8, r1, #20
 800a46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a478:	3301      	adds	r3, #1
 800a47a:	429a      	cmp	r2, r3
 800a47c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a480:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a484:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a488:	d331      	bcc.n	800a4ee <quorem+0x9e>
 800a48a:	f04f 0e00 	mov.w	lr, #0
 800a48e:	4640      	mov	r0, r8
 800a490:	46ac      	mov	ip, r5
 800a492:	46f2      	mov	sl, lr
 800a494:	f850 2b04 	ldr.w	r2, [r0], #4
 800a498:	b293      	uxth	r3, r2
 800a49a:	fb06 e303 	mla	r3, r6, r3, lr
 800a49e:	0c12      	lsrs	r2, r2, #16
 800a4a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	fb06 e202 	mla	r2, r6, r2, lr
 800a4aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a4ae:	f8dc a000 	ldr.w	sl, [ip]
 800a4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4b6:	fa1f fa8a 	uxth.w	sl, sl
 800a4ba:	4453      	add	r3, sl
 800a4bc:	f8dc a000 	ldr.w	sl, [ip]
 800a4c0:	b292      	uxth	r2, r2
 800a4c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4d0:	4581      	cmp	r9, r0
 800a4d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4d6:	f84c 3b04 	str.w	r3, [ip], #4
 800a4da:	d2db      	bcs.n	800a494 <quorem+0x44>
 800a4dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4e0:	b92b      	cbnz	r3, 800a4ee <quorem+0x9e>
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	429d      	cmp	r5, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	d32f      	bcc.n	800a54c <quorem+0xfc>
 800a4ec:	613c      	str	r4, [r7, #16]
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	f001 fc82 	bl	800bdf8 <__mcmp>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	db25      	blt.n	800a544 <quorem+0xf4>
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f04f 0c00 	mov.w	ip, #0
 800a4fe:	3601      	adds	r6, #1
 800a500:	f858 1b04 	ldr.w	r1, [r8], #4
 800a504:	f8d0 e000 	ldr.w	lr, [r0]
 800a508:	b28b      	uxth	r3, r1
 800a50a:	ebac 0303 	sub.w	r3, ip, r3
 800a50e:	fa1f f28e 	uxth.w	r2, lr
 800a512:	4413      	add	r3, r2
 800a514:	0c0a      	lsrs	r2, r1, #16
 800a516:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a51a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a51e:	b29b      	uxth	r3, r3
 800a520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a524:	45c1      	cmp	r9, r8
 800a526:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a52a:	f840 3b04 	str.w	r3, [r0], #4
 800a52e:	d2e7      	bcs.n	800a500 <quorem+0xb0>
 800a530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a538:	b922      	cbnz	r2, 800a544 <quorem+0xf4>
 800a53a:	3b04      	subs	r3, #4
 800a53c:	429d      	cmp	r5, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	d30a      	bcc.n	800a558 <quorem+0x108>
 800a542:	613c      	str	r4, [r7, #16]
 800a544:	4630      	mov	r0, r6
 800a546:	b003      	add	sp, #12
 800a548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	3b04      	subs	r3, #4
 800a550:	2a00      	cmp	r2, #0
 800a552:	d1cb      	bne.n	800a4ec <quorem+0x9c>
 800a554:	3c01      	subs	r4, #1
 800a556:	e7c6      	b.n	800a4e6 <quorem+0x96>
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	3b04      	subs	r3, #4
 800a55c:	2a00      	cmp	r2, #0
 800a55e:	d1f0      	bne.n	800a542 <quorem+0xf2>
 800a560:	3c01      	subs	r4, #1
 800a562:	e7eb      	b.n	800a53c <quorem+0xec>
 800a564:	2000      	movs	r0, #0
 800a566:	e7ee      	b.n	800a546 <quorem+0xf6>

0800a568 <_dtoa_r>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	4616      	mov	r6, r2
 800a56e:	461f      	mov	r7, r3
 800a570:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a572:	b099      	sub	sp, #100	; 0x64
 800a574:	4605      	mov	r5, r0
 800a576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a57a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a57e:	b974      	cbnz	r4, 800a59e <_dtoa_r+0x36>
 800a580:	2010      	movs	r0, #16
 800a582:	f001 f949 	bl	800b818 <malloc>
 800a586:	4602      	mov	r2, r0
 800a588:	6268      	str	r0, [r5, #36]	; 0x24
 800a58a:	b920      	cbnz	r0, 800a596 <_dtoa_r+0x2e>
 800a58c:	21ea      	movs	r1, #234	; 0xea
 800a58e:	4ba8      	ldr	r3, [pc, #672]	; (800a830 <_dtoa_r+0x2c8>)
 800a590:	48a8      	ldr	r0, [pc, #672]	; (800a834 <_dtoa_r+0x2cc>)
 800a592:	f002 f8a5 	bl	800c6e0 <__assert_func>
 800a596:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a59a:	6004      	str	r4, [r0, #0]
 800a59c:	60c4      	str	r4, [r0, #12]
 800a59e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	b151      	cbz	r1, 800a5ba <_dtoa_r+0x52>
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4093      	lsls	r3, r2
 800a5aa:	604a      	str	r2, [r1, #4]
 800a5ac:	608b      	str	r3, [r1, #8]
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f001 f99a 	bl	800b8e8 <_Bfree>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	1e3b      	subs	r3, r7, #0
 800a5bc:	bfaf      	iteee	ge
 800a5be:	2300      	movge	r3, #0
 800a5c0:	2201      	movlt	r2, #1
 800a5c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5c6:	9305      	strlt	r3, [sp, #20]
 800a5c8:	bfa8      	it	ge
 800a5ca:	f8c8 3000 	strge.w	r3, [r8]
 800a5ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a5d2:	4b99      	ldr	r3, [pc, #612]	; (800a838 <_dtoa_r+0x2d0>)
 800a5d4:	bfb8      	it	lt
 800a5d6:	f8c8 2000 	strlt.w	r2, [r8]
 800a5da:	ea33 0309 	bics.w	r3, r3, r9
 800a5de:	d119      	bne.n	800a614 <_dtoa_r+0xac>
 800a5e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a5e6:	6013      	str	r3, [r2, #0]
 800a5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5ec:	4333      	orrs	r3, r6
 800a5ee:	f000 857f 	beq.w	800b0f0 <_dtoa_r+0xb88>
 800a5f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5f4:	b953      	cbnz	r3, 800a60c <_dtoa_r+0xa4>
 800a5f6:	4b91      	ldr	r3, [pc, #580]	; (800a83c <_dtoa_r+0x2d4>)
 800a5f8:	e022      	b.n	800a640 <_dtoa_r+0xd8>
 800a5fa:	4b91      	ldr	r3, [pc, #580]	; (800a840 <_dtoa_r+0x2d8>)
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	3308      	adds	r3, #8
 800a600:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	9803      	ldr	r0, [sp, #12]
 800a606:	b019      	add	sp, #100	; 0x64
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	4b8b      	ldr	r3, [pc, #556]	; (800a83c <_dtoa_r+0x2d4>)
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	3303      	adds	r3, #3
 800a612:	e7f5      	b.n	800a600 <_dtoa_r+0x98>
 800a614:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a618:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a61c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a620:	2200      	movs	r2, #0
 800a622:	2300      	movs	r3, #0
 800a624:	f7f6 f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 800a628:	4680      	mov	r8, r0
 800a62a:	b158      	cbz	r0, 800a644 <_dtoa_r+0xdc>
 800a62c:	2301      	movs	r3, #1
 800a62e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 8558 	beq.w	800b0ea <_dtoa_r+0xb82>
 800a63a:	4882      	ldr	r0, [pc, #520]	; (800a844 <_dtoa_r+0x2dc>)
 800a63c:	6018      	str	r0, [r3, #0]
 800a63e:	1e43      	subs	r3, r0, #1
 800a640:	9303      	str	r3, [sp, #12]
 800a642:	e7df      	b.n	800a604 <_dtoa_r+0x9c>
 800a644:	ab16      	add	r3, sp, #88	; 0x58
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	ab17      	add	r3, sp, #92	; 0x5c
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4628      	mov	r0, r5
 800a64e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a652:	f001 fcf3 	bl	800c03c <__d2b>
 800a656:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a65a:	4683      	mov	fp, r0
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	d07f      	beq.n	800a760 <_dtoa_r+0x1f8>
 800a660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a666:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a66a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a66e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a672:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a676:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a67a:	2200      	movs	r2, #0
 800a67c:	4b72      	ldr	r3, [pc, #456]	; (800a848 <_dtoa_r+0x2e0>)
 800a67e:	f7f5 fd73 	bl	8000168 <__aeabi_dsub>
 800a682:	a365      	add	r3, pc, #404	; (adr r3, 800a818 <_dtoa_r+0x2b0>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ff26 	bl	80004d8 <__aeabi_dmul>
 800a68c:	a364      	add	r3, pc, #400	; (adr r3, 800a820 <_dtoa_r+0x2b8>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fd6b 	bl	800016c <__adddf3>
 800a696:	4606      	mov	r6, r0
 800a698:	4620      	mov	r0, r4
 800a69a:	460f      	mov	r7, r1
 800a69c:	f7f5 feb2 	bl	8000404 <__aeabi_i2d>
 800a6a0:	a361      	add	r3, pc, #388	; (adr r3, 800a828 <_dtoa_r+0x2c0>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ff17 	bl	80004d8 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f5 fd5b 	bl	800016c <__adddf3>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	f7f6 f9bd 	bl	8000a38 <__aeabi_d2iz>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 f978 	bl	80009bc <__aeabi_dcmplt>
 800a6cc:	b148      	cbz	r0, 800a6e2 <_dtoa_r+0x17a>
 800a6ce:	4650      	mov	r0, sl
 800a6d0:	f7f5 fe98 	bl	8000404 <__aeabi_i2d>
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	f7f6 f966 	bl	80009a8 <__aeabi_dcmpeq>
 800a6dc:	b908      	cbnz	r0, 800a6e2 <_dtoa_r+0x17a>
 800a6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6e2:	f1ba 0f16 	cmp.w	sl, #22
 800a6e6:	d858      	bhi.n	800a79a <_dtoa_r+0x232>
 800a6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6ec:	4b57      	ldr	r3, [pc, #348]	; (800a84c <_dtoa_r+0x2e4>)
 800a6ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f6 f961 	bl	80009bc <__aeabi_dcmplt>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	d04f      	beq.n	800a79e <_dtoa_r+0x236>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a704:	930f      	str	r3, [sp, #60]	; 0x3c
 800a706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a708:	1b1c      	subs	r4, r3, r4
 800a70a:	1e63      	subs	r3, r4, #1
 800a70c:	9309      	str	r3, [sp, #36]	; 0x24
 800a70e:	bf49      	itett	mi
 800a710:	f1c4 0301 	rsbmi	r3, r4, #1
 800a714:	2300      	movpl	r3, #0
 800a716:	9306      	strmi	r3, [sp, #24]
 800a718:	2300      	movmi	r3, #0
 800a71a:	bf54      	ite	pl
 800a71c:	9306      	strpl	r3, [sp, #24]
 800a71e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a720:	f1ba 0f00 	cmp.w	sl, #0
 800a724:	db3d      	blt.n	800a7a2 <_dtoa_r+0x23a>
 800a726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a728:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a72c:	4453      	add	r3, sl
 800a72e:	9309      	str	r3, [sp, #36]	; 0x24
 800a730:	2300      	movs	r3, #0
 800a732:	930a      	str	r3, [sp, #40]	; 0x28
 800a734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a736:	2b09      	cmp	r3, #9
 800a738:	f200 808c 	bhi.w	800a854 <_dtoa_r+0x2ec>
 800a73c:	2b05      	cmp	r3, #5
 800a73e:	bfc4      	itt	gt
 800a740:	3b04      	subgt	r3, #4
 800a742:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a746:	bfc8      	it	gt
 800a748:	2400      	movgt	r4, #0
 800a74a:	f1a3 0302 	sub.w	r3, r3, #2
 800a74e:	bfd8      	it	le
 800a750:	2401      	movle	r4, #1
 800a752:	2b03      	cmp	r3, #3
 800a754:	f200 808a 	bhi.w	800a86c <_dtoa_r+0x304>
 800a758:	e8df f003 	tbb	[pc, r3]
 800a75c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a760:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a764:	441c      	add	r4, r3
 800a766:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	bfc3      	ittte	gt
 800a76e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a772:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a776:	fa09 f303 	lslgt.w	r3, r9, r3
 800a77a:	f1c3 0320 	rsble	r3, r3, #32
 800a77e:	bfc6      	itte	gt
 800a780:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a784:	4318      	orrgt	r0, r3
 800a786:	fa06 f003 	lslle.w	r0, r6, r3
 800a78a:	f7f5 fe2b 	bl	80003e4 <__aeabi_ui2d>
 800a78e:	2301      	movs	r3, #1
 800a790:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a794:	3c01      	subs	r4, #1
 800a796:	9313      	str	r3, [sp, #76]	; 0x4c
 800a798:	e76f      	b.n	800a67a <_dtoa_r+0x112>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e7b2      	b.n	800a704 <_dtoa_r+0x19c>
 800a79e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a7a0:	e7b1      	b.n	800a706 <_dtoa_r+0x19e>
 800a7a2:	9b06      	ldr	r3, [sp, #24]
 800a7a4:	eba3 030a 	sub.w	r3, r3, sl
 800a7a8:	9306      	str	r3, [sp, #24]
 800a7aa:	f1ca 0300 	rsb	r3, sl, #0
 800a7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	930e      	str	r3, [sp, #56]	; 0x38
 800a7b4:	e7be      	b.n	800a734 <_dtoa_r+0x1cc>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	dc58      	bgt.n	800a872 <_dtoa_r+0x30a>
 800a7c0:	f04f 0901 	mov.w	r9, #1
 800a7c4:	464b      	mov	r3, r9
 800a7c6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a7ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a7d2:	6042      	str	r2, [r0, #4]
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	f102 0614 	add.w	r6, r2, #20
 800a7da:	429e      	cmp	r6, r3
 800a7dc:	6841      	ldr	r1, [r0, #4]
 800a7de:	d94e      	bls.n	800a87e <_dtoa_r+0x316>
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f001 f841 	bl	800b868 <_Balloc>
 800a7e6:	9003      	str	r0, [sp, #12]
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d14c      	bne.n	800a886 <_dtoa_r+0x31e>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a7f2:	4b17      	ldr	r3, [pc, #92]	; (800a850 <_dtoa_r+0x2e8>)
 800a7f4:	e6cc      	b.n	800a590 <_dtoa_r+0x28>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e7de      	b.n	800a7b8 <_dtoa_r+0x250>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a800:	eb0a 0903 	add.w	r9, sl, r3
 800a804:	f109 0301 	add.w	r3, r9, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	9308      	str	r3, [sp, #32]
 800a80c:	bfb8      	it	lt
 800a80e:	2301      	movlt	r3, #1
 800a810:	e7dd      	b.n	800a7ce <_dtoa_r+0x266>
 800a812:	2301      	movs	r3, #1
 800a814:	e7f2      	b.n	800a7fc <_dtoa_r+0x294>
 800a816:	bf00      	nop
 800a818:	636f4361 	.word	0x636f4361
 800a81c:	3fd287a7 	.word	0x3fd287a7
 800a820:	8b60c8b3 	.word	0x8b60c8b3
 800a824:	3fc68a28 	.word	0x3fc68a28
 800a828:	509f79fb 	.word	0x509f79fb
 800a82c:	3fd34413 	.word	0x3fd34413
 800a830:	0800e35e 	.word	0x0800e35e
 800a834:	0800e375 	.word	0x0800e375
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	0800e35a 	.word	0x0800e35a
 800a840:	0800e351 	.word	0x0800e351
 800a844:	0800e1d1 	.word	0x0800e1d1
 800a848:	3ff80000 	.word	0x3ff80000
 800a84c:	0800e4e0 	.word	0x0800e4e0
 800a850:	0800e3d0 	.word	0x0800e3d0
 800a854:	2401      	movs	r4, #1
 800a856:	2300      	movs	r3, #0
 800a858:	940b      	str	r4, [sp, #44]	; 0x2c
 800a85a:	9322      	str	r3, [sp, #136]	; 0x88
 800a85c:	f04f 39ff 	mov.w	r9, #4294967295
 800a860:	2200      	movs	r2, #0
 800a862:	2312      	movs	r3, #18
 800a864:	f8cd 9020 	str.w	r9, [sp, #32]
 800a868:	9223      	str	r2, [sp, #140]	; 0x8c
 800a86a:	e7b0      	b.n	800a7ce <_dtoa_r+0x266>
 800a86c:	2301      	movs	r3, #1
 800a86e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a870:	e7f4      	b.n	800a85c <_dtoa_r+0x2f4>
 800a872:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a876:	464b      	mov	r3, r9
 800a878:	f8cd 9020 	str.w	r9, [sp, #32]
 800a87c:	e7a7      	b.n	800a7ce <_dtoa_r+0x266>
 800a87e:	3101      	adds	r1, #1
 800a880:	6041      	str	r1, [r0, #4]
 800a882:	0052      	lsls	r2, r2, #1
 800a884:	e7a7      	b.n	800a7d6 <_dtoa_r+0x26e>
 800a886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a888:	9a03      	ldr	r2, [sp, #12]
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	9b08      	ldr	r3, [sp, #32]
 800a88e:	2b0e      	cmp	r3, #14
 800a890:	f200 80a8 	bhi.w	800a9e4 <_dtoa_r+0x47c>
 800a894:	2c00      	cmp	r4, #0
 800a896:	f000 80a5 	beq.w	800a9e4 <_dtoa_r+0x47c>
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	dd34      	ble.n	800a90a <_dtoa_r+0x3a2>
 800a8a0:	4a9a      	ldr	r2, [pc, #616]	; (800ab0c <_dtoa_r+0x5a4>)
 800a8a2:	f00a 030f 	and.w	r3, sl, #15
 800a8a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a8ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a8b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a8ba:	d016      	beq.n	800a8ea <_dtoa_r+0x382>
 800a8bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8c0:	4b93      	ldr	r3, [pc, #588]	; (800ab10 <_dtoa_r+0x5a8>)
 800a8c2:	2703      	movs	r7, #3
 800a8c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8c8:	f7f5 ff30 	bl	800072c <__aeabi_ddiv>
 800a8cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8d0:	f004 040f 	and.w	r4, r4, #15
 800a8d4:	4e8e      	ldr	r6, [pc, #568]	; (800ab10 <_dtoa_r+0x5a8>)
 800a8d6:	b954      	cbnz	r4, 800a8ee <_dtoa_r+0x386>
 800a8d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8e0:	f7f5 ff24 	bl	800072c <__aeabi_ddiv>
 800a8e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8e8:	e029      	b.n	800a93e <_dtoa_r+0x3d6>
 800a8ea:	2702      	movs	r7, #2
 800a8ec:	e7f2      	b.n	800a8d4 <_dtoa_r+0x36c>
 800a8ee:	07e1      	lsls	r1, r4, #31
 800a8f0:	d508      	bpl.n	800a904 <_dtoa_r+0x39c>
 800a8f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8fa:	f7f5 fded 	bl	80004d8 <__aeabi_dmul>
 800a8fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a902:	3701      	adds	r7, #1
 800a904:	1064      	asrs	r4, r4, #1
 800a906:	3608      	adds	r6, #8
 800a908:	e7e5      	b.n	800a8d6 <_dtoa_r+0x36e>
 800a90a:	f000 80a5 	beq.w	800aa58 <_dtoa_r+0x4f0>
 800a90e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a912:	f1ca 0400 	rsb	r4, sl, #0
 800a916:	4b7d      	ldr	r3, [pc, #500]	; (800ab0c <_dtoa_r+0x5a4>)
 800a918:	f004 020f 	and.w	r2, r4, #15
 800a91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fdd8 	bl	80004d8 <__aeabi_dmul>
 800a928:	2702      	movs	r7, #2
 800a92a:	2300      	movs	r3, #0
 800a92c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a930:	4e77      	ldr	r6, [pc, #476]	; (800ab10 <_dtoa_r+0x5a8>)
 800a932:	1124      	asrs	r4, r4, #4
 800a934:	2c00      	cmp	r4, #0
 800a936:	f040 8084 	bne.w	800aa42 <_dtoa_r+0x4da>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1d2      	bne.n	800a8e4 <_dtoa_r+0x37c>
 800a93e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 808b 	beq.w	800aa5c <_dtoa_r+0x4f4>
 800a946:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a94a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a94e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a952:	2200      	movs	r2, #0
 800a954:	4b6f      	ldr	r3, [pc, #444]	; (800ab14 <_dtoa_r+0x5ac>)
 800a956:	f7f6 f831 	bl	80009bc <__aeabi_dcmplt>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d07e      	beq.n	800aa5c <_dtoa_r+0x4f4>
 800a95e:	9b08      	ldr	r3, [sp, #32]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d07b      	beq.n	800aa5c <_dtoa_r+0x4f4>
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	dd38      	ble.n	800a9dc <_dtoa_r+0x474>
 800a96a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a96e:	2200      	movs	r2, #0
 800a970:	4b69      	ldr	r3, [pc, #420]	; (800ab18 <_dtoa_r+0x5b0>)
 800a972:	f7f5 fdb1 	bl	80004d8 <__aeabi_dmul>
 800a976:	464c      	mov	r4, r9
 800a978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a97c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a980:	3701      	adds	r7, #1
 800a982:	4638      	mov	r0, r7
 800a984:	f7f5 fd3e 	bl	8000404 <__aeabi_i2d>
 800a988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a98c:	f7f5 fda4 	bl	80004d8 <__aeabi_dmul>
 800a990:	2200      	movs	r2, #0
 800a992:	4b62      	ldr	r3, [pc, #392]	; (800ab1c <_dtoa_r+0x5b4>)
 800a994:	f7f5 fbea 	bl	800016c <__adddf3>
 800a998:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a99c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9a0:	9611      	str	r6, [sp, #68]	; 0x44
 800a9a2:	2c00      	cmp	r4, #0
 800a9a4:	d15d      	bne.n	800aa62 <_dtoa_r+0x4fa>
 800a9a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b5c      	ldr	r3, [pc, #368]	; (800ab20 <_dtoa_r+0x5b8>)
 800a9ae:	f7f5 fbdb 	bl	8000168 <__aeabi_dsub>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9ba:	4633      	mov	r3, r6
 800a9bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9be:	f7f6 f81b 	bl	80009f8 <__aeabi_dcmpgt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f040 829c 	bne.w	800af00 <_dtoa_r+0x998>
 800a9c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a9d2:	f7f5 fff3 	bl	80009bc <__aeabi_dcmplt>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f040 8290 	bne.w	800aefc <_dtoa_r+0x994>
 800a9dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a9e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f2c0 8152 	blt.w	800ac90 <_dtoa_r+0x728>
 800a9ec:	f1ba 0f0e 	cmp.w	sl, #14
 800a9f0:	f300 814e 	bgt.w	800ac90 <_dtoa_r+0x728>
 800a9f4:	4b45      	ldr	r3, [pc, #276]	; (800ab0c <_dtoa_r+0x5a4>)
 800a9f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a9fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aa02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f280 80db 	bge.w	800abc0 <_dtoa_r+0x658>
 800aa0a:	9b08      	ldr	r3, [sp, #32]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f300 80d7 	bgt.w	800abc0 <_dtoa_r+0x658>
 800aa12:	f040 8272 	bne.w	800aefa <_dtoa_r+0x992>
 800aa16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4b40      	ldr	r3, [pc, #256]	; (800ab20 <_dtoa_r+0x5b8>)
 800aa1e:	f7f5 fd5b 	bl	80004d8 <__aeabi_dmul>
 800aa22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa26:	f7f5 ffdd 	bl	80009e4 <__aeabi_dcmpge>
 800aa2a:	9c08      	ldr	r4, [sp, #32]
 800aa2c:	4626      	mov	r6, r4
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	f040 8248 	bne.w	800aec4 <_dtoa_r+0x95c>
 800aa34:	2331      	movs	r3, #49	; 0x31
 800aa36:	9f03      	ldr	r7, [sp, #12]
 800aa38:	f10a 0a01 	add.w	sl, sl, #1
 800aa3c:	f807 3b01 	strb.w	r3, [r7], #1
 800aa40:	e244      	b.n	800aecc <_dtoa_r+0x964>
 800aa42:	07e2      	lsls	r2, r4, #31
 800aa44:	d505      	bpl.n	800aa52 <_dtoa_r+0x4ea>
 800aa46:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa4a:	f7f5 fd45 	bl	80004d8 <__aeabi_dmul>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	3701      	adds	r7, #1
 800aa52:	1064      	asrs	r4, r4, #1
 800aa54:	3608      	adds	r6, #8
 800aa56:	e76d      	b.n	800a934 <_dtoa_r+0x3cc>
 800aa58:	2702      	movs	r7, #2
 800aa5a:	e770      	b.n	800a93e <_dtoa_r+0x3d6>
 800aa5c:	46d0      	mov	r8, sl
 800aa5e:	9c08      	ldr	r4, [sp, #32]
 800aa60:	e78f      	b.n	800a982 <_dtoa_r+0x41a>
 800aa62:	9903      	ldr	r1, [sp, #12]
 800aa64:	4b29      	ldr	r3, [pc, #164]	; (800ab0c <_dtoa_r+0x5a4>)
 800aa66:	4421      	add	r1, r4
 800aa68:	9112      	str	r1, [sp, #72]	; 0x48
 800aa6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800aa74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	d055      	beq.n	800ab28 <_dtoa_r+0x5c0>
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	4929      	ldr	r1, [pc, #164]	; (800ab24 <_dtoa_r+0x5bc>)
 800aa80:	f7f5 fe54 	bl	800072c <__aeabi_ddiv>
 800aa84:	463b      	mov	r3, r7
 800aa86:	4632      	mov	r2, r6
 800aa88:	f7f5 fb6e 	bl	8000168 <__aeabi_dsub>
 800aa8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa90:	9f03      	ldr	r7, [sp, #12]
 800aa92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa96:	f7f5 ffcf 	bl	8000a38 <__aeabi_d2iz>
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	f7f5 fcb2 	bl	8000404 <__aeabi_i2d>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa8:	f7f5 fb5e 	bl	8000168 <__aeabi_dsub>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	3430      	adds	r4, #48	; 0x30
 800aab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aaba:	f807 4b01 	strb.w	r4, [r7], #1
 800aabe:	f7f5 ff7d 	bl	80009bc <__aeabi_dcmplt>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d174      	bne.n	800abb0 <_dtoa_r+0x648>
 800aac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaca:	2000      	movs	r0, #0
 800aacc:	4911      	ldr	r1, [pc, #68]	; (800ab14 <_dtoa_r+0x5ac>)
 800aace:	f7f5 fb4b 	bl	8000168 <__aeabi_dsub>
 800aad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aad6:	f7f5 ff71 	bl	80009bc <__aeabi_dcmplt>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f040 80b7 	bne.w	800ac4e <_dtoa_r+0x6e6>
 800aae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aae2:	429f      	cmp	r7, r3
 800aae4:	f43f af7a 	beq.w	800a9dc <_dtoa_r+0x474>
 800aae8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aaec:	2200      	movs	r2, #0
 800aaee:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <_dtoa_r+0x5b0>)
 800aaf0:	f7f5 fcf2 	bl	80004d8 <__aeabi_dmul>
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aafa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aafe:	4b06      	ldr	r3, [pc, #24]	; (800ab18 <_dtoa_r+0x5b0>)
 800ab00:	f7f5 fcea 	bl	80004d8 <__aeabi_dmul>
 800ab04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab08:	e7c3      	b.n	800aa92 <_dtoa_r+0x52a>
 800ab0a:	bf00      	nop
 800ab0c:	0800e4e0 	.word	0x0800e4e0
 800ab10:	0800e4b8 	.word	0x0800e4b8
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	40240000 	.word	0x40240000
 800ab1c:	401c0000 	.word	0x401c0000
 800ab20:	40140000 	.word	0x40140000
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 fcd4 	bl	80004d8 <__aeabi_dmul>
 800ab30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab36:	9c03      	ldr	r4, [sp, #12]
 800ab38:	9314      	str	r3, [sp, #80]	; 0x50
 800ab3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab3e:	f7f5 ff7b 	bl	8000a38 <__aeabi_d2iz>
 800ab42:	9015      	str	r0, [sp, #84]	; 0x54
 800ab44:	f7f5 fc5e 	bl	8000404 <__aeabi_i2d>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab50:	f7f5 fb0a 	bl	8000168 <__aeabi_dsub>
 800ab54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab56:	4606      	mov	r6, r0
 800ab58:	3330      	adds	r3, #48	; 0x30
 800ab5a:	f804 3b01 	strb.w	r3, [r4], #1
 800ab5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab60:	460f      	mov	r7, r1
 800ab62:	429c      	cmp	r4, r3
 800ab64:	f04f 0200 	mov.w	r2, #0
 800ab68:	d124      	bne.n	800abb4 <_dtoa_r+0x64c>
 800ab6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ab6e:	4bb0      	ldr	r3, [pc, #704]	; (800ae30 <_dtoa_r+0x8c8>)
 800ab70:	f7f5 fafc 	bl	800016c <__adddf3>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 ff3c 	bl	80009f8 <__aeabi_dcmpgt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d163      	bne.n	800ac4c <_dtoa_r+0x6e4>
 800ab84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab88:	2000      	movs	r0, #0
 800ab8a:	49a9      	ldr	r1, [pc, #676]	; (800ae30 <_dtoa_r+0x8c8>)
 800ab8c:	f7f5 faec 	bl	8000168 <__aeabi_dsub>
 800ab90:	4602      	mov	r2, r0
 800ab92:	460b      	mov	r3, r1
 800ab94:	4630      	mov	r0, r6
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f5 ff10 	bl	80009bc <__aeabi_dcmplt>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f af1d 	beq.w	800a9dc <_dtoa_r+0x474>
 800aba2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aba4:	1e7b      	subs	r3, r7, #1
 800aba6:	9314      	str	r3, [sp, #80]	; 0x50
 800aba8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800abac:	2b30      	cmp	r3, #48	; 0x30
 800abae:	d0f8      	beq.n	800aba2 <_dtoa_r+0x63a>
 800abb0:	46c2      	mov	sl, r8
 800abb2:	e03b      	b.n	800ac2c <_dtoa_r+0x6c4>
 800abb4:	4b9f      	ldr	r3, [pc, #636]	; (800ae34 <_dtoa_r+0x8cc>)
 800abb6:	f7f5 fc8f 	bl	80004d8 <__aeabi_dmul>
 800abba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abbe:	e7bc      	b.n	800ab3a <_dtoa_r+0x5d2>
 800abc0:	9f03      	ldr	r7, [sp, #12]
 800abc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800abc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abca:	4640      	mov	r0, r8
 800abcc:	4649      	mov	r1, r9
 800abce:	f7f5 fdad 	bl	800072c <__aeabi_ddiv>
 800abd2:	f7f5 ff31 	bl	8000a38 <__aeabi_d2iz>
 800abd6:	4604      	mov	r4, r0
 800abd8:	f7f5 fc14 	bl	8000404 <__aeabi_i2d>
 800abdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abe0:	f7f5 fc7a 	bl	80004d8 <__aeabi_dmul>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4640      	mov	r0, r8
 800abea:	4649      	mov	r1, r9
 800abec:	f7f5 fabc 	bl	8000168 <__aeabi_dsub>
 800abf0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800abf4:	f807 6b01 	strb.w	r6, [r7], #1
 800abf8:	9e03      	ldr	r6, [sp, #12]
 800abfa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800abfe:	1bbe      	subs	r6, r7, r6
 800ac00:	45b4      	cmp	ip, r6
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	d136      	bne.n	800ac76 <_dtoa_r+0x70e>
 800ac08:	f7f5 fab0 	bl	800016c <__adddf3>
 800ac0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac10:	4680      	mov	r8, r0
 800ac12:	4689      	mov	r9, r1
 800ac14:	f7f5 fef0 	bl	80009f8 <__aeabi_dcmpgt>
 800ac18:	bb58      	cbnz	r0, 800ac72 <_dtoa_r+0x70a>
 800ac1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 fec1 	bl	80009a8 <__aeabi_dcmpeq>
 800ac26:	b108      	cbz	r0, 800ac2c <_dtoa_r+0x6c4>
 800ac28:	07e1      	lsls	r1, r4, #31
 800ac2a:	d422      	bmi.n	800ac72 <_dtoa_r+0x70a>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	4659      	mov	r1, fp
 800ac30:	f000 fe5a 	bl	800b8e8 <_Bfree>
 800ac34:	2300      	movs	r3, #0
 800ac36:	703b      	strb	r3, [r7, #0]
 800ac38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac3a:	f10a 0001 	add.w	r0, sl, #1
 800ac3e:	6018      	str	r0, [r3, #0]
 800ac40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	f43f acde 	beq.w	800a604 <_dtoa_r+0x9c>
 800ac48:	601f      	str	r7, [r3, #0]
 800ac4a:	e4db      	b.n	800a604 <_dtoa_r+0x9c>
 800ac4c:	4627      	mov	r7, r4
 800ac4e:	463b      	mov	r3, r7
 800ac50:	461f      	mov	r7, r3
 800ac52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac56:	2a39      	cmp	r2, #57	; 0x39
 800ac58:	d107      	bne.n	800ac6a <_dtoa_r+0x702>
 800ac5a:	9a03      	ldr	r2, [sp, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d1f7      	bne.n	800ac50 <_dtoa_r+0x6e8>
 800ac60:	2230      	movs	r2, #48	; 0x30
 800ac62:	9903      	ldr	r1, [sp, #12]
 800ac64:	f108 0801 	add.w	r8, r8, #1
 800ac68:	700a      	strb	r2, [r1, #0]
 800ac6a:	781a      	ldrb	r2, [r3, #0]
 800ac6c:	3201      	adds	r2, #1
 800ac6e:	701a      	strb	r2, [r3, #0]
 800ac70:	e79e      	b.n	800abb0 <_dtoa_r+0x648>
 800ac72:	46d0      	mov	r8, sl
 800ac74:	e7eb      	b.n	800ac4e <_dtoa_r+0x6e6>
 800ac76:	2200      	movs	r2, #0
 800ac78:	4b6e      	ldr	r3, [pc, #440]	; (800ae34 <_dtoa_r+0x8cc>)
 800ac7a:	f7f5 fc2d 	bl	80004d8 <__aeabi_dmul>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2300      	movs	r3, #0
 800ac82:	4680      	mov	r8, r0
 800ac84:	4689      	mov	r9, r1
 800ac86:	f7f5 fe8f 	bl	80009a8 <__aeabi_dcmpeq>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	d09b      	beq.n	800abc6 <_dtoa_r+0x65e>
 800ac8e:	e7cd      	b.n	800ac2c <_dtoa_r+0x6c4>
 800ac90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac92:	2a00      	cmp	r2, #0
 800ac94:	f000 80d0 	beq.w	800ae38 <_dtoa_r+0x8d0>
 800ac98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac9a:	2a01      	cmp	r2, #1
 800ac9c:	f300 80ae 	bgt.w	800adfc <_dtoa_r+0x894>
 800aca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aca2:	2a00      	cmp	r2, #0
 800aca4:	f000 80a6 	beq.w	800adf4 <_dtoa_r+0x88c>
 800aca8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acae:	9f06      	ldr	r7, [sp, #24]
 800acb0:	9a06      	ldr	r2, [sp, #24]
 800acb2:	2101      	movs	r1, #1
 800acb4:	441a      	add	r2, r3
 800acb6:	9206      	str	r2, [sp, #24]
 800acb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acba:	4628      	mov	r0, r5
 800acbc:	441a      	add	r2, r3
 800acbe:	9209      	str	r2, [sp, #36]	; 0x24
 800acc0:	f000 ff12 	bl	800bae8 <__i2b>
 800acc4:	4606      	mov	r6, r0
 800acc6:	2f00      	cmp	r7, #0
 800acc8:	dd0c      	ble.n	800ace4 <_dtoa_r+0x77c>
 800acca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd09      	ble.n	800ace4 <_dtoa_r+0x77c>
 800acd0:	42bb      	cmp	r3, r7
 800acd2:	bfa8      	it	ge
 800acd4:	463b      	movge	r3, r7
 800acd6:	9a06      	ldr	r2, [sp, #24]
 800acd8:	1aff      	subs	r7, r7, r3
 800acda:	1ad2      	subs	r2, r2, r3
 800acdc:	9206      	str	r2, [sp, #24]
 800acde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	9309      	str	r3, [sp, #36]	; 0x24
 800ace4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace6:	b1f3      	cbz	r3, 800ad26 <_dtoa_r+0x7be>
 800ace8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 80a8 	beq.w	800ae40 <_dtoa_r+0x8d8>
 800acf0:	2c00      	cmp	r4, #0
 800acf2:	dd10      	ble.n	800ad16 <_dtoa_r+0x7ae>
 800acf4:	4631      	mov	r1, r6
 800acf6:	4622      	mov	r2, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 ffb3 	bl	800bc64 <__pow5mult>
 800acfe:	465a      	mov	r2, fp
 800ad00:	4601      	mov	r1, r0
 800ad02:	4606      	mov	r6, r0
 800ad04:	4628      	mov	r0, r5
 800ad06:	f000 ff05 	bl	800bb14 <__multiply>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	4659      	mov	r1, fp
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f000 fdea 	bl	800b8e8 <_Bfree>
 800ad14:	46c3      	mov	fp, r8
 800ad16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad18:	1b1a      	subs	r2, r3, r4
 800ad1a:	d004      	beq.n	800ad26 <_dtoa_r+0x7be>
 800ad1c:	4659      	mov	r1, fp
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f000 ffa0 	bl	800bc64 <__pow5mult>
 800ad24:	4683      	mov	fp, r0
 800ad26:	2101      	movs	r1, #1
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 fedd 	bl	800bae8 <__i2b>
 800ad2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad30:	4604      	mov	r4, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f340 8086 	ble.w	800ae44 <_dtoa_r+0x8dc>
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f000 ff91 	bl	800bc64 <__pow5mult>
 800ad42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad44:	4604      	mov	r4, r0
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	dd7f      	ble.n	800ae4a <_dtoa_r+0x8e2>
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad54:	6918      	ldr	r0, [r3, #16]
 800ad56:	f000 fe79 	bl	800ba4c <__hi0bits>
 800ad5a:	f1c0 0020 	rsb	r0, r0, #32
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	4418      	add	r0, r3
 800ad62:	f010 001f 	ands.w	r0, r0, #31
 800ad66:	f000 8092 	beq.w	800ae8e <_dtoa_r+0x926>
 800ad6a:	f1c0 0320 	rsb	r3, r0, #32
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	f340 808a 	ble.w	800ae88 <_dtoa_r+0x920>
 800ad74:	f1c0 001c 	rsb	r0, r0, #28
 800ad78:	9b06      	ldr	r3, [sp, #24]
 800ad7a:	4407      	add	r7, r0
 800ad7c:	4403      	add	r3, r0
 800ad7e:	9306      	str	r3, [sp, #24]
 800ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad82:	4403      	add	r3, r0
 800ad84:	9309      	str	r3, [sp, #36]	; 0x24
 800ad86:	9b06      	ldr	r3, [sp, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	dd05      	ble.n	800ad98 <_dtoa_r+0x830>
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4628      	mov	r0, r5
 800ad92:	f000 ffc1 	bl	800bd18 <__lshift>
 800ad96:	4683      	mov	fp, r0
 800ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dd05      	ble.n	800adaa <_dtoa_r+0x842>
 800ad9e:	4621      	mov	r1, r4
 800ada0:	461a      	mov	r2, r3
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 ffb8 	bl	800bd18 <__lshift>
 800ada8:	4604      	mov	r4, r0
 800adaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d070      	beq.n	800ae92 <_dtoa_r+0x92a>
 800adb0:	4621      	mov	r1, r4
 800adb2:	4658      	mov	r0, fp
 800adb4:	f001 f820 	bl	800bdf8 <__mcmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	da6a      	bge.n	800ae92 <_dtoa_r+0x92a>
 800adbc:	2300      	movs	r3, #0
 800adbe:	4659      	mov	r1, fp
 800adc0:	220a      	movs	r2, #10
 800adc2:	4628      	mov	r0, r5
 800adc4:	f000 fdb2 	bl	800b92c <__multadd>
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	4683      	mov	fp, r0
 800adcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8194 	beq.w	800b0fe <_dtoa_r+0xb96>
 800add6:	4631      	mov	r1, r6
 800add8:	2300      	movs	r3, #0
 800adda:	220a      	movs	r2, #10
 800addc:	4628      	mov	r0, r5
 800adde:	f000 fda5 	bl	800b92c <__multadd>
 800ade2:	f1b9 0f00 	cmp.w	r9, #0
 800ade6:	4606      	mov	r6, r0
 800ade8:	f300 8093 	bgt.w	800af12 <_dtoa_r+0x9aa>
 800adec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adee:	2b02      	cmp	r3, #2
 800adf0:	dc57      	bgt.n	800aea2 <_dtoa_r+0x93a>
 800adf2:	e08e      	b.n	800af12 <_dtoa_r+0x9aa>
 800adf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adfa:	e757      	b.n	800acac <_dtoa_r+0x744>
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	1e5c      	subs	r4, r3, #1
 800ae00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae02:	42a3      	cmp	r3, r4
 800ae04:	bfb7      	itett	lt
 800ae06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae08:	1b1c      	subge	r4, r3, r4
 800ae0a:	1ae2      	sublt	r2, r4, r3
 800ae0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ae0e:	bfbe      	ittt	lt
 800ae10:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ae12:	189b      	addlt	r3, r3, r2
 800ae14:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ae16:	9b08      	ldr	r3, [sp, #32]
 800ae18:	bfb8      	it	lt
 800ae1a:	2400      	movlt	r4, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfbb      	ittet	lt
 800ae20:	9b06      	ldrlt	r3, [sp, #24]
 800ae22:	9a08      	ldrlt	r2, [sp, #32]
 800ae24:	9f06      	ldrge	r7, [sp, #24]
 800ae26:	1a9f      	sublt	r7, r3, r2
 800ae28:	bfac      	ite	ge
 800ae2a:	9b08      	ldrge	r3, [sp, #32]
 800ae2c:	2300      	movlt	r3, #0
 800ae2e:	e73f      	b.n	800acb0 <_dtoa_r+0x748>
 800ae30:	3fe00000 	.word	0x3fe00000
 800ae34:	40240000 	.word	0x40240000
 800ae38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae3a:	9f06      	ldr	r7, [sp, #24]
 800ae3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ae3e:	e742      	b.n	800acc6 <_dtoa_r+0x75e>
 800ae40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae42:	e76b      	b.n	800ad1c <_dtoa_r+0x7b4>
 800ae44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	dc19      	bgt.n	800ae7e <_dtoa_r+0x916>
 800ae4a:	9b04      	ldr	r3, [sp, #16]
 800ae4c:	b9bb      	cbnz	r3, 800ae7e <_dtoa_r+0x916>
 800ae4e:	9b05      	ldr	r3, [sp, #20]
 800ae50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae54:	b99b      	cbnz	r3, 800ae7e <_dtoa_r+0x916>
 800ae56:	9b05      	ldr	r3, [sp, #20]
 800ae58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae5c:	0d1b      	lsrs	r3, r3, #20
 800ae5e:	051b      	lsls	r3, r3, #20
 800ae60:	b183      	cbz	r3, 800ae84 <_dtoa_r+0x91c>
 800ae62:	f04f 0801 	mov.w	r8, #1
 800ae66:	9b06      	ldr	r3, [sp, #24]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9309      	str	r3, [sp, #36]	; 0x24
 800ae72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f47f af6a 	bne.w	800ad4e <_dtoa_r+0x7e6>
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	e76f      	b.n	800ad5e <_dtoa_r+0x7f6>
 800ae7e:	f04f 0800 	mov.w	r8, #0
 800ae82:	e7f6      	b.n	800ae72 <_dtoa_r+0x90a>
 800ae84:	4698      	mov	r8, r3
 800ae86:	e7f4      	b.n	800ae72 <_dtoa_r+0x90a>
 800ae88:	f43f af7d 	beq.w	800ad86 <_dtoa_r+0x81e>
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	301c      	adds	r0, #28
 800ae90:	e772      	b.n	800ad78 <_dtoa_r+0x810>
 800ae92:	9b08      	ldr	r3, [sp, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	dc36      	bgt.n	800af06 <_dtoa_r+0x99e>
 800ae98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	dd33      	ble.n	800af06 <_dtoa_r+0x99e>
 800ae9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aea2:	f1b9 0f00 	cmp.w	r9, #0
 800aea6:	d10d      	bne.n	800aec4 <_dtoa_r+0x95c>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	464b      	mov	r3, r9
 800aeac:	2205      	movs	r2, #5
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f000 fd3c 	bl	800b92c <__multadd>
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4658      	mov	r0, fp
 800aeba:	f000 ff9d 	bl	800bdf8 <__mcmp>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f73f adb8 	bgt.w	800aa34 <_dtoa_r+0x4cc>
 800aec4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aec6:	9f03      	ldr	r7, [sp, #12]
 800aec8:	ea6f 0a03 	mvn.w	sl, r3
 800aecc:	f04f 0800 	mov.w	r8, #0
 800aed0:	4621      	mov	r1, r4
 800aed2:	4628      	mov	r0, r5
 800aed4:	f000 fd08 	bl	800b8e8 <_Bfree>
 800aed8:	2e00      	cmp	r6, #0
 800aeda:	f43f aea7 	beq.w	800ac2c <_dtoa_r+0x6c4>
 800aede:	f1b8 0f00 	cmp.w	r8, #0
 800aee2:	d005      	beq.n	800aef0 <_dtoa_r+0x988>
 800aee4:	45b0      	cmp	r8, r6
 800aee6:	d003      	beq.n	800aef0 <_dtoa_r+0x988>
 800aee8:	4641      	mov	r1, r8
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 fcfc 	bl	800b8e8 <_Bfree>
 800aef0:	4631      	mov	r1, r6
 800aef2:	4628      	mov	r0, r5
 800aef4:	f000 fcf8 	bl	800b8e8 <_Bfree>
 800aef8:	e698      	b.n	800ac2c <_dtoa_r+0x6c4>
 800aefa:	2400      	movs	r4, #0
 800aefc:	4626      	mov	r6, r4
 800aefe:	e7e1      	b.n	800aec4 <_dtoa_r+0x95c>
 800af00:	46c2      	mov	sl, r8
 800af02:	4626      	mov	r6, r4
 800af04:	e596      	b.n	800aa34 <_dtoa_r+0x4cc>
 800af06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 80fd 	beq.w	800b10c <_dtoa_r+0xba4>
 800af12:	2f00      	cmp	r7, #0
 800af14:	dd05      	ble.n	800af22 <_dtoa_r+0x9ba>
 800af16:	4631      	mov	r1, r6
 800af18:	463a      	mov	r2, r7
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 fefc 	bl	800bd18 <__lshift>
 800af20:	4606      	mov	r6, r0
 800af22:	f1b8 0f00 	cmp.w	r8, #0
 800af26:	d05c      	beq.n	800afe2 <_dtoa_r+0xa7a>
 800af28:	4628      	mov	r0, r5
 800af2a:	6871      	ldr	r1, [r6, #4]
 800af2c:	f000 fc9c 	bl	800b868 <_Balloc>
 800af30:	4607      	mov	r7, r0
 800af32:	b928      	cbnz	r0, 800af40 <_dtoa_r+0x9d8>
 800af34:	4602      	mov	r2, r0
 800af36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af3a:	4b7f      	ldr	r3, [pc, #508]	; (800b138 <_dtoa_r+0xbd0>)
 800af3c:	f7ff bb28 	b.w	800a590 <_dtoa_r+0x28>
 800af40:	6932      	ldr	r2, [r6, #16]
 800af42:	f106 010c 	add.w	r1, r6, #12
 800af46:	3202      	adds	r2, #2
 800af48:	0092      	lsls	r2, r2, #2
 800af4a:	300c      	adds	r0, #12
 800af4c:	f7fd fd40 	bl	80089d0 <memcpy>
 800af50:	2201      	movs	r2, #1
 800af52:	4639      	mov	r1, r7
 800af54:	4628      	mov	r0, r5
 800af56:	f000 fedf 	bl	800bd18 <__lshift>
 800af5a:	46b0      	mov	r8, r6
 800af5c:	4606      	mov	r6, r0
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	3301      	adds	r3, #1
 800af62:	9308      	str	r3, [sp, #32]
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	444b      	add	r3, r9
 800af68:	930a      	str	r3, [sp, #40]	; 0x28
 800af6a:	9b04      	ldr	r3, [sp, #16]
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	9309      	str	r3, [sp, #36]	; 0x24
 800af72:	9b08      	ldr	r3, [sp, #32]
 800af74:	4621      	mov	r1, r4
 800af76:	3b01      	subs	r3, #1
 800af78:	4658      	mov	r0, fp
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	f7ff fa68 	bl	800a450 <quorem>
 800af80:	4603      	mov	r3, r0
 800af82:	4641      	mov	r1, r8
 800af84:	3330      	adds	r3, #48	; 0x30
 800af86:	9006      	str	r0, [sp, #24]
 800af88:	4658      	mov	r0, fp
 800af8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8c:	f000 ff34 	bl	800bdf8 <__mcmp>
 800af90:	4632      	mov	r2, r6
 800af92:	4681      	mov	r9, r0
 800af94:	4621      	mov	r1, r4
 800af96:	4628      	mov	r0, r5
 800af98:	f000 ff4a 	bl	800be30 <__mdiff>
 800af9c:	68c2      	ldr	r2, [r0, #12]
 800af9e:	4607      	mov	r7, r0
 800afa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa2:	bb02      	cbnz	r2, 800afe6 <_dtoa_r+0xa7e>
 800afa4:	4601      	mov	r1, r0
 800afa6:	4658      	mov	r0, fp
 800afa8:	f000 ff26 	bl	800bdf8 <__mcmp>
 800afac:	4602      	mov	r2, r0
 800afae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb0:	4639      	mov	r1, r7
 800afb2:	4628      	mov	r0, r5
 800afb4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800afb8:	f000 fc96 	bl	800b8e8 <_Bfree>
 800afbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afc0:	9f08      	ldr	r7, [sp, #32]
 800afc2:	ea43 0102 	orr.w	r1, r3, r2
 800afc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc8:	430b      	orrs	r3, r1
 800afca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afcc:	d10d      	bne.n	800afea <_dtoa_r+0xa82>
 800afce:	2b39      	cmp	r3, #57	; 0x39
 800afd0:	d029      	beq.n	800b026 <_dtoa_r+0xabe>
 800afd2:	f1b9 0f00 	cmp.w	r9, #0
 800afd6:	dd01      	ble.n	800afdc <_dtoa_r+0xa74>
 800afd8:	9b06      	ldr	r3, [sp, #24]
 800afda:	3331      	adds	r3, #49	; 0x31
 800afdc:	9a04      	ldr	r2, [sp, #16]
 800afde:	7013      	strb	r3, [r2, #0]
 800afe0:	e776      	b.n	800aed0 <_dtoa_r+0x968>
 800afe2:	4630      	mov	r0, r6
 800afe4:	e7b9      	b.n	800af5a <_dtoa_r+0x9f2>
 800afe6:	2201      	movs	r2, #1
 800afe8:	e7e2      	b.n	800afb0 <_dtoa_r+0xa48>
 800afea:	f1b9 0f00 	cmp.w	r9, #0
 800afee:	db06      	blt.n	800affe <_dtoa_r+0xa96>
 800aff0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aff2:	ea41 0909 	orr.w	r9, r1, r9
 800aff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aff8:	ea59 0101 	orrs.w	r1, r9, r1
 800affc:	d120      	bne.n	800b040 <_dtoa_r+0xad8>
 800affe:	2a00      	cmp	r2, #0
 800b000:	ddec      	ble.n	800afdc <_dtoa_r+0xa74>
 800b002:	4659      	mov	r1, fp
 800b004:	2201      	movs	r2, #1
 800b006:	4628      	mov	r0, r5
 800b008:	9308      	str	r3, [sp, #32]
 800b00a:	f000 fe85 	bl	800bd18 <__lshift>
 800b00e:	4621      	mov	r1, r4
 800b010:	4683      	mov	fp, r0
 800b012:	f000 fef1 	bl	800bdf8 <__mcmp>
 800b016:	2800      	cmp	r0, #0
 800b018:	9b08      	ldr	r3, [sp, #32]
 800b01a:	dc02      	bgt.n	800b022 <_dtoa_r+0xaba>
 800b01c:	d1de      	bne.n	800afdc <_dtoa_r+0xa74>
 800b01e:	07da      	lsls	r2, r3, #31
 800b020:	d5dc      	bpl.n	800afdc <_dtoa_r+0xa74>
 800b022:	2b39      	cmp	r3, #57	; 0x39
 800b024:	d1d8      	bne.n	800afd8 <_dtoa_r+0xa70>
 800b026:	2339      	movs	r3, #57	; 0x39
 800b028:	9a04      	ldr	r2, [sp, #16]
 800b02a:	7013      	strb	r3, [r2, #0]
 800b02c:	463b      	mov	r3, r7
 800b02e:	461f      	mov	r7, r3
 800b030:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b034:	3b01      	subs	r3, #1
 800b036:	2a39      	cmp	r2, #57	; 0x39
 800b038:	d050      	beq.n	800b0dc <_dtoa_r+0xb74>
 800b03a:	3201      	adds	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	e747      	b.n	800aed0 <_dtoa_r+0x968>
 800b040:	2a00      	cmp	r2, #0
 800b042:	dd03      	ble.n	800b04c <_dtoa_r+0xae4>
 800b044:	2b39      	cmp	r3, #57	; 0x39
 800b046:	d0ee      	beq.n	800b026 <_dtoa_r+0xabe>
 800b048:	3301      	adds	r3, #1
 800b04a:	e7c7      	b.n	800afdc <_dtoa_r+0xa74>
 800b04c:	9a08      	ldr	r2, [sp, #32]
 800b04e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b050:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b054:	428a      	cmp	r2, r1
 800b056:	d02a      	beq.n	800b0ae <_dtoa_r+0xb46>
 800b058:	4659      	mov	r1, fp
 800b05a:	2300      	movs	r3, #0
 800b05c:	220a      	movs	r2, #10
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fc64 	bl	800b92c <__multadd>
 800b064:	45b0      	cmp	r8, r6
 800b066:	4683      	mov	fp, r0
 800b068:	f04f 0300 	mov.w	r3, #0
 800b06c:	f04f 020a 	mov.w	r2, #10
 800b070:	4641      	mov	r1, r8
 800b072:	4628      	mov	r0, r5
 800b074:	d107      	bne.n	800b086 <_dtoa_r+0xb1e>
 800b076:	f000 fc59 	bl	800b92c <__multadd>
 800b07a:	4680      	mov	r8, r0
 800b07c:	4606      	mov	r6, r0
 800b07e:	9b08      	ldr	r3, [sp, #32]
 800b080:	3301      	adds	r3, #1
 800b082:	9308      	str	r3, [sp, #32]
 800b084:	e775      	b.n	800af72 <_dtoa_r+0xa0a>
 800b086:	f000 fc51 	bl	800b92c <__multadd>
 800b08a:	4631      	mov	r1, r6
 800b08c:	4680      	mov	r8, r0
 800b08e:	2300      	movs	r3, #0
 800b090:	220a      	movs	r2, #10
 800b092:	4628      	mov	r0, r5
 800b094:	f000 fc4a 	bl	800b92c <__multadd>
 800b098:	4606      	mov	r6, r0
 800b09a:	e7f0      	b.n	800b07e <_dtoa_r+0xb16>
 800b09c:	f1b9 0f00 	cmp.w	r9, #0
 800b0a0:	bfcc      	ite	gt
 800b0a2:	464f      	movgt	r7, r9
 800b0a4:	2701      	movle	r7, #1
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	9a03      	ldr	r2, [sp, #12]
 800b0ac:	4417      	add	r7, r2
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	9308      	str	r3, [sp, #32]
 800b0b6:	f000 fe2f 	bl	800bd18 <__lshift>
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	4683      	mov	fp, r0
 800b0be:	f000 fe9b 	bl	800bdf8 <__mcmp>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	dcb2      	bgt.n	800b02c <_dtoa_r+0xac4>
 800b0c6:	d102      	bne.n	800b0ce <_dtoa_r+0xb66>
 800b0c8:	9b08      	ldr	r3, [sp, #32]
 800b0ca:	07db      	lsls	r3, r3, #31
 800b0cc:	d4ae      	bmi.n	800b02c <_dtoa_r+0xac4>
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	461f      	mov	r7, r3
 800b0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d6:	2a30      	cmp	r2, #48	; 0x30
 800b0d8:	d0fa      	beq.n	800b0d0 <_dtoa_r+0xb68>
 800b0da:	e6f9      	b.n	800aed0 <_dtoa_r+0x968>
 800b0dc:	9a03      	ldr	r2, [sp, #12]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d1a5      	bne.n	800b02e <_dtoa_r+0xac6>
 800b0e2:	2331      	movs	r3, #49	; 0x31
 800b0e4:	f10a 0a01 	add.w	sl, sl, #1
 800b0e8:	e779      	b.n	800afde <_dtoa_r+0xa76>
 800b0ea:	4b14      	ldr	r3, [pc, #80]	; (800b13c <_dtoa_r+0xbd4>)
 800b0ec:	f7ff baa8 	b.w	800a640 <_dtoa_r+0xd8>
 800b0f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f47f aa81 	bne.w	800a5fa <_dtoa_r+0x92>
 800b0f8:	4b11      	ldr	r3, [pc, #68]	; (800b140 <_dtoa_r+0xbd8>)
 800b0fa:	f7ff baa1 	b.w	800a640 <_dtoa_r+0xd8>
 800b0fe:	f1b9 0f00 	cmp.w	r9, #0
 800b102:	dc03      	bgt.n	800b10c <_dtoa_r+0xba4>
 800b104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b106:	2b02      	cmp	r3, #2
 800b108:	f73f aecb 	bgt.w	800aea2 <_dtoa_r+0x93a>
 800b10c:	9f03      	ldr	r7, [sp, #12]
 800b10e:	4621      	mov	r1, r4
 800b110:	4658      	mov	r0, fp
 800b112:	f7ff f99d 	bl	800a450 <quorem>
 800b116:	9a03      	ldr	r2, [sp, #12]
 800b118:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b11c:	f807 3b01 	strb.w	r3, [r7], #1
 800b120:	1aba      	subs	r2, r7, r2
 800b122:	4591      	cmp	r9, r2
 800b124:	ddba      	ble.n	800b09c <_dtoa_r+0xb34>
 800b126:	4659      	mov	r1, fp
 800b128:	2300      	movs	r3, #0
 800b12a:	220a      	movs	r2, #10
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 fbfd 	bl	800b92c <__multadd>
 800b132:	4683      	mov	fp, r0
 800b134:	e7eb      	b.n	800b10e <_dtoa_r+0xba6>
 800b136:	bf00      	nop
 800b138:	0800e3d0 	.word	0x0800e3d0
 800b13c:	0800e1d0 	.word	0x0800e1d0
 800b140:	0800e351 	.word	0x0800e351

0800b144 <rshift>:
 800b144:	6903      	ldr	r3, [r0, #16]
 800b146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b14a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b14e:	f100 0414 	add.w	r4, r0, #20
 800b152:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b156:	dd46      	ble.n	800b1e6 <rshift+0xa2>
 800b158:	f011 011f 	ands.w	r1, r1, #31
 800b15c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b160:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b164:	d10c      	bne.n	800b180 <rshift+0x3c>
 800b166:	4629      	mov	r1, r5
 800b168:	f100 0710 	add.w	r7, r0, #16
 800b16c:	42b1      	cmp	r1, r6
 800b16e:	d335      	bcc.n	800b1dc <rshift+0x98>
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	1eea      	subs	r2, r5, #3
 800b176:	4296      	cmp	r6, r2
 800b178:	bf38      	it	cc
 800b17a:	2300      	movcc	r3, #0
 800b17c:	4423      	add	r3, r4
 800b17e:	e015      	b.n	800b1ac <rshift+0x68>
 800b180:	46a1      	mov	r9, r4
 800b182:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b186:	f1c1 0820 	rsb	r8, r1, #32
 800b18a:	40cf      	lsrs	r7, r1
 800b18c:	f105 0e04 	add.w	lr, r5, #4
 800b190:	4576      	cmp	r6, lr
 800b192:	46f4      	mov	ip, lr
 800b194:	d816      	bhi.n	800b1c4 <rshift+0x80>
 800b196:	1a9a      	subs	r2, r3, r2
 800b198:	0092      	lsls	r2, r2, #2
 800b19a:	3a04      	subs	r2, #4
 800b19c:	3501      	adds	r5, #1
 800b19e:	42ae      	cmp	r6, r5
 800b1a0:	bf38      	it	cc
 800b1a2:	2200      	movcc	r2, #0
 800b1a4:	18a3      	adds	r3, r4, r2
 800b1a6:	50a7      	str	r7, [r4, r2]
 800b1a8:	b107      	cbz	r7, 800b1ac <rshift+0x68>
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	eba3 0204 	sub.w	r2, r3, r4
 800b1b2:	bf08      	it	eq
 800b1b4:	2300      	moveq	r3, #0
 800b1b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1ba:	6102      	str	r2, [r0, #16]
 800b1bc:	bf08      	it	eq
 800b1be:	6143      	streq	r3, [r0, #20]
 800b1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c4:	f8dc c000 	ldr.w	ip, [ip]
 800b1c8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1cc:	ea4c 0707 	orr.w	r7, ip, r7
 800b1d0:	f849 7b04 	str.w	r7, [r9], #4
 800b1d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1d8:	40cf      	lsrs	r7, r1
 800b1da:	e7d9      	b.n	800b190 <rshift+0x4c>
 800b1dc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1e0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1e4:	e7c2      	b.n	800b16c <rshift+0x28>
 800b1e6:	4623      	mov	r3, r4
 800b1e8:	e7e0      	b.n	800b1ac <rshift+0x68>

0800b1ea <__hexdig_fun>:
 800b1ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b1ee:	2b09      	cmp	r3, #9
 800b1f0:	d802      	bhi.n	800b1f8 <__hexdig_fun+0xe>
 800b1f2:	3820      	subs	r0, #32
 800b1f4:	b2c0      	uxtb	r0, r0
 800b1f6:	4770      	bx	lr
 800b1f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b1fc:	2b05      	cmp	r3, #5
 800b1fe:	d801      	bhi.n	800b204 <__hexdig_fun+0x1a>
 800b200:	3847      	subs	r0, #71	; 0x47
 800b202:	e7f7      	b.n	800b1f4 <__hexdig_fun+0xa>
 800b204:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b208:	2b05      	cmp	r3, #5
 800b20a:	d801      	bhi.n	800b210 <__hexdig_fun+0x26>
 800b20c:	3827      	subs	r0, #39	; 0x27
 800b20e:	e7f1      	b.n	800b1f4 <__hexdig_fun+0xa>
 800b210:	2000      	movs	r0, #0
 800b212:	4770      	bx	lr

0800b214 <__gethex>:
 800b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b218:	b08b      	sub	sp, #44	; 0x2c
 800b21a:	9305      	str	r3, [sp, #20]
 800b21c:	4bb2      	ldr	r3, [pc, #712]	; (800b4e8 <__gethex+0x2d4>)
 800b21e:	9002      	str	r0, [sp, #8]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	468b      	mov	fp, r1
 800b224:	4618      	mov	r0, r3
 800b226:	4690      	mov	r8, r2
 800b228:	9303      	str	r3, [sp, #12]
 800b22a:	f7f4 ff91 	bl	8000150 <strlen>
 800b22e:	4682      	mov	sl, r0
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	f8db 2000 	ldr.w	r2, [fp]
 800b236:	4403      	add	r3, r0
 800b238:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b23c:	9306      	str	r3, [sp, #24]
 800b23e:	1c93      	adds	r3, r2, #2
 800b240:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b244:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b248:	32fe      	adds	r2, #254	; 0xfe
 800b24a:	18d1      	adds	r1, r2, r3
 800b24c:	461f      	mov	r7, r3
 800b24e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b252:	9101      	str	r1, [sp, #4]
 800b254:	2830      	cmp	r0, #48	; 0x30
 800b256:	d0f8      	beq.n	800b24a <__gethex+0x36>
 800b258:	f7ff ffc7 	bl	800b1ea <__hexdig_fun>
 800b25c:	4604      	mov	r4, r0
 800b25e:	2800      	cmp	r0, #0
 800b260:	d13a      	bne.n	800b2d8 <__gethex+0xc4>
 800b262:	4652      	mov	r2, sl
 800b264:	4638      	mov	r0, r7
 800b266:	9903      	ldr	r1, [sp, #12]
 800b268:	f001 fa18 	bl	800c69c <strncmp>
 800b26c:	4605      	mov	r5, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	d166      	bne.n	800b340 <__gethex+0x12c>
 800b272:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b276:	eb07 060a 	add.w	r6, r7, sl
 800b27a:	f7ff ffb6 	bl	800b1ea <__hexdig_fun>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d060      	beq.n	800b344 <__gethex+0x130>
 800b282:	4633      	mov	r3, r6
 800b284:	7818      	ldrb	r0, [r3, #0]
 800b286:	461f      	mov	r7, r3
 800b288:	2830      	cmp	r0, #48	; 0x30
 800b28a:	f103 0301 	add.w	r3, r3, #1
 800b28e:	d0f9      	beq.n	800b284 <__gethex+0x70>
 800b290:	f7ff ffab 	bl	800b1ea <__hexdig_fun>
 800b294:	2301      	movs	r3, #1
 800b296:	fab0 f480 	clz	r4, r0
 800b29a:	4635      	mov	r5, r6
 800b29c:	0964      	lsrs	r4, r4, #5
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	463a      	mov	r2, r7
 800b2a2:	4616      	mov	r6, r2
 800b2a4:	7830      	ldrb	r0, [r6, #0]
 800b2a6:	3201      	adds	r2, #1
 800b2a8:	f7ff ff9f 	bl	800b1ea <__hexdig_fun>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d1f8      	bne.n	800b2a2 <__gethex+0x8e>
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	9903      	ldr	r1, [sp, #12]
 800b2b6:	f001 f9f1 	bl	800c69c <strncmp>
 800b2ba:	b980      	cbnz	r0, 800b2de <__gethex+0xca>
 800b2bc:	b94d      	cbnz	r5, 800b2d2 <__gethex+0xbe>
 800b2be:	eb06 050a 	add.w	r5, r6, sl
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	7830      	ldrb	r0, [r6, #0]
 800b2c8:	3201      	adds	r2, #1
 800b2ca:	f7ff ff8e 	bl	800b1ea <__hexdig_fun>
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	d1f8      	bne.n	800b2c4 <__gethex+0xb0>
 800b2d2:	1bad      	subs	r5, r5, r6
 800b2d4:	00ad      	lsls	r5, r5, #2
 800b2d6:	e004      	b.n	800b2e2 <__gethex+0xce>
 800b2d8:	2400      	movs	r4, #0
 800b2da:	4625      	mov	r5, r4
 800b2dc:	e7e0      	b.n	800b2a0 <__gethex+0x8c>
 800b2de:	2d00      	cmp	r5, #0
 800b2e0:	d1f7      	bne.n	800b2d2 <__gethex+0xbe>
 800b2e2:	7833      	ldrb	r3, [r6, #0]
 800b2e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b2e8:	2b50      	cmp	r3, #80	; 0x50
 800b2ea:	d139      	bne.n	800b360 <__gethex+0x14c>
 800b2ec:	7873      	ldrb	r3, [r6, #1]
 800b2ee:	2b2b      	cmp	r3, #43	; 0x2b
 800b2f0:	d02a      	beq.n	800b348 <__gethex+0x134>
 800b2f2:	2b2d      	cmp	r3, #45	; 0x2d
 800b2f4:	d02c      	beq.n	800b350 <__gethex+0x13c>
 800b2f6:	f04f 0900 	mov.w	r9, #0
 800b2fa:	1c71      	adds	r1, r6, #1
 800b2fc:	7808      	ldrb	r0, [r1, #0]
 800b2fe:	f7ff ff74 	bl	800b1ea <__hexdig_fun>
 800b302:	1e43      	subs	r3, r0, #1
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b18      	cmp	r3, #24
 800b308:	d82a      	bhi.n	800b360 <__gethex+0x14c>
 800b30a:	f1a0 0210 	sub.w	r2, r0, #16
 800b30e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b312:	f7ff ff6a 	bl	800b1ea <__hexdig_fun>
 800b316:	1e43      	subs	r3, r0, #1
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b18      	cmp	r3, #24
 800b31c:	d91b      	bls.n	800b356 <__gethex+0x142>
 800b31e:	f1b9 0f00 	cmp.w	r9, #0
 800b322:	d000      	beq.n	800b326 <__gethex+0x112>
 800b324:	4252      	negs	r2, r2
 800b326:	4415      	add	r5, r2
 800b328:	f8cb 1000 	str.w	r1, [fp]
 800b32c:	b1d4      	cbz	r4, 800b364 <__gethex+0x150>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	bf14      	ite	ne
 800b334:	2700      	movne	r7, #0
 800b336:	2706      	moveq	r7, #6
 800b338:	4638      	mov	r0, r7
 800b33a:	b00b      	add	sp, #44	; 0x2c
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b340:	463e      	mov	r6, r7
 800b342:	4625      	mov	r5, r4
 800b344:	2401      	movs	r4, #1
 800b346:	e7cc      	b.n	800b2e2 <__gethex+0xce>
 800b348:	f04f 0900 	mov.w	r9, #0
 800b34c:	1cb1      	adds	r1, r6, #2
 800b34e:	e7d5      	b.n	800b2fc <__gethex+0xe8>
 800b350:	f04f 0901 	mov.w	r9, #1
 800b354:	e7fa      	b.n	800b34c <__gethex+0x138>
 800b356:	230a      	movs	r3, #10
 800b358:	fb03 0202 	mla	r2, r3, r2, r0
 800b35c:	3a10      	subs	r2, #16
 800b35e:	e7d6      	b.n	800b30e <__gethex+0xfa>
 800b360:	4631      	mov	r1, r6
 800b362:	e7e1      	b.n	800b328 <__gethex+0x114>
 800b364:	4621      	mov	r1, r4
 800b366:	1bf3      	subs	r3, r6, r7
 800b368:	3b01      	subs	r3, #1
 800b36a:	2b07      	cmp	r3, #7
 800b36c:	dc0a      	bgt.n	800b384 <__gethex+0x170>
 800b36e:	9802      	ldr	r0, [sp, #8]
 800b370:	f000 fa7a 	bl	800b868 <_Balloc>
 800b374:	4604      	mov	r4, r0
 800b376:	b940      	cbnz	r0, 800b38a <__gethex+0x176>
 800b378:	4602      	mov	r2, r0
 800b37a:	21de      	movs	r1, #222	; 0xde
 800b37c:	4b5b      	ldr	r3, [pc, #364]	; (800b4ec <__gethex+0x2d8>)
 800b37e:	485c      	ldr	r0, [pc, #368]	; (800b4f0 <__gethex+0x2dc>)
 800b380:	f001 f9ae 	bl	800c6e0 <__assert_func>
 800b384:	3101      	adds	r1, #1
 800b386:	105b      	asrs	r3, r3, #1
 800b388:	e7ef      	b.n	800b36a <__gethex+0x156>
 800b38a:	f04f 0b00 	mov.w	fp, #0
 800b38e:	f100 0914 	add.w	r9, r0, #20
 800b392:	f1ca 0301 	rsb	r3, sl, #1
 800b396:	f8cd 9010 	str.w	r9, [sp, #16]
 800b39a:	f8cd b004 	str.w	fp, [sp, #4]
 800b39e:	9308      	str	r3, [sp, #32]
 800b3a0:	42b7      	cmp	r7, r6
 800b3a2:	d33f      	bcc.n	800b424 <__gethex+0x210>
 800b3a4:	9f04      	ldr	r7, [sp, #16]
 800b3a6:	9b01      	ldr	r3, [sp, #4]
 800b3a8:	f847 3b04 	str.w	r3, [r7], #4
 800b3ac:	eba7 0709 	sub.w	r7, r7, r9
 800b3b0:	10bf      	asrs	r7, r7, #2
 800b3b2:	6127      	str	r7, [r4, #16]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 fb49 	bl	800ba4c <__hi0bits>
 800b3ba:	017f      	lsls	r7, r7, #5
 800b3bc:	f8d8 6000 	ldr.w	r6, [r8]
 800b3c0:	1a3f      	subs	r7, r7, r0
 800b3c2:	42b7      	cmp	r7, r6
 800b3c4:	dd62      	ble.n	800b48c <__gethex+0x278>
 800b3c6:	1bbf      	subs	r7, r7, r6
 800b3c8:	4639      	mov	r1, r7
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fee3 	bl	800c196 <__any_on>
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	b1a8      	cbz	r0, 800b400 <__gethex+0x1ec>
 800b3d4:	f04f 0a01 	mov.w	sl, #1
 800b3d8:	1e7b      	subs	r3, r7, #1
 800b3da:	1159      	asrs	r1, r3, #5
 800b3dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b3e0:	f003 021f 	and.w	r2, r3, #31
 800b3e4:	fa0a f202 	lsl.w	r2, sl, r2
 800b3e8:	420a      	tst	r2, r1
 800b3ea:	d009      	beq.n	800b400 <__gethex+0x1ec>
 800b3ec:	4553      	cmp	r3, sl
 800b3ee:	dd05      	ble.n	800b3fc <__gethex+0x1e8>
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	1eb9      	subs	r1, r7, #2
 800b3f4:	f000 fecf 	bl	800c196 <__any_on>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d144      	bne.n	800b486 <__gethex+0x272>
 800b3fc:	f04f 0a02 	mov.w	sl, #2
 800b400:	4639      	mov	r1, r7
 800b402:	4620      	mov	r0, r4
 800b404:	f7ff fe9e 	bl	800b144 <rshift>
 800b408:	443d      	add	r5, r7
 800b40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b40e:	42ab      	cmp	r3, r5
 800b410:	da4a      	bge.n	800b4a8 <__gethex+0x294>
 800b412:	4621      	mov	r1, r4
 800b414:	9802      	ldr	r0, [sp, #8]
 800b416:	f000 fa67 	bl	800b8e8 <_Bfree>
 800b41a:	2300      	movs	r3, #0
 800b41c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b41e:	27a3      	movs	r7, #163	; 0xa3
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	e789      	b.n	800b338 <__gethex+0x124>
 800b424:	1e73      	subs	r3, r6, #1
 800b426:	9a06      	ldr	r2, [sp, #24]
 800b428:	9307      	str	r3, [sp, #28]
 800b42a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b42e:	4293      	cmp	r3, r2
 800b430:	d019      	beq.n	800b466 <__gethex+0x252>
 800b432:	f1bb 0f20 	cmp.w	fp, #32
 800b436:	d107      	bne.n	800b448 <__gethex+0x234>
 800b438:	9b04      	ldr	r3, [sp, #16]
 800b43a:	9a01      	ldr	r2, [sp, #4]
 800b43c:	f843 2b04 	str.w	r2, [r3], #4
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	2300      	movs	r3, #0
 800b444:	469b      	mov	fp, r3
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b44c:	f7ff fecd 	bl	800b1ea <__hexdig_fun>
 800b450:	9b01      	ldr	r3, [sp, #4]
 800b452:	f000 000f 	and.w	r0, r0, #15
 800b456:	fa00 f00b 	lsl.w	r0, r0, fp
 800b45a:	4303      	orrs	r3, r0
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	f10b 0b04 	add.w	fp, fp, #4
 800b462:	9b07      	ldr	r3, [sp, #28]
 800b464:	e00d      	b.n	800b482 <__gethex+0x26e>
 800b466:	9a08      	ldr	r2, [sp, #32]
 800b468:	1e73      	subs	r3, r6, #1
 800b46a:	4413      	add	r3, r2
 800b46c:	42bb      	cmp	r3, r7
 800b46e:	d3e0      	bcc.n	800b432 <__gethex+0x21e>
 800b470:	4618      	mov	r0, r3
 800b472:	4652      	mov	r2, sl
 800b474:	9903      	ldr	r1, [sp, #12]
 800b476:	9309      	str	r3, [sp, #36]	; 0x24
 800b478:	f001 f910 	bl	800c69c <strncmp>
 800b47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47e:	2800      	cmp	r0, #0
 800b480:	d1d7      	bne.n	800b432 <__gethex+0x21e>
 800b482:	461e      	mov	r6, r3
 800b484:	e78c      	b.n	800b3a0 <__gethex+0x18c>
 800b486:	f04f 0a03 	mov.w	sl, #3
 800b48a:	e7b9      	b.n	800b400 <__gethex+0x1ec>
 800b48c:	da09      	bge.n	800b4a2 <__gethex+0x28e>
 800b48e:	1bf7      	subs	r7, r6, r7
 800b490:	4621      	mov	r1, r4
 800b492:	463a      	mov	r2, r7
 800b494:	9802      	ldr	r0, [sp, #8]
 800b496:	f000 fc3f 	bl	800bd18 <__lshift>
 800b49a:	4604      	mov	r4, r0
 800b49c:	1bed      	subs	r5, r5, r7
 800b49e:	f100 0914 	add.w	r9, r0, #20
 800b4a2:	f04f 0a00 	mov.w	sl, #0
 800b4a6:	e7b0      	b.n	800b40a <__gethex+0x1f6>
 800b4a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b4ac:	42a8      	cmp	r0, r5
 800b4ae:	dd72      	ble.n	800b596 <__gethex+0x382>
 800b4b0:	1b45      	subs	r5, r0, r5
 800b4b2:	42ae      	cmp	r6, r5
 800b4b4:	dc35      	bgt.n	800b522 <__gethex+0x30e>
 800b4b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d029      	beq.n	800b512 <__gethex+0x2fe>
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d02b      	beq.n	800b51a <__gethex+0x306>
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d11c      	bne.n	800b500 <__gethex+0x2ec>
 800b4c6:	42ae      	cmp	r6, r5
 800b4c8:	d11a      	bne.n	800b500 <__gethex+0x2ec>
 800b4ca:	2e01      	cmp	r6, #1
 800b4cc:	d112      	bne.n	800b4f4 <__gethex+0x2e0>
 800b4ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b4d2:	9a05      	ldr	r2, [sp, #20]
 800b4d4:	2762      	movs	r7, #98	; 0x62
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	2301      	movs	r3, #1
 800b4da:	6123      	str	r3, [r4, #16]
 800b4dc:	f8c9 3000 	str.w	r3, [r9]
 800b4e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4e2:	601c      	str	r4, [r3, #0]
 800b4e4:	e728      	b.n	800b338 <__gethex+0x124>
 800b4e6:	bf00      	nop
 800b4e8:	0800e448 	.word	0x0800e448
 800b4ec:	0800e3d0 	.word	0x0800e3d0
 800b4f0:	0800e3e1 	.word	0x0800e3e1
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	1e71      	subs	r1, r6, #1
 800b4f8:	f000 fe4d 	bl	800c196 <__any_on>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d1e6      	bne.n	800b4ce <__gethex+0x2ba>
 800b500:	4621      	mov	r1, r4
 800b502:	9802      	ldr	r0, [sp, #8]
 800b504:	f000 f9f0 	bl	800b8e8 <_Bfree>
 800b508:	2300      	movs	r3, #0
 800b50a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b50c:	2750      	movs	r7, #80	; 0x50
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	e712      	b.n	800b338 <__gethex+0x124>
 800b512:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1f3      	bne.n	800b500 <__gethex+0x2ec>
 800b518:	e7d9      	b.n	800b4ce <__gethex+0x2ba>
 800b51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1d6      	bne.n	800b4ce <__gethex+0x2ba>
 800b520:	e7ee      	b.n	800b500 <__gethex+0x2ec>
 800b522:	1e6f      	subs	r7, r5, #1
 800b524:	f1ba 0f00 	cmp.w	sl, #0
 800b528:	d132      	bne.n	800b590 <__gethex+0x37c>
 800b52a:	b127      	cbz	r7, 800b536 <__gethex+0x322>
 800b52c:	4639      	mov	r1, r7
 800b52e:	4620      	mov	r0, r4
 800b530:	f000 fe31 	bl	800c196 <__any_on>
 800b534:	4682      	mov	sl, r0
 800b536:	2101      	movs	r1, #1
 800b538:	117b      	asrs	r3, r7, #5
 800b53a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b53e:	f007 071f 	and.w	r7, r7, #31
 800b542:	fa01 f707 	lsl.w	r7, r1, r7
 800b546:	421f      	tst	r7, r3
 800b548:	f04f 0702 	mov.w	r7, #2
 800b54c:	4629      	mov	r1, r5
 800b54e:	4620      	mov	r0, r4
 800b550:	bf18      	it	ne
 800b552:	f04a 0a02 	orrne.w	sl, sl, #2
 800b556:	1b76      	subs	r6, r6, r5
 800b558:	f7ff fdf4 	bl	800b144 <rshift>
 800b55c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b560:	f1ba 0f00 	cmp.w	sl, #0
 800b564:	d048      	beq.n	800b5f8 <__gethex+0x3e4>
 800b566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d015      	beq.n	800b59a <__gethex+0x386>
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d017      	beq.n	800b5a2 <__gethex+0x38e>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d109      	bne.n	800b58a <__gethex+0x376>
 800b576:	f01a 0f02 	tst.w	sl, #2
 800b57a:	d006      	beq.n	800b58a <__gethex+0x376>
 800b57c:	f8d9 0000 	ldr.w	r0, [r9]
 800b580:	ea4a 0a00 	orr.w	sl, sl, r0
 800b584:	f01a 0f01 	tst.w	sl, #1
 800b588:	d10e      	bne.n	800b5a8 <__gethex+0x394>
 800b58a:	f047 0710 	orr.w	r7, r7, #16
 800b58e:	e033      	b.n	800b5f8 <__gethex+0x3e4>
 800b590:	f04f 0a01 	mov.w	sl, #1
 800b594:	e7cf      	b.n	800b536 <__gethex+0x322>
 800b596:	2701      	movs	r7, #1
 800b598:	e7e2      	b.n	800b560 <__gethex+0x34c>
 800b59a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b59c:	f1c3 0301 	rsb	r3, r3, #1
 800b5a0:	9315      	str	r3, [sp, #84]	; 0x54
 800b5a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f0      	beq.n	800b58a <__gethex+0x376>
 800b5a8:	f04f 0c00 	mov.w	ip, #0
 800b5ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5b0:	f104 0314 	add.w	r3, r4, #20
 800b5b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b5c6:	d01c      	beq.n	800b602 <__gethex+0x3ee>
 800b5c8:	3201      	adds	r2, #1
 800b5ca:	6002      	str	r2, [r0, #0]
 800b5cc:	2f02      	cmp	r7, #2
 800b5ce:	f104 0314 	add.w	r3, r4, #20
 800b5d2:	d13d      	bne.n	800b650 <__gethex+0x43c>
 800b5d4:	f8d8 2000 	ldr.w	r2, [r8]
 800b5d8:	3a01      	subs	r2, #1
 800b5da:	42b2      	cmp	r2, r6
 800b5dc:	d10a      	bne.n	800b5f4 <__gethex+0x3e0>
 800b5de:	2201      	movs	r2, #1
 800b5e0:	1171      	asrs	r1, r6, #5
 800b5e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b5e6:	f006 061f 	and.w	r6, r6, #31
 800b5ea:	fa02 f606 	lsl.w	r6, r2, r6
 800b5ee:	421e      	tst	r6, r3
 800b5f0:	bf18      	it	ne
 800b5f2:	4617      	movne	r7, r2
 800b5f4:	f047 0720 	orr.w	r7, r7, #32
 800b5f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b5fa:	601c      	str	r4, [r3, #0]
 800b5fc:	9b05      	ldr	r3, [sp, #20]
 800b5fe:	601d      	str	r5, [r3, #0]
 800b600:	e69a      	b.n	800b338 <__gethex+0x124>
 800b602:	4299      	cmp	r1, r3
 800b604:	f843 cc04 	str.w	ip, [r3, #-4]
 800b608:	d8d8      	bhi.n	800b5bc <__gethex+0x3a8>
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	459b      	cmp	fp, r3
 800b60e:	db17      	blt.n	800b640 <__gethex+0x42c>
 800b610:	6861      	ldr	r1, [r4, #4]
 800b612:	9802      	ldr	r0, [sp, #8]
 800b614:	3101      	adds	r1, #1
 800b616:	f000 f927 	bl	800b868 <_Balloc>
 800b61a:	4681      	mov	r9, r0
 800b61c:	b918      	cbnz	r0, 800b626 <__gethex+0x412>
 800b61e:	4602      	mov	r2, r0
 800b620:	2184      	movs	r1, #132	; 0x84
 800b622:	4b19      	ldr	r3, [pc, #100]	; (800b688 <__gethex+0x474>)
 800b624:	e6ab      	b.n	800b37e <__gethex+0x16a>
 800b626:	6922      	ldr	r2, [r4, #16]
 800b628:	f104 010c 	add.w	r1, r4, #12
 800b62c:	3202      	adds	r2, #2
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	300c      	adds	r0, #12
 800b632:	f7fd f9cd 	bl	80089d0 <memcpy>
 800b636:	4621      	mov	r1, r4
 800b638:	9802      	ldr	r0, [sp, #8]
 800b63a:	f000 f955 	bl	800b8e8 <_Bfree>
 800b63e:	464c      	mov	r4, r9
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	6122      	str	r2, [r4, #16]
 800b646:	2201      	movs	r2, #1
 800b648:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b64c:	615a      	str	r2, [r3, #20]
 800b64e:	e7bd      	b.n	800b5cc <__gethex+0x3b8>
 800b650:	6922      	ldr	r2, [r4, #16]
 800b652:	455a      	cmp	r2, fp
 800b654:	dd0b      	ble.n	800b66e <__gethex+0x45a>
 800b656:	2101      	movs	r1, #1
 800b658:	4620      	mov	r0, r4
 800b65a:	f7ff fd73 	bl	800b144 <rshift>
 800b65e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b662:	3501      	adds	r5, #1
 800b664:	42ab      	cmp	r3, r5
 800b666:	f6ff aed4 	blt.w	800b412 <__gethex+0x1fe>
 800b66a:	2701      	movs	r7, #1
 800b66c:	e7c2      	b.n	800b5f4 <__gethex+0x3e0>
 800b66e:	f016 061f 	ands.w	r6, r6, #31
 800b672:	d0fa      	beq.n	800b66a <__gethex+0x456>
 800b674:	4453      	add	r3, sl
 800b676:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b67a:	f000 f9e7 	bl	800ba4c <__hi0bits>
 800b67e:	f1c6 0620 	rsb	r6, r6, #32
 800b682:	42b0      	cmp	r0, r6
 800b684:	dbe7      	blt.n	800b656 <__gethex+0x442>
 800b686:	e7f0      	b.n	800b66a <__gethex+0x456>
 800b688:	0800e3d0 	.word	0x0800e3d0

0800b68c <L_shift>:
 800b68c:	f1c2 0208 	rsb	r2, r2, #8
 800b690:	0092      	lsls	r2, r2, #2
 800b692:	b570      	push	{r4, r5, r6, lr}
 800b694:	f1c2 0620 	rsb	r6, r2, #32
 800b698:	6843      	ldr	r3, [r0, #4]
 800b69a:	6804      	ldr	r4, [r0, #0]
 800b69c:	fa03 f506 	lsl.w	r5, r3, r6
 800b6a0:	432c      	orrs	r4, r5
 800b6a2:	40d3      	lsrs	r3, r2
 800b6a4:	6004      	str	r4, [r0, #0]
 800b6a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6aa:	4288      	cmp	r0, r1
 800b6ac:	d3f4      	bcc.n	800b698 <L_shift+0xc>
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}

0800b6b0 <__match>:
 800b6b0:	b530      	push	{r4, r5, lr}
 800b6b2:	6803      	ldr	r3, [r0, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6ba:	b914      	cbnz	r4, 800b6c2 <__match+0x12>
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	2001      	movs	r0, #1
 800b6c0:	bd30      	pop	{r4, r5, pc}
 800b6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6ca:	2d19      	cmp	r5, #25
 800b6cc:	bf98      	it	ls
 800b6ce:	3220      	addls	r2, #32
 800b6d0:	42a2      	cmp	r2, r4
 800b6d2:	d0f0      	beq.n	800b6b6 <__match+0x6>
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	e7f3      	b.n	800b6c0 <__match+0x10>

0800b6d8 <__hexnan>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	2500      	movs	r5, #0
 800b6de:	680b      	ldr	r3, [r1, #0]
 800b6e0:	4682      	mov	sl, r0
 800b6e2:	115e      	asrs	r6, r3, #5
 800b6e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b6e8:	f013 031f 	ands.w	r3, r3, #31
 800b6ec:	bf18      	it	ne
 800b6ee:	3604      	addne	r6, #4
 800b6f0:	1f37      	subs	r7, r6, #4
 800b6f2:	46b9      	mov	r9, r7
 800b6f4:	463c      	mov	r4, r7
 800b6f6:	46ab      	mov	fp, r5
 800b6f8:	b087      	sub	sp, #28
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	6802      	ldr	r2, [r0, #0]
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	f846 5c04 	str.w	r5, [r6, #-4]
 800b704:	9502      	str	r5, [sp, #8]
 800b706:	7851      	ldrb	r1, [r2, #1]
 800b708:	1c53      	adds	r3, r2, #1
 800b70a:	9303      	str	r3, [sp, #12]
 800b70c:	b341      	cbz	r1, 800b760 <__hexnan+0x88>
 800b70e:	4608      	mov	r0, r1
 800b710:	9205      	str	r2, [sp, #20]
 800b712:	9104      	str	r1, [sp, #16]
 800b714:	f7ff fd69 	bl	800b1ea <__hexdig_fun>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d14f      	bne.n	800b7bc <__hexnan+0xe4>
 800b71c:	9904      	ldr	r1, [sp, #16]
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	2920      	cmp	r1, #32
 800b722:	d818      	bhi.n	800b756 <__hexnan+0x7e>
 800b724:	9b02      	ldr	r3, [sp, #8]
 800b726:	459b      	cmp	fp, r3
 800b728:	dd13      	ble.n	800b752 <__hexnan+0x7a>
 800b72a:	454c      	cmp	r4, r9
 800b72c:	d206      	bcs.n	800b73c <__hexnan+0x64>
 800b72e:	2d07      	cmp	r5, #7
 800b730:	dc04      	bgt.n	800b73c <__hexnan+0x64>
 800b732:	462a      	mov	r2, r5
 800b734:	4649      	mov	r1, r9
 800b736:	4620      	mov	r0, r4
 800b738:	f7ff ffa8 	bl	800b68c <L_shift>
 800b73c:	4544      	cmp	r4, r8
 800b73e:	d950      	bls.n	800b7e2 <__hexnan+0x10a>
 800b740:	2300      	movs	r3, #0
 800b742:	f1a4 0904 	sub.w	r9, r4, #4
 800b746:	f844 3c04 	str.w	r3, [r4, #-4]
 800b74a:	461d      	mov	r5, r3
 800b74c:	464c      	mov	r4, r9
 800b74e:	f8cd b008 	str.w	fp, [sp, #8]
 800b752:	9a03      	ldr	r2, [sp, #12]
 800b754:	e7d7      	b.n	800b706 <__hexnan+0x2e>
 800b756:	2929      	cmp	r1, #41	; 0x29
 800b758:	d156      	bne.n	800b808 <__hexnan+0x130>
 800b75a:	3202      	adds	r2, #2
 800b75c:	f8ca 2000 	str.w	r2, [sl]
 800b760:	f1bb 0f00 	cmp.w	fp, #0
 800b764:	d050      	beq.n	800b808 <__hexnan+0x130>
 800b766:	454c      	cmp	r4, r9
 800b768:	d206      	bcs.n	800b778 <__hexnan+0xa0>
 800b76a:	2d07      	cmp	r5, #7
 800b76c:	dc04      	bgt.n	800b778 <__hexnan+0xa0>
 800b76e:	462a      	mov	r2, r5
 800b770:	4649      	mov	r1, r9
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff ff8a 	bl	800b68c <L_shift>
 800b778:	4544      	cmp	r4, r8
 800b77a:	d934      	bls.n	800b7e6 <__hexnan+0x10e>
 800b77c:	4623      	mov	r3, r4
 800b77e:	f1a8 0204 	sub.w	r2, r8, #4
 800b782:	f853 1b04 	ldr.w	r1, [r3], #4
 800b786:	429f      	cmp	r7, r3
 800b788:	f842 1f04 	str.w	r1, [r2, #4]!
 800b78c:	d2f9      	bcs.n	800b782 <__hexnan+0xaa>
 800b78e:	1b3b      	subs	r3, r7, r4
 800b790:	f023 0303 	bic.w	r3, r3, #3
 800b794:	3304      	adds	r3, #4
 800b796:	3401      	adds	r4, #1
 800b798:	3e03      	subs	r6, #3
 800b79a:	42b4      	cmp	r4, r6
 800b79c:	bf88      	it	hi
 800b79e:	2304      	movhi	r3, #4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4443      	add	r3, r8
 800b7a4:	f843 2b04 	str.w	r2, [r3], #4
 800b7a8:	429f      	cmp	r7, r3
 800b7aa:	d2fb      	bcs.n	800b7a4 <__hexnan+0xcc>
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	b91b      	cbnz	r3, 800b7b8 <__hexnan+0xe0>
 800b7b0:	4547      	cmp	r7, r8
 800b7b2:	d127      	bne.n	800b804 <__hexnan+0x12c>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	603b      	str	r3, [r7, #0]
 800b7b8:	2005      	movs	r0, #5
 800b7ba:	e026      	b.n	800b80a <__hexnan+0x132>
 800b7bc:	3501      	adds	r5, #1
 800b7be:	2d08      	cmp	r5, #8
 800b7c0:	f10b 0b01 	add.w	fp, fp, #1
 800b7c4:	dd06      	ble.n	800b7d4 <__hexnan+0xfc>
 800b7c6:	4544      	cmp	r4, r8
 800b7c8:	d9c3      	bls.n	800b752 <__hexnan+0x7a>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2501      	movs	r5, #1
 800b7ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7d2:	3c04      	subs	r4, #4
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	f000 000f 	and.w	r0, r0, #15
 800b7da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b7de:	6022      	str	r2, [r4, #0]
 800b7e0:	e7b7      	b.n	800b752 <__hexnan+0x7a>
 800b7e2:	2508      	movs	r5, #8
 800b7e4:	e7b5      	b.n	800b752 <__hexnan+0x7a>
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0df      	beq.n	800b7ac <__hexnan+0xd4>
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f0:	f1c3 0320 	rsb	r3, r3, #32
 800b7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7fc:	401a      	ands	r2, r3
 800b7fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800b802:	e7d3      	b.n	800b7ac <__hexnan+0xd4>
 800b804:	3f04      	subs	r7, #4
 800b806:	e7d1      	b.n	800b7ac <__hexnan+0xd4>
 800b808:	2004      	movs	r0, #4
 800b80a:	b007      	add	sp, #28
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b810 <_localeconv_r>:
 800b810:	4800      	ldr	r0, [pc, #0]	; (800b814 <_localeconv_r+0x4>)
 800b812:	4770      	bx	lr
 800b814:	20000174 	.word	0x20000174

0800b818 <malloc>:
 800b818:	4b02      	ldr	r3, [pc, #8]	; (800b824 <malloc+0xc>)
 800b81a:	4601      	mov	r1, r0
 800b81c:	6818      	ldr	r0, [r3, #0]
 800b81e:	f000 bd57 	b.w	800c2d0 <_malloc_r>
 800b822:	bf00      	nop
 800b824:	2000001c 	.word	0x2000001c

0800b828 <__ascii_mbtowc>:
 800b828:	b082      	sub	sp, #8
 800b82a:	b901      	cbnz	r1, 800b82e <__ascii_mbtowc+0x6>
 800b82c:	a901      	add	r1, sp, #4
 800b82e:	b142      	cbz	r2, 800b842 <__ascii_mbtowc+0x1a>
 800b830:	b14b      	cbz	r3, 800b846 <__ascii_mbtowc+0x1e>
 800b832:	7813      	ldrb	r3, [r2, #0]
 800b834:	600b      	str	r3, [r1, #0]
 800b836:	7812      	ldrb	r2, [r2, #0]
 800b838:	1e10      	subs	r0, r2, #0
 800b83a:	bf18      	it	ne
 800b83c:	2001      	movne	r0, #1
 800b83e:	b002      	add	sp, #8
 800b840:	4770      	bx	lr
 800b842:	4610      	mov	r0, r2
 800b844:	e7fb      	b.n	800b83e <__ascii_mbtowc+0x16>
 800b846:	f06f 0001 	mvn.w	r0, #1
 800b84a:	e7f8      	b.n	800b83e <__ascii_mbtowc+0x16>

0800b84c <memchr>:
 800b84c:	4603      	mov	r3, r0
 800b84e:	b510      	push	{r4, lr}
 800b850:	b2c9      	uxtb	r1, r1
 800b852:	4402      	add	r2, r0
 800b854:	4293      	cmp	r3, r2
 800b856:	4618      	mov	r0, r3
 800b858:	d101      	bne.n	800b85e <memchr+0x12>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e003      	b.n	800b866 <memchr+0x1a>
 800b85e:	7804      	ldrb	r4, [r0, #0]
 800b860:	3301      	adds	r3, #1
 800b862:	428c      	cmp	r4, r1
 800b864:	d1f6      	bne.n	800b854 <memchr+0x8>
 800b866:	bd10      	pop	{r4, pc}

0800b868 <_Balloc>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b86c:	4604      	mov	r4, r0
 800b86e:	460d      	mov	r5, r1
 800b870:	b976      	cbnz	r6, 800b890 <_Balloc+0x28>
 800b872:	2010      	movs	r0, #16
 800b874:	f7ff ffd0 	bl	800b818 <malloc>
 800b878:	4602      	mov	r2, r0
 800b87a:	6260      	str	r0, [r4, #36]	; 0x24
 800b87c:	b920      	cbnz	r0, 800b888 <_Balloc+0x20>
 800b87e:	2166      	movs	r1, #102	; 0x66
 800b880:	4b17      	ldr	r3, [pc, #92]	; (800b8e0 <_Balloc+0x78>)
 800b882:	4818      	ldr	r0, [pc, #96]	; (800b8e4 <_Balloc+0x7c>)
 800b884:	f000 ff2c 	bl	800c6e0 <__assert_func>
 800b888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b88c:	6006      	str	r6, [r0, #0]
 800b88e:	60c6      	str	r6, [r0, #12]
 800b890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b892:	68f3      	ldr	r3, [r6, #12]
 800b894:	b183      	cbz	r3, 800b8b8 <_Balloc+0x50>
 800b896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b89e:	b9b8      	cbnz	r0, 800b8d0 <_Balloc+0x68>
 800b8a0:	2101      	movs	r1, #1
 800b8a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8a6:	1d72      	adds	r2, r6, #5
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	0092      	lsls	r2, r2, #2
 800b8ac:	f000 fc94 	bl	800c1d8 <_calloc_r>
 800b8b0:	b160      	cbz	r0, 800b8cc <_Balloc+0x64>
 800b8b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8b6:	e00e      	b.n	800b8d6 <_Balloc+0x6e>
 800b8b8:	2221      	movs	r2, #33	; 0x21
 800b8ba:	2104      	movs	r1, #4
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 fc8b 	bl	800c1d8 <_calloc_r>
 800b8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c4:	60f0      	str	r0, [r6, #12]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e4      	bne.n	800b896 <_Balloc+0x2e>
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	6802      	ldr	r2, [r0, #0]
 800b8d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8dc:	e7f7      	b.n	800b8ce <_Balloc+0x66>
 800b8de:	bf00      	nop
 800b8e0:	0800e35e 	.word	0x0800e35e
 800b8e4:	0800e45c 	.word	0x0800e45c

0800b8e8 <_Bfree>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	b976      	cbnz	r6, 800b910 <_Bfree+0x28>
 800b8f2:	2010      	movs	r0, #16
 800b8f4:	f7ff ff90 	bl	800b818 <malloc>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	6268      	str	r0, [r5, #36]	; 0x24
 800b8fc:	b920      	cbnz	r0, 800b908 <_Bfree+0x20>
 800b8fe:	218a      	movs	r1, #138	; 0x8a
 800b900:	4b08      	ldr	r3, [pc, #32]	; (800b924 <_Bfree+0x3c>)
 800b902:	4809      	ldr	r0, [pc, #36]	; (800b928 <_Bfree+0x40>)
 800b904:	f000 feec 	bl	800c6e0 <__assert_func>
 800b908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b90c:	6006      	str	r6, [r0, #0]
 800b90e:	60c6      	str	r6, [r0, #12]
 800b910:	b13c      	cbz	r4, 800b922 <_Bfree+0x3a>
 800b912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b914:	6862      	ldr	r2, [r4, #4]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b91c:	6021      	str	r1, [r4, #0]
 800b91e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b922:	bd70      	pop	{r4, r5, r6, pc}
 800b924:	0800e35e 	.word	0x0800e35e
 800b928:	0800e45c 	.word	0x0800e45c

0800b92c <__multadd>:
 800b92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b930:	4607      	mov	r7, r0
 800b932:	460c      	mov	r4, r1
 800b934:	461e      	mov	r6, r3
 800b936:	2000      	movs	r0, #0
 800b938:	690d      	ldr	r5, [r1, #16]
 800b93a:	f101 0c14 	add.w	ip, r1, #20
 800b93e:	f8dc 3000 	ldr.w	r3, [ip]
 800b942:	3001      	adds	r0, #1
 800b944:	b299      	uxth	r1, r3
 800b946:	fb02 6101 	mla	r1, r2, r1, r6
 800b94a:	0c1e      	lsrs	r6, r3, #16
 800b94c:	0c0b      	lsrs	r3, r1, #16
 800b94e:	fb02 3306 	mla	r3, r2, r6, r3
 800b952:	b289      	uxth	r1, r1
 800b954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b958:	4285      	cmp	r5, r0
 800b95a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b95e:	f84c 1b04 	str.w	r1, [ip], #4
 800b962:	dcec      	bgt.n	800b93e <__multadd+0x12>
 800b964:	b30e      	cbz	r6, 800b9aa <__multadd+0x7e>
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	42ab      	cmp	r3, r5
 800b96a:	dc19      	bgt.n	800b9a0 <__multadd+0x74>
 800b96c:	6861      	ldr	r1, [r4, #4]
 800b96e:	4638      	mov	r0, r7
 800b970:	3101      	adds	r1, #1
 800b972:	f7ff ff79 	bl	800b868 <_Balloc>
 800b976:	4680      	mov	r8, r0
 800b978:	b928      	cbnz	r0, 800b986 <__multadd+0x5a>
 800b97a:	4602      	mov	r2, r0
 800b97c:	21b5      	movs	r1, #181	; 0xb5
 800b97e:	4b0c      	ldr	r3, [pc, #48]	; (800b9b0 <__multadd+0x84>)
 800b980:	480c      	ldr	r0, [pc, #48]	; (800b9b4 <__multadd+0x88>)
 800b982:	f000 fead 	bl	800c6e0 <__assert_func>
 800b986:	6922      	ldr	r2, [r4, #16]
 800b988:	f104 010c 	add.w	r1, r4, #12
 800b98c:	3202      	adds	r2, #2
 800b98e:	0092      	lsls	r2, r2, #2
 800b990:	300c      	adds	r0, #12
 800b992:	f7fd f81d 	bl	80089d0 <memcpy>
 800b996:	4621      	mov	r1, r4
 800b998:	4638      	mov	r0, r7
 800b99a:	f7ff ffa5 	bl	800b8e8 <_Bfree>
 800b99e:	4644      	mov	r4, r8
 800b9a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	615e      	str	r6, [r3, #20]
 800b9a8:	6125      	str	r5, [r4, #16]
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	0800e3d0 	.word	0x0800e3d0
 800b9b4:	0800e45c 	.word	0x0800e45c

0800b9b8 <__s2b>:
 800b9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9bc:	4615      	mov	r5, r2
 800b9be:	2209      	movs	r2, #9
 800b9c0:	461f      	mov	r7, r3
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	db09      	blt.n	800b9e8 <__s2b+0x30>
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7ff ff47 	bl	800b868 <_Balloc>
 800b9da:	b940      	cbnz	r0, 800b9ee <__s2b+0x36>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	21ce      	movs	r1, #206	; 0xce
 800b9e0:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <__s2b+0x8c>)
 800b9e2:	4819      	ldr	r0, [pc, #100]	; (800ba48 <__s2b+0x90>)
 800b9e4:	f000 fe7c 	bl	800c6e0 <__assert_func>
 800b9e8:	0052      	lsls	r2, r2, #1
 800b9ea:	3101      	adds	r1, #1
 800b9ec:	e7f0      	b.n	800b9d0 <__s2b+0x18>
 800b9ee:	9b08      	ldr	r3, [sp, #32]
 800b9f0:	2d09      	cmp	r5, #9
 800b9f2:	6143      	str	r3, [r0, #20]
 800b9f4:	f04f 0301 	mov.w	r3, #1
 800b9f8:	6103      	str	r3, [r0, #16]
 800b9fa:	dd16      	ble.n	800ba2a <__s2b+0x72>
 800b9fc:	f104 0909 	add.w	r9, r4, #9
 800ba00:	46c8      	mov	r8, r9
 800ba02:	442c      	add	r4, r5
 800ba04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba08:	4601      	mov	r1, r0
 800ba0a:	220a      	movs	r2, #10
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	3b30      	subs	r3, #48	; 0x30
 800ba10:	f7ff ff8c 	bl	800b92c <__multadd>
 800ba14:	45a0      	cmp	r8, r4
 800ba16:	d1f5      	bne.n	800ba04 <__s2b+0x4c>
 800ba18:	f1a5 0408 	sub.w	r4, r5, #8
 800ba1c:	444c      	add	r4, r9
 800ba1e:	1b2d      	subs	r5, r5, r4
 800ba20:	1963      	adds	r3, r4, r5
 800ba22:	42bb      	cmp	r3, r7
 800ba24:	db04      	blt.n	800ba30 <__s2b+0x78>
 800ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	2509      	movs	r5, #9
 800ba2c:	340a      	adds	r4, #10
 800ba2e:	e7f6      	b.n	800ba1e <__s2b+0x66>
 800ba30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba34:	4601      	mov	r1, r0
 800ba36:	220a      	movs	r2, #10
 800ba38:	4630      	mov	r0, r6
 800ba3a:	3b30      	subs	r3, #48	; 0x30
 800ba3c:	f7ff ff76 	bl	800b92c <__multadd>
 800ba40:	e7ee      	b.n	800ba20 <__s2b+0x68>
 800ba42:	bf00      	nop
 800ba44:	0800e3d0 	.word	0x0800e3d0
 800ba48:	0800e45c 	.word	0x0800e45c

0800ba4c <__hi0bits>:
 800ba4c:	0c02      	lsrs	r2, r0, #16
 800ba4e:	0412      	lsls	r2, r2, #16
 800ba50:	4603      	mov	r3, r0
 800ba52:	b9ca      	cbnz	r2, 800ba88 <__hi0bits+0x3c>
 800ba54:	0403      	lsls	r3, r0, #16
 800ba56:	2010      	movs	r0, #16
 800ba58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba5c:	bf04      	itt	eq
 800ba5e:	021b      	lsleq	r3, r3, #8
 800ba60:	3008      	addeq	r0, #8
 800ba62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba66:	bf04      	itt	eq
 800ba68:	011b      	lsleq	r3, r3, #4
 800ba6a:	3004      	addeq	r0, #4
 800ba6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba70:	bf04      	itt	eq
 800ba72:	009b      	lsleq	r3, r3, #2
 800ba74:	3002      	addeq	r0, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	db05      	blt.n	800ba86 <__hi0bits+0x3a>
 800ba7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ba7e:	f100 0001 	add.w	r0, r0, #1
 800ba82:	bf08      	it	eq
 800ba84:	2020      	moveq	r0, #32
 800ba86:	4770      	bx	lr
 800ba88:	2000      	movs	r0, #0
 800ba8a:	e7e5      	b.n	800ba58 <__hi0bits+0xc>

0800ba8c <__lo0bits>:
 800ba8c:	6803      	ldr	r3, [r0, #0]
 800ba8e:	4602      	mov	r2, r0
 800ba90:	f013 0007 	ands.w	r0, r3, #7
 800ba94:	d00b      	beq.n	800baae <__lo0bits+0x22>
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	d421      	bmi.n	800bade <__lo0bits+0x52>
 800ba9a:	0798      	lsls	r0, r3, #30
 800ba9c:	bf49      	itett	mi
 800ba9e:	085b      	lsrmi	r3, r3, #1
 800baa0:	089b      	lsrpl	r3, r3, #2
 800baa2:	2001      	movmi	r0, #1
 800baa4:	6013      	strmi	r3, [r2, #0]
 800baa6:	bf5c      	itt	pl
 800baa8:	2002      	movpl	r0, #2
 800baaa:	6013      	strpl	r3, [r2, #0]
 800baac:	4770      	bx	lr
 800baae:	b299      	uxth	r1, r3
 800bab0:	b909      	cbnz	r1, 800bab6 <__lo0bits+0x2a>
 800bab2:	2010      	movs	r0, #16
 800bab4:	0c1b      	lsrs	r3, r3, #16
 800bab6:	b2d9      	uxtb	r1, r3
 800bab8:	b909      	cbnz	r1, 800babe <__lo0bits+0x32>
 800baba:	3008      	adds	r0, #8
 800babc:	0a1b      	lsrs	r3, r3, #8
 800babe:	0719      	lsls	r1, r3, #28
 800bac0:	bf04      	itt	eq
 800bac2:	091b      	lsreq	r3, r3, #4
 800bac4:	3004      	addeq	r0, #4
 800bac6:	0799      	lsls	r1, r3, #30
 800bac8:	bf04      	itt	eq
 800baca:	089b      	lsreq	r3, r3, #2
 800bacc:	3002      	addeq	r0, #2
 800bace:	07d9      	lsls	r1, r3, #31
 800bad0:	d403      	bmi.n	800bada <__lo0bits+0x4e>
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	f100 0001 	add.w	r0, r0, #1
 800bad8:	d003      	beq.n	800bae2 <__lo0bits+0x56>
 800bada:	6013      	str	r3, [r2, #0]
 800badc:	4770      	bx	lr
 800bade:	2000      	movs	r0, #0
 800bae0:	4770      	bx	lr
 800bae2:	2020      	movs	r0, #32
 800bae4:	4770      	bx	lr
	...

0800bae8 <__i2b>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	460c      	mov	r4, r1
 800baec:	2101      	movs	r1, #1
 800baee:	f7ff febb 	bl	800b868 <_Balloc>
 800baf2:	4602      	mov	r2, r0
 800baf4:	b928      	cbnz	r0, 800bb02 <__i2b+0x1a>
 800baf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bafa:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <__i2b+0x24>)
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <__i2b+0x28>)
 800bafe:	f000 fdef 	bl	800c6e0 <__assert_func>
 800bb02:	2301      	movs	r3, #1
 800bb04:	6144      	str	r4, [r0, #20]
 800bb06:	6103      	str	r3, [r0, #16]
 800bb08:	bd10      	pop	{r4, pc}
 800bb0a:	bf00      	nop
 800bb0c:	0800e3d0 	.word	0x0800e3d0
 800bb10:	0800e45c 	.word	0x0800e45c

0800bb14 <__multiply>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	4691      	mov	r9, r2
 800bb1a:	690a      	ldr	r2, [r1, #16]
 800bb1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb20:	460c      	mov	r4, r1
 800bb22:	429a      	cmp	r2, r3
 800bb24:	bfbe      	ittt	lt
 800bb26:	460b      	movlt	r3, r1
 800bb28:	464c      	movlt	r4, r9
 800bb2a:	4699      	movlt	r9, r3
 800bb2c:	6927      	ldr	r7, [r4, #16]
 800bb2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb32:	68a3      	ldr	r3, [r4, #8]
 800bb34:	6861      	ldr	r1, [r4, #4]
 800bb36:	eb07 060a 	add.w	r6, r7, sl
 800bb3a:	42b3      	cmp	r3, r6
 800bb3c:	b085      	sub	sp, #20
 800bb3e:	bfb8      	it	lt
 800bb40:	3101      	addlt	r1, #1
 800bb42:	f7ff fe91 	bl	800b868 <_Balloc>
 800bb46:	b930      	cbnz	r0, 800bb56 <__multiply+0x42>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	f240 115d 	movw	r1, #349	; 0x15d
 800bb4e:	4b43      	ldr	r3, [pc, #268]	; (800bc5c <__multiply+0x148>)
 800bb50:	4843      	ldr	r0, [pc, #268]	; (800bc60 <__multiply+0x14c>)
 800bb52:	f000 fdc5 	bl	800c6e0 <__assert_func>
 800bb56:	f100 0514 	add.w	r5, r0, #20
 800bb5a:	462b      	mov	r3, r5
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb62:	4543      	cmp	r3, r8
 800bb64:	d321      	bcc.n	800bbaa <__multiply+0x96>
 800bb66:	f104 0314 	add.w	r3, r4, #20
 800bb6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb6e:	f109 0314 	add.w	r3, r9, #20
 800bb72:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb76:	9202      	str	r2, [sp, #8]
 800bb78:	1b3a      	subs	r2, r7, r4
 800bb7a:	3a15      	subs	r2, #21
 800bb7c:	f022 0203 	bic.w	r2, r2, #3
 800bb80:	3204      	adds	r2, #4
 800bb82:	f104 0115 	add.w	r1, r4, #21
 800bb86:	428f      	cmp	r7, r1
 800bb88:	bf38      	it	cc
 800bb8a:	2204      	movcc	r2, #4
 800bb8c:	9201      	str	r2, [sp, #4]
 800bb8e:	9a02      	ldr	r2, [sp, #8]
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d80c      	bhi.n	800bbb0 <__multiply+0x9c>
 800bb96:	2e00      	cmp	r6, #0
 800bb98:	dd03      	ble.n	800bba2 <__multiply+0x8e>
 800bb9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d059      	beq.n	800bc56 <__multiply+0x142>
 800bba2:	6106      	str	r6, [r0, #16]
 800bba4:	b005      	add	sp, #20
 800bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbaa:	f843 2b04 	str.w	r2, [r3], #4
 800bbae:	e7d8      	b.n	800bb62 <__multiply+0x4e>
 800bbb0:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbb4:	f1ba 0f00 	cmp.w	sl, #0
 800bbb8:	d023      	beq.n	800bc02 <__multiply+0xee>
 800bbba:	46a9      	mov	r9, r5
 800bbbc:	f04f 0c00 	mov.w	ip, #0
 800bbc0:	f104 0e14 	add.w	lr, r4, #20
 800bbc4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbc8:	f8d9 1000 	ldr.w	r1, [r9]
 800bbcc:	fa1f fb82 	uxth.w	fp, r2
 800bbd0:	b289      	uxth	r1, r1
 800bbd2:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbd6:	4461      	add	r1, ip
 800bbd8:	f8d9 c000 	ldr.w	ip, [r9]
 800bbdc:	0c12      	lsrs	r2, r2, #16
 800bbde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bbe2:	fb0a c202 	mla	r2, sl, r2, ip
 800bbe6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbea:	b289      	uxth	r1, r1
 800bbec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bbf0:	4577      	cmp	r7, lr
 800bbf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbf6:	f849 1b04 	str.w	r1, [r9], #4
 800bbfa:	d8e3      	bhi.n	800bbc4 <__multiply+0xb0>
 800bbfc:	9a01      	ldr	r2, [sp, #4]
 800bbfe:	f845 c002 	str.w	ip, [r5, r2]
 800bc02:	9a03      	ldr	r2, [sp, #12]
 800bc04:	3304      	adds	r3, #4
 800bc06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc0a:	f1b9 0f00 	cmp.w	r9, #0
 800bc0e:	d020      	beq.n	800bc52 <__multiply+0x13e>
 800bc10:	46ae      	mov	lr, r5
 800bc12:	f04f 0a00 	mov.w	sl, #0
 800bc16:	6829      	ldr	r1, [r5, #0]
 800bc18:	f104 0c14 	add.w	ip, r4, #20
 800bc1c:	f8bc b000 	ldrh.w	fp, [ip]
 800bc20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc24:	b289      	uxth	r1, r1
 800bc26:	fb09 220b 	mla	r2, r9, fp, r2
 800bc2a:	4492      	add	sl, r2
 800bc2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc30:	f84e 1b04 	str.w	r1, [lr], #4
 800bc34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc38:	f8be 1000 	ldrh.w	r1, [lr]
 800bc3c:	0c12      	lsrs	r2, r2, #16
 800bc3e:	fb09 1102 	mla	r1, r9, r2, r1
 800bc42:	4567      	cmp	r7, ip
 800bc44:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc4c:	d8e6      	bhi.n	800bc1c <__multiply+0x108>
 800bc4e:	9a01      	ldr	r2, [sp, #4]
 800bc50:	50a9      	str	r1, [r5, r2]
 800bc52:	3504      	adds	r5, #4
 800bc54:	e79b      	b.n	800bb8e <__multiply+0x7a>
 800bc56:	3e01      	subs	r6, #1
 800bc58:	e79d      	b.n	800bb96 <__multiply+0x82>
 800bc5a:	bf00      	nop
 800bc5c:	0800e3d0 	.word	0x0800e3d0
 800bc60:	0800e45c 	.word	0x0800e45c

0800bc64 <__pow5mult>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4615      	mov	r5, r2
 800bc6a:	f012 0203 	ands.w	r2, r2, #3
 800bc6e:	4606      	mov	r6, r0
 800bc70:	460f      	mov	r7, r1
 800bc72:	d007      	beq.n	800bc84 <__pow5mult+0x20>
 800bc74:	4c25      	ldr	r4, [pc, #148]	; (800bd0c <__pow5mult+0xa8>)
 800bc76:	3a01      	subs	r2, #1
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc7e:	f7ff fe55 	bl	800b92c <__multadd>
 800bc82:	4607      	mov	r7, r0
 800bc84:	10ad      	asrs	r5, r5, #2
 800bc86:	d03d      	beq.n	800bd04 <__pow5mult+0xa0>
 800bc88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc8a:	b97c      	cbnz	r4, 800bcac <__pow5mult+0x48>
 800bc8c:	2010      	movs	r0, #16
 800bc8e:	f7ff fdc3 	bl	800b818 <malloc>
 800bc92:	4602      	mov	r2, r0
 800bc94:	6270      	str	r0, [r6, #36]	; 0x24
 800bc96:	b928      	cbnz	r0, 800bca4 <__pow5mult+0x40>
 800bc98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <__pow5mult+0xac>)
 800bc9e:	481d      	ldr	r0, [pc, #116]	; (800bd14 <__pow5mult+0xb0>)
 800bca0:	f000 fd1e 	bl	800c6e0 <__assert_func>
 800bca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bca8:	6004      	str	r4, [r0, #0]
 800bcaa:	60c4      	str	r4, [r0, #12]
 800bcac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcb4:	b94c      	cbnz	r4, 800bcca <__pow5mult+0x66>
 800bcb6:	f240 2171 	movw	r1, #625	; 0x271
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ff14 	bl	800bae8 <__i2b>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcc8:	6003      	str	r3, [r0, #0]
 800bcca:	f04f 0900 	mov.w	r9, #0
 800bcce:	07eb      	lsls	r3, r5, #31
 800bcd0:	d50a      	bpl.n	800bce8 <__pow5mult+0x84>
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7ff ff1c 	bl	800bb14 <__multiply>
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4639      	mov	r1, r7
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7ff fe01 	bl	800b8e8 <_Bfree>
 800bce6:	4647      	mov	r7, r8
 800bce8:	106d      	asrs	r5, r5, #1
 800bcea:	d00b      	beq.n	800bd04 <__pow5mult+0xa0>
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	b938      	cbnz	r0, 800bd00 <__pow5mult+0x9c>
 800bcf0:	4622      	mov	r2, r4
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f7ff ff0d 	bl	800bb14 <__multiply>
 800bcfa:	6020      	str	r0, [r4, #0]
 800bcfc:	f8c0 9000 	str.w	r9, [r0]
 800bd00:	4604      	mov	r4, r0
 800bd02:	e7e4      	b.n	800bcce <__pow5mult+0x6a>
 800bd04:	4638      	mov	r0, r7
 800bd06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd0a:	bf00      	nop
 800bd0c:	0800e5a8 	.word	0x0800e5a8
 800bd10:	0800e35e 	.word	0x0800e35e
 800bd14:	0800e45c 	.word	0x0800e45c

0800bd18 <__lshift>:
 800bd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1c:	460c      	mov	r4, r1
 800bd1e:	4607      	mov	r7, r0
 800bd20:	4691      	mov	r9, r2
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	6849      	ldr	r1, [r1, #4]
 800bd26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd30:	f108 0601 	add.w	r6, r8, #1
 800bd34:	42b3      	cmp	r3, r6
 800bd36:	db0b      	blt.n	800bd50 <__lshift+0x38>
 800bd38:	4638      	mov	r0, r7
 800bd3a:	f7ff fd95 	bl	800b868 <_Balloc>
 800bd3e:	4605      	mov	r5, r0
 800bd40:	b948      	cbnz	r0, 800bd56 <__lshift+0x3e>
 800bd42:	4602      	mov	r2, r0
 800bd44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd48:	4b29      	ldr	r3, [pc, #164]	; (800bdf0 <__lshift+0xd8>)
 800bd4a:	482a      	ldr	r0, [pc, #168]	; (800bdf4 <__lshift+0xdc>)
 800bd4c:	f000 fcc8 	bl	800c6e0 <__assert_func>
 800bd50:	3101      	adds	r1, #1
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	e7ee      	b.n	800bd34 <__lshift+0x1c>
 800bd56:	2300      	movs	r3, #0
 800bd58:	f100 0114 	add.w	r1, r0, #20
 800bd5c:	f100 0210 	add.w	r2, r0, #16
 800bd60:	4618      	mov	r0, r3
 800bd62:	4553      	cmp	r3, sl
 800bd64:	db37      	blt.n	800bdd6 <__lshift+0xbe>
 800bd66:	6920      	ldr	r0, [r4, #16]
 800bd68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd6c:	f104 0314 	add.w	r3, r4, #20
 800bd70:	f019 091f 	ands.w	r9, r9, #31
 800bd74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd7c:	d02f      	beq.n	800bdde <__lshift+0xc6>
 800bd7e:	468a      	mov	sl, r1
 800bd80:	f04f 0c00 	mov.w	ip, #0
 800bd84:	f1c9 0e20 	rsb	lr, r9, #32
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	fa02 f209 	lsl.w	r2, r2, r9
 800bd8e:	ea42 020c 	orr.w	r2, r2, ip
 800bd92:	f84a 2b04 	str.w	r2, [sl], #4
 800bd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9a:	4298      	cmp	r0, r3
 800bd9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bda0:	d8f2      	bhi.n	800bd88 <__lshift+0x70>
 800bda2:	1b03      	subs	r3, r0, r4
 800bda4:	3b15      	subs	r3, #21
 800bda6:	f023 0303 	bic.w	r3, r3, #3
 800bdaa:	3304      	adds	r3, #4
 800bdac:	f104 0215 	add.w	r2, r4, #21
 800bdb0:	4290      	cmp	r0, r2
 800bdb2:	bf38      	it	cc
 800bdb4:	2304      	movcc	r3, #4
 800bdb6:	f841 c003 	str.w	ip, [r1, r3]
 800bdba:	f1bc 0f00 	cmp.w	ip, #0
 800bdbe:	d001      	beq.n	800bdc4 <__lshift+0xac>
 800bdc0:	f108 0602 	add.w	r6, r8, #2
 800bdc4:	3e01      	subs	r6, #1
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	4621      	mov	r1, r4
 800bdca:	612e      	str	r6, [r5, #16]
 800bdcc:	f7ff fd8c 	bl	800b8e8 <_Bfree>
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdda:	3301      	adds	r3, #1
 800bddc:	e7c1      	b.n	800bd62 <__lshift+0x4a>
 800bdde:	3904      	subs	r1, #4
 800bde0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde4:	4298      	cmp	r0, r3
 800bde6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdea:	d8f9      	bhi.n	800bde0 <__lshift+0xc8>
 800bdec:	e7ea      	b.n	800bdc4 <__lshift+0xac>
 800bdee:	bf00      	nop
 800bdf0:	0800e3d0 	.word	0x0800e3d0
 800bdf4:	0800e45c 	.word	0x0800e45c

0800bdf8 <__mcmp>:
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	690a      	ldr	r2, [r1, #16]
 800bdfc:	6900      	ldr	r0, [r0, #16]
 800bdfe:	b530      	push	{r4, r5, lr}
 800be00:	1a80      	subs	r0, r0, r2
 800be02:	d10d      	bne.n	800be20 <__mcmp+0x28>
 800be04:	3314      	adds	r3, #20
 800be06:	3114      	adds	r1, #20
 800be08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be18:	4295      	cmp	r5, r2
 800be1a:	d002      	beq.n	800be22 <__mcmp+0x2a>
 800be1c:	d304      	bcc.n	800be28 <__mcmp+0x30>
 800be1e:	2001      	movs	r0, #1
 800be20:	bd30      	pop	{r4, r5, pc}
 800be22:	42a3      	cmp	r3, r4
 800be24:	d3f4      	bcc.n	800be10 <__mcmp+0x18>
 800be26:	e7fb      	b.n	800be20 <__mcmp+0x28>
 800be28:	f04f 30ff 	mov.w	r0, #4294967295
 800be2c:	e7f8      	b.n	800be20 <__mcmp+0x28>
	...

0800be30 <__mdiff>:
 800be30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	460d      	mov	r5, r1
 800be36:	4607      	mov	r7, r0
 800be38:	4611      	mov	r1, r2
 800be3a:	4628      	mov	r0, r5
 800be3c:	4614      	mov	r4, r2
 800be3e:	f7ff ffdb 	bl	800bdf8 <__mcmp>
 800be42:	1e06      	subs	r6, r0, #0
 800be44:	d111      	bne.n	800be6a <__mdiff+0x3a>
 800be46:	4631      	mov	r1, r6
 800be48:	4638      	mov	r0, r7
 800be4a:	f7ff fd0d 	bl	800b868 <_Balloc>
 800be4e:	4602      	mov	r2, r0
 800be50:	b928      	cbnz	r0, 800be5e <__mdiff+0x2e>
 800be52:	f240 2132 	movw	r1, #562	; 0x232
 800be56:	4b3a      	ldr	r3, [pc, #232]	; (800bf40 <__mdiff+0x110>)
 800be58:	483a      	ldr	r0, [pc, #232]	; (800bf44 <__mdiff+0x114>)
 800be5a:	f000 fc41 	bl	800c6e0 <__assert_func>
 800be5e:	2301      	movs	r3, #1
 800be60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800be64:	4610      	mov	r0, r2
 800be66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6a:	bfa4      	itt	ge
 800be6c:	4623      	movge	r3, r4
 800be6e:	462c      	movge	r4, r5
 800be70:	4638      	mov	r0, r7
 800be72:	6861      	ldr	r1, [r4, #4]
 800be74:	bfa6      	itte	ge
 800be76:	461d      	movge	r5, r3
 800be78:	2600      	movge	r6, #0
 800be7a:	2601      	movlt	r6, #1
 800be7c:	f7ff fcf4 	bl	800b868 <_Balloc>
 800be80:	4602      	mov	r2, r0
 800be82:	b918      	cbnz	r0, 800be8c <__mdiff+0x5c>
 800be84:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be88:	4b2d      	ldr	r3, [pc, #180]	; (800bf40 <__mdiff+0x110>)
 800be8a:	e7e5      	b.n	800be58 <__mdiff+0x28>
 800be8c:	f102 0814 	add.w	r8, r2, #20
 800be90:	46c2      	mov	sl, r8
 800be92:	f04f 0c00 	mov.w	ip, #0
 800be96:	6927      	ldr	r7, [r4, #16]
 800be98:	60c6      	str	r6, [r0, #12]
 800be9a:	692e      	ldr	r6, [r5, #16]
 800be9c:	f104 0014 	add.w	r0, r4, #20
 800bea0:	f105 0914 	add.w	r9, r5, #20
 800bea4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800beac:	3410      	adds	r4, #16
 800beae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800beb2:	f859 3b04 	ldr.w	r3, [r9], #4
 800beb6:	fa1f f18b 	uxth.w	r1, fp
 800beba:	448c      	add	ip, r1
 800bebc:	b299      	uxth	r1, r3
 800bebe:	0c1b      	lsrs	r3, r3, #16
 800bec0:	ebac 0101 	sub.w	r1, ip, r1
 800bec4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bec8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800becc:	b289      	uxth	r1, r1
 800bece:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bed2:	454e      	cmp	r6, r9
 800bed4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bed8:	f84a 3b04 	str.w	r3, [sl], #4
 800bedc:	d8e7      	bhi.n	800beae <__mdiff+0x7e>
 800bede:	1b73      	subs	r3, r6, r5
 800bee0:	3b15      	subs	r3, #21
 800bee2:	f023 0303 	bic.w	r3, r3, #3
 800bee6:	3515      	adds	r5, #21
 800bee8:	3304      	adds	r3, #4
 800beea:	42ae      	cmp	r6, r5
 800beec:	bf38      	it	cc
 800beee:	2304      	movcc	r3, #4
 800bef0:	4418      	add	r0, r3
 800bef2:	4443      	add	r3, r8
 800bef4:	461e      	mov	r6, r3
 800bef6:	4605      	mov	r5, r0
 800bef8:	4575      	cmp	r5, lr
 800befa:	d30e      	bcc.n	800bf1a <__mdiff+0xea>
 800befc:	f10e 0103 	add.w	r1, lr, #3
 800bf00:	1a09      	subs	r1, r1, r0
 800bf02:	f021 0103 	bic.w	r1, r1, #3
 800bf06:	3803      	subs	r0, #3
 800bf08:	4586      	cmp	lr, r0
 800bf0a:	bf38      	it	cc
 800bf0c:	2100      	movcc	r1, #0
 800bf0e:	4419      	add	r1, r3
 800bf10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bf14:	b18b      	cbz	r3, 800bf3a <__mdiff+0x10a>
 800bf16:	6117      	str	r7, [r2, #16]
 800bf18:	e7a4      	b.n	800be64 <__mdiff+0x34>
 800bf1a:	f855 8b04 	ldr.w	r8, [r5], #4
 800bf1e:	fa1f f188 	uxth.w	r1, r8
 800bf22:	4461      	add	r1, ip
 800bf24:	140c      	asrs	r4, r1, #16
 800bf26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bf2a:	b289      	uxth	r1, r1
 800bf2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bf30:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bf34:	f846 1b04 	str.w	r1, [r6], #4
 800bf38:	e7de      	b.n	800bef8 <__mdiff+0xc8>
 800bf3a:	3f01      	subs	r7, #1
 800bf3c:	e7e8      	b.n	800bf10 <__mdiff+0xe0>
 800bf3e:	bf00      	nop
 800bf40:	0800e3d0 	.word	0x0800e3d0
 800bf44:	0800e45c 	.word	0x0800e45c

0800bf48 <__ulp>:
 800bf48:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <__ulp+0x48>)
 800bf4a:	400b      	ands	r3, r1
 800bf4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	dd02      	ble.n	800bf5a <__ulp+0x12>
 800bf54:	2000      	movs	r0, #0
 800bf56:	4619      	mov	r1, r3
 800bf58:	4770      	bx	lr
 800bf5a:	425b      	negs	r3, r3
 800bf5c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bf60:	f04f 0000 	mov.w	r0, #0
 800bf64:	f04f 0100 	mov.w	r1, #0
 800bf68:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf6c:	da04      	bge.n	800bf78 <__ulp+0x30>
 800bf6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bf72:	fa43 f102 	asr.w	r1, r3, r2
 800bf76:	4770      	bx	lr
 800bf78:	f1a2 0314 	sub.w	r3, r2, #20
 800bf7c:	2b1e      	cmp	r3, #30
 800bf7e:	bfd6      	itet	le
 800bf80:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bf84:	2301      	movgt	r3, #1
 800bf86:	fa22 f303 	lsrle.w	r3, r2, r3
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	7ff00000 	.word	0x7ff00000

0800bf94 <__b2d>:
 800bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf98:	6907      	ldr	r7, [r0, #16]
 800bf9a:	f100 0914 	add.w	r9, r0, #20
 800bf9e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bfa2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bfa6:	f1a7 0804 	sub.w	r8, r7, #4
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f7ff fd4e 	bl	800ba4c <__hi0bits>
 800bfb0:	f1c0 0320 	rsb	r3, r0, #32
 800bfb4:	280a      	cmp	r0, #10
 800bfb6:	600b      	str	r3, [r1, #0]
 800bfb8:	491f      	ldr	r1, [pc, #124]	; (800c038 <__b2d+0xa4>)
 800bfba:	dc17      	bgt.n	800bfec <__b2d+0x58>
 800bfbc:	45c1      	cmp	r9, r8
 800bfbe:	bf28      	it	cs
 800bfc0:	2200      	movcs	r2, #0
 800bfc2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfc6:	fa26 f30c 	lsr.w	r3, r6, ip
 800bfca:	bf38      	it	cc
 800bfcc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bfd0:	ea43 0501 	orr.w	r5, r3, r1
 800bfd4:	f100 0315 	add.w	r3, r0, #21
 800bfd8:	fa06 f303 	lsl.w	r3, r6, r3
 800bfdc:	fa22 f20c 	lsr.w	r2, r2, ip
 800bfe0:	ea43 0402 	orr.w	r4, r3, r2
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfec:	45c1      	cmp	r9, r8
 800bfee:	bf2e      	itee	cs
 800bff0:	2200      	movcs	r2, #0
 800bff2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bff6:	f1a7 0808 	subcc.w	r8, r7, #8
 800bffa:	f1b0 030b 	subs.w	r3, r0, #11
 800bffe:	d016      	beq.n	800c02e <__b2d+0x9a>
 800c000:	f1c3 0720 	rsb	r7, r3, #32
 800c004:	fa22 f107 	lsr.w	r1, r2, r7
 800c008:	45c8      	cmp	r8, r9
 800c00a:	fa06 f603 	lsl.w	r6, r6, r3
 800c00e:	ea46 0601 	orr.w	r6, r6, r1
 800c012:	bf94      	ite	ls
 800c014:	2100      	movls	r1, #0
 800c016:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c01a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c01e:	fa02 f003 	lsl.w	r0, r2, r3
 800c022:	40f9      	lsrs	r1, r7
 800c024:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c028:	ea40 0401 	orr.w	r4, r0, r1
 800c02c:	e7da      	b.n	800bfe4 <__b2d+0x50>
 800c02e:	4614      	mov	r4, r2
 800c030:	ea46 0501 	orr.w	r5, r6, r1
 800c034:	e7d6      	b.n	800bfe4 <__b2d+0x50>
 800c036:	bf00      	nop
 800c038:	3ff00000 	.word	0x3ff00000

0800c03c <__d2b>:
 800c03c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c040:	2101      	movs	r1, #1
 800c042:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c046:	4690      	mov	r8, r2
 800c048:	461d      	mov	r5, r3
 800c04a:	f7ff fc0d 	bl	800b868 <_Balloc>
 800c04e:	4604      	mov	r4, r0
 800c050:	b930      	cbnz	r0, 800c060 <__d2b+0x24>
 800c052:	4602      	mov	r2, r0
 800c054:	f240 310a 	movw	r1, #778	; 0x30a
 800c058:	4b24      	ldr	r3, [pc, #144]	; (800c0ec <__d2b+0xb0>)
 800c05a:	4825      	ldr	r0, [pc, #148]	; (800c0f0 <__d2b+0xb4>)
 800c05c:	f000 fb40 	bl	800c6e0 <__assert_func>
 800c060:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c064:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c068:	bb2d      	cbnz	r5, 800c0b6 <__d2b+0x7a>
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	f1b8 0300 	subs.w	r3, r8, #0
 800c070:	d026      	beq.n	800c0c0 <__d2b+0x84>
 800c072:	4668      	mov	r0, sp
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	f7ff fd09 	bl	800ba8c <__lo0bits>
 800c07a:	9900      	ldr	r1, [sp, #0]
 800c07c:	b1f0      	cbz	r0, 800c0bc <__d2b+0x80>
 800c07e:	9a01      	ldr	r2, [sp, #4]
 800c080:	f1c0 0320 	rsb	r3, r0, #32
 800c084:	fa02 f303 	lsl.w	r3, r2, r3
 800c088:	430b      	orrs	r3, r1
 800c08a:	40c2      	lsrs	r2, r0
 800c08c:	6163      	str	r3, [r4, #20]
 800c08e:	9201      	str	r2, [sp, #4]
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	bf14      	ite	ne
 800c096:	2102      	movne	r1, #2
 800c098:	2101      	moveq	r1, #1
 800c09a:	61a3      	str	r3, [r4, #24]
 800c09c:	6121      	str	r1, [r4, #16]
 800c09e:	b1c5      	cbz	r5, 800c0d2 <__d2b+0x96>
 800c0a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c0a4:	4405      	add	r5, r0
 800c0a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c0aa:	603d      	str	r5, [r7, #0]
 800c0ac:	6030      	str	r0, [r6, #0]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	b002      	add	sp, #8
 800c0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0ba:	e7d6      	b.n	800c06a <__d2b+0x2e>
 800c0bc:	6161      	str	r1, [r4, #20]
 800c0be:	e7e7      	b.n	800c090 <__d2b+0x54>
 800c0c0:	a801      	add	r0, sp, #4
 800c0c2:	f7ff fce3 	bl	800ba8c <__lo0bits>
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	6121      	str	r1, [r4, #16]
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	3020      	adds	r0, #32
 800c0d0:	e7e5      	b.n	800c09e <__d2b+0x62>
 800c0d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c0d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c0da:	6038      	str	r0, [r7, #0]
 800c0dc:	6918      	ldr	r0, [r3, #16]
 800c0de:	f7ff fcb5 	bl	800ba4c <__hi0bits>
 800c0e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c0e6:	6031      	str	r1, [r6, #0]
 800c0e8:	e7e1      	b.n	800c0ae <__d2b+0x72>
 800c0ea:	bf00      	nop
 800c0ec:	0800e3d0 	.word	0x0800e3d0
 800c0f0:	0800e45c 	.word	0x0800e45c

0800c0f4 <__ratio>:
 800c0f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	4688      	mov	r8, r1
 800c0fa:	4669      	mov	r1, sp
 800c0fc:	4681      	mov	r9, r0
 800c0fe:	f7ff ff49 	bl	800bf94 <__b2d>
 800c102:	460f      	mov	r7, r1
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	4640      	mov	r0, r8
 800c10a:	a901      	add	r1, sp, #4
 800c10c:	f7ff ff42 	bl	800bf94 <__b2d>
 800c110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c114:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c118:	468b      	mov	fp, r1
 800c11a:	eba3 0c02 	sub.w	ip, r3, r2
 800c11e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c122:	1a9b      	subs	r3, r3, r2
 800c124:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c128:	2b00      	cmp	r3, #0
 800c12a:	bfd5      	itete	le
 800c12c:	460a      	movle	r2, r1
 800c12e:	462a      	movgt	r2, r5
 800c130:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c134:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c138:	bfd8      	it	le
 800c13a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c13e:	465b      	mov	r3, fp
 800c140:	4602      	mov	r2, r0
 800c142:	4639      	mov	r1, r7
 800c144:	4620      	mov	r0, r4
 800c146:	f7f4 faf1 	bl	800072c <__aeabi_ddiv>
 800c14a:	b003      	add	sp, #12
 800c14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c150 <__copybits>:
 800c150:	3901      	subs	r1, #1
 800c152:	b570      	push	{r4, r5, r6, lr}
 800c154:	1149      	asrs	r1, r1, #5
 800c156:	6914      	ldr	r4, [r2, #16]
 800c158:	3101      	adds	r1, #1
 800c15a:	f102 0314 	add.w	r3, r2, #20
 800c15e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c162:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c166:	1f05      	subs	r5, r0, #4
 800c168:	42a3      	cmp	r3, r4
 800c16a:	d30c      	bcc.n	800c186 <__copybits+0x36>
 800c16c:	1aa3      	subs	r3, r4, r2
 800c16e:	3b11      	subs	r3, #17
 800c170:	f023 0303 	bic.w	r3, r3, #3
 800c174:	3211      	adds	r2, #17
 800c176:	42a2      	cmp	r2, r4
 800c178:	bf88      	it	hi
 800c17a:	2300      	movhi	r3, #0
 800c17c:	4418      	add	r0, r3
 800c17e:	2300      	movs	r3, #0
 800c180:	4288      	cmp	r0, r1
 800c182:	d305      	bcc.n	800c190 <__copybits+0x40>
 800c184:	bd70      	pop	{r4, r5, r6, pc}
 800c186:	f853 6b04 	ldr.w	r6, [r3], #4
 800c18a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c18e:	e7eb      	b.n	800c168 <__copybits+0x18>
 800c190:	f840 3b04 	str.w	r3, [r0], #4
 800c194:	e7f4      	b.n	800c180 <__copybits+0x30>

0800c196 <__any_on>:
 800c196:	f100 0214 	add.w	r2, r0, #20
 800c19a:	6900      	ldr	r0, [r0, #16]
 800c19c:	114b      	asrs	r3, r1, #5
 800c19e:	4298      	cmp	r0, r3
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	db11      	blt.n	800c1c8 <__any_on+0x32>
 800c1a4:	dd0a      	ble.n	800c1bc <__any_on+0x26>
 800c1a6:	f011 011f 	ands.w	r1, r1, #31
 800c1aa:	d007      	beq.n	800c1bc <__any_on+0x26>
 800c1ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1b0:	fa24 f001 	lsr.w	r0, r4, r1
 800c1b4:	fa00 f101 	lsl.w	r1, r0, r1
 800c1b8:	428c      	cmp	r4, r1
 800c1ba:	d10b      	bne.n	800c1d4 <__any_on+0x3e>
 800c1bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d803      	bhi.n	800c1cc <__any_on+0x36>
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	bd10      	pop	{r4, pc}
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	e7f7      	b.n	800c1bc <__any_on+0x26>
 800c1cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	d0f5      	beq.n	800c1c0 <__any_on+0x2a>
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e7f6      	b.n	800c1c6 <__any_on+0x30>

0800c1d8 <_calloc_r>:
 800c1d8:	b570      	push	{r4, r5, r6, lr}
 800c1da:	fba1 5402 	umull	r5, r4, r1, r2
 800c1de:	b934      	cbnz	r4, 800c1ee <_calloc_r+0x16>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f000 f875 	bl	800c2d0 <_malloc_r>
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	b928      	cbnz	r0, 800c1f6 <_calloc_r+0x1e>
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
 800c1ee:	220c      	movs	r2, #12
 800c1f0:	2600      	movs	r6, #0
 800c1f2:	6002      	str	r2, [r0, #0]
 800c1f4:	e7f9      	b.n	800c1ea <_calloc_r+0x12>
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	f7fc fbf7 	bl	80089ec <memset>
 800c1fe:	e7f4      	b.n	800c1ea <_calloc_r+0x12>

0800c200 <_free_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4605      	mov	r5, r0
 800c204:	2900      	cmp	r1, #0
 800c206:	d040      	beq.n	800c28a <_free_r+0x8a>
 800c208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20c:	1f0c      	subs	r4, r1, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfb8      	it	lt
 800c212:	18e4      	addlt	r4, r4, r3
 800c214:	f000 faae 	bl	800c774 <__malloc_lock>
 800c218:	4a1c      	ldr	r2, [pc, #112]	; (800c28c <_free_r+0x8c>)
 800c21a:	6813      	ldr	r3, [r2, #0]
 800c21c:	b933      	cbnz	r3, 800c22c <_free_r+0x2c>
 800c21e:	6063      	str	r3, [r4, #4]
 800c220:	6014      	str	r4, [r2, #0]
 800c222:	4628      	mov	r0, r5
 800c224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c228:	f000 baaa 	b.w	800c780 <__malloc_unlock>
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	d908      	bls.n	800c242 <_free_r+0x42>
 800c230:	6820      	ldr	r0, [r4, #0]
 800c232:	1821      	adds	r1, r4, r0
 800c234:	428b      	cmp	r3, r1
 800c236:	bf01      	itttt	eq
 800c238:	6819      	ldreq	r1, [r3, #0]
 800c23a:	685b      	ldreq	r3, [r3, #4]
 800c23c:	1809      	addeq	r1, r1, r0
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	e7ed      	b.n	800c21e <_free_r+0x1e>
 800c242:	461a      	mov	r2, r3
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	b10b      	cbz	r3, 800c24c <_free_r+0x4c>
 800c248:	42a3      	cmp	r3, r4
 800c24a:	d9fa      	bls.n	800c242 <_free_r+0x42>
 800c24c:	6811      	ldr	r1, [r2, #0]
 800c24e:	1850      	adds	r0, r2, r1
 800c250:	42a0      	cmp	r0, r4
 800c252:	d10b      	bne.n	800c26c <_free_r+0x6c>
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	4401      	add	r1, r0
 800c258:	1850      	adds	r0, r2, r1
 800c25a:	4283      	cmp	r3, r0
 800c25c:	6011      	str	r1, [r2, #0]
 800c25e:	d1e0      	bne.n	800c222 <_free_r+0x22>
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	4401      	add	r1, r0
 800c266:	6011      	str	r1, [r2, #0]
 800c268:	6053      	str	r3, [r2, #4]
 800c26a:	e7da      	b.n	800c222 <_free_r+0x22>
 800c26c:	d902      	bls.n	800c274 <_free_r+0x74>
 800c26e:	230c      	movs	r3, #12
 800c270:	602b      	str	r3, [r5, #0]
 800c272:	e7d6      	b.n	800c222 <_free_r+0x22>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	1821      	adds	r1, r4, r0
 800c278:	428b      	cmp	r3, r1
 800c27a:	bf01      	itttt	eq
 800c27c:	6819      	ldreq	r1, [r3, #0]
 800c27e:	685b      	ldreq	r3, [r3, #4]
 800c280:	1809      	addeq	r1, r1, r0
 800c282:	6021      	streq	r1, [r4, #0]
 800c284:	6063      	str	r3, [r4, #4]
 800c286:	6054      	str	r4, [r2, #4]
 800c288:	e7cb      	b.n	800c222 <_free_r+0x22>
 800c28a:	bd38      	pop	{r3, r4, r5, pc}
 800c28c:	20002f54 	.word	0x20002f54

0800c290 <sbrk_aligned>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	4e0e      	ldr	r6, [pc, #56]	; (800c2cc <sbrk_aligned+0x3c>)
 800c294:	460c      	mov	r4, r1
 800c296:	6831      	ldr	r1, [r6, #0]
 800c298:	4605      	mov	r5, r0
 800c29a:	b911      	cbnz	r1, 800c2a2 <sbrk_aligned+0x12>
 800c29c:	f000 f9ee 	bl	800c67c <_sbrk_r>
 800c2a0:	6030      	str	r0, [r6, #0]
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	f000 f9e9 	bl	800c67c <_sbrk_r>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d00a      	beq.n	800c2c4 <sbrk_aligned+0x34>
 800c2ae:	1cc4      	adds	r4, r0, #3
 800c2b0:	f024 0403 	bic.w	r4, r4, #3
 800c2b4:	42a0      	cmp	r0, r4
 800c2b6:	d007      	beq.n	800c2c8 <sbrk_aligned+0x38>
 800c2b8:	1a21      	subs	r1, r4, r0
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f000 f9de 	bl	800c67c <_sbrk_r>
 800c2c0:	3001      	adds	r0, #1
 800c2c2:	d101      	bne.n	800c2c8 <sbrk_aligned+0x38>
 800c2c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	20002f58 	.word	0x20002f58

0800c2d0 <_malloc_r>:
 800c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d4:	1ccd      	adds	r5, r1, #3
 800c2d6:	f025 0503 	bic.w	r5, r5, #3
 800c2da:	3508      	adds	r5, #8
 800c2dc:	2d0c      	cmp	r5, #12
 800c2de:	bf38      	it	cc
 800c2e0:	250c      	movcc	r5, #12
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	db01      	blt.n	800c2ec <_malloc_r+0x1c>
 800c2e8:	42a9      	cmp	r1, r5
 800c2ea:	d905      	bls.n	800c2f8 <_malloc_r+0x28>
 800c2ec:	230c      	movs	r3, #12
 800c2ee:	2600      	movs	r6, #0
 800c2f0:	603b      	str	r3, [r7, #0]
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	4e2e      	ldr	r6, [pc, #184]	; (800c3b4 <_malloc_r+0xe4>)
 800c2fa:	f000 fa3b 	bl	800c774 <__malloc_lock>
 800c2fe:	6833      	ldr	r3, [r6, #0]
 800c300:	461c      	mov	r4, r3
 800c302:	bb34      	cbnz	r4, 800c352 <_malloc_r+0x82>
 800c304:	4629      	mov	r1, r5
 800c306:	4638      	mov	r0, r7
 800c308:	f7ff ffc2 	bl	800c290 <sbrk_aligned>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	4604      	mov	r4, r0
 800c310:	d14d      	bne.n	800c3ae <_malloc_r+0xde>
 800c312:	6834      	ldr	r4, [r6, #0]
 800c314:	4626      	mov	r6, r4
 800c316:	2e00      	cmp	r6, #0
 800c318:	d140      	bne.n	800c39c <_malloc_r+0xcc>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	4631      	mov	r1, r6
 800c31e:	4638      	mov	r0, r7
 800c320:	eb04 0803 	add.w	r8, r4, r3
 800c324:	f000 f9aa 	bl	800c67c <_sbrk_r>
 800c328:	4580      	cmp	r8, r0
 800c32a:	d13a      	bne.n	800c3a2 <_malloc_r+0xd2>
 800c32c:	6821      	ldr	r1, [r4, #0]
 800c32e:	3503      	adds	r5, #3
 800c330:	1a6d      	subs	r5, r5, r1
 800c332:	f025 0503 	bic.w	r5, r5, #3
 800c336:	3508      	adds	r5, #8
 800c338:	2d0c      	cmp	r5, #12
 800c33a:	bf38      	it	cc
 800c33c:	250c      	movcc	r5, #12
 800c33e:	4638      	mov	r0, r7
 800c340:	4629      	mov	r1, r5
 800c342:	f7ff ffa5 	bl	800c290 <sbrk_aligned>
 800c346:	3001      	adds	r0, #1
 800c348:	d02b      	beq.n	800c3a2 <_malloc_r+0xd2>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	442b      	add	r3, r5
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	e00e      	b.n	800c370 <_malloc_r+0xa0>
 800c352:	6822      	ldr	r2, [r4, #0]
 800c354:	1b52      	subs	r2, r2, r5
 800c356:	d41e      	bmi.n	800c396 <_malloc_r+0xc6>
 800c358:	2a0b      	cmp	r2, #11
 800c35a:	d916      	bls.n	800c38a <_malloc_r+0xba>
 800c35c:	1961      	adds	r1, r4, r5
 800c35e:	42a3      	cmp	r3, r4
 800c360:	6025      	str	r5, [r4, #0]
 800c362:	bf18      	it	ne
 800c364:	6059      	strne	r1, [r3, #4]
 800c366:	6863      	ldr	r3, [r4, #4]
 800c368:	bf08      	it	eq
 800c36a:	6031      	streq	r1, [r6, #0]
 800c36c:	5162      	str	r2, [r4, r5]
 800c36e:	604b      	str	r3, [r1, #4]
 800c370:	4638      	mov	r0, r7
 800c372:	f104 060b 	add.w	r6, r4, #11
 800c376:	f000 fa03 	bl	800c780 <__malloc_unlock>
 800c37a:	f026 0607 	bic.w	r6, r6, #7
 800c37e:	1d23      	adds	r3, r4, #4
 800c380:	1af2      	subs	r2, r6, r3
 800c382:	d0b6      	beq.n	800c2f2 <_malloc_r+0x22>
 800c384:	1b9b      	subs	r3, r3, r6
 800c386:	50a3      	str	r3, [r4, r2]
 800c388:	e7b3      	b.n	800c2f2 <_malloc_r+0x22>
 800c38a:	6862      	ldr	r2, [r4, #4]
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	bf0c      	ite	eq
 800c390:	6032      	streq	r2, [r6, #0]
 800c392:	605a      	strne	r2, [r3, #4]
 800c394:	e7ec      	b.n	800c370 <_malloc_r+0xa0>
 800c396:	4623      	mov	r3, r4
 800c398:	6864      	ldr	r4, [r4, #4]
 800c39a:	e7b2      	b.n	800c302 <_malloc_r+0x32>
 800c39c:	4634      	mov	r4, r6
 800c39e:	6876      	ldr	r6, [r6, #4]
 800c3a0:	e7b9      	b.n	800c316 <_malloc_r+0x46>
 800c3a2:	230c      	movs	r3, #12
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	603b      	str	r3, [r7, #0]
 800c3a8:	f000 f9ea 	bl	800c780 <__malloc_unlock>
 800c3ac:	e7a1      	b.n	800c2f2 <_malloc_r+0x22>
 800c3ae:	6025      	str	r5, [r4, #0]
 800c3b0:	e7de      	b.n	800c370 <_malloc_r+0xa0>
 800c3b2:	bf00      	nop
 800c3b4:	20002f54 	.word	0x20002f54

0800c3b8 <__ssputs_r>:
 800c3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3bc:	688e      	ldr	r6, [r1, #8]
 800c3be:	4682      	mov	sl, r0
 800c3c0:	429e      	cmp	r6, r3
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	4690      	mov	r8, r2
 800c3c6:	461f      	mov	r7, r3
 800c3c8:	d838      	bhi.n	800c43c <__ssputs_r+0x84>
 800c3ca:	898a      	ldrh	r2, [r1, #12]
 800c3cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d0:	d032      	beq.n	800c438 <__ssputs_r+0x80>
 800c3d2:	6825      	ldr	r5, [r4, #0]
 800c3d4:	6909      	ldr	r1, [r1, #16]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	eba5 0901 	sub.w	r9, r5, r1
 800c3dc:	6965      	ldr	r5, [r4, #20]
 800c3de:	444b      	add	r3, r9
 800c3e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e8:	106d      	asrs	r5, r5, #1
 800c3ea:	429d      	cmp	r5, r3
 800c3ec:	bf38      	it	cc
 800c3ee:	461d      	movcc	r5, r3
 800c3f0:	0553      	lsls	r3, r2, #21
 800c3f2:	d531      	bpl.n	800c458 <__ssputs_r+0xa0>
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7ff ff6b 	bl	800c2d0 <_malloc_r>
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	b950      	cbnz	r0, 800c414 <__ssputs_r+0x5c>
 800c3fe:	230c      	movs	r3, #12
 800c400:	f04f 30ff 	mov.w	r0, #4294967295
 800c404:	f8ca 3000 	str.w	r3, [sl]
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c414:	464a      	mov	r2, r9
 800c416:	6921      	ldr	r1, [r4, #16]
 800c418:	f7fc fada 	bl	80089d0 <memcpy>
 800c41c:	89a3      	ldrh	r3, [r4, #12]
 800c41e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c426:	81a3      	strh	r3, [r4, #12]
 800c428:	6126      	str	r6, [r4, #16]
 800c42a:	444e      	add	r6, r9
 800c42c:	6026      	str	r6, [r4, #0]
 800c42e:	463e      	mov	r6, r7
 800c430:	6165      	str	r5, [r4, #20]
 800c432:	eba5 0509 	sub.w	r5, r5, r9
 800c436:	60a5      	str	r5, [r4, #8]
 800c438:	42be      	cmp	r6, r7
 800c43a:	d900      	bls.n	800c43e <__ssputs_r+0x86>
 800c43c:	463e      	mov	r6, r7
 800c43e:	4632      	mov	r2, r6
 800c440:	4641      	mov	r1, r8
 800c442:	6820      	ldr	r0, [r4, #0]
 800c444:	f000 f97c 	bl	800c740 <memmove>
 800c448:	68a3      	ldr	r3, [r4, #8]
 800c44a:	2000      	movs	r0, #0
 800c44c:	1b9b      	subs	r3, r3, r6
 800c44e:	60a3      	str	r3, [r4, #8]
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	4433      	add	r3, r6
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	e7db      	b.n	800c410 <__ssputs_r+0x58>
 800c458:	462a      	mov	r2, r5
 800c45a:	f000 f997 	bl	800c78c <_realloc_r>
 800c45e:	4606      	mov	r6, r0
 800c460:	2800      	cmp	r0, #0
 800c462:	d1e1      	bne.n	800c428 <__ssputs_r+0x70>
 800c464:	4650      	mov	r0, sl
 800c466:	6921      	ldr	r1, [r4, #16]
 800c468:	f7ff feca 	bl	800c200 <_free_r>
 800c46c:	e7c7      	b.n	800c3fe <__ssputs_r+0x46>
	...

0800c470 <_svfiprintf_r>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	4698      	mov	r8, r3
 800c476:	898b      	ldrh	r3, [r1, #12]
 800c478:	4607      	mov	r7, r0
 800c47a:	061b      	lsls	r3, r3, #24
 800c47c:	460d      	mov	r5, r1
 800c47e:	4614      	mov	r4, r2
 800c480:	b09d      	sub	sp, #116	; 0x74
 800c482:	d50e      	bpl.n	800c4a2 <_svfiprintf_r+0x32>
 800c484:	690b      	ldr	r3, [r1, #16]
 800c486:	b963      	cbnz	r3, 800c4a2 <_svfiprintf_r+0x32>
 800c488:	2140      	movs	r1, #64	; 0x40
 800c48a:	f7ff ff21 	bl	800c2d0 <_malloc_r>
 800c48e:	6028      	str	r0, [r5, #0]
 800c490:	6128      	str	r0, [r5, #16]
 800c492:	b920      	cbnz	r0, 800c49e <_svfiprintf_r+0x2e>
 800c494:	230c      	movs	r3, #12
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	f04f 30ff 	mov.w	r0, #4294967295
 800c49c:	e0d1      	b.n	800c642 <_svfiprintf_r+0x1d2>
 800c49e:	2340      	movs	r3, #64	; 0x40
 800c4a0:	616b      	str	r3, [r5, #20]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a6:	2320      	movs	r3, #32
 800c4a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4ac:	2330      	movs	r3, #48	; 0x30
 800c4ae:	f04f 0901 	mov.w	r9, #1
 800c4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c65c <_svfiprintf_r+0x1ec>
 800c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4be:	4623      	mov	r3, r4
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c6:	b10a      	cbz	r2, 800c4cc <_svfiprintf_r+0x5c>
 800c4c8:	2a25      	cmp	r2, #37	; 0x25
 800c4ca:	d1f9      	bne.n	800c4c0 <_svfiprintf_r+0x50>
 800c4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d0:	d00b      	beq.n	800c4ea <_svfiprintf_r+0x7a>
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff ff6d 	bl	800c3b8 <__ssputs_r>
 800c4de:	3001      	adds	r0, #1
 800c4e0:	f000 80aa 	beq.w	800c638 <_svfiprintf_r+0x1c8>
 800c4e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4e6:	445a      	add	r2, fp
 800c4e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 80a2 	beq.w	800c638 <_svfiprintf_r+0x1c8>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fe:	f10a 0a01 	add.w	sl, sl, #1
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	9307      	str	r3, [sp, #28]
 800c506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c50a:	931a      	str	r3, [sp, #104]	; 0x68
 800c50c:	4654      	mov	r4, sl
 800c50e:	2205      	movs	r2, #5
 800c510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c514:	4851      	ldr	r0, [pc, #324]	; (800c65c <_svfiprintf_r+0x1ec>)
 800c516:	f7ff f999 	bl	800b84c <memchr>
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	b9d8      	cbnz	r0, 800c556 <_svfiprintf_r+0xe6>
 800c51e:	06d0      	lsls	r0, r2, #27
 800c520:	bf44      	itt	mi
 800c522:	2320      	movmi	r3, #32
 800c524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c528:	0711      	lsls	r1, r2, #28
 800c52a:	bf44      	itt	mi
 800c52c:	232b      	movmi	r3, #43	; 0x2b
 800c52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b2a      	cmp	r3, #42	; 0x2a
 800c538:	d015      	beq.n	800c566 <_svfiprintf_r+0xf6>
 800c53a:	4654      	mov	r4, sl
 800c53c:	2000      	movs	r0, #0
 800c53e:	f04f 0c0a 	mov.w	ip, #10
 800c542:	9a07      	ldr	r2, [sp, #28]
 800c544:	4621      	mov	r1, r4
 800c546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54a:	3b30      	subs	r3, #48	; 0x30
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d94e      	bls.n	800c5ee <_svfiprintf_r+0x17e>
 800c550:	b1b0      	cbz	r0, 800c580 <_svfiprintf_r+0x110>
 800c552:	9207      	str	r2, [sp, #28]
 800c554:	e014      	b.n	800c580 <_svfiprintf_r+0x110>
 800c556:	eba0 0308 	sub.w	r3, r0, r8
 800c55a:	fa09 f303 	lsl.w	r3, r9, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	46a2      	mov	sl, r4
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	e7d2      	b.n	800c50c <_svfiprintf_r+0x9c>
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	1d19      	adds	r1, r3, #4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	9103      	str	r1, [sp, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfbb      	ittet	lt
 800c572:	425b      	neglt	r3, r3
 800c574:	f042 0202 	orrlt.w	r2, r2, #2
 800c578:	9307      	strge	r3, [sp, #28]
 800c57a:	9307      	strlt	r3, [sp, #28]
 800c57c:	bfb8      	it	lt
 800c57e:	9204      	strlt	r2, [sp, #16]
 800c580:	7823      	ldrb	r3, [r4, #0]
 800c582:	2b2e      	cmp	r3, #46	; 0x2e
 800c584:	d10c      	bne.n	800c5a0 <_svfiprintf_r+0x130>
 800c586:	7863      	ldrb	r3, [r4, #1]
 800c588:	2b2a      	cmp	r3, #42	; 0x2a
 800c58a:	d135      	bne.n	800c5f8 <_svfiprintf_r+0x188>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	3402      	adds	r4, #2
 800c590:	1d1a      	adds	r2, r3, #4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	9203      	str	r2, [sp, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfb8      	it	lt
 800c59a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c59e:	9305      	str	r3, [sp, #20]
 800c5a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c660 <_svfiprintf_r+0x1f0>
 800c5a4:	2203      	movs	r2, #3
 800c5a6:	4650      	mov	r0, sl
 800c5a8:	7821      	ldrb	r1, [r4, #0]
 800c5aa:	f7ff f94f 	bl	800b84c <memchr>
 800c5ae:	b140      	cbz	r0, 800c5c2 <_svfiprintf_r+0x152>
 800c5b0:	2340      	movs	r3, #64	; 0x40
 800c5b2:	eba0 000a 	sub.w	r0, r0, sl
 800c5b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c5ba:	9b04      	ldr	r3, [sp, #16]
 800c5bc:	3401      	adds	r4, #1
 800c5be:	4303      	orrs	r3, r0
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c6:	2206      	movs	r2, #6
 800c5c8:	4826      	ldr	r0, [pc, #152]	; (800c664 <_svfiprintf_r+0x1f4>)
 800c5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ce:	f7ff f93d 	bl	800b84c <memchr>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d038      	beq.n	800c648 <_svfiprintf_r+0x1d8>
 800c5d6:	4b24      	ldr	r3, [pc, #144]	; (800c668 <_svfiprintf_r+0x1f8>)
 800c5d8:	bb1b      	cbnz	r3, 800c622 <_svfiprintf_r+0x1b2>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	3307      	adds	r3, #7
 800c5de:	f023 0307 	bic.w	r3, r3, #7
 800c5e2:	3308      	adds	r3, #8
 800c5e4:	9303      	str	r3, [sp, #12]
 800c5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e8:	4433      	add	r3, r6
 800c5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ec:	e767      	b.n	800c4be <_svfiprintf_r+0x4e>
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f6:	e7a5      	b.n	800c544 <_svfiprintf_r+0xd4>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f04f 0c0a 	mov.w	ip, #10
 800c5fe:	4619      	mov	r1, r3
 800c600:	3401      	adds	r4, #1
 800c602:	9305      	str	r3, [sp, #20]
 800c604:	4620      	mov	r0, r4
 800c606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c60a:	3a30      	subs	r2, #48	; 0x30
 800c60c:	2a09      	cmp	r2, #9
 800c60e:	d903      	bls.n	800c618 <_svfiprintf_r+0x1a8>
 800c610:	2b00      	cmp	r3, #0
 800c612:	d0c5      	beq.n	800c5a0 <_svfiprintf_r+0x130>
 800c614:	9105      	str	r1, [sp, #20]
 800c616:	e7c3      	b.n	800c5a0 <_svfiprintf_r+0x130>
 800c618:	4604      	mov	r4, r0
 800c61a:	2301      	movs	r3, #1
 800c61c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c620:	e7f0      	b.n	800c604 <_svfiprintf_r+0x194>
 800c622:	ab03      	add	r3, sp, #12
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	462a      	mov	r2, r5
 800c628:	4638      	mov	r0, r7
 800c62a:	4b10      	ldr	r3, [pc, #64]	; (800c66c <_svfiprintf_r+0x1fc>)
 800c62c:	a904      	add	r1, sp, #16
 800c62e:	f7fc fa83 	bl	8008b38 <_printf_float>
 800c632:	1c42      	adds	r2, r0, #1
 800c634:	4606      	mov	r6, r0
 800c636:	d1d6      	bne.n	800c5e6 <_svfiprintf_r+0x176>
 800c638:	89ab      	ldrh	r3, [r5, #12]
 800c63a:	065b      	lsls	r3, r3, #25
 800c63c:	f53f af2c 	bmi.w	800c498 <_svfiprintf_r+0x28>
 800c640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c642:	b01d      	add	sp, #116	; 0x74
 800c644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c648:	ab03      	add	r3, sp, #12
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	462a      	mov	r2, r5
 800c64e:	4638      	mov	r0, r7
 800c650:	4b06      	ldr	r3, [pc, #24]	; (800c66c <_svfiprintf_r+0x1fc>)
 800c652:	a904      	add	r1, sp, #16
 800c654:	f7fc fd0c 	bl	8009070 <_printf_i>
 800c658:	e7eb      	b.n	800c632 <_svfiprintf_r+0x1c2>
 800c65a:	bf00      	nop
 800c65c:	0800e5b4 	.word	0x0800e5b4
 800c660:	0800e5ba 	.word	0x0800e5ba
 800c664:	0800e5be 	.word	0x0800e5be
 800c668:	08008b39 	.word	0x08008b39
 800c66c:	0800c3b9 	.word	0x0800c3b9

0800c670 <nan>:
 800c670:	2000      	movs	r0, #0
 800c672:	4901      	ldr	r1, [pc, #4]	; (800c678 <nan+0x8>)
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	7ff80000 	.word	0x7ff80000

0800c67c <_sbrk_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	2300      	movs	r3, #0
 800c680:	4d05      	ldr	r5, [pc, #20]	; (800c698 <_sbrk_r+0x1c>)
 800c682:	4604      	mov	r4, r0
 800c684:	4608      	mov	r0, r1
 800c686:	602b      	str	r3, [r5, #0]
 800c688:	f7f6 f8e8 	bl	800285c <_sbrk>
 800c68c:	1c43      	adds	r3, r0, #1
 800c68e:	d102      	bne.n	800c696 <_sbrk_r+0x1a>
 800c690:	682b      	ldr	r3, [r5, #0]
 800c692:	b103      	cbz	r3, 800c696 <_sbrk_r+0x1a>
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	bd38      	pop	{r3, r4, r5, pc}
 800c698:	20002f5c 	.word	0x20002f5c

0800c69c <strncmp>:
 800c69c:	4603      	mov	r3, r0
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	b172      	cbz	r2, 800c6c0 <strncmp+0x24>
 800c6a2:	3901      	subs	r1, #1
 800c6a4:	1884      	adds	r4, r0, r2
 800c6a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c6aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c6ae:	4290      	cmp	r0, r2
 800c6b0:	d101      	bne.n	800c6b6 <strncmp+0x1a>
 800c6b2:	42a3      	cmp	r3, r4
 800c6b4:	d101      	bne.n	800c6ba <strncmp+0x1e>
 800c6b6:	1a80      	subs	r0, r0, r2
 800c6b8:	bd10      	pop	{r4, pc}
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d1f3      	bne.n	800c6a6 <strncmp+0xa>
 800c6be:	e7fa      	b.n	800c6b6 <strncmp+0x1a>
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	e7f9      	b.n	800c6b8 <strncmp+0x1c>

0800c6c4 <__ascii_wctomb>:
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	4608      	mov	r0, r1
 800c6c8:	b141      	cbz	r1, 800c6dc <__ascii_wctomb+0x18>
 800c6ca:	2aff      	cmp	r2, #255	; 0xff
 800c6cc:	d904      	bls.n	800c6d8 <__ascii_wctomb+0x14>
 800c6ce:	228a      	movs	r2, #138	; 0x8a
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	4770      	bx	lr
 800c6d8:	2001      	movs	r0, #1
 800c6da:	700a      	strb	r2, [r1, #0]
 800c6dc:	4770      	bx	lr
	...

0800c6e0 <__assert_func>:
 800c6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6e2:	4614      	mov	r4, r2
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	4b09      	ldr	r3, [pc, #36]	; (800c70c <__assert_func+0x2c>)
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68d8      	ldr	r0, [r3, #12]
 800c6ee:	b14c      	cbz	r4, 800c704 <__assert_func+0x24>
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <__assert_func+0x30>)
 800c6f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6f6:	9100      	str	r1, [sp, #0]
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	4906      	ldr	r1, [pc, #24]	; (800c714 <__assert_func+0x34>)
 800c6fc:	f000 f80e 	bl	800c71c <fiprintf>
 800c700:	f000 fa8a 	bl	800cc18 <abort>
 800c704:	4b04      	ldr	r3, [pc, #16]	; (800c718 <__assert_func+0x38>)
 800c706:	461c      	mov	r4, r3
 800c708:	e7f3      	b.n	800c6f2 <__assert_func+0x12>
 800c70a:	bf00      	nop
 800c70c:	2000001c 	.word	0x2000001c
 800c710:	0800e5c5 	.word	0x0800e5c5
 800c714:	0800e5d2 	.word	0x0800e5d2
 800c718:	0800e600 	.word	0x0800e600

0800c71c <fiprintf>:
 800c71c:	b40e      	push	{r1, r2, r3}
 800c71e:	b503      	push	{r0, r1, lr}
 800c720:	4601      	mov	r1, r0
 800c722:	ab03      	add	r3, sp, #12
 800c724:	4805      	ldr	r0, [pc, #20]	; (800c73c <fiprintf+0x20>)
 800c726:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	9301      	str	r3, [sp, #4]
 800c72e:	f000 f883 	bl	800c838 <_vfiprintf_r>
 800c732:	b002      	add	sp, #8
 800c734:	f85d eb04 	ldr.w	lr, [sp], #4
 800c738:	b003      	add	sp, #12
 800c73a:	4770      	bx	lr
 800c73c:	2000001c 	.word	0x2000001c

0800c740 <memmove>:
 800c740:	4288      	cmp	r0, r1
 800c742:	b510      	push	{r4, lr}
 800c744:	eb01 0402 	add.w	r4, r1, r2
 800c748:	d902      	bls.n	800c750 <memmove+0x10>
 800c74a:	4284      	cmp	r4, r0
 800c74c:	4623      	mov	r3, r4
 800c74e:	d807      	bhi.n	800c760 <memmove+0x20>
 800c750:	1e43      	subs	r3, r0, #1
 800c752:	42a1      	cmp	r1, r4
 800c754:	d008      	beq.n	800c768 <memmove+0x28>
 800c756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c75e:	e7f8      	b.n	800c752 <memmove+0x12>
 800c760:	4601      	mov	r1, r0
 800c762:	4402      	add	r2, r0
 800c764:	428a      	cmp	r2, r1
 800c766:	d100      	bne.n	800c76a <memmove+0x2a>
 800c768:	bd10      	pop	{r4, pc}
 800c76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c772:	e7f7      	b.n	800c764 <memmove+0x24>

0800c774 <__malloc_lock>:
 800c774:	4801      	ldr	r0, [pc, #4]	; (800c77c <__malloc_lock+0x8>)
 800c776:	f000 bc0b 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800c77a:	bf00      	nop
 800c77c:	20002f60 	.word	0x20002f60

0800c780 <__malloc_unlock>:
 800c780:	4801      	ldr	r0, [pc, #4]	; (800c788 <__malloc_unlock+0x8>)
 800c782:	f000 bc06 	b.w	800cf92 <__retarget_lock_release_recursive>
 800c786:	bf00      	nop
 800c788:	20002f60 	.word	0x20002f60

0800c78c <_realloc_r>:
 800c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c790:	4680      	mov	r8, r0
 800c792:	4614      	mov	r4, r2
 800c794:	460e      	mov	r6, r1
 800c796:	b921      	cbnz	r1, 800c7a2 <_realloc_r+0x16>
 800c798:	4611      	mov	r1, r2
 800c79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c79e:	f7ff bd97 	b.w	800c2d0 <_malloc_r>
 800c7a2:	b92a      	cbnz	r2, 800c7b0 <_realloc_r+0x24>
 800c7a4:	f7ff fd2c 	bl	800c200 <_free_r>
 800c7a8:	4625      	mov	r5, r4
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	f000 fc56 	bl	800d060 <_malloc_usable_size_r>
 800c7b4:	4284      	cmp	r4, r0
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	d802      	bhi.n	800c7c0 <_realloc_r+0x34>
 800c7ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7be:	d812      	bhi.n	800c7e6 <_realloc_r+0x5a>
 800c7c0:	4621      	mov	r1, r4
 800c7c2:	4640      	mov	r0, r8
 800c7c4:	f7ff fd84 	bl	800c2d0 <_malloc_r>
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d0ed      	beq.n	800c7aa <_realloc_r+0x1e>
 800c7ce:	42bc      	cmp	r4, r7
 800c7d0:	4622      	mov	r2, r4
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	bf28      	it	cs
 800c7d6:	463a      	movcs	r2, r7
 800c7d8:	f7fc f8fa 	bl	80089d0 <memcpy>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4640      	mov	r0, r8
 800c7e0:	f7ff fd0e 	bl	800c200 <_free_r>
 800c7e4:	e7e1      	b.n	800c7aa <_realloc_r+0x1e>
 800c7e6:	4635      	mov	r5, r6
 800c7e8:	e7df      	b.n	800c7aa <_realloc_r+0x1e>

0800c7ea <__sfputc_r>:
 800c7ea:	6893      	ldr	r3, [r2, #8]
 800c7ec:	b410      	push	{r4}
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	6093      	str	r3, [r2, #8]
 800c7f4:	da07      	bge.n	800c806 <__sfputc_r+0x1c>
 800c7f6:	6994      	ldr	r4, [r2, #24]
 800c7f8:	42a3      	cmp	r3, r4
 800c7fa:	db01      	blt.n	800c800 <__sfputc_r+0x16>
 800c7fc:	290a      	cmp	r1, #10
 800c7fe:	d102      	bne.n	800c806 <__sfputc_r+0x1c>
 800c800:	bc10      	pop	{r4}
 800c802:	f000 b949 	b.w	800ca98 <__swbuf_r>
 800c806:	6813      	ldr	r3, [r2, #0]
 800c808:	1c58      	adds	r0, r3, #1
 800c80a:	6010      	str	r0, [r2, #0]
 800c80c:	7019      	strb	r1, [r3, #0]
 800c80e:	4608      	mov	r0, r1
 800c810:	bc10      	pop	{r4}
 800c812:	4770      	bx	lr

0800c814 <__sfputs_r>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	4614      	mov	r4, r2
 800c81c:	18d5      	adds	r5, r2, r3
 800c81e:	42ac      	cmp	r4, r5
 800c820:	d101      	bne.n	800c826 <__sfputs_r+0x12>
 800c822:	2000      	movs	r0, #0
 800c824:	e007      	b.n	800c836 <__sfputs_r+0x22>
 800c826:	463a      	mov	r2, r7
 800c828:	4630      	mov	r0, r6
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	f7ff ffdc 	bl	800c7ea <__sfputc_r>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	d1f3      	bne.n	800c81e <__sfputs_r+0xa>
 800c836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c838 <_vfiprintf_r>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	460d      	mov	r5, r1
 800c83e:	4614      	mov	r4, r2
 800c840:	4698      	mov	r8, r3
 800c842:	4606      	mov	r6, r0
 800c844:	b09d      	sub	sp, #116	; 0x74
 800c846:	b118      	cbz	r0, 800c850 <_vfiprintf_r+0x18>
 800c848:	6983      	ldr	r3, [r0, #24]
 800c84a:	b90b      	cbnz	r3, 800c850 <_vfiprintf_r+0x18>
 800c84c:	f000 fb02 	bl	800ce54 <__sinit>
 800c850:	4b89      	ldr	r3, [pc, #548]	; (800ca78 <_vfiprintf_r+0x240>)
 800c852:	429d      	cmp	r5, r3
 800c854:	d11b      	bne.n	800c88e <_vfiprintf_r+0x56>
 800c856:	6875      	ldr	r5, [r6, #4]
 800c858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c85a:	07d9      	lsls	r1, r3, #31
 800c85c:	d405      	bmi.n	800c86a <_vfiprintf_r+0x32>
 800c85e:	89ab      	ldrh	r3, [r5, #12]
 800c860:	059a      	lsls	r2, r3, #22
 800c862:	d402      	bmi.n	800c86a <_vfiprintf_r+0x32>
 800c864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c866:	f000 fb93 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800c86a:	89ab      	ldrh	r3, [r5, #12]
 800c86c:	071b      	lsls	r3, r3, #28
 800c86e:	d501      	bpl.n	800c874 <_vfiprintf_r+0x3c>
 800c870:	692b      	ldr	r3, [r5, #16]
 800c872:	b9eb      	cbnz	r3, 800c8b0 <_vfiprintf_r+0x78>
 800c874:	4629      	mov	r1, r5
 800c876:	4630      	mov	r0, r6
 800c878:	f000 f960 	bl	800cb3c <__swsetup_r>
 800c87c:	b1c0      	cbz	r0, 800c8b0 <_vfiprintf_r+0x78>
 800c87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c880:	07dc      	lsls	r4, r3, #31
 800c882:	d50e      	bpl.n	800c8a2 <_vfiprintf_r+0x6a>
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	b01d      	add	sp, #116	; 0x74
 800c88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c88e:	4b7b      	ldr	r3, [pc, #492]	; (800ca7c <_vfiprintf_r+0x244>)
 800c890:	429d      	cmp	r5, r3
 800c892:	d101      	bne.n	800c898 <_vfiprintf_r+0x60>
 800c894:	68b5      	ldr	r5, [r6, #8]
 800c896:	e7df      	b.n	800c858 <_vfiprintf_r+0x20>
 800c898:	4b79      	ldr	r3, [pc, #484]	; (800ca80 <_vfiprintf_r+0x248>)
 800c89a:	429d      	cmp	r5, r3
 800c89c:	bf08      	it	eq
 800c89e:	68f5      	ldreq	r5, [r6, #12]
 800c8a0:	e7da      	b.n	800c858 <_vfiprintf_r+0x20>
 800c8a2:	89ab      	ldrh	r3, [r5, #12]
 800c8a4:	0598      	lsls	r0, r3, #22
 800c8a6:	d4ed      	bmi.n	800c884 <_vfiprintf_r+0x4c>
 800c8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8aa:	f000 fb72 	bl	800cf92 <__retarget_lock_release_recursive>
 800c8ae:	e7e9      	b.n	800c884 <_vfiprintf_r+0x4c>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b4:	2320      	movs	r3, #32
 800c8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8ba:	2330      	movs	r3, #48	; 0x30
 800c8bc:	f04f 0901 	mov.w	r9, #1
 800c8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ca84 <_vfiprintf_r+0x24c>
 800c8c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8cc:	4623      	mov	r3, r4
 800c8ce:	469a      	mov	sl, r3
 800c8d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8d4:	b10a      	cbz	r2, 800c8da <_vfiprintf_r+0xa2>
 800c8d6:	2a25      	cmp	r2, #37	; 0x25
 800c8d8:	d1f9      	bne.n	800c8ce <_vfiprintf_r+0x96>
 800c8da:	ebba 0b04 	subs.w	fp, sl, r4
 800c8de:	d00b      	beq.n	800c8f8 <_vfiprintf_r+0xc0>
 800c8e0:	465b      	mov	r3, fp
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f7ff ff94 	bl	800c814 <__sfputs_r>
 800c8ec:	3001      	adds	r0, #1
 800c8ee:	f000 80aa 	beq.w	800ca46 <_vfiprintf_r+0x20e>
 800c8f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8f4:	445a      	add	r2, fp
 800c8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 80a2 	beq.w	800ca46 <_vfiprintf_r+0x20e>
 800c902:	2300      	movs	r3, #0
 800c904:	f04f 32ff 	mov.w	r2, #4294967295
 800c908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c90c:	f10a 0a01 	add.w	sl, sl, #1
 800c910:	9304      	str	r3, [sp, #16]
 800c912:	9307      	str	r3, [sp, #28]
 800c914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c918:	931a      	str	r3, [sp, #104]	; 0x68
 800c91a:	4654      	mov	r4, sl
 800c91c:	2205      	movs	r2, #5
 800c91e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c922:	4858      	ldr	r0, [pc, #352]	; (800ca84 <_vfiprintf_r+0x24c>)
 800c924:	f7fe ff92 	bl	800b84c <memchr>
 800c928:	9a04      	ldr	r2, [sp, #16]
 800c92a:	b9d8      	cbnz	r0, 800c964 <_vfiprintf_r+0x12c>
 800c92c:	06d1      	lsls	r1, r2, #27
 800c92e:	bf44      	itt	mi
 800c930:	2320      	movmi	r3, #32
 800c932:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c936:	0713      	lsls	r3, r2, #28
 800c938:	bf44      	itt	mi
 800c93a:	232b      	movmi	r3, #43	; 0x2b
 800c93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c940:	f89a 3000 	ldrb.w	r3, [sl]
 800c944:	2b2a      	cmp	r3, #42	; 0x2a
 800c946:	d015      	beq.n	800c974 <_vfiprintf_r+0x13c>
 800c948:	4654      	mov	r4, sl
 800c94a:	2000      	movs	r0, #0
 800c94c:	f04f 0c0a 	mov.w	ip, #10
 800c950:	9a07      	ldr	r2, [sp, #28]
 800c952:	4621      	mov	r1, r4
 800c954:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c958:	3b30      	subs	r3, #48	; 0x30
 800c95a:	2b09      	cmp	r3, #9
 800c95c:	d94e      	bls.n	800c9fc <_vfiprintf_r+0x1c4>
 800c95e:	b1b0      	cbz	r0, 800c98e <_vfiprintf_r+0x156>
 800c960:	9207      	str	r2, [sp, #28]
 800c962:	e014      	b.n	800c98e <_vfiprintf_r+0x156>
 800c964:	eba0 0308 	sub.w	r3, r0, r8
 800c968:	fa09 f303 	lsl.w	r3, r9, r3
 800c96c:	4313      	orrs	r3, r2
 800c96e:	46a2      	mov	sl, r4
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	e7d2      	b.n	800c91a <_vfiprintf_r+0xe2>
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	1d19      	adds	r1, r3, #4
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	9103      	str	r1, [sp, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	bfbb      	ittet	lt
 800c980:	425b      	neglt	r3, r3
 800c982:	f042 0202 	orrlt.w	r2, r2, #2
 800c986:	9307      	strge	r3, [sp, #28]
 800c988:	9307      	strlt	r3, [sp, #28]
 800c98a:	bfb8      	it	lt
 800c98c:	9204      	strlt	r2, [sp, #16]
 800c98e:	7823      	ldrb	r3, [r4, #0]
 800c990:	2b2e      	cmp	r3, #46	; 0x2e
 800c992:	d10c      	bne.n	800c9ae <_vfiprintf_r+0x176>
 800c994:	7863      	ldrb	r3, [r4, #1]
 800c996:	2b2a      	cmp	r3, #42	; 0x2a
 800c998:	d135      	bne.n	800ca06 <_vfiprintf_r+0x1ce>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	3402      	adds	r4, #2
 800c99e:	1d1a      	adds	r2, r3, #4
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	9203      	str	r2, [sp, #12]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bfb8      	it	lt
 800c9a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9ac:	9305      	str	r3, [sp, #20]
 800c9ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ca88 <_vfiprintf_r+0x250>
 800c9b2:	2203      	movs	r2, #3
 800c9b4:	4650      	mov	r0, sl
 800c9b6:	7821      	ldrb	r1, [r4, #0]
 800c9b8:	f7fe ff48 	bl	800b84c <memchr>
 800c9bc:	b140      	cbz	r0, 800c9d0 <_vfiprintf_r+0x198>
 800c9be:	2340      	movs	r3, #64	; 0x40
 800c9c0:	eba0 000a 	sub.w	r0, r0, sl
 800c9c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9c8:	9b04      	ldr	r3, [sp, #16]
 800c9ca:	3401      	adds	r4, #1
 800c9cc:	4303      	orrs	r3, r0
 800c9ce:	9304      	str	r3, [sp, #16]
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	2206      	movs	r2, #6
 800c9d6:	482d      	ldr	r0, [pc, #180]	; (800ca8c <_vfiprintf_r+0x254>)
 800c9d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9dc:	f7fe ff36 	bl	800b84c <memchr>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d03f      	beq.n	800ca64 <_vfiprintf_r+0x22c>
 800c9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ca90 <_vfiprintf_r+0x258>)
 800c9e6:	bb1b      	cbnz	r3, 800ca30 <_vfiprintf_r+0x1f8>
 800c9e8:	9b03      	ldr	r3, [sp, #12]
 800c9ea:	3307      	adds	r3, #7
 800c9ec:	f023 0307 	bic.w	r3, r3, #7
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	9303      	str	r3, [sp, #12]
 800c9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f6:	443b      	add	r3, r7
 800c9f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9fa:	e767      	b.n	800c8cc <_vfiprintf_r+0x94>
 800c9fc:	460c      	mov	r4, r1
 800c9fe:	2001      	movs	r0, #1
 800ca00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca04:	e7a5      	b.n	800c952 <_vfiprintf_r+0x11a>
 800ca06:	2300      	movs	r3, #0
 800ca08:	f04f 0c0a 	mov.w	ip, #10
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	3401      	adds	r4, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	4620      	mov	r0, r4
 800ca14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca18:	3a30      	subs	r2, #48	; 0x30
 800ca1a:	2a09      	cmp	r2, #9
 800ca1c:	d903      	bls.n	800ca26 <_vfiprintf_r+0x1ee>
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d0c5      	beq.n	800c9ae <_vfiprintf_r+0x176>
 800ca22:	9105      	str	r1, [sp, #20]
 800ca24:	e7c3      	b.n	800c9ae <_vfiprintf_r+0x176>
 800ca26:	4604      	mov	r4, r0
 800ca28:	2301      	movs	r3, #1
 800ca2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca2e:	e7f0      	b.n	800ca12 <_vfiprintf_r+0x1da>
 800ca30:	ab03      	add	r3, sp, #12
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	462a      	mov	r2, r5
 800ca36:	4630      	mov	r0, r6
 800ca38:	4b16      	ldr	r3, [pc, #88]	; (800ca94 <_vfiprintf_r+0x25c>)
 800ca3a:	a904      	add	r1, sp, #16
 800ca3c:	f7fc f87c 	bl	8008b38 <_printf_float>
 800ca40:	4607      	mov	r7, r0
 800ca42:	1c78      	adds	r0, r7, #1
 800ca44:	d1d6      	bne.n	800c9f4 <_vfiprintf_r+0x1bc>
 800ca46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca48:	07d9      	lsls	r1, r3, #31
 800ca4a:	d405      	bmi.n	800ca58 <_vfiprintf_r+0x220>
 800ca4c:	89ab      	ldrh	r3, [r5, #12]
 800ca4e:	059a      	lsls	r2, r3, #22
 800ca50:	d402      	bmi.n	800ca58 <_vfiprintf_r+0x220>
 800ca52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca54:	f000 fa9d 	bl	800cf92 <__retarget_lock_release_recursive>
 800ca58:	89ab      	ldrh	r3, [r5, #12]
 800ca5a:	065b      	lsls	r3, r3, #25
 800ca5c:	f53f af12 	bmi.w	800c884 <_vfiprintf_r+0x4c>
 800ca60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca62:	e711      	b.n	800c888 <_vfiprintf_r+0x50>
 800ca64:	ab03      	add	r3, sp, #12
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	462a      	mov	r2, r5
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <_vfiprintf_r+0x25c>)
 800ca6e:	a904      	add	r1, sp, #16
 800ca70:	f7fc fafe 	bl	8009070 <_printf_i>
 800ca74:	e7e4      	b.n	800ca40 <_vfiprintf_r+0x208>
 800ca76:	bf00      	nop
 800ca78:	0800e624 	.word	0x0800e624
 800ca7c:	0800e644 	.word	0x0800e644
 800ca80:	0800e604 	.word	0x0800e604
 800ca84:	0800e5b4 	.word	0x0800e5b4
 800ca88:	0800e5ba 	.word	0x0800e5ba
 800ca8c:	0800e5be 	.word	0x0800e5be
 800ca90:	08008b39 	.word	0x08008b39
 800ca94:	0800c815 	.word	0x0800c815

0800ca98 <__swbuf_r>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	460e      	mov	r6, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b118      	cbz	r0, 800caaa <__swbuf_r+0x12>
 800caa2:	6983      	ldr	r3, [r0, #24]
 800caa4:	b90b      	cbnz	r3, 800caaa <__swbuf_r+0x12>
 800caa6:	f000 f9d5 	bl	800ce54 <__sinit>
 800caaa:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <__swbuf_r+0x98>)
 800caac:	429c      	cmp	r4, r3
 800caae:	d12b      	bne.n	800cb08 <__swbuf_r+0x70>
 800cab0:	686c      	ldr	r4, [r5, #4]
 800cab2:	69a3      	ldr	r3, [r4, #24]
 800cab4:	60a3      	str	r3, [r4, #8]
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	071a      	lsls	r2, r3, #28
 800caba:	d52f      	bpl.n	800cb1c <__swbuf_r+0x84>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	b36b      	cbz	r3, 800cb1c <__swbuf_r+0x84>
 800cac0:	6923      	ldr	r3, [r4, #16]
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	b2f6      	uxtb	r6, r6
 800cac6:	1ac0      	subs	r0, r0, r3
 800cac8:	6963      	ldr	r3, [r4, #20]
 800caca:	4637      	mov	r7, r6
 800cacc:	4283      	cmp	r3, r0
 800cace:	dc04      	bgt.n	800cada <__swbuf_r+0x42>
 800cad0:	4621      	mov	r1, r4
 800cad2:	4628      	mov	r0, r5
 800cad4:	f000 f92a 	bl	800cd2c <_fflush_r>
 800cad8:	bb30      	cbnz	r0, 800cb28 <__swbuf_r+0x90>
 800cada:	68a3      	ldr	r3, [r4, #8]
 800cadc:	3001      	adds	r0, #1
 800cade:	3b01      	subs	r3, #1
 800cae0:	60a3      	str	r3, [r4, #8]
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	6022      	str	r2, [r4, #0]
 800cae8:	701e      	strb	r6, [r3, #0]
 800caea:	6963      	ldr	r3, [r4, #20]
 800caec:	4283      	cmp	r3, r0
 800caee:	d004      	beq.n	800cafa <__swbuf_r+0x62>
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	07db      	lsls	r3, r3, #31
 800caf4:	d506      	bpl.n	800cb04 <__swbuf_r+0x6c>
 800caf6:	2e0a      	cmp	r6, #10
 800caf8:	d104      	bne.n	800cb04 <__swbuf_r+0x6c>
 800cafa:	4621      	mov	r1, r4
 800cafc:	4628      	mov	r0, r5
 800cafe:	f000 f915 	bl	800cd2c <_fflush_r>
 800cb02:	b988      	cbnz	r0, 800cb28 <__swbuf_r+0x90>
 800cb04:	4638      	mov	r0, r7
 800cb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb08:	4b0a      	ldr	r3, [pc, #40]	; (800cb34 <__swbuf_r+0x9c>)
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d101      	bne.n	800cb12 <__swbuf_r+0x7a>
 800cb0e:	68ac      	ldr	r4, [r5, #8]
 800cb10:	e7cf      	b.n	800cab2 <__swbuf_r+0x1a>
 800cb12:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <__swbuf_r+0xa0>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	bf08      	it	eq
 800cb18:	68ec      	ldreq	r4, [r5, #12]
 800cb1a:	e7ca      	b.n	800cab2 <__swbuf_r+0x1a>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f000 f80c 	bl	800cb3c <__swsetup_r>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d0cb      	beq.n	800cac0 <__swbuf_r+0x28>
 800cb28:	f04f 37ff 	mov.w	r7, #4294967295
 800cb2c:	e7ea      	b.n	800cb04 <__swbuf_r+0x6c>
 800cb2e:	bf00      	nop
 800cb30:	0800e624 	.word	0x0800e624
 800cb34:	0800e644 	.word	0x0800e644
 800cb38:	0800e604 	.word	0x0800e604

0800cb3c <__swsetup_r>:
 800cb3c:	4b32      	ldr	r3, [pc, #200]	; (800cc08 <__swsetup_r+0xcc>)
 800cb3e:	b570      	push	{r4, r5, r6, lr}
 800cb40:	681d      	ldr	r5, [r3, #0]
 800cb42:	4606      	mov	r6, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	b125      	cbz	r5, 800cb52 <__swsetup_r+0x16>
 800cb48:	69ab      	ldr	r3, [r5, #24]
 800cb4a:	b913      	cbnz	r3, 800cb52 <__swsetup_r+0x16>
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f000 f981 	bl	800ce54 <__sinit>
 800cb52:	4b2e      	ldr	r3, [pc, #184]	; (800cc0c <__swsetup_r+0xd0>)
 800cb54:	429c      	cmp	r4, r3
 800cb56:	d10f      	bne.n	800cb78 <__swsetup_r+0x3c>
 800cb58:	686c      	ldr	r4, [r5, #4]
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb60:	0719      	lsls	r1, r3, #28
 800cb62:	d42c      	bmi.n	800cbbe <__swsetup_r+0x82>
 800cb64:	06dd      	lsls	r5, r3, #27
 800cb66:	d411      	bmi.n	800cb8c <__swsetup_r+0x50>
 800cb68:	2309      	movs	r3, #9
 800cb6a:	6033      	str	r3, [r6, #0]
 800cb6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	e03e      	b.n	800cbf6 <__swsetup_r+0xba>
 800cb78:	4b25      	ldr	r3, [pc, #148]	; (800cc10 <__swsetup_r+0xd4>)
 800cb7a:	429c      	cmp	r4, r3
 800cb7c:	d101      	bne.n	800cb82 <__swsetup_r+0x46>
 800cb7e:	68ac      	ldr	r4, [r5, #8]
 800cb80:	e7eb      	b.n	800cb5a <__swsetup_r+0x1e>
 800cb82:	4b24      	ldr	r3, [pc, #144]	; (800cc14 <__swsetup_r+0xd8>)
 800cb84:	429c      	cmp	r4, r3
 800cb86:	bf08      	it	eq
 800cb88:	68ec      	ldreq	r4, [r5, #12]
 800cb8a:	e7e6      	b.n	800cb5a <__swsetup_r+0x1e>
 800cb8c:	0758      	lsls	r0, r3, #29
 800cb8e:	d512      	bpl.n	800cbb6 <__swsetup_r+0x7a>
 800cb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb92:	b141      	cbz	r1, 800cba6 <__swsetup_r+0x6a>
 800cb94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb98:	4299      	cmp	r1, r3
 800cb9a:	d002      	beq.n	800cba2 <__swsetup_r+0x66>
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f7ff fb2f 	bl	800c200 <_free_r>
 800cba2:	2300      	movs	r3, #0
 800cba4:	6363      	str	r3, [r4, #52]	; 0x34
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbac:	81a3      	strh	r3, [r4, #12]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	6063      	str	r3, [r4, #4]
 800cbb2:	6923      	ldr	r3, [r4, #16]
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	89a3      	ldrh	r3, [r4, #12]
 800cbb8:	f043 0308 	orr.w	r3, r3, #8
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	b94b      	cbnz	r3, 800cbd6 <__swsetup_r+0x9a>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbcc:	d003      	beq.n	800cbd6 <__swsetup_r+0x9a>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f000 fa05 	bl	800cfe0 <__smakebuf_r>
 800cbd6:	89a0      	ldrh	r0, [r4, #12]
 800cbd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbdc:	f010 0301 	ands.w	r3, r0, #1
 800cbe0:	d00a      	beq.n	800cbf8 <__swsetup_r+0xbc>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60a3      	str	r3, [r4, #8]
 800cbe6:	6963      	ldr	r3, [r4, #20]
 800cbe8:	425b      	negs	r3, r3
 800cbea:	61a3      	str	r3, [r4, #24]
 800cbec:	6923      	ldr	r3, [r4, #16]
 800cbee:	b943      	cbnz	r3, 800cc02 <__swsetup_r+0xc6>
 800cbf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbf4:	d1ba      	bne.n	800cb6c <__swsetup_r+0x30>
 800cbf6:	bd70      	pop	{r4, r5, r6, pc}
 800cbf8:	0781      	lsls	r1, r0, #30
 800cbfa:	bf58      	it	pl
 800cbfc:	6963      	ldrpl	r3, [r4, #20]
 800cbfe:	60a3      	str	r3, [r4, #8]
 800cc00:	e7f4      	b.n	800cbec <__swsetup_r+0xb0>
 800cc02:	2000      	movs	r0, #0
 800cc04:	e7f7      	b.n	800cbf6 <__swsetup_r+0xba>
 800cc06:	bf00      	nop
 800cc08:	2000001c 	.word	0x2000001c
 800cc0c:	0800e624 	.word	0x0800e624
 800cc10:	0800e644 	.word	0x0800e644
 800cc14:	0800e604 	.word	0x0800e604

0800cc18 <abort>:
 800cc18:	2006      	movs	r0, #6
 800cc1a:	b508      	push	{r3, lr}
 800cc1c:	f000 fa50 	bl	800d0c0 <raise>
 800cc20:	2001      	movs	r0, #1
 800cc22:	f7f5 fda8 	bl	8002776 <_exit>
	...

0800cc28 <__sflush_r>:
 800cc28:	898a      	ldrh	r2, [r1, #12]
 800cc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc2c:	4605      	mov	r5, r0
 800cc2e:	0710      	lsls	r0, r2, #28
 800cc30:	460c      	mov	r4, r1
 800cc32:	d457      	bmi.n	800cce4 <__sflush_r+0xbc>
 800cc34:	684b      	ldr	r3, [r1, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dc04      	bgt.n	800cc44 <__sflush_r+0x1c>
 800cc3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dc01      	bgt.n	800cc44 <__sflush_r+0x1c>
 800cc40:	2000      	movs	r0, #0
 800cc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc46:	2e00      	cmp	r6, #0
 800cc48:	d0fa      	beq.n	800cc40 <__sflush_r+0x18>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc50:	682f      	ldr	r7, [r5, #0]
 800cc52:	602b      	str	r3, [r5, #0]
 800cc54:	d032      	beq.n	800ccbc <__sflush_r+0x94>
 800cc56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	075a      	lsls	r2, r3, #29
 800cc5c:	d505      	bpl.n	800cc6a <__sflush_r+0x42>
 800cc5e:	6863      	ldr	r3, [r4, #4]
 800cc60:	1ac0      	subs	r0, r0, r3
 800cc62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc64:	b10b      	cbz	r3, 800cc6a <__sflush_r+0x42>
 800cc66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc68:	1ac0      	subs	r0, r0, r3
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc70:	4628      	mov	r0, r5
 800cc72:	6a21      	ldr	r1, [r4, #32]
 800cc74:	47b0      	blx	r6
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	d106      	bne.n	800cc8a <__sflush_r+0x62>
 800cc7c:	6829      	ldr	r1, [r5, #0]
 800cc7e:	291d      	cmp	r1, #29
 800cc80:	d82c      	bhi.n	800ccdc <__sflush_r+0xb4>
 800cc82:	4a29      	ldr	r2, [pc, #164]	; (800cd28 <__sflush_r+0x100>)
 800cc84:	40ca      	lsrs	r2, r1
 800cc86:	07d6      	lsls	r6, r2, #31
 800cc88:	d528      	bpl.n	800ccdc <__sflush_r+0xb4>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6062      	str	r2, [r4, #4]
 800cc8e:	6922      	ldr	r2, [r4, #16]
 800cc90:	04d9      	lsls	r1, r3, #19
 800cc92:	6022      	str	r2, [r4, #0]
 800cc94:	d504      	bpl.n	800cca0 <__sflush_r+0x78>
 800cc96:	1c42      	adds	r2, r0, #1
 800cc98:	d101      	bne.n	800cc9e <__sflush_r+0x76>
 800cc9a:	682b      	ldr	r3, [r5, #0]
 800cc9c:	b903      	cbnz	r3, 800cca0 <__sflush_r+0x78>
 800cc9e:	6560      	str	r0, [r4, #84]	; 0x54
 800cca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cca2:	602f      	str	r7, [r5, #0]
 800cca4:	2900      	cmp	r1, #0
 800cca6:	d0cb      	beq.n	800cc40 <__sflush_r+0x18>
 800cca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccac:	4299      	cmp	r1, r3
 800ccae:	d002      	beq.n	800ccb6 <__sflush_r+0x8e>
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	f7ff faa5 	bl	800c200 <_free_r>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	6360      	str	r0, [r4, #52]	; 0x34
 800ccba:	e7c2      	b.n	800cc42 <__sflush_r+0x1a>
 800ccbc:	6a21      	ldr	r1, [r4, #32]
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	47b0      	blx	r6
 800ccc4:	1c41      	adds	r1, r0, #1
 800ccc6:	d1c7      	bne.n	800cc58 <__sflush_r+0x30>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0c4      	beq.n	800cc58 <__sflush_r+0x30>
 800ccce:	2b1d      	cmp	r3, #29
 800ccd0:	d001      	beq.n	800ccd6 <__sflush_r+0xae>
 800ccd2:	2b16      	cmp	r3, #22
 800ccd4:	d101      	bne.n	800ccda <__sflush_r+0xb2>
 800ccd6:	602f      	str	r7, [r5, #0]
 800ccd8:	e7b2      	b.n	800cc40 <__sflush_r+0x18>
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	e7ae      	b.n	800cc42 <__sflush_r+0x1a>
 800cce4:	690f      	ldr	r7, [r1, #16]
 800cce6:	2f00      	cmp	r7, #0
 800cce8:	d0aa      	beq.n	800cc40 <__sflush_r+0x18>
 800ccea:	0793      	lsls	r3, r2, #30
 800ccec:	bf18      	it	ne
 800ccee:	2300      	movne	r3, #0
 800ccf0:	680e      	ldr	r6, [r1, #0]
 800ccf2:	bf08      	it	eq
 800ccf4:	694b      	ldreq	r3, [r1, #20]
 800ccf6:	1bf6      	subs	r6, r6, r7
 800ccf8:	600f      	str	r7, [r1, #0]
 800ccfa:	608b      	str	r3, [r1, #8]
 800ccfc:	2e00      	cmp	r6, #0
 800ccfe:	dd9f      	ble.n	800cc40 <__sflush_r+0x18>
 800cd00:	4633      	mov	r3, r6
 800cd02:	463a      	mov	r2, r7
 800cd04:	4628      	mov	r0, r5
 800cd06:	6a21      	ldr	r1, [r4, #32]
 800cd08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd0c:	47e0      	blx	ip
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	dc06      	bgt.n	800cd20 <__sflush_r+0xf8>
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	f04f 30ff 	mov.w	r0, #4294967295
 800cd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd1c:	81a3      	strh	r3, [r4, #12]
 800cd1e:	e790      	b.n	800cc42 <__sflush_r+0x1a>
 800cd20:	4407      	add	r7, r0
 800cd22:	1a36      	subs	r6, r6, r0
 800cd24:	e7ea      	b.n	800ccfc <__sflush_r+0xd4>
 800cd26:	bf00      	nop
 800cd28:	20400001 	.word	0x20400001

0800cd2c <_fflush_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	690b      	ldr	r3, [r1, #16]
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	b913      	cbnz	r3, 800cd3c <_fflush_r+0x10>
 800cd36:	2500      	movs	r5, #0
 800cd38:	4628      	mov	r0, r5
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	b118      	cbz	r0, 800cd46 <_fflush_r+0x1a>
 800cd3e:	6983      	ldr	r3, [r0, #24]
 800cd40:	b90b      	cbnz	r3, 800cd46 <_fflush_r+0x1a>
 800cd42:	f000 f887 	bl	800ce54 <__sinit>
 800cd46:	4b14      	ldr	r3, [pc, #80]	; (800cd98 <_fflush_r+0x6c>)
 800cd48:	429c      	cmp	r4, r3
 800cd4a:	d11b      	bne.n	800cd84 <_fflush_r+0x58>
 800cd4c:	686c      	ldr	r4, [r5, #4]
 800cd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d0ef      	beq.n	800cd36 <_fflush_r+0xa>
 800cd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd58:	07d0      	lsls	r0, r2, #31
 800cd5a:	d404      	bmi.n	800cd66 <_fflush_r+0x3a>
 800cd5c:	0599      	lsls	r1, r3, #22
 800cd5e:	d402      	bmi.n	800cd66 <_fflush_r+0x3a>
 800cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd62:	f000 f915 	bl	800cf90 <__retarget_lock_acquire_recursive>
 800cd66:	4628      	mov	r0, r5
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f7ff ff5d 	bl	800cc28 <__sflush_r>
 800cd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd70:	4605      	mov	r5, r0
 800cd72:	07da      	lsls	r2, r3, #31
 800cd74:	d4e0      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd76:	89a3      	ldrh	r3, [r4, #12]
 800cd78:	059b      	lsls	r3, r3, #22
 800cd7a:	d4dd      	bmi.n	800cd38 <_fflush_r+0xc>
 800cd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd7e:	f000 f908 	bl	800cf92 <__retarget_lock_release_recursive>
 800cd82:	e7d9      	b.n	800cd38 <_fflush_r+0xc>
 800cd84:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <_fflush_r+0x70>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d101      	bne.n	800cd8e <_fflush_r+0x62>
 800cd8a:	68ac      	ldr	r4, [r5, #8]
 800cd8c:	e7df      	b.n	800cd4e <_fflush_r+0x22>
 800cd8e:	4b04      	ldr	r3, [pc, #16]	; (800cda0 <_fflush_r+0x74>)
 800cd90:	429c      	cmp	r4, r3
 800cd92:	bf08      	it	eq
 800cd94:	68ec      	ldreq	r4, [r5, #12]
 800cd96:	e7da      	b.n	800cd4e <_fflush_r+0x22>
 800cd98:	0800e624 	.word	0x0800e624
 800cd9c:	0800e644 	.word	0x0800e644
 800cda0:	0800e604 	.word	0x0800e604

0800cda4 <std>:
 800cda4:	2300      	movs	r3, #0
 800cda6:	b510      	push	{r4, lr}
 800cda8:	4604      	mov	r4, r0
 800cdaa:	e9c0 3300 	strd	r3, r3, [r0]
 800cdae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdb2:	6083      	str	r3, [r0, #8]
 800cdb4:	8181      	strh	r1, [r0, #12]
 800cdb6:	6643      	str	r3, [r0, #100]	; 0x64
 800cdb8:	81c2      	strh	r2, [r0, #14]
 800cdba:	6183      	str	r3, [r0, #24]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	2208      	movs	r2, #8
 800cdc0:	305c      	adds	r0, #92	; 0x5c
 800cdc2:	f7fb fe13 	bl	80089ec <memset>
 800cdc6:	4b05      	ldr	r3, [pc, #20]	; (800cddc <std+0x38>)
 800cdc8:	6224      	str	r4, [r4, #32]
 800cdca:	6263      	str	r3, [r4, #36]	; 0x24
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <std+0x3c>)
 800cdce:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdd0:	4b04      	ldr	r3, [pc, #16]	; (800cde4 <std+0x40>)
 800cdd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdd4:	4b04      	ldr	r3, [pc, #16]	; (800cde8 <std+0x44>)
 800cdd6:	6323      	str	r3, [r4, #48]	; 0x30
 800cdd8:	bd10      	pop	{r4, pc}
 800cdda:	bf00      	nop
 800cddc:	0800d0f9 	.word	0x0800d0f9
 800cde0:	0800d11b 	.word	0x0800d11b
 800cde4:	0800d153 	.word	0x0800d153
 800cde8:	0800d177 	.word	0x0800d177

0800cdec <_cleanup_r>:
 800cdec:	4901      	ldr	r1, [pc, #4]	; (800cdf4 <_cleanup_r+0x8>)
 800cdee:	f000 b8af 	b.w	800cf50 <_fwalk_reent>
 800cdf2:	bf00      	nop
 800cdf4:	0800cd2d 	.word	0x0800cd2d

0800cdf8 <__sfmoreglue>:
 800cdf8:	2268      	movs	r2, #104	; 0x68
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	1e4d      	subs	r5, r1, #1
 800cdfe:	4355      	muls	r5, r2
 800ce00:	460e      	mov	r6, r1
 800ce02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce06:	f7ff fa63 	bl	800c2d0 <_malloc_r>
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	b140      	cbz	r0, 800ce20 <__sfmoreglue+0x28>
 800ce0e:	2100      	movs	r1, #0
 800ce10:	e9c0 1600 	strd	r1, r6, [r0]
 800ce14:	300c      	adds	r0, #12
 800ce16:	60a0      	str	r0, [r4, #8]
 800ce18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce1c:	f7fb fde6 	bl	80089ec <memset>
 800ce20:	4620      	mov	r0, r4
 800ce22:	bd70      	pop	{r4, r5, r6, pc}

0800ce24 <__sfp_lock_acquire>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__sfp_lock_acquire+0x8>)
 800ce26:	f000 b8b3 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	20002f61 	.word	0x20002f61

0800ce30 <__sfp_lock_release>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__sfp_lock_release+0x8>)
 800ce32:	f000 b8ae 	b.w	800cf92 <__retarget_lock_release_recursive>
 800ce36:	bf00      	nop
 800ce38:	20002f61 	.word	0x20002f61

0800ce3c <__sinit_lock_acquire>:
 800ce3c:	4801      	ldr	r0, [pc, #4]	; (800ce44 <__sinit_lock_acquire+0x8>)
 800ce3e:	f000 b8a7 	b.w	800cf90 <__retarget_lock_acquire_recursive>
 800ce42:	bf00      	nop
 800ce44:	20002f62 	.word	0x20002f62

0800ce48 <__sinit_lock_release>:
 800ce48:	4801      	ldr	r0, [pc, #4]	; (800ce50 <__sinit_lock_release+0x8>)
 800ce4a:	f000 b8a2 	b.w	800cf92 <__retarget_lock_release_recursive>
 800ce4e:	bf00      	nop
 800ce50:	20002f62 	.word	0x20002f62

0800ce54 <__sinit>:
 800ce54:	b510      	push	{r4, lr}
 800ce56:	4604      	mov	r4, r0
 800ce58:	f7ff fff0 	bl	800ce3c <__sinit_lock_acquire>
 800ce5c:	69a3      	ldr	r3, [r4, #24]
 800ce5e:	b11b      	cbz	r3, 800ce68 <__sinit+0x14>
 800ce60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce64:	f7ff bff0 	b.w	800ce48 <__sinit_lock_release>
 800ce68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce6c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce6e:	4b13      	ldr	r3, [pc, #76]	; (800cebc <__sinit+0x68>)
 800ce70:	4a13      	ldr	r2, [pc, #76]	; (800cec0 <__sinit+0x6c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce76:	42a3      	cmp	r3, r4
 800ce78:	bf08      	it	eq
 800ce7a:	2301      	moveq	r3, #1
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	bf08      	it	eq
 800ce80:	61a3      	streq	r3, [r4, #24]
 800ce82:	f000 f81f 	bl	800cec4 <__sfp>
 800ce86:	6060      	str	r0, [r4, #4]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 f81b 	bl	800cec4 <__sfp>
 800ce8e:	60a0      	str	r0, [r4, #8]
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 f817 	bl	800cec4 <__sfp>
 800ce96:	2200      	movs	r2, #0
 800ce98:	2104      	movs	r1, #4
 800ce9a:	60e0      	str	r0, [r4, #12]
 800ce9c:	6860      	ldr	r0, [r4, #4]
 800ce9e:	f7ff ff81 	bl	800cda4 <std>
 800cea2:	2201      	movs	r2, #1
 800cea4:	2109      	movs	r1, #9
 800cea6:	68a0      	ldr	r0, [r4, #8]
 800cea8:	f7ff ff7c 	bl	800cda4 <std>
 800ceac:	2202      	movs	r2, #2
 800ceae:	2112      	movs	r1, #18
 800ceb0:	68e0      	ldr	r0, [r4, #12]
 800ceb2:	f7ff ff77 	bl	800cda4 <std>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	61a3      	str	r3, [r4, #24]
 800ceba:	e7d1      	b.n	800ce60 <__sinit+0xc>
 800cebc:	0800e1bc 	.word	0x0800e1bc
 800cec0:	0800cded 	.word	0x0800cded

0800cec4 <__sfp>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	4607      	mov	r7, r0
 800cec8:	f7ff ffac 	bl	800ce24 <__sfp_lock_acquire>
 800cecc:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <__sfp+0x84>)
 800cece:	681e      	ldr	r6, [r3, #0]
 800ced0:	69b3      	ldr	r3, [r6, #24]
 800ced2:	b913      	cbnz	r3, 800ceda <__sfp+0x16>
 800ced4:	4630      	mov	r0, r6
 800ced6:	f7ff ffbd 	bl	800ce54 <__sinit>
 800ceda:	3648      	adds	r6, #72	; 0x48
 800cedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	d503      	bpl.n	800ceec <__sfp+0x28>
 800cee4:	6833      	ldr	r3, [r6, #0]
 800cee6:	b30b      	cbz	r3, 800cf2c <__sfp+0x68>
 800cee8:	6836      	ldr	r6, [r6, #0]
 800ceea:	e7f7      	b.n	800cedc <__sfp+0x18>
 800ceec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cef0:	b9d5      	cbnz	r5, 800cf28 <__sfp+0x64>
 800cef2:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <__sfp+0x88>)
 800cef4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cef8:	60e3      	str	r3, [r4, #12]
 800cefa:	6665      	str	r5, [r4, #100]	; 0x64
 800cefc:	f000 f847 	bl	800cf8e <__retarget_lock_init_recursive>
 800cf00:	f7ff ff96 	bl	800ce30 <__sfp_lock_release>
 800cf04:	2208      	movs	r2, #8
 800cf06:	4629      	mov	r1, r5
 800cf08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf10:	6025      	str	r5, [r4, #0]
 800cf12:	61a5      	str	r5, [r4, #24]
 800cf14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf18:	f7fb fd68 	bl	80089ec <memset>
 800cf1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf24:	4620      	mov	r0, r4
 800cf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf28:	3468      	adds	r4, #104	; 0x68
 800cf2a:	e7d9      	b.n	800cee0 <__sfp+0x1c>
 800cf2c:	2104      	movs	r1, #4
 800cf2e:	4638      	mov	r0, r7
 800cf30:	f7ff ff62 	bl	800cdf8 <__sfmoreglue>
 800cf34:	4604      	mov	r4, r0
 800cf36:	6030      	str	r0, [r6, #0]
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d1d5      	bne.n	800cee8 <__sfp+0x24>
 800cf3c:	f7ff ff78 	bl	800ce30 <__sfp_lock_release>
 800cf40:	230c      	movs	r3, #12
 800cf42:	603b      	str	r3, [r7, #0]
 800cf44:	e7ee      	b.n	800cf24 <__sfp+0x60>
 800cf46:	bf00      	nop
 800cf48:	0800e1bc 	.word	0x0800e1bc
 800cf4c:	ffff0001 	.word	0xffff0001

0800cf50 <_fwalk_reent>:
 800cf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf54:	4606      	mov	r6, r0
 800cf56:	4688      	mov	r8, r1
 800cf58:	2700      	movs	r7, #0
 800cf5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf62:	f1b9 0901 	subs.w	r9, r9, #1
 800cf66:	d505      	bpl.n	800cf74 <_fwalk_reent+0x24>
 800cf68:	6824      	ldr	r4, [r4, #0]
 800cf6a:	2c00      	cmp	r4, #0
 800cf6c:	d1f7      	bne.n	800cf5e <_fwalk_reent+0xe>
 800cf6e:	4638      	mov	r0, r7
 800cf70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf74:	89ab      	ldrh	r3, [r5, #12]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d907      	bls.n	800cf8a <_fwalk_reent+0x3a>
 800cf7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	d003      	beq.n	800cf8a <_fwalk_reent+0x3a>
 800cf82:	4629      	mov	r1, r5
 800cf84:	4630      	mov	r0, r6
 800cf86:	47c0      	blx	r8
 800cf88:	4307      	orrs	r7, r0
 800cf8a:	3568      	adds	r5, #104	; 0x68
 800cf8c:	e7e9      	b.n	800cf62 <_fwalk_reent+0x12>

0800cf8e <__retarget_lock_init_recursive>:
 800cf8e:	4770      	bx	lr

0800cf90 <__retarget_lock_acquire_recursive>:
 800cf90:	4770      	bx	lr

0800cf92 <__retarget_lock_release_recursive>:
 800cf92:	4770      	bx	lr

0800cf94 <__swhatbuf_r>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	460e      	mov	r6, r1
 800cf98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf9c:	4614      	mov	r4, r2
 800cf9e:	2900      	cmp	r1, #0
 800cfa0:	461d      	mov	r5, r3
 800cfa2:	b096      	sub	sp, #88	; 0x58
 800cfa4:	da08      	bge.n	800cfb8 <__swhatbuf_r+0x24>
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfac:	602a      	str	r2, [r5, #0]
 800cfae:	061a      	lsls	r2, r3, #24
 800cfb0:	d410      	bmi.n	800cfd4 <__swhatbuf_r+0x40>
 800cfb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfb6:	e00e      	b.n	800cfd6 <__swhatbuf_r+0x42>
 800cfb8:	466a      	mov	r2, sp
 800cfba:	f000 f903 	bl	800d1c4 <_fstat_r>
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	dbf1      	blt.n	800cfa6 <__swhatbuf_r+0x12>
 800cfc2:	9a01      	ldr	r2, [sp, #4]
 800cfc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfcc:	425a      	negs	r2, r3
 800cfce:	415a      	adcs	r2, r3
 800cfd0:	602a      	str	r2, [r5, #0]
 800cfd2:	e7ee      	b.n	800cfb2 <__swhatbuf_r+0x1e>
 800cfd4:	2340      	movs	r3, #64	; 0x40
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	b016      	add	sp, #88	; 0x58
 800cfdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cfe0 <__smakebuf_r>:
 800cfe0:	898b      	ldrh	r3, [r1, #12]
 800cfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfe4:	079d      	lsls	r5, r3, #30
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	d507      	bpl.n	800cffc <__smakebuf_r+0x1c>
 800cfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cff0:	6023      	str	r3, [r4, #0]
 800cff2:	6123      	str	r3, [r4, #16]
 800cff4:	2301      	movs	r3, #1
 800cff6:	6163      	str	r3, [r4, #20]
 800cff8:	b002      	add	sp, #8
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	466a      	mov	r2, sp
 800cffe:	ab01      	add	r3, sp, #4
 800d000:	f7ff ffc8 	bl	800cf94 <__swhatbuf_r>
 800d004:	9900      	ldr	r1, [sp, #0]
 800d006:	4605      	mov	r5, r0
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff f961 	bl	800c2d0 <_malloc_r>
 800d00e:	b948      	cbnz	r0, 800d024 <__smakebuf_r+0x44>
 800d010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d014:	059a      	lsls	r2, r3, #22
 800d016:	d4ef      	bmi.n	800cff8 <__smakebuf_r+0x18>
 800d018:	f023 0303 	bic.w	r3, r3, #3
 800d01c:	f043 0302 	orr.w	r3, r3, #2
 800d020:	81a3      	strh	r3, [r4, #12]
 800d022:	e7e3      	b.n	800cfec <__smakebuf_r+0xc>
 800d024:	4b0d      	ldr	r3, [pc, #52]	; (800d05c <__smakebuf_r+0x7c>)
 800d026:	62b3      	str	r3, [r6, #40]	; 0x28
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	6020      	str	r0, [r4, #0]
 800d02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d030:	81a3      	strh	r3, [r4, #12]
 800d032:	9b00      	ldr	r3, [sp, #0]
 800d034:	6120      	str	r0, [r4, #16]
 800d036:	6163      	str	r3, [r4, #20]
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	b15b      	cbz	r3, 800d054 <__smakebuf_r+0x74>
 800d03c:	4630      	mov	r0, r6
 800d03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d042:	f000 f8d1 	bl	800d1e8 <_isatty_r>
 800d046:	b128      	cbz	r0, 800d054 <__smakebuf_r+0x74>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	f043 0301 	orr.w	r3, r3, #1
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	89a0      	ldrh	r0, [r4, #12]
 800d056:	4305      	orrs	r5, r0
 800d058:	81a5      	strh	r5, [r4, #12]
 800d05a:	e7cd      	b.n	800cff8 <__smakebuf_r+0x18>
 800d05c:	0800cded 	.word	0x0800cded

0800d060 <_malloc_usable_size_r>:
 800d060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d064:	1f18      	subs	r0, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	bfbc      	itt	lt
 800d06a:	580b      	ldrlt	r3, [r1, r0]
 800d06c:	18c0      	addlt	r0, r0, r3
 800d06e:	4770      	bx	lr

0800d070 <_raise_r>:
 800d070:	291f      	cmp	r1, #31
 800d072:	b538      	push	{r3, r4, r5, lr}
 800d074:	4604      	mov	r4, r0
 800d076:	460d      	mov	r5, r1
 800d078:	d904      	bls.n	800d084 <_raise_r+0x14>
 800d07a:	2316      	movs	r3, #22
 800d07c:	6003      	str	r3, [r0, #0]
 800d07e:	f04f 30ff 	mov.w	r0, #4294967295
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d086:	b112      	cbz	r2, 800d08e <_raise_r+0x1e>
 800d088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d08c:	b94b      	cbnz	r3, 800d0a2 <_raise_r+0x32>
 800d08e:	4620      	mov	r0, r4
 800d090:	f000 f830 	bl	800d0f4 <_getpid_r>
 800d094:	462a      	mov	r2, r5
 800d096:	4601      	mov	r1, r0
 800d098:	4620      	mov	r0, r4
 800d09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09e:	f000 b817 	b.w	800d0d0 <_kill_r>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d00a      	beq.n	800d0bc <_raise_r+0x4c>
 800d0a6:	1c59      	adds	r1, r3, #1
 800d0a8:	d103      	bne.n	800d0b2 <_raise_r+0x42>
 800d0aa:	2316      	movs	r3, #22
 800d0ac:	6003      	str	r3, [r0, #0]
 800d0ae:	2001      	movs	r0, #1
 800d0b0:	e7e7      	b.n	800d082 <_raise_r+0x12>
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0ba:	4798      	blx	r3
 800d0bc:	2000      	movs	r0, #0
 800d0be:	e7e0      	b.n	800d082 <_raise_r+0x12>

0800d0c0 <raise>:
 800d0c0:	4b02      	ldr	r3, [pc, #8]	; (800d0cc <raise+0xc>)
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	6818      	ldr	r0, [r3, #0]
 800d0c6:	f7ff bfd3 	b.w	800d070 <_raise_r>
 800d0ca:	bf00      	nop
 800d0cc:	2000001c 	.word	0x2000001c

0800d0d0 <_kill_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4d06      	ldr	r5, [pc, #24]	; (800d0f0 <_kill_r+0x20>)
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	4608      	mov	r0, r1
 800d0da:	4611      	mov	r1, r2
 800d0dc:	602b      	str	r3, [r5, #0]
 800d0de:	f7f5 fb3a 	bl	8002756 <_kill>
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	d102      	bne.n	800d0ec <_kill_r+0x1c>
 800d0e6:	682b      	ldr	r3, [r5, #0]
 800d0e8:	b103      	cbz	r3, 800d0ec <_kill_r+0x1c>
 800d0ea:	6023      	str	r3, [r4, #0]
 800d0ec:	bd38      	pop	{r3, r4, r5, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20002f5c 	.word	0x20002f5c

0800d0f4 <_getpid_r>:
 800d0f4:	f7f5 bb28 	b.w	8002748 <_getpid>

0800d0f8 <__sread>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d100:	f000 f894 	bl	800d22c <_read_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	bfab      	itete	ge
 800d108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d10a:	89a3      	ldrhlt	r3, [r4, #12]
 800d10c:	181b      	addge	r3, r3, r0
 800d10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d112:	bfac      	ite	ge
 800d114:	6563      	strge	r3, [r4, #84]	; 0x54
 800d116:	81a3      	strhlt	r3, [r4, #12]
 800d118:	bd10      	pop	{r4, pc}

0800d11a <__swrite>:
 800d11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11e:	461f      	mov	r7, r3
 800d120:	898b      	ldrh	r3, [r1, #12]
 800d122:	4605      	mov	r5, r0
 800d124:	05db      	lsls	r3, r3, #23
 800d126:	460c      	mov	r4, r1
 800d128:	4616      	mov	r6, r2
 800d12a:	d505      	bpl.n	800d138 <__swrite+0x1e>
 800d12c:	2302      	movs	r3, #2
 800d12e:	2200      	movs	r2, #0
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f000 f868 	bl	800d208 <_lseek_r>
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	4632      	mov	r2, r6
 800d13c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	4628      	mov	r0, r5
 800d144:	463b      	mov	r3, r7
 800d146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d14e:	f000 b817 	b.w	800d180 <_write_r>

0800d152 <__sseek>:
 800d152:	b510      	push	{r4, lr}
 800d154:	460c      	mov	r4, r1
 800d156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15a:	f000 f855 	bl	800d208 <_lseek_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	89a3      	ldrh	r3, [r4, #12]
 800d162:	bf15      	itete	ne
 800d164:	6560      	strne	r0, [r4, #84]	; 0x54
 800d166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d16e:	81a3      	strheq	r3, [r4, #12]
 800d170:	bf18      	it	ne
 800d172:	81a3      	strhne	r3, [r4, #12]
 800d174:	bd10      	pop	{r4, pc}

0800d176 <__sclose>:
 800d176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17a:	f000 b813 	b.w	800d1a4 <_close_r>
	...

0800d180 <_write_r>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	4611      	mov	r1, r2
 800d188:	2200      	movs	r2, #0
 800d18a:	4d05      	ldr	r5, [pc, #20]	; (800d1a0 <_write_r+0x20>)
 800d18c:	602a      	str	r2, [r5, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	f7f5 fb18 	bl	80027c4 <_write>
 800d194:	1c43      	adds	r3, r0, #1
 800d196:	d102      	bne.n	800d19e <_write_r+0x1e>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	b103      	cbz	r3, 800d19e <_write_r+0x1e>
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	20002f5c 	.word	0x20002f5c

0800d1a4 <_close_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4d05      	ldr	r5, [pc, #20]	; (800d1c0 <_close_r+0x1c>)
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	f7f5 fb24 	bl	80027fc <_close>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_close_r+0x1a>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_close_r+0x1a>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	20002f5c 	.word	0x20002f5c

0800d1c4 <_fstat_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4d06      	ldr	r5, [pc, #24]	; (800d1e4 <_fstat_r+0x20>)
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	602b      	str	r3, [r5, #0]
 800d1d2:	f7f5 fb1e 	bl	8002812 <_fstat>
 800d1d6:	1c43      	adds	r3, r0, #1
 800d1d8:	d102      	bne.n	800d1e0 <_fstat_r+0x1c>
 800d1da:	682b      	ldr	r3, [r5, #0]
 800d1dc:	b103      	cbz	r3, 800d1e0 <_fstat_r+0x1c>
 800d1de:	6023      	str	r3, [r4, #0]
 800d1e0:	bd38      	pop	{r3, r4, r5, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20002f5c 	.word	0x20002f5c

0800d1e8 <_isatty_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	4d05      	ldr	r5, [pc, #20]	; (800d204 <_isatty_r+0x1c>)
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	602b      	str	r3, [r5, #0]
 800d1f4:	f7f5 fb1c 	bl	8002830 <_isatty>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d102      	bne.n	800d202 <_isatty_r+0x1a>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	b103      	cbz	r3, 800d202 <_isatty_r+0x1a>
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	bd38      	pop	{r3, r4, r5, pc}
 800d204:	20002f5c 	.word	0x20002f5c

0800d208 <_lseek_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	4611      	mov	r1, r2
 800d210:	2200      	movs	r2, #0
 800d212:	4d05      	ldr	r5, [pc, #20]	; (800d228 <_lseek_r+0x20>)
 800d214:	602a      	str	r2, [r5, #0]
 800d216:	461a      	mov	r2, r3
 800d218:	f7f5 fb14 	bl	8002844 <_lseek>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_lseek_r+0x1e>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_lseek_r+0x1e>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	20002f5c 	.word	0x20002f5c

0800d22c <_read_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	4611      	mov	r1, r2
 800d234:	2200      	movs	r2, #0
 800d236:	4d05      	ldr	r5, [pc, #20]	; (800d24c <_read_r+0x20>)
 800d238:	602a      	str	r2, [r5, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f7f5 faa5 	bl	800278a <_read>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d102      	bne.n	800d24a <_read_r+0x1e>
 800d244:	682b      	ldr	r3, [r5, #0]
 800d246:	b103      	cbz	r3, 800d24a <_read_r+0x1e>
 800d248:	6023      	str	r3, [r4, #0]
 800d24a:	bd38      	pop	{r3, r4, r5, pc}
 800d24c:	20002f5c 	.word	0x20002f5c

0800d250 <_init>:
 800d250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d252:	bf00      	nop
 800d254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d256:	bc08      	pop	{r3}
 800d258:	469e      	mov	lr, r3
 800d25a:	4770      	bx	lr

0800d25c <_fini>:
 800d25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25e:	bf00      	nop
 800d260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d262:	bc08      	pop	{r3}
 800d264:	469e      	mov	lr, r3
 800d266:	4770      	bx	lr
