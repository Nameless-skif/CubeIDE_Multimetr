
CubeIDE_Multimetr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d808  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000154c  0800d918  0800d918  0001d918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee64  0800ee64  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ee64  0800ee64  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ee64  0800ee64  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee64  0800ee64  0001ee64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee68  0800ee68  0001ee68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ee6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003590  200001f0  0800f05c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003780  0800f05c  00023780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec26  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f14  00000000  00000000  0003ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00042d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b8  00000000  00000000  00044898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd42  00000000  00000000  00046250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5ae  00000000  00000000  00061f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009feca  00000000  00000000  00081540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012140a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a48  00000000  00000000  0012145c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d900 	.word	0x0800d900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d900 	.word	0x0800d900

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_d2lz>:
 8001124:	b538      	push	{r3, r4, r5, lr}
 8001126:	4605      	mov	r5, r0
 8001128:	460c      	mov	r4, r1
 800112a:	2200      	movs	r2, #0
 800112c:	2300      	movs	r3, #0
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff fc4d 	bl	80009d0 <__aeabi_dcmplt>
 8001136:	b928      	cbnz	r0, 8001144 <__aeabi_d2lz+0x20>
 8001138:	4628      	mov	r0, r5
 800113a:	4621      	mov	r1, r4
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001140:	f000 b80a 	b.w	8001158 <__aeabi_d2ulz>
 8001144:	4628      	mov	r0, r5
 8001146:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800114a:	f000 f805 	bl	8001158 <__aeabi_d2ulz>
 800114e:	4240      	negs	r0, r0
 8001150:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001154:	bd38      	pop	{r3, r4, r5, pc}
 8001156:	bf00      	nop

08001158 <__aeabi_d2ulz>:
 8001158:	b5d0      	push	{r4, r6, r7, lr}
 800115a:	2200      	movs	r2, #0
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <__aeabi_d2ulz+0x34>)
 800115e:	4606      	mov	r6, r0
 8001160:	460f      	mov	r7, r1
 8001162:	f7ff f9c3 	bl	80004ec <__aeabi_dmul>
 8001166:	f7ff fc99 	bl	8000a9c <__aeabi_d2uiz>
 800116a:	4604      	mov	r4, r0
 800116c:	f7ff f944 	bl	80003f8 <__aeabi_ui2d>
 8001170:	2200      	movs	r2, #0
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <__aeabi_d2ulz+0x38>)
 8001174:	f7ff f9ba 	bl	80004ec <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4630      	mov	r0, r6
 800117e:	4639      	mov	r1, r7
 8001180:	f7fe fffc 	bl	800017c <__aeabi_dsub>
 8001184:	f7ff fc8a 	bl	8000a9c <__aeabi_d2uiz>
 8001188:	4621      	mov	r1, r4
 800118a:	bdd0      	pop	{r4, r6, r7, pc}
 800118c:	3df00000 	.word	0x3df00000
 8001190:	41f00000 	.word	0x41f00000

08001194 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a4:	4810      	ldr	r0, [pc, #64]	; (80011e8 <ILI9341_Write_Command+0x54>)
 80011a6:	f002 fc95 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <ILI9341_Write_Command+0x54>)
 80011b0:	f002 fc90 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <ILI9341_Write_Command+0x58>)
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80011ba:	bf00      	nop
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <ILI9341_Write_Command+0x58>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f9      	beq.n	80011bc <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80011c8:	bf00      	nop
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <ILI9341_Write_Command+0x58>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 80011d6:	2201      	movs	r2, #1
 80011d8:	2102      	movs	r1, #2
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <ILI9341_Write_Command+0x54>)
 80011dc:	f002 fc7a 	bl	8003ad4 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40013000 	.word	0x40013000

080011f0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001200:	4810      	ldr	r0, [pc, #64]	; (8001244 <ILI9341_Write_Data+0x54>)
 8001202:	f002 fc67 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	480e      	ldr	r0, [pc, #56]	; (8001244 <ILI9341_Write_Data+0x54>)
 800120c:	f002 fc62 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <ILI9341_Write_Data+0x58>)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001216:	bf00      	nop
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <ILI9341_Write_Data+0x58>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <ILI9341_Write_Data+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001224:	bf00      	nop
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <ILI9341_Write_Data+0x58>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 8001232:	2201      	movs	r2, #1
 8001234:	2102      	movs	r1, #2
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <ILI9341_Write_Data+0x54>)
 8001238:	f002 fc4c 	bl	8003ad4 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40013000 	.word	0x40013000

0800124c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	4603      	mov	r3, r0
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
 8001266:	4613      	mov	r3, r2
 8001268:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001270:	4864      	ldr	r0, [pc, #400]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 8001272:	f002 fc2f 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001276:	2200      	movs	r2, #0
 8001278:	2102      	movs	r1, #2
 800127a:	4862      	ldr	r0, [pc, #392]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 800127c:	f002 fc2a 	bl	8003ad4 <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 8001280:	4b61      	ldr	r3, [pc, #388]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001282:	222a      	movs	r2, #42	; 0x2a
 8001284:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001286:	bf00      	nop
 8001288:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f9      	beq.n	8001288 <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001294:	bf00      	nop
 8001296:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a8:	4856      	ldr	r0, [pc, #344]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 80012aa:	f002 fc13 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012b8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012ba:	bf00      	nop
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <ILI9341_Set_Address+0x70>
	DISP_SPI->DR = (uint8_t)X1;
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012ce:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012d0:	bf00      	nop
 80012d2:	4b4d      	ldr	r3, [pc, #308]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f9      	beq.n	80012d2 <ILI9341_Set_Address+0x86>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b48      	ldr	r3, [pc, #288]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012e8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012ea:	bf00      	nop
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f9      	beq.n	80012ec <ILI9341_Set_Address+0xa0>
	DISP_SPI->DR = (uint8_t)X2;
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80012fe:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001300:	bf00      	nop
 8001302:	4b41      	ldr	r3, [pc, #260]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f9      	beq.n	8001302 <ILI9341_Set_Address+0xb6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800130e:	bf00      	nop
 8001310:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <ILI9341_Set_Address+0xc4>

	DISP_DC_CMD;
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001322:	4838      	ldr	r0, [pc, #224]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 8001324:	f002 fbd6 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 800132a:	222b      	movs	r2, #43	; 0x2b
 800132c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800132e:	bf00      	nop
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f9      	beq.n	8001330 <ILI9341_Set_Address+0xe4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800133c:	bf00      	nop
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <ILI9341_Set_Address+0xf2>

	DISP_DC_DATA;
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001350:	482c      	ldr	r0, [pc, #176]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 8001352:	f002 fbbf 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b29b      	uxth	r3, r3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001360:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001362:	bf00      	nop
 8001364:	4b28      	ldr	r3, [pc, #160]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f9      	beq.n	8001364 <ILI9341_Set_Address+0x118>
	DISP_SPI->DR = (uint8_t)Y1;
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001376:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001378:	bf00      	nop
 800137a:	4b23      	ldr	r3, [pc, #140]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f9      	beq.n	800137a <ILI9341_Set_Address+0x12e>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 8001386:	883b      	ldrh	r3, [r7, #0]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b29b      	uxth	r3, r3
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001390:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001392:	bf00      	nop
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f9      	beq.n	8001394 <ILI9341_Set_Address+0x148>
	DISP_SPI->DR = (uint8_t)Y2;
 80013a0:	883b      	ldrh	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013a6:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013a8:	bf00      	nop
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f9      	beq.n	80013aa <ILI9341_Set_Address+0x15e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80013b6:	bf00      	nop
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <ILI9341_Set_Address+0x16c>

	DISP_DC_CMD;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ca:	480e      	ldr	r0, [pc, #56]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 80013cc:	f002 fb82 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013d2:	222c      	movs	r2, #44	; 0x2c
 80013d4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013d6:	bf00      	nop
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f9      	beq.n	80013d8 <ILI9341_Set_Address+0x18c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80013e4:	bf00      	nop
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <ILI9341_Set_Address+0x1bc>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f9      	bne.n	80013e6 <ILI9341_Set_Address+0x19a>
	DISP_CS_UNSELECT;
 80013f2:	2201      	movs	r2, #1
 80013f4:	2102      	movs	r1, #2
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <ILI9341_Set_Address+0x1b8>)
 80013f8:	f002 fb6c 	bl	8003ad4 <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40013000 	.word	0x40013000

0800140c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001416:	480b      	ldr	r0, [pc, #44]	; (8001444 <ILI9341_Reset+0x38>)
 8001418:	f002 fb5c 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800141c:	20c8      	movs	r0, #200	; 0xc8
 800141e:	f001 fdab 	bl	8002f78 <HAL_Delay>
	DISP_CS_SELECT;
 8001422:	2200      	movs	r2, #0
 8001424:	2102      	movs	r1, #2
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <ILI9341_Reset+0x38>)
 8001428:	f002 fb54 	bl	8003ad4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800142c:	20c8      	movs	r0, #200	; 0xc8
 800142e:	f001 fda3 	bl	8002f78 <HAL_Delay>
	DISP_RST_WORK;
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <ILI9341_Reset+0x38>)
 800143a:	f002 fb4b 	bl	8003ad4 <HAL_GPIO_WritePin>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40010c00 	.word	0x40010c00

08001448 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001458:	482e      	ldr	r0, [pc, #184]	; (8001514 <ILI9341_Set_Rotation+0xcc>)
 800145a:	f002 fb3b 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	482c      	ldr	r0, [pc, #176]	; (8001514 <ILI9341_Set_Rotation+0xcc>)
 8001464:	f002 fb36 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <ILI9341_Set_Rotation+0xd0>)
 800146a:	2236      	movs	r2, #54	; 0x36
 800146c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800146e:	bf00      	nop
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <ILI9341_Set_Rotation+0xd0>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f9      	beq.n	8001470 <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800147c:	bf00      	nop
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <ILI9341_Set_Rotation+0xd0>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f9      	bne.n	800147e <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 800148a:	2201      	movs	r2, #1
 800148c:	2102      	movs	r1, #2
 800148e:	4821      	ldr	r0, [pc, #132]	; (8001514 <ILI9341_Set_Rotation+0xcc>)
 8001490:	f002 fb20 	bl	8003ad4 <HAL_GPIO_WritePin>

	switch(Rotation)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d836      	bhi.n	8001508 <ILI9341_Set_Rotation+0xc0>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <ILI9341_Set_Rotation+0x58>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014c7 	.word	0x080014c7
 80014a8:	080014dd 	.word	0x080014dd
 80014ac:	080014f3 	.word	0x080014f3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014b0:	2048      	movs	r0, #72	; 0x48
 80014b2:	f7ff fe9d 	bl	80011f0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <ILI9341_Set_Rotation+0xd4>)
 80014b8:	22f0      	movs	r2, #240	; 0xf0
 80014ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <ILI9341_Set_Rotation+0xd8>)
 80014be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014c2:	801a      	strh	r2, [r3, #0]
			break;
 80014c4:	e021      	b.n	800150a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80014c6:	2028      	movs	r0, #40	; 0x28
 80014c8:	f7ff fe92 	bl	80011f0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <ILI9341_Set_Rotation+0xd4>)
 80014ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014d2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <ILI9341_Set_Rotation+0xd8>)
 80014d6:	22f0      	movs	r2, #240	; 0xf0
 80014d8:	801a      	strh	r2, [r3, #0]
			break;
 80014da:	e016      	b.n	800150a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80014dc:	2088      	movs	r0, #136	; 0x88
 80014de:	f7ff fe87 	bl	80011f0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <ILI9341_Set_Rotation+0xd4>)
 80014e4:	22f0      	movs	r2, #240	; 0xf0
 80014e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <ILI9341_Set_Rotation+0xd8>)
 80014ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014ee:	801a      	strh	r2, [r3, #0]
			break;
 80014f0:	e00b      	b.n	800150a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80014f2:	20e8      	movs	r0, #232	; 0xe8
 80014f4:	f7ff fe7c 	bl	80011f0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <ILI9341_Set_Rotation+0xd4>)
 80014fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <ILI9341_Set_Rotation+0xd8>)
 8001502:	22f0      	movs	r2, #240	; 0xf0
 8001504:	801a      	strh	r2, [r3, #0]
			break;
 8001506:	e000      	b.n	800150a <ILI9341_Set_Rotation+0xc2>
		default:
			break;
 8001508:	bf00      	nop
	}
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40013000 	.word	0x40013000
 800151c:	20000002 	.word	0x20000002
 8001520:	20000000 	.word	0x20000000

08001524 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4885      	ldr	r0, [pc, #532]	; (8001744 <ILI9341_Init+0x220>)
 8001530:	f002 fad0 	bl	8003ad4 <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8001534:	f7ff ff6a 	bl	800140c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fe2b 	bl	8001194 <ILI9341_Write_Command>
	HAL_Delay(1000);
 800153e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001542:	f001 fd19 	bl	8002f78 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8001546:	20cb      	movs	r0, #203	; 0xcb
 8001548:	f7ff fe24 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 800154c:	2039      	movs	r0, #57	; 0x39
 800154e:	f7ff fe4f 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8001552:	202c      	movs	r0, #44	; 0x2c
 8001554:	f7ff fe4c 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff fe49 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 800155e:	2034      	movs	r0, #52	; 0x34
 8001560:	f7ff fe46 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8001564:	2002      	movs	r0, #2
 8001566:	f7ff fe43 	bl	80011f0 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800156a:	20cf      	movs	r0, #207	; 0xcf
 800156c:	f7ff fe12 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff fe3d 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8001576:	20c1      	movs	r0, #193	; 0xc1
 8001578:	f7ff fe3a 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 800157c:	2030      	movs	r0, #48	; 0x30
 800157e:	f7ff fe37 	bl	80011f0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8001582:	20e8      	movs	r0, #232	; 0xe8
 8001584:	f7ff fe06 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8001588:	2085      	movs	r0, #133	; 0x85
 800158a:	f7ff fe31 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fe2e 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f7ff fe2b 	bl	80011f0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800159a:	20ea      	movs	r0, #234	; 0xea
 800159c:	f7ff fdfa 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fe25 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fe22 	bl	80011f0 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80015ac:	20ed      	movs	r0, #237	; 0xed
 80015ae:	f7ff fdf1 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 80015b2:	2064      	movs	r0, #100	; 0x64
 80015b4:	f7ff fe1c 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f7ff fe19 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80015be:	2012      	movs	r0, #18
 80015c0:	f7ff fe16 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80015c4:	2081      	movs	r0, #129	; 0x81
 80015c6:	f7ff fe13 	bl	80011f0 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80015ca:	20f7      	movs	r0, #247	; 0xf7
 80015cc:	f7ff fde2 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80015d0:	2020      	movs	r0, #32
 80015d2:	f7ff fe0d 	bl	80011f0 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80015d6:	20c0      	movs	r0, #192	; 0xc0
 80015d8:	f7ff fddc 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80015dc:	2023      	movs	r0, #35	; 0x23
 80015de:	f7ff fe07 	bl	80011f0 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80015e2:	20c1      	movs	r0, #193	; 0xc1
 80015e4:	f7ff fdd6 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80015e8:	2010      	movs	r0, #16
 80015ea:	f7ff fe01 	bl	80011f0 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80015ee:	20c5      	movs	r0, #197	; 0xc5
 80015f0:	f7ff fdd0 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80015f4:	203e      	movs	r0, #62	; 0x3e
 80015f6:	f7ff fdfb 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80015fa:	2028      	movs	r0, #40	; 0x28
 80015fc:	f7ff fdf8 	bl	80011f0 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8001600:	20c7      	movs	r0, #199	; 0xc7
 8001602:	f7ff fdc7 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8001606:	2086      	movs	r0, #134	; 0x86
 8001608:	f7ff fdf2 	bl	80011f0 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 800160c:	2036      	movs	r0, #54	; 0x36
 800160e:	f7ff fdc1 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8001612:	2048      	movs	r0, #72	; 0x48
 8001614:	f7ff fdec 	bl	80011f0 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8001618:	203a      	movs	r0, #58	; 0x3a
 800161a:	f7ff fdbb 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 800161e:	2055      	movs	r0, #85	; 0x55
 8001620:	f7ff fde6 	bl	80011f0 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8001624:	20b1      	movs	r0, #177	; 0xb1
 8001626:	f7ff fdb5 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fde0 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8001630:	2018      	movs	r0, #24
 8001632:	f7ff fddd 	bl	80011f0 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8001636:	20b6      	movs	r0, #182	; 0xb6
 8001638:	f7ff fdac 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 800163c:	2008      	movs	r0, #8
 800163e:	f7ff fdd7 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8001642:	2082      	movs	r0, #130	; 0x82
 8001644:	f7ff fdd4 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8001648:	2027      	movs	r0, #39	; 0x27
 800164a:	f7ff fdd1 	bl	80011f0 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800164e:	20f2      	movs	r0, #242	; 0xf2
 8001650:	f7ff fda0 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fdcb 	bl	80011f0 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800165a:	2026      	movs	r0, #38	; 0x26
 800165c:	f7ff fd9a 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fdc5 	bl	80011f0 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8001666:	20e0      	movs	r0, #224	; 0xe0
 8001668:	f7ff fd94 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 800166c:	200f      	movs	r0, #15
 800166e:	f7ff fdbf 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001672:	2031      	movs	r0, #49	; 0x31
 8001674:	f7ff fdbc 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8001678:	202b      	movs	r0, #43	; 0x2b
 800167a:	f7ff fdb9 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800167e:	200c      	movs	r0, #12
 8001680:	f7ff fdb6 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001684:	200e      	movs	r0, #14
 8001686:	f7ff fdb3 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800168a:	2008      	movs	r0, #8
 800168c:	f7ff fdb0 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8001690:	204e      	movs	r0, #78	; 0x4e
 8001692:	f7ff fdad 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8001696:	20f1      	movs	r0, #241	; 0xf1
 8001698:	f7ff fdaa 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 800169c:	2037      	movs	r0, #55	; 0x37
 800169e:	f7ff fda7 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80016a2:	2007      	movs	r0, #7
 80016a4:	f7ff fda4 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 80016a8:	2010      	movs	r0, #16
 80016aa:	f7ff fda1 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f7ff fd9e 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016b4:	200e      	movs	r0, #14
 80016b6:	f7ff fd9b 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 80016ba:	2009      	movs	r0, #9
 80016bc:	f7ff fd98 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fd95 	bl	80011f0 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80016c6:	20e1      	movs	r0, #225	; 0xe1
 80016c8:	f7ff fd64 	bl	8001194 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fd8f 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016d2:	200e      	movs	r0, #14
 80016d4:	f7ff fd8c 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80016d8:	2014      	movs	r0, #20
 80016da:	f7ff fd89 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80016de:	2003      	movs	r0, #3
 80016e0:	f7ff fd86 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80016e4:	2011      	movs	r0, #17
 80016e6:	f7ff fd83 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80016ea:	2007      	movs	r0, #7
 80016ec:	f7ff fd80 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80016f0:	2031      	movs	r0, #49	; 0x31
 80016f2:	f7ff fd7d 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80016f6:	20c1      	movs	r0, #193	; 0xc1
 80016f8:	f7ff fd7a 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80016fc:	2048      	movs	r0, #72	; 0x48
 80016fe:	f7ff fd77 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001702:	2008      	movs	r0, #8
 8001704:	f7ff fd74 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001708:	200f      	movs	r0, #15
 800170a:	f7ff fd71 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800170e:	200c      	movs	r0, #12
 8001710:	f7ff fd6e 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001714:	2031      	movs	r0, #49	; 0x31
 8001716:	f7ff fd6b 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 800171a:	2036      	movs	r0, #54	; 0x36
 800171c:	f7ff fd68 	bl	80011f0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001720:	200f      	movs	r0, #15
 8001722:	f7ff fd65 	bl	80011f0 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8001726:	2011      	movs	r0, #17
 8001728:	f7ff fd34 	bl	8001194 <ILI9341_Write_Command>
	HAL_Delay(120);
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f001 fc23 	bl	8002f78 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8001732:	2029      	movs	r0, #41	; 0x29
 8001734:	f7ff fd2e 	bl	8001194 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001738:	2003      	movs	r0, #3
 800173a:	f7ff fe85 	bl	8001448 <ILI9341_Set_Rotation>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40010c00 	.word	0x40010c00

08001748 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800175a:	481e      	ldr	r0, [pc, #120]	; (80017d4 <ILI9341_Draw_Colour_Burst+0x8c>)
 800175c:	f002 f9ba 	bl	8003ad4 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001760:	2200      	movs	r2, #0
 8001762:	2102      	movs	r1, #2
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <ILI9341_Draw_Colour_Burst+0x8c>)
 8001766:	f002 f9b5 	bl	8003ad4 <HAL_GPIO_WritePin>

	while(Size > 0)
 800176a:	e018      	b.n	800179e <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 8001774:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001776:	bf00      	nop
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f9      	beq.n	8001778 <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 800178a:	bf00      	nop
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f9      	beq.n	800178c <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3b01      	subs	r3, #1
 800179c:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e3      	bne.n	800176c <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80017a4:	bf00      	nop
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f9      	beq.n	80017a6 <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80017b2:	bf00      	nop
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <ILI9341_Draw_Colour_Burst+0x90>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f9      	bne.n	80017b4 <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 80017c0:	2201      	movs	r2, #1
 80017c2:	2102      	movs	r1, #2
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <ILI9341_Draw_Colour_Burst+0x8c>)
 80017c6:	f002 f985 	bl	8003ad4 <HAL_GPIO_WritePin>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40013000 	.word	0x40013000

080017dc <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <ILI9341_Fill_Screen+0x44>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <ILI9341_Fill_Screen+0x48>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2100      	movs	r1, #0
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fd29 	bl	800124c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <ILI9341_Fill_Screen+0x44>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <ILI9341_Fill_Screen+0x48>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	461a      	mov	r2, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff98 	bl	8001748 <ILI9341_Draw_Colour_Burst>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000002 	.word	0x20000002
 8001824:	20000000 	.word	0x20000000

08001828 <ILI9341_WriteChar>:
}


// Вывод символа
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001828:	b082      	sub	sp, #8
 800182a:	b590      	push	{r4, r7, lr}
 800182c:	b087      	sub	sp, #28
 800182e:	af00      	add	r7, sp, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
 8001836:	460b      	mov	r3, r1
 8001838:	80bb      	strh	r3, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 800183e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001842:	b29a      	uxth	r2, r3
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4413      	add	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29c      	uxth	r4, r3
 800184e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001852:	b29a      	uxth	r2, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29b      	uxth	r3, r3
 800185e:	88b9      	ldrh	r1, [r7, #4]
 8001860:	88f8      	ldrh	r0, [r7, #6]
 8001862:	4622      	mov	r2, r4
 8001864:	f7ff fcf2 	bl	800124c <ILI9341_Set_Address>

    for(i = 0; i < font.height; i++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e03d      	b.n	80018ea <ILI9341_WriteChar+0xc2>
    {
        b = font.data[(ch - 32) * font.height + i];
 800186e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	3b20      	subs	r3, #32
 8001874:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4619      	mov	r1, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	440b      	add	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]

        for(j = 0; j < font.width; j++)
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	e023      	b.n	80018d8 <ILI9341_WriteChar+0xb0>
        {
            if((b << j) & 0x8000)
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <ILI9341_WriteChar+0x92>
            {
                ILI9341_Write_Data(color >> 8);
 80018a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fca1 	bl	80011f0 <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 80018ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc9c 	bl	80011f0 <ILI9341_Write_Data>
 80018b8:	e00b      	b.n	80018d2 <ILI9341_WriteChar+0xaa>
            }
            else
            {
                ILI9341_Write_Data(bgcolor >> 8);
 80018ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc94 	bl	80011f0 <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 80018c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc8f 	bl	80011f0 <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	3301      	adds	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018dc:	461a      	mov	r2, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d3d5      	bcc.n	8001890 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018ee:	461a      	mov	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d3bb      	bcc.n	800186e <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001902:	b002      	add	sp, #8
 8001904:	4770      	bx	lr

08001906 <ILI9341_WriteString>:

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001906:	b082      	sub	sp, #8
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af04      	add	r7, sp, #16
 800190e:	603a      	str	r2, [r7, #0]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	460b      	mov	r3, r1
 8001918:	80bb      	strh	r3, [r7, #4]
    while(*str)
 800191a:	e02e      	b.n	800197a <ILI9341_WriteString+0x74>
    {
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	7d3a      	ldrb	r2, [r7, #20]
 8001920:	4413      	add	r3, r2
 8001922:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001926:	db13      	blt.n	8001950 <ILI9341_WriteString+0x4a>
        {
            x = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	80bb      	strh	r3, [r7, #4]

            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001936:	88bb      	ldrh	r3, [r7, #4]
 8001938:	7d7a      	ldrb	r2, [r7, #21]
 800193a:	4413      	add	r3, r2
 800193c:	2bef      	cmp	r3, #239	; 0xef
 800193e:	dc21      	bgt.n	8001984 <ILI9341_WriteString+0x7e>
            {
                break;
            }

            if(*str == ' ')
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b20      	cmp	r3, #32
 8001946:	d103      	bne.n	8001950 <ILI9341_WriteString+0x4a>
            {
                str++;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	3301      	adds	r3, #1
 800194c:	603b      	str	r3, [r7, #0]
                continue;
 800194e:	e014      	b.n	800197a <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	88b9      	ldrh	r1, [r7, #4]
 8001956:	88f8      	ldrh	r0, [r7, #6]
 8001958:	8c3b      	ldrh	r3, [r7, #32]
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	8bbb      	ldrh	r3, [r7, #28]
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f7ff ff5f 	bl	8001828 <ILI9341_WriteChar>
        x += font.width;
 800196a:	7d3b      	ldrb	r3, [r7, #20]
 800196c:	b29a      	uxth	r2, r3
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4413      	add	r3, r2
 8001972:	80fb      	strh	r3, [r7, #6]
        str++;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	603b      	str	r3, [r7, #0]
    while(*str)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1cc      	bne.n	800191c <ILI9341_WriteString+0x16>
    }
}
 8001982:	e000      	b.n	8001986 <ILI9341_WriteString+0x80>
                break;
 8001984:	bf00      	nop
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001990:	b002      	add	sp, #8
 8001992:	4770      	bx	lr

08001994 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2302      	movs	r3, #2
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	f002 fae0 	bl	8003f80 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80019c0:	7b3b      	ldrb	r3, [r7, #12]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	7b7b      	ldrb	r3, [r7, #13]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	b29b      	uxth	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
 80019e4:	4613      	mov	r3, r2
 80019e6:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80019e8:	883b      	ldrh	r3, [r7, #0]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2302      	movs	r3, #2
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	f002 f9ba 	bl	8003d8c <HAL_I2C_Mem_Write>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffb1 	bl	8001994 <Read16>
 8001a32:	4603      	mov	r3, r0
 8001a34:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	b29b      	uxth	r3, r3

}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001a50:	2104      	movs	r1, #4
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ff9e 	bl	8001994 <Read16>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <INA219_ReadCurrent>:
 *          	config settings and current LSB
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @return: 	The current reading convereted to milliamps
 */
float INA219_ReadCurrent(INA219_t *ina219)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	float result = INA219_ReadCurrent_raw(ina219);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe9 	bl	8001a48 <INA219_ReadCurrent_raw>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff f939 	bl	8000cf0 <__aeabi_i2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60fb      	str	r3, [r7, #12]

	return (result / ina219_currentDivider_mA );
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <INA219_ReadCurrent+0x30>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fa39 	bl	8000f00 <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000210 	.word	0x20000210
 8001a9c:	00000000 	.word	0x00000000

08001aa0 <INA219_ReadShuntVolage>:
 * @retval:		Returns voltage level in mili-volts. This value represents the difference
 * 				between the voltage of the power supply and the bus voltage after the shunt
 * 				resistor.
 */
uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff72 	bl	8001994 <Read16>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcae 	bl	8000418 <__aeabi_i2d>
 8001abc:	a308      	add	r3, pc, #32	; (adr r3, 8001ae0 <INA219_ReadShuntVolage+0x40>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fd13 	bl	80004ec <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	f7fe ffe5 	bl	8000a9c <__aeabi_d2uiz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b29b      	uxth	r3, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	47ae147b 	.word	0x47ae147b
 8001ae4:	3f847ae1 	.word	0x3f847ae1

08001ae8 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	switch(batteryState)
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d019      	beq.n	8001b30 <INA219_HealthCheck+0x48>
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	dc26      	bgt.n	8001b4e <INA219_HealthCheck+0x66>
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <INA219_HealthCheck+0x22>
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d004      	beq.n	8001b12 <INA219_HealthCheck+0x2a>
 8001b08:	e021      	b.n	8001b4e <INA219_HealthCheck+0x66>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
			break;
 8001b10:	e021      	b.n	8001b56 <INA219_HealthCheck+0x6e>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fafb 	bl	8001110 <__aeabi_fcmpgt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <INA219_HealthCheck+0x40>
			{
				batteryState = Battery_OK;
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b26:	e016      	b.n	8001b56 <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	701a      	strb	r2, [r3, #0]
			break;
 8001b2e:	e012      	b.n	8001b56 <INA219_HealthCheck+0x6e>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff faec 	bl	8001110 <__aeabi_fcmpgt>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <INA219_HealthCheck+0x5e>
			{
				batteryState = Battery_OK;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b44:	e007      	b.n	8001b56 <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b48:	2202      	movs	r2, #2
 8001b4a:	701a      	strb	r2, [r3, #0]
			break;
 8001b4c:	e003      	b.n	8001b56 <INA219_HealthCheck+0x6e>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
			break;
 8001b54:	bf00      	nop
	}
	return batteryState;
 8001b56:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <INA219_HealthCheck+0x7c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]

}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000020c 	.word	0x2000020c

08001b68 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b74:	2100      	movs	r1, #0
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff2e 	bl	80019d8 <Write16>
	HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f001 f9fb 	bl	8002f78 <HAL_Delay>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001b96:	887b      	ldrh	r3, [r7, #2]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff1b 	bl	80019d8 <Write16>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff0b 	bl	80019d8 <Write16>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001bd4:	f643 139f 	movw	r3, #14751	; 0x399f
 8001bd8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <INA219_setCalibration_32V_2A+0x40>)
 8001bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <INA219_setCalibration_32V_2A+0x44>)
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <INA219_setCalibration_32V_2A+0x48>)
 8001be6:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <INA219_setCalibration_32V_2A+0x4c>)
 8001bea:	2202      	movs	r2, #2
 8001bec:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <INA219_setCalibration_32V_2A+0x40>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffc8 	bl	8001b8a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffd3 	bl	8001baa <INA219_setConfig>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000020e 	.word	0x2000020e
 8001c10:	20000210 	.word	0x20000210
 8001c14:	41200000 	.word	0x41200000
 8001c18:	20000214 	.word	0x20000214

08001c1c <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001c24:	f240 139f 	movw	r3, #415	; 0x19f
 8001c28:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 6505; 	//было 8192 у автора библтотеки
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <INA219_setCalibration_16V_400mA+0x40>)
 8001c2c:	f641 1269 	movw	r2, #6505	; 0x1969
 8001c30:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <INA219_setCalibration_16V_400mA+0x44>)
 8001c34:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <INA219_setCalibration_16V_400mA+0x48>)
 8001c36:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <INA219_setCalibration_16V_400mA+0x4c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <INA219_setCalibration_16V_400mA+0x40>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffa0 	bl	8001b8a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffab 	bl	8001baa <INA219_setConfig>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2000020e 	.word	0x2000020e
 8001c60:	20000210 	.word	0x20000210
 8001c64:	41a00000 	.word	0x41a00000
 8001c68:	20000214 	.word	0x20000214

08001c6c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	4613      	mov	r3, r2
 8001c78:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <INA219_Init+0x78>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	79fa      	ldrb	r2, [r7, #7]
 8001c8a:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <INA219_Init+0x7c>)
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <INA219_Init+0x80>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f002 fbd2 	bl	8004450 <HAL_I2C_IsDeviceReady>
 8001cac:	4603      	mov	r3, r0
 8001cae:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d111      	bne.n	8001cda <INA219_Init+0x6e>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <INA219_Init+0x84>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001cbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff ff0f 	bl	8001ae8 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff ff4c 	bl	8001b68 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff ff7b 	bl	8001bcc <INA219_setCalibration_32V_2A>

		return 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <INA219_Init+0x70>
	}

	else
	{
		return 0;
 8001cda:	2300      	movs	r3, #0
	}
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	2000020d 	.word	0x2000020d
 8001ce8:	20000210 	.word	0x20000210
 8001cec:	20000214 	.word	0x20000214
 8001cf0:	2000020c 	.word	0x2000020c

08001cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf8:	f001 f90c 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cfc:	f000 f88e 	bl	8001e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d00:	f000 f9ea 	bl	80020d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d04:	f000 f8e6 	bl	8001ed4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001d08:	f000 f950 	bl	8001fac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d0c:	f000 f9ba 	bl	8002084 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d10:	f000 f91e 	bl	8001f50 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d14:	f000 f980 	bl	8002018 <MX_SPI2_Init>
//   HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d18:	f004 fa10 	bl	800613c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, sizeof(QUEUE_t), &myQueue01_attributes);
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <main+0xc0>)
 8001d1e:	2128      	movs	r1, #40	; 0x28
 8001d20:	200a      	movs	r0, #10
 8001d22:	f004 fb49 	bl	80063b8 <osMessageQueueNew>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <main+0xc4>)
 8001d2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <main+0xc8>)
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4823      	ldr	r0, [pc, #140]	; (8001dc0 <main+0xcc>)
 8001d32:	f004 fa69 	bl	8006208 <osThreadNew>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4a22      	ldr	r2, [pc, #136]	; (8001dc4 <main+0xd0>)
 8001d3a:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <main+0xd4>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4822      	ldr	r0, [pc, #136]	; (8001dcc <main+0xd8>)
 8001d42:	f004 fa61 	bl	8006208 <osThreadNew>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <main+0xdc>)
 8001d4a:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <main+0xe0>)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4821      	ldr	r0, [pc, #132]	; (8001dd8 <main+0xe4>)
 8001d52:	f004 fa59 	bl	8006208 <osThreadNew>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <main+0xe8>)
 8001d5a:	6013      	str	r3, [r2, #0]

  /* creation of TFT_Task */
  TFT_TaskHandle = osThreadNew(StartTFT_Task, NULL, &TFT_Task_attributes);
 8001d5c:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <main+0xec>)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4820      	ldr	r0, [pc, #128]	; (8001de4 <main+0xf0>)
 8001d62:	f004 fa51 	bl	8006208 <osThreadNew>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <main+0xf4>)
 8001d6a:	6013      	str	r3, [r2, #0]

  /* creation of INA219_Current */
  INA219_CurrentHandle = osThreadNew(StartINA219_Current_Task, NULL, &INA219_Current_attributes);
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <main+0xf8>)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	481f      	ldr	r0, [pc, #124]	; (8001df0 <main+0xfc>)
 8001d72:	f004 fa49 	bl	8006208 <osThreadNew>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <main+0x100>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* creation of InitMyDevice */
  InitMyDeviceHandle = osThreadNew(StartInitMyDevice, NULL, &InitMyDevice_attributes);
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <main+0x104>)
 8001d7e:	2100      	movs	r1, #0
 8001d80:	481e      	ldr	r0, [pc, #120]	; (8001dfc <main+0x108>)
 8001d82:	f004 fa41 	bl	8006208 <osThreadNew>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <main+0x10c>)
 8001d8a:	6013      	str	r3, [r2, #0]

  /* creation of INA219_vBus */
  INA219_vBusHandle = osThreadNew(INA219_vBus_Task, NULL, &INA219_vBus_attributes);
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	; (8001e04 <main+0x110>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	481d      	ldr	r0, [pc, #116]	; (8001e08 <main+0x114>)
 8001d92:	f004 fa39 	bl	8006208 <osThreadNew>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <main+0x118>)
 8001d9a:	6013      	str	r3, [r2, #0]

  /* creation of INA219_vShunt */
  INA219_vShuntHandle = osThreadNew(INA219_vShunt_Task, NULL, &INA219_vShunt_attributes);
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <main+0x11c>)
 8001d9e:	2100      	movs	r1, #0
 8001da0:	481c      	ldr	r0, [pc, #112]	; (8001e14 <main+0x120>)
 8001da2:	f004 fa31 	bl	8006208 <osThreadNew>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <main+0x124>)
 8001daa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001dac:	f004 f9f8 	bl	80061a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <main+0xbc>
 8001db2:	bf00      	nop
 8001db4:	0800e978 	.word	0x0800e978
 8001db8:	20001bec 	.word	0x20001bec
 8001dbc:	0800e858 	.word	0x0800e858
 8001dc0:	08002199 	.word	0x08002199
 8001dc4:	20000394 	.word	0x20000394
 8001dc8:	0800e87c 	.word	0x0800e87c
 8001dcc:	080021a9 	.word	0x080021a9
 8001dd0:	200005f4 	.word	0x200005f4
 8001dd4:	0800e8a0 	.word	0x0800e8a0
 8001dd8:	08002249 	.word	0x08002249
 8001ddc:	20000e24 	.word	0x20000e24
 8001de0:	0800e8c4 	.word	0x0800e8c4
 8001de4:	08002449 	.word	0x08002449
 8001de8:	20001084 	.word	0x20001084
 8001dec:	0800e8e8 	.word	0x0800e8e8
 8001df0:	08002561 	.word	0x08002561
 8001df4:	200012e4 	.word	0x200012e4
 8001df8:	0800e90c 	.word	0x0800e90c
 8001dfc:	080025d9 	.word	0x080025d9
 8001e00:	20001984 	.word	0x20001984
 8001e04:	0800e930 	.word	0x0800e930
 8001e08:	08002741 	.word	0x08002741
 8001e0c:	20001be4 	.word	0x20001be4
 8001e10:	0800e954 	.word	0x0800e954
 8001e14:	080027d9 	.word	0x080027d9
 8001e18:	20001be8 	.word	0x20001be8

08001e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b094      	sub	sp, #80	; 0x50
 8001e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e26:	2228      	movs	r2, #40	; 0x28
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f007 f936 	bl	800909c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 ffce 	bl	8004e14 <HAL_RCC_OscConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e7e:	f000 fcf7 	bl	8002870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e82:	230f      	movs	r3, #15
 8001e84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fa3a 	bl	8005318 <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001eaa:	f000 fce1 	bl	8002870 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eb6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fbea 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ec6:	f000 fcd3 	bl	8002870 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001ee6:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <MX_ADC1_Init+0x78>)
 8001ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eea:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001efe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001f12:	f001 f855 	bl	8002fc0 <HAL_ADC_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 fca8 	bl	8002870 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_ADC1_Init+0x74>)
 8001f32:	f001 f9d7 	bl	80032e4 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f3c:	f000 fc98 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000218 	.word	0x20000218
 8001f4c:	40012400 	.word	0x40012400

08001f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f56:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <MX_I2C1_Init+0x54>)
 8001f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f5c:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <MX_I2C1_Init+0x58>)
 8001f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <MX_I2C1_Init+0x50>)
 8001f8e:	f001 fdb9 	bl	8003b04 <HAL_I2C_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f98:	f000 fc6a 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000248 	.word	0x20000248
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	000186a0 	.word	0x000186a0

08001fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <MX_SPI1_Init+0x68>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_SPI1_Init+0x64>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <MX_SPI1_Init+0x64>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_SPI1_Init+0x64>)
 8001ff8:	220a      	movs	r2, #10
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <MX_SPI1_Init+0x64>)
 8001ffe:	f003 fbff 	bl	8005800 <HAL_SPI_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002008:	f000 fc32 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000029c 	.word	0x2000029c
 8002014:	40013000 	.word	0x40013000

08002018 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <MX_SPI2_Init+0x64>)
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <MX_SPI2_Init+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <MX_SPI2_Init+0x64>)
 8002024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_SPI2_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_SPI2_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <MX_SPI2_Init+0x64>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <MX_SPI2_Init+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <MX_SPI2_Init+0x64>)
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002048:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <MX_SPI2_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <MX_SPI2_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <MX_SPI2_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <MX_SPI2_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <MX_SPI2_Init+0x64>)
 8002064:	220a      	movs	r2, #10
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	; (800207c <MX_SPI2_Init+0x64>)
 800206a:	f003 fbc9 	bl	8005800 <HAL_SPI_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002074:	f000 fbfc 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200002f4 	.word	0x200002f4
 8002080:	40003800 	.word	0x40003800

08002084 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <MX_USART1_UART_Init+0x50>)
 800208c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 8002090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002094:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 80020aa:	220c      	movs	r2, #12
 80020ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_USART1_UART_Init+0x4c>)
 80020bc:	f003 fe6e 	bl	8005d9c <HAL_UART_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020c6:	f000 fbd3 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000034c 	.word	0x2000034c
 80020d4:	40013800 	.word	0x40013800

080020d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020de:	f107 0310 	add.w	r3, r7, #16
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <MX_GPIO_Init+0xb4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a26      	ldr	r2, [pc, #152]	; (800218c <MX_GPIO_Init+0xb4>)
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_GPIO_Init+0xb4>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_GPIO_Init+0xb4>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a20      	ldr	r2, [pc, #128]	; (800218c <MX_GPIO_Init+0xb4>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_GPIO_Init+0xb4>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_GPIO_Init+0xb4>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <MX_GPIO_Init+0xb4>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_GPIO_Init+0xb4>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_Blink_GPIO_Port, LED1_Blink_Pin, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2110      	movs	r1, #16
 8002138:	4815      	ldr	r0, [pc, #84]	; (8002190 <MX_GPIO_Init+0xb8>)
 800213a:	f001 fccb 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f640 4103 	movw	r1, #3075	; 0xc03
 8002144:	4813      	ldr	r0, [pc, #76]	; (8002194 <MX_GPIO_Init+0xbc>)
 8002146:	f001 fcc5 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Blink_Pin */
  GPIO_InitStruct.Pin = LED1_Blink_Pin;
 800214a:	2310      	movs	r3, #16
 800214c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2302      	movs	r3, #2
 8002158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_Blink_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	4619      	mov	r1, r3
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <MX_GPIO_Init+0xb8>)
 8002162:	f001 fb33 	bl	80037cc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CS_Pin TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8002166:	f640 4303 	movw	r3, #3075	; 0xc03
 800216a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2302      	movs	r3, #2
 8002176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_GPIO_Init+0xbc>)
 8002180:	f001 fb24 	bl	80037cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40010800 	.word	0x40010800
 8002194:	40010c00 	.word	0x40010c00

08002198 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f004 f8db 	bl	800635c <osDelay>
 80021a6:	e7fb      	b.n	80021a0 <StartDefaultTask+0x8>

080021a8 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b090      	sub	sp, #64	; 0x40
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
   QUEUE_t msg;
   float u_res =0;
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   char ADC_char_res[6];
  /* Infinite loop */
  for(;;)
  {

	HAL_ADC_Start(&hadc1);
 80021b6:	481e      	ldr	r0, [pc, #120]	; (8002230 <StartADC_Task+0x88>)
 80021b8:	f000 ffda 	bl	8003170 <HAL_ADC_Start>
	u_res = HAL_ADC_GetValue(&hadc1)* 3.3f / 4095.0f;
 80021bc:	481c      	ldr	r0, [pc, #112]	; (8002230 <StartADC_Task+0x88>)
 80021be:	f001 f885 	bl	80032cc <HAL_ADC_GetValue>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fd8f 	bl	8000ce8 <__aeabi_ui2f>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4919      	ldr	r1, [pc, #100]	; (8002234 <StartADC_Task+0x8c>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fde2 	bl	8000d98 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4918      	ldr	r1, [pc, #96]	; (8002238 <StartADC_Task+0x90>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fe91 	bl	8000f00 <__aeabi_fdiv>
 80021de:	4603      	mov	r3, r0
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf(ADC_char_res, "%1.3f", u_res);
 80021e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021e4:	f7fe f92a 	bl	800043c <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	f107 000c 	add.w	r0, r7, #12
 80021f0:	4912      	ldr	r1, [pc, #72]	; (800223c <StartADC_Task+0x94>)
 80021f2:	f007 fdcd 	bl	8009d90 <siprintf>
	strcpy(msg.Buf,ADC_char_res);
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f007 fde5 	bl	8009dd0 <strcpy>
	strcpy(msg.mess,"ADC");
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	331e      	adds	r3, #30
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <StartADC_Task+0x98>)
 800220e:	6810      	ldr	r0, [r2, #0]
 8002210:	6018      	str	r0, [r3, #0]
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <StartADC_Task+0x9c>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f107 0114 	add.w	r1, r7, #20
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	2200      	movs	r2, #0
 8002220:	f004 f950 	bl	80064c4 <osMessageQueuePut>
	osDelay(300);
 8002224:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002228:	f004 f898 	bl	800635c <osDelay>
	HAL_ADC_Start(&hadc1);
 800222c:	e7c3      	b.n	80021b6 <StartADC_Task+0xe>
 800222e:	bf00      	nop
 8002230:	20000218 	.word	0x20000218
 8002234:	40533333 	.word	0x40533333
 8002238:	457ff000 	.word	0x457ff000
 800223c:	0800d990 	.word	0x0800d990
 8002240:	0800d998 	.word	0x0800d998
 8002244:	20001bec 	.word	0x20001bec

08002248 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b0a0      	sub	sp, #128	; 0x80
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
   QUEUE_t msg;
   char message_ADC[] = "Value ADC = ";
 8002250:	4b72      	ldr	r3, [pc, #456]	; (800241c <StartUART_Task+0x1d4>)
 8002252:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002258:	c407      	stmia	r4!, {r0, r1, r2}
 800225a:	7023      	strb	r3, [r4, #0]
   char message_vBus[] = "Value vBus[V] = ";
 800225c:	4b70      	ldr	r3, [pc, #448]	; (8002420 <StartUART_Task+0x1d8>)
 800225e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002262:	461d      	mov	r5, r3
 8002264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	7023      	strb	r3, [r4, #0]
   char message_vShunt[] = "Value vShunt[mV] = ";
 800226c:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <StartUART_Task+0x1dc>)
 800226e:	f107 0420 	add.w	r4, r7, #32
 8002272:	461d      	mov	r5, r3
 8002274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	6023      	str	r3, [r4, #0]
   char message_Current[] = "Value Current[mA] = ";
 800227c:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <StartUART_Task+0x1e0>)
 800227e:	f107 0408 	add.w	r4, r7, #8
 8002282:	461d      	mov	r5, r3
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800228c:	6020      	str	r0, [r4, #0]
 800228e:	3404      	adds	r4, #4
 8002290:	7021      	strb	r1, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 8002292:	4b66      	ldr	r3, [pc, #408]	; (800242c <StartUART_Task+0x1e4>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	2200      	movs	r2, #0
 80022a0:	f004 f984 	bl	80065ac <osMessageQueueGet>
	  if(!strcmp(msg.mess, "ADC")) {
 80022a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022a8:	331e      	adds	r3, #30
 80022aa:	4961      	ldr	r1, [pc, #388]	; (8002430 <StartUART_Task+0x1e8>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fd ff4f 	bl	8000150 <strcmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d123      	bne.n	8002300 <StartUART_Task+0xb8>
		    HAL_UART_Transmit(&huart1, (uint8_t*)message_ADC, strlen(message_ADC), osWaitForever);
 80022b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fd ff51 	bl	8000164 <strlen>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	4859      	ldr	r0, [pc, #356]	; (8002434 <StartUART_Task+0x1ec>)
 80022d0:	f003 fdb4 	bl	8005e3c <HAL_UART_Transmit>
		  	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 80022d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fd ff43 	bl	8000164 <strlen>
 80022de:	4603      	mov	r3, r0
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ea:	4852      	ldr	r0, [pc, #328]	; (8002434 <StartUART_Task+0x1ec>)
 80022ec:	f003 fda6 	bl	8005e3c <HAL_UART_Transmit>
		  	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	2202      	movs	r2, #2
 80022f6:	4950      	ldr	r1, [pc, #320]	; (8002438 <StartUART_Task+0x1f0>)
 80022f8:	484e      	ldr	r0, [pc, #312]	; (8002434 <StartUART_Task+0x1ec>)
 80022fa:	f003 fd9f 	bl	8005e3c <HAL_UART_Transmit>
 80022fe:	e088      	b.n	8002412 <StartUART_Task+0x1ca>
	  		 }
	  else if(!strcmp(msg.mess, "vBus")){
 8002300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002304:	331e      	adds	r3, #30
 8002306:	494d      	ldr	r1, [pc, #308]	; (800243c <StartUART_Task+0x1f4>)
 8002308:	4618      	mov	r0, r3
 800230a:	f7fd ff21 	bl	8000150 <strcmp>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d123      	bne.n	800235c <StartUART_Task+0x114>
		    HAL_UART_Transmit(&huart1, (uint8_t*)message_vBus, strlen(message_vBus), osWaitForever);
 8002314:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002318:	4618      	mov	r0, r3
 800231a:	f7fd ff23 	bl	8000164 <strlen>
 800231e:	4603      	mov	r3, r0
 8002320:	b29a      	uxth	r2, r3
 8002322:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	4842      	ldr	r0, [pc, #264]	; (8002434 <StartUART_Task+0x1ec>)
 800232c:	f003 fd86 	bl	8005e3c <HAL_UART_Transmit>
		  	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 8002330:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002334:	4618      	mov	r0, r3
 8002336:	f7fd ff15 	bl	8000164 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	b29a      	uxth	r2, r3
 800233e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	483b      	ldr	r0, [pc, #236]	; (8002434 <StartUART_Task+0x1ec>)
 8002348:	f003 fd78 	bl	8005e3c <HAL_UART_Transmit>
		  	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	2202      	movs	r2, #2
 8002352:	4939      	ldr	r1, [pc, #228]	; (8002438 <StartUART_Task+0x1f0>)
 8002354:	4837      	ldr	r0, [pc, #220]	; (8002434 <StartUART_Task+0x1ec>)
 8002356:	f003 fd71 	bl	8005e3c <HAL_UART_Transmit>
 800235a:	e05a      	b.n	8002412 <StartUART_Task+0x1ca>
	  	  	  }
	  else if(!strcmp(msg.mess, "vShunt")){
 800235c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002360:	331e      	adds	r3, #30
 8002362:	4937      	ldr	r1, [pc, #220]	; (8002440 <StartUART_Task+0x1f8>)
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd fef3 	bl	8000150 <strcmp>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d123      	bne.n	80023b8 <StartUART_Task+0x170>
		    HAL_UART_Transmit(&huart1, (uint8_t*)message_vShunt, strlen(message_vShunt), osWaitForever);
 8002370:	f107 0320 	add.w	r3, r7, #32
 8002374:	4618      	mov	r0, r3
 8002376:	f7fd fef5 	bl	8000164 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	b29a      	uxth	r2, r3
 800237e:	f107 0120 	add.w	r1, r7, #32
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	482b      	ldr	r0, [pc, #172]	; (8002434 <StartUART_Task+0x1ec>)
 8002388:	f003 fd58 	bl	8005e3c <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 800238c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd fee7 	bl	8000164 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	b29a      	uxth	r2, r3
 800239a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	4824      	ldr	r0, [pc, #144]	; (8002434 <StartUART_Task+0x1ec>)
 80023a4:	f003 fd4a 	bl	8005e3c <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	2202      	movs	r2, #2
 80023ae:	4922      	ldr	r1, [pc, #136]	; (8002438 <StartUART_Task+0x1f0>)
 80023b0:	4820      	ldr	r0, [pc, #128]	; (8002434 <StartUART_Task+0x1ec>)
 80023b2:	f003 fd43 	bl	8005e3c <HAL_UART_Transmit>
 80023b6:	e02c      	b.n	8002412 <StartUART_Task+0x1ca>
	  	  	  }
	  else if(!strcmp(msg.mess, "Current")){
 80023b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023bc:	331e      	adds	r3, #30
 80023be:	4921      	ldr	r1, [pc, #132]	; (8002444 <StartUART_Task+0x1fc>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fd fec5 	bl	8000150 <strcmp>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d122      	bne.n	8002412 <StartUART_Task+0x1ca>
		    HAL_UART_Transmit(&huart1, (uint8_t*)message_Current, strlen(message_Current), osWaitForever);
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fd fec7 	bl	8000164 <strlen>
 80023d6:	4603      	mov	r3, r0
 80023d8:	b29a      	uxth	r2, r3
 80023da:	f107 0108 	add.w	r1, r7, #8
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	4814      	ldr	r0, [pc, #80]	; (8002434 <StartUART_Task+0x1ec>)
 80023e4:	f003 fd2a 	bl	8005e3c <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 80023e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fd feb9 	bl	8000164 <strlen>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	480d      	ldr	r0, [pc, #52]	; (8002434 <StartUART_Task+0x1ec>)
 8002400:	f003 fd1c 	bl	8005e3c <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	2202      	movs	r2, #2
 800240a:	490b      	ldr	r1, [pc, #44]	; (8002438 <StartUART_Task+0x1f0>)
 800240c:	4809      	ldr	r0, [pc, #36]	; (8002434 <StartUART_Task+0x1ec>)
 800240e:	f003 fd15 	bl	8005e3c <HAL_UART_Transmit>
	  	  	  }
	osDelay(500);
 8002412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002416:	f003 ffa1 	bl	800635c <osDelay>
	  osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 800241a:	e73a      	b.n	8002292 <StartUART_Task+0x4a>
 800241c:	0800d9b8 	.word	0x0800d9b8
 8002420:	0800d9c8 	.word	0x0800d9c8
 8002424:	0800d9dc 	.word	0x0800d9dc
 8002428:	0800d9f0 	.word	0x0800d9f0
 800242c:	20001bec 	.word	0x20001bec
 8002430:	0800d998 	.word	0x0800d998
 8002434:	2000034c 	.word	0x2000034c
 8002438:	0800d99c 	.word	0x0800d99c
 800243c:	0800d9a0 	.word	0x0800d9a0
 8002440:	0800d9a8 	.word	0x0800d9a8
 8002444:	0800d9b0 	.word	0x0800d9b0

08002448 <StartTFT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFT_Task */
void StartTFT_Task(void *argument)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b090      	sub	sp, #64	; 0x40
 800244c:	af04      	add	r7, sp, #16
 800244e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFT_Task */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue01Handle, &msg,0 ,10);
 8002450:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <StartTFT_Task+0x100>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	f107 0108 	add.w	r1, r7, #8
 8002458:	230a      	movs	r3, #10
 800245a:	2200      	movs	r2, #0
 800245c:	f004 f8a6 	bl	80065ac <osMessageQueueGet>
	if(!strcmp(msg.mess, "ADC")) {
 8002460:	f107 0308 	add.w	r3, r7, #8
 8002464:	331e      	adds	r3, #30
 8002466:	4939      	ldr	r1, [pc, #228]	; (800254c <StartTFT_Task+0x104>)
 8002468:	4618      	mov	r0, r3
 800246a:	f7fd fe71 	bl	8000150 <strcmp>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d111      	bne.n	8002498 <StartTFT_Task+0x50>
			ILI9341_WriteString(0, 36, msg.Buf, Font_11x18, WHITE, MYFON);
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <StartTFT_Task+0x108>)
 8002476:	f107 0108 	add.w	r1, r7, #8
 800247a:	f642 1265 	movw	r2, #10597	; 0x2965
 800247e:	9202      	str	r2, [sp, #8]
 8002480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002484:	9201      	str	r2, [sp, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	9200      	str	r2, [sp, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	460a      	mov	r2, r1
 800248e:	2124      	movs	r1, #36	; 0x24
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fa38 	bl	8001906 <ILI9341_WriteString>
 8002496:	e052      	b.n	800253e <StartTFT_Task+0xf6>
		 }
	else if(!strcmp(msg.mess, "vBus")){
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	331e      	adds	r3, #30
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <StartTFT_Task+0x10c>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd fe55 	bl	8000150 <strcmp>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <StartTFT_Task+0x88>
			ILI9341_WriteString(150, 54, msg.Buf, Font_11x18, WHITE, MYFON);
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <StartTFT_Task+0x108>)
 80024ae:	f107 0108 	add.w	r1, r7, #8
 80024b2:	f642 1265 	movw	r2, #10597	; 0x2965
 80024b6:	9202      	str	r2, [sp, #8]
 80024b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024bc:	9201      	str	r2, [sp, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	9200      	str	r2, [sp, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	460a      	mov	r2, r1
 80024c6:	2136      	movs	r1, #54	; 0x36
 80024c8:	2096      	movs	r0, #150	; 0x96
 80024ca:	f7ff fa1c 	bl	8001906 <ILI9341_WriteString>
 80024ce:	e036      	b.n	800253e <StartTFT_Task+0xf6>
		}
	else if(!strcmp(msg.mess, "vShunt")){
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	331e      	adds	r3, #30
 80024d6:	4920      	ldr	r1, [pc, #128]	; (8002558 <StartTFT_Task+0x110>)
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd fe39 	bl	8000150 <strcmp>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <StartTFT_Task+0xc0>
			ILI9341_WriteString(150, 72, msg.Buf, Font_11x18, WHITE, MYFON);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <StartTFT_Task+0x108>)
 80024e6:	f107 0108 	add.w	r1, r7, #8
 80024ea:	f642 1265 	movw	r2, #10597	; 0x2965
 80024ee:	9202      	str	r2, [sp, #8]
 80024f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f4:	9201      	str	r2, [sp, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	9200      	str	r2, [sp, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	460a      	mov	r2, r1
 80024fe:	2148      	movs	r1, #72	; 0x48
 8002500:	2096      	movs	r0, #150	; 0x96
 8002502:	f7ff fa00 	bl	8001906 <ILI9341_WriteString>
 8002506:	e01a      	b.n	800253e <StartTFT_Task+0xf6>
			}
	else if(!strcmp(msg.mess, "Current")){
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	331e      	adds	r3, #30
 800250e:	4913      	ldr	r1, [pc, #76]	; (800255c <StartTFT_Task+0x114>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fe1d 	bl	8000150 <strcmp>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d110      	bne.n	800253e <StartTFT_Task+0xf6>
			ILI9341_WriteString(150, 90, msg.Buf, Font_11x18, WHITE, MYFON);
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <StartTFT_Task+0x108>)
 800251e:	f107 0108 	add.w	r1, r7, #8
 8002522:	f642 1265 	movw	r2, #10597	; 0x2965
 8002526:	9202      	str	r2, [sp, #8]
 8002528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252c:	9201      	str	r2, [sp, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	460a      	mov	r2, r1
 8002536:	215a      	movs	r1, #90	; 0x5a
 8002538:	2096      	movs	r0, #150	; 0x96
 800253a:	f7ff f9e4 	bl	8001906 <ILI9341_WriteString>
			}
    osDelay(100);
 800253e:	2064      	movs	r0, #100	; 0x64
 8002540:	f003 ff0c 	bl	800635c <osDelay>
	osMessageQueueGet(myQueue01Handle, &msg,0 ,10);
 8002544:	e784      	b.n	8002450 <StartTFT_Task+0x8>
 8002546:	bf00      	nop
 8002548:	20001bec 	.word	0x20001bec
 800254c:	0800d998 	.word	0x0800d998
 8002550:	20000004 	.word	0x20000004
 8002554:	0800d9a0 	.word	0x0800d9a0
 8002558:	0800d9a8 	.word	0x0800d9a8
 800255c:	0800d9b0 	.word	0x0800d9b0

08002560 <StartINA219_Current_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINA219_Current_Task */
void StartINA219_Current_Task(void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0a6      	sub	sp, #152	; 0x98
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  char uart_tx_buff[100];
  float current;
  /* Infinite loop */
  for(;;)
  {
	current = INA219_ReadCurrent(&ina219);
 8002568:	4817      	ldr	r0, [pc, #92]	; (80025c8 <StartINA219_Current_Task+0x68>)
 800256a:	f7ff fa7d 	bl	8001a68 <INA219_ReadCurrent>
 800256e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	sprintf(uart_tx_buff,"%4.2f",current);
 8002572:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002576:	f7fd ff61 	bl	800043c <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	f107 0008 	add.w	r0, r7, #8
 8002582:	4912      	ldr	r1, [pc, #72]	; (80025cc <StartINA219_Current_Task+0x6c>)
 8002584:	f007 fc04 	bl	8009d90 <siprintf>
	strcpy(msg.mess,"Current");
 8002588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800258c:	331e      	adds	r3, #30
 800258e:	4910      	ldr	r1, [pc, #64]	; (80025d0 <StartINA219_Current_Task+0x70>)
 8002590:	461a      	mov	r2, r3
 8002592:	460b      	mov	r3, r1
 8002594:	cb03      	ldmia	r3!, {r0, r1}
 8002596:	6010      	str	r0, [r2, #0]
 8002598:	6051      	str	r1, [r2, #4]
	strcpy(msg.Buf,uart_tx_buff);
 800259a:	f107 0208 	add.w	r2, r7, #8
 800259e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 fc13 	bl	8009dd0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <StartINA219_Current_Task+0x74>)
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	2200      	movs	r2, #0
 80025b8:	f003 ff84 	bl	80064c4 <osMessageQueuePut>
    osDelay(300);
 80025bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80025c0:	f003 fecc 	bl	800635c <osDelay>
	current = INA219_ReadCurrent(&ina219);
 80025c4:	e7d0      	b.n	8002568 <StartINA219_Current_Task+0x8>
 80025c6:	bf00      	nop
 80025c8:	20001dd0 	.word	0x20001dd0
 80025cc:	0800da08 	.word	0x0800da08
 80025d0:	0800d9b0 	.word	0x0800d9b0
 80025d4:	20001bec 	.word	0x20001bec

080025d8 <StartInitMyDevice>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInitMyDevice */
void StartInitMyDevice(void *argument)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0a0      	sub	sp, #128	; 0x80
 80025dc:	af04      	add	r7, sp, #16
 80025de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitMyDevice */
	 char uart_tx_buff[100];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <StartInitMyDevice+0x134>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <StartInitMyDevice+0x134>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
	   ILI9341_Init();
 80025f0:	f7fe ff98 	bl	8001524 <ILI9341_Init>
	   ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f7fe ff27 	bl	8001448 <ILI9341_Set_Rotation>

	   ILI9341_Fill_Screen(MYFON);
 80025fa:	f642 1065 	movw	r0, #10597	; 0x2965
 80025fe:	f7ff f8ed 	bl	80017dc <ILI9341_Fill_Screen>
	   ILI9341_WriteString(0, 0, "<---Pulsar--->", Font_11x18, WHITE, MYFON);
 8002602:	4b43      	ldr	r3, [pc, #268]	; (8002710 <StartInitMyDevice+0x138>)
 8002604:	f642 1265 	movw	r2, #10597	; 0x2965
 8002608:	9202      	str	r2, [sp, #8]
 800260a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260e:	9201      	str	r2, [sp, #4]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a3f      	ldr	r2, [pc, #252]	; (8002714 <StartInitMyDevice+0x13c>)
 8002618:	2100      	movs	r1, #0
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff f973 	bl	8001906 <ILI9341_WriteString>
	   ILI9341_WriteString(0, 18, "The value of the ADC", Font_11x18, WHITE, MYFON);
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <StartInitMyDevice+0x138>)
 8002622:	f642 1265 	movw	r2, #10597	; 0x2965
 8002626:	9202      	str	r2, [sp, #8]
 8002628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	9200      	str	r2, [sp, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a38      	ldr	r2, [pc, #224]	; (8002718 <StartInitMyDevice+0x140>)
 8002636:	2112      	movs	r1, #18
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff f964 	bl	8001906 <ILI9341_WriteString>
	   ILI9341_WriteString(60, 36, "V", Font_11x18, WHITE, MYFON);
 800263e:	4b34      	ldr	r3, [pc, #208]	; (8002710 <StartInitMyDevice+0x138>)
 8002640:	f642 1265 	movw	r2, #10597	; 0x2965
 8002644:	9202      	str	r2, [sp, #8]
 8002646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a32      	ldr	r2, [pc, #200]	; (800271c <StartInitMyDevice+0x144>)
 8002654:	2124      	movs	r1, #36	; 0x24
 8002656:	203c      	movs	r0, #60	; 0x3c
 8002658:	f7ff f955 	bl	8001906 <ILI9341_WriteString>
	   ILI9341_WriteString(0, 54, "vBus[V] ", Font_11x18, WHITE, MYFON);
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <StartInitMyDevice+0x138>)
 800265e:	f642 1265 	movw	r2, #10597	; 0x2965
 8002662:	9202      	str	r2, [sp, #8]
 8002664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002668:	9201      	str	r2, [sp, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	9200      	str	r2, [sp, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <StartInitMyDevice+0x148>)
 8002672:	2136      	movs	r1, #54	; 0x36
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff f946 	bl	8001906 <ILI9341_WriteString>
	   ILI9341_WriteString(0, 72, "vShunt[mV]", Font_11x18, WHITE, MYFON);
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <StartInitMyDevice+0x138>)
 800267c:	f642 1265 	movw	r2, #10597	; 0x2965
 8002680:	9202      	str	r2, [sp, #8]
 8002682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002686:	9201      	str	r2, [sp, #4]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	9200      	str	r2, [sp, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <StartInitMyDevice+0x14c>)
 8002690:	2148      	movs	r1, #72	; 0x48
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff f937 	bl	8001906 <ILI9341_WriteString>
	   ILI9341_WriteString(0, 90, "Current[mA] ", Font_11x18, WHITE, MYFON);
 8002698:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <StartInitMyDevice+0x138>)
 800269a:	f642 1265 	movw	r2, #10597	; 0x2965
 800269e:	9202      	str	r2, [sp, #8]
 80026a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a4:	9201      	str	r2, [sp, #4]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <StartInitMyDevice+0x150>)
 80026ae:	215a      	movs	r1, #90	; 0x5a
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7ff f928 	bl	8001906 <ILI9341_WriteString>
	   HAL_Delay(100);
 80026b6:	2064      	movs	r0, #100	; 0x64
 80026b8:	f000 fc5e 	bl	8002f78 <HAL_Delay>
	   /* Код для ina219   */
	   while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 80026bc:	bf00      	nop
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	491a      	ldr	r1, [pc, #104]	; (800272c <StartInitMyDevice+0x154>)
 80026c2:	481b      	ldr	r0, [pc, #108]	; (8002730 <StartInitMyDevice+0x158>)
 80026c4:	f7ff fad2 	bl	8001c6c <INA219_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f7      	beq.n	80026be <StartInitMyDevice+0xe6>
	        {

	         }
	    sprintf(uart_tx_buff, "**********		Hello INA219 app	 **********\r\n");
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	4918      	ldr	r1, [pc, #96]	; (8002734 <StartInitMyDevice+0x15c>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f007 fb5b 	bl	8009d90 <siprintf>
	    HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fd40 	bl	8000164 <strlen>
 80026e4:	4603      	mov	r3, r0
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f107 010c 	add.w	r1, r7, #12
 80026ec:	2364      	movs	r3, #100	; 0x64
 80026ee:	4812      	ldr	r0, [pc, #72]	; (8002738 <StartInitMyDevice+0x160>)
 80026f0:	f003 fba4 	bl	8005e3c <HAL_UART_Transmit>
	    INA219_setCalibration_16V_400mA(&ina219);
 80026f4:	480e      	ldr	r0, [pc, #56]	; (8002730 <StartInitMyDevice+0x158>)
 80026f6:	f7ff fa91 	bl	8001c1c <INA219_setCalibration_16V_400mA>

    osDelay(1);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f003 fe2e 	bl	800635c <osDelay>
    vTaskSuspend(InitMyDeviceHandle); //Блокировка задачи
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <StartInitMyDevice+0x164>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f005 f813 	bl	8007730 <vTaskSuspend>
  {
 800270a:	e769      	b.n	80025e0 <StartInitMyDevice+0x8>
 800270c:	2000029c 	.word	0x2000029c
 8002710:	20000004 	.word	0x20000004
 8002714:	0800da10 	.word	0x0800da10
 8002718:	0800da20 	.word	0x0800da20
 800271c:	0800da38 	.word	0x0800da38
 8002720:	0800da3c 	.word	0x0800da3c
 8002724:	0800da48 	.word	0x0800da48
 8002728:	0800da54 	.word	0x0800da54
 800272c:	20000248 	.word	0x20000248
 8002730:	20001dd0 	.word	0x20001dd0
 8002734:	0800da64 	.word	0x0800da64
 8002738:	2000034c 	.word	0x2000034c
 800273c:	20001984 	.word	0x20001984

08002740 <INA219_vBus_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INA219_vBus_Task */
void INA219_vBus_Task(void *argument)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0a6      	sub	sp, #152	; 0x98
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  char uart_tx_buff[100];
  float vbus;
  /* Infinite loop */
  for(;;)
  {
	vbus = INA219_ReadBusVoltage(&ina219)/ 1000.0; // переводим в В из мВ
 8002748:	481e      	ldr	r0, [pc, #120]	; (80027c4 <INA219_vBus_Task+0x84>)
 800274a:	f7ff f96a 	bl	8001a22 <INA219_ReadBusVoltage>
 800274e:	4603      	mov	r3, r0
 8002750:	4618      	mov	r0, r3
 8002752:	f7fd fe61 	bl	8000418 <__aeabi_i2d>
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <INA219_vBus_Task+0x88>)
 800275c:	f7fd fff0 	bl	8000740 <__aeabi_ddiv>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe f9b8 	bl	8000adc <__aeabi_d2f>
 800276c:	4603      	mov	r3, r0
 800276e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sprintf(uart_tx_buff, "%4.2f",vbus);
 8002772:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002776:	f7fd fe61 	bl	800043c <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	f107 0008 	add.w	r0, r7, #8
 8002782:	4912      	ldr	r1, [pc, #72]	; (80027cc <INA219_vBus_Task+0x8c>)
 8002784:	f007 fb04 	bl	8009d90 <siprintf>
	strcpy(msg.mess,"vBus");
 8002788:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800278c:	331e      	adds	r3, #30
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <INA219_vBus_Task+0x90>)
 8002790:	6810      	ldr	r0, [r2, #0]
 8002792:	6018      	str	r0, [r3, #0]
 8002794:	7912      	ldrb	r2, [r2, #4]
 8002796:	711a      	strb	r2, [r3, #4]
	strcpy(msg.Buf,uart_tx_buff);
 8002798:	f107 0208 	add.w	r2, r7, #8
 800279c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f007 fb14 	bl	8009dd0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <INA219_vBus_Task+0x94>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295
 80027b4:	2200      	movs	r2, #0
 80027b6:	f003 fe85 	bl	80064c4 <osMessageQueuePut>
    osDelay(70);
 80027ba:	2046      	movs	r0, #70	; 0x46
 80027bc:	f003 fdce 	bl	800635c <osDelay>
	vbus = INA219_ReadBusVoltage(&ina219)/ 1000.0; // переводим в В из мВ
 80027c0:	e7c2      	b.n	8002748 <INA219_vBus_Task+0x8>
 80027c2:	bf00      	nop
 80027c4:	20001dd0 	.word	0x20001dd0
 80027c8:	408f4000 	.word	0x408f4000
 80027cc:	0800da08 	.word	0x0800da08
 80027d0:	0800d9a0 	.word	0x0800d9a0
 80027d4:	20001bec 	.word	0x20001bec

080027d8 <INA219_vShunt_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INA219_vShunt_Task */
void INA219_vShunt_Task(void *argument)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0a6      	sub	sp, #152	; 0x98
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	 char uart_tx_buff[100];
	 uint16_t vShunt;
  /* Infinite loop */
  for(;;)
  {
	vShunt = INA219_ReadShuntVolage(&ina219);
 80027e0:	4816      	ldr	r0, [pc, #88]	; (800283c <INA219_vShunt_Task+0x64>)
 80027e2:	f7ff f95d 	bl	8001aa0 <INA219_ReadShuntVolage>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
//	sprintf(uart_tx_buff, "vShunt: %hu mV\r\n",vShunt);
	sprintf(uart_tx_buff, "%hu",vShunt);
 80027ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	4912      	ldr	r1, [pc, #72]	; (8002840 <INA219_vShunt_Task+0x68>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f007 faca 	bl	8009d90 <siprintf>
	strcpy(msg.mess,"vShunt");
 80027fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002800:	331e      	adds	r3, #30
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <INA219_vShunt_Task+0x6c>)
 8002804:	6810      	ldr	r0, [r2, #0]
 8002806:	6018      	str	r0, [r3, #0]
 8002808:	8891      	ldrh	r1, [r2, #4]
 800280a:	7992      	ldrb	r2, [r2, #6]
 800280c:	8099      	strh	r1, [r3, #4]
 800280e:	719a      	strb	r2, [r3, #6]
	strcpy(msg.Buf,uart_tx_buff);
 8002810:	f107 0208 	add.w	r2, r7, #8
 8002814:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f007 fad8 	bl	8009dd0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <INA219_vShunt_Task+0x70>)
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	2200      	movs	r2, #0
 800282e:	f003 fe49 	bl	80064c4 <osMessageQueuePut>
//	HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
	osDelay(300);
 8002832:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002836:	f003 fd91 	bl	800635c <osDelay>
	vShunt = INA219_ReadShuntVolage(&ina219);
 800283a:	e7d1      	b.n	80027e0 <INA219_vShunt_Task+0x8>
 800283c:	20001dd0 	.word	0x20001dd0
 8002840:	0800da90 	.word	0x0800da90
 8002844:	0800d9a8 	.word	0x0800d9a8
 8002848:	20001bec 	.word	0x20001bec

0800284c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800285e:	f000 fb6f 	bl	8002f40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40000800 	.word	0x40000800

08002870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002874:	b672      	cpsid	i
}
 8002876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002878:	e7fe      	b.n	8002878 <Error_Handler+0x8>
	...

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_MspInit+0x68>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_MspInit+0x68>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6193      	str	r3, [r2, #24]
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_MspInit+0x68>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_MspInit+0x68>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_MspInit+0x68>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_MspInit+0x68>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	210f      	movs	r1, #15
 80028b6:	f06f 0001 	mvn.w	r0, #1
 80028ba:	f000 ff5c 	bl	8003776 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_MspInit+0x6c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_MspInit+0x6c>)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010000 	.word	0x40010000

080028ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	f107 0310 	add.w	r3, r7, #16
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a14      	ldr	r2, [pc, #80]	; (8002958 <HAL_ADC_MspInit+0x6c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d121      	bne.n	8002950 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_ADC_MspInit+0x70>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_ADC_MspInit+0x70>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_ADC_MspInit+0x70>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_ADC_MspInit+0x70>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <HAL_ADC_MspInit+0x70>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_ADC_MspInit+0x70>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800293c:	2302      	movs	r3, #2
 800293e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002940:	2303      	movs	r3, #3
 8002942:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_ADC_MspInit+0x74>)
 800294c:	f000 ff3e 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002950:	bf00      	nop
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40012400 	.word	0x40012400
 800295c:	40021000 	.word	0x40021000
 8002960:	40010800 	.word	0x40010800

08002964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_I2C_MspInit+0x70>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d123      	bne.n	80029cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 800298a:	f043 0308 	orr.w	r3, r3, #8
 800298e:	6193      	str	r3, [r2, #24]
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a0:	2312      	movs	r3, #18
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4619      	mov	r1, r3
 80029ae:	480b      	ldr	r0, [pc, #44]	; (80029dc <HAL_I2C_MspInit+0x78>)
 80029b0:	f000 ff0c 	bl	80037cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029be:	61d3      	str	r3, [r2, #28]
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_I2C_MspInit+0x74>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40005400 	.word	0x40005400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40010c00 	.word	0x40010c00

080029e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0318 	add.w	r3, r7, #24
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_SPI_MspInit+0xf8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d130      	bne.n	8002a62 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a30:	23a0      	movs	r3, #160	; 0xa0
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	4619      	mov	r1, r3
 8002a42:	4827      	ldr	r0, [pc, #156]	; (8002ae0 <HAL_SPI_MspInit+0x100>)
 8002a44:	f000 fec2 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f107 0318 	add.w	r3, r7, #24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4821      	ldr	r0, [pc, #132]	; (8002ae0 <HAL_SPI_MspInit+0x100>)
 8002a5c:	f000 feb6 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a60:	e036      	b.n	8002ad0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_SPI_MspInit+0x104>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d131      	bne.n	8002ad0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a76:	61d3      	str	r3, [r2, #28]
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_SPI_MspInit+0xfc>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002a9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	f107 0318 	add.w	r3, r7, #24
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <HAL_SPI_MspInit+0x108>)
 8002ab2:	f000 fe8b 	bl	80037cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0318 	add.w	r3, r7, #24
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4807      	ldr	r0, [pc, #28]	; (8002ae8 <HAL_SPI_MspInit+0x108>)
 8002acc:	f000 fe7e 	bl	80037cc <HAL_GPIO_Init>
}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40013000 	.word	0x40013000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	40003800 	.word	0x40003800
 8002ae8:	40010c00 	.word	0x40010c00

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1c      	ldr	r2, [pc, #112]	; (8002b78 <HAL_UART_MspInit+0x8c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d131      	bne.n	8002b70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b2a:	f043 0304 	orr.w	r3, r3, #4
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_UART_MspInit+0x90>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0310 	add.w	r3, r7, #16
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480b      	ldr	r0, [pc, #44]	; (8002b80 <HAL_UART_MspInit+0x94>)
 8002b52:	f000 fe3b 	bl	80037cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	; (8002b80 <HAL_UART_MspInit+0x94>)
 8002b6c:	f000 fe2e 	bl	80037cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b70:	bf00      	nop
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010800 	.word	0x40010800

08002b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_InitTick+0xe8>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	; (8002c6c <HAL_InitTick+0xe8>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	61d3      	str	r3, [r2, #28]
 8002ba6:	4b31      	ldr	r3, [pc, #196]	; (8002c6c <HAL_InitTick+0xe8>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb2:	f107 0210 	add.w	r2, r7, #16
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 fd1b 	bl	80055f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bcc:	f002 fcec 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8002bd0:	6378      	str	r0, [r7, #52]	; 0x34
 8002bd2:	e004      	b.n	8002bde <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bd4:	f002 fce8 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_InitTick+0xec>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	3b01      	subs	r3, #1
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_InitTick+0xf0>)
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_InitTick+0xf4>)
 8002bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_InitTick+0xf0>)
 8002bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bf8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_InitTick+0xf0>)
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002c00:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_InitTick+0xf0>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_InitTick+0xf0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_InitTick+0xf0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002c12:	4818      	ldr	r0, [pc, #96]	; (8002c74 <HAL_InitTick+0xf0>)
 8002c14:	f002 fe78 	bl	8005908 <HAL_TIM_Base_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11b      	bne.n	8002c5e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002c26:	4813      	ldr	r0, [pc, #76]	; (8002c74 <HAL_InitTick+0xf0>)
 8002c28:	f002 fec6 	bl	80059b8 <HAL_TIM_Base_Start_IT>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d111      	bne.n	8002c5e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c3a:	201e      	movs	r0, #30
 8002c3c:	f000 fdb7 	bl	80037ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	d808      	bhi.n	8002c58 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002c46:	2200      	movs	r2, #0
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	201e      	movs	r0, #30
 8002c4c:	f000 fd93 	bl	8003776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_InitTick+0xf8>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e002      	b.n	8002c5e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3738      	adds	r7, #56	; 0x38
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	20001dd8 	.word	0x20001dd8
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	20000010 	.word	0x20000010

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	 ILI9341_WriteString(0, 54, " NMI_Handler Exception", Font_11x18, WHITE, MYFON);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <NMI_Handler+0x28>)
 8002c88:	f642 1265 	movw	r2, #10597	; 0x2965
 8002c8c:	9202      	str	r2, [sp, #8]
 8002c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c92:	9201      	str	r2, [sp, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	9200      	str	r2, [sp, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <NMI_Handler+0x2c>)
 8002c9c:	2136      	movs	r1, #54	; 0x36
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fe31 	bl	8001906 <ILI9341_WriteString>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <NMI_Handler+0x24>
 8002ca6:	bf00      	nop
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	0800da94 	.word	0x0800da94

08002cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ILI9341_WriteString(0, 54, "HardFault_Handler Exception", Font_11x18, WHITE, MYFON);
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HardFault_Handler+0x28>)
 8002cb8:	f642 1265 	movw	r2, #10597	; 0x2965
 8002cbc:	9202      	str	r2, [sp, #8]
 8002cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc2:	9201      	str	r2, [sp, #4]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	9200      	str	r2, [sp, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HardFault_Handler+0x2c>)
 8002ccc:	2136      	movs	r1, #54	; 0x36
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fe19 	bl	8001906 <ILI9341_WriteString>
 8002cd4:	e7ef      	b.n	8002cb6 <HardFault_Handler+0x6>
 8002cd6:	bf00      	nop
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	0800daac 	.word	0x0800daac

08002ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	ILI9341_WriteString(0, 54, "MemManage_Handler Exception", Font_11x18, WHITE, MYFON);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MemManage_Handler+0x28>)
 8002ce8:	f642 1265 	movw	r2, #10597	; 0x2965
 8002cec:	9202      	str	r2, [sp, #8]
 8002cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cf2:	9201      	str	r2, [sp, #4]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <MemManage_Handler+0x2c>)
 8002cfc:	2136      	movs	r1, #54	; 0x36
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe fe01 	bl	8001906 <ILI9341_WriteString>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	e7fe      	b.n	8002d04 <MemManage_Handler+0x24>
 8002d06:	bf00      	nop
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	0800dac8 	.word	0x0800dac8

08002d10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <BusFault_Handler+0x4>

08002d16 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <UsageFault_Handler+0x4>

08002d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM4_IRQHandler+0x10>)
 8002d2e:	f002 fe95 	bl	8005a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20001dd8 	.word	0x20001dd8

08002d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return 1;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <_kill>:

int _kill(int pid, int sig)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d54:	f006 f96a 	bl	800902c <__errno>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2216      	movs	r2, #22
 8002d5c:	601a      	str	r2, [r3, #0]
  return -1;
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <_exit>:

void _exit (int status)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d72:	f04f 31ff 	mov.w	r1, #4294967295
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffe7 	bl	8002d4a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d7c:	e7fe      	b.n	8002d7c <_exit+0x12>

08002d7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e00a      	b.n	8002da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d90:	f3af 8000 	nop.w
 8002d94:	4601      	mov	r1, r0
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	60ba      	str	r2, [r7, #8]
 8002d9c:	b2ca      	uxtb	r2, r1
 8002d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3301      	adds	r3, #1
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	dbf0      	blt.n	8002d90 <_read+0x12>
  }

  return len;
 8002dae:	687b      	ldr	r3, [r7, #4]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e009      	b.n	8002dde <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	60ba      	str	r2, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	dbf1      	blt.n	8002dca <_write+0x12>
  }
  return len;
 8002de6:	687b      	ldr	r3, [r7, #4]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <_close>:

int _close(int file)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e16:	605a      	str	r2, [r3, #4]
  return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <_isatty>:

int _isatty(int file)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e58:	4a14      	ldr	r2, [pc, #80]	; (8002eac <_sbrk+0x5c>)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <_sbrk+0x60>)
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d102      	bne.n	8002e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_sbrk+0x64>)
 8002e6e:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <_sbrk+0x68>)
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d207      	bcs.n	8002e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e80:	f006 f8d4 	bl	800902c <__errno>
 8002e84:	4603      	mov	r3, r0
 8002e86:	220c      	movs	r2, #12
 8002e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e009      	b.n	8002ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <_sbrk+0x64>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <_sbrk+0x64>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <_sbrk+0x64>)
 8002ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20005000 	.word	0x20005000
 8002eb0:	00000400 	.word	0x00000400
 8002eb4:	20001e20 	.word	0x20001e20
 8002eb8:	20003780 	.word	0x20003780

08002ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
;    bl  SystemInit
 8002ec8:	f7ff fff8 	bl	8002ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ece:	490c      	ldr	r1, [pc, #48]	; (8002f00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ee4:	4c09      	ldr	r4, [pc, #36]	; (8002f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f006 f8a1 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ef6:	f7fe fefd 	bl	8001cf4 <main>
  bx lr
 8002efa:	4770      	bx	lr
  ldr r0, =_sdata
 8002efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f00:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002f04:	0800ee6c 	.word	0x0800ee6c
  ldr r2, =_sbss
 8002f08:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002f0c:	20003780 	.word	0x20003780

08002f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_2_IRQHandler>
	...

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_Init+0x28>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_Init+0x28>)
 8002f1e:	f043 0310 	orr.w	r3, r3, #16
 8002f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f24:	2003      	movs	r0, #3
 8002f26:	f000 fc1b 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2a:	200f      	movs	r0, #15
 8002f2c:	f7ff fe2a 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f30:	f7ff fca4 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40022000 	.word	0x40022000

08002f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_IncTick+0x1c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_IncTick+0x20>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x20>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	20000014 	.word	0x20000014
 8002f60:	20001e24 	.word	0x20001e24

08002f64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return uwTick;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_GetTick+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20001e24 	.word	0x20001e24

08002f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f80:	f7ff fff0 	bl	8002f64 <HAL_GetTick>
 8002f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d005      	beq.n	8002f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_Delay+0x44>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9e:	bf00      	nop
 8002fa0:	f7ff ffe0 	bl	8002f64 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8f7      	bhi.n	8002fa0 <HAL_Delay+0x28>
  {
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000014 	.word	0x20000014

08002fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0be      	b.n	8003160 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fc74 	bl	80028ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 fabf 	bl	8003588 <ADC_ConversionStop_Disable>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8099 	bne.w	800314e <HAL_ADC_Init+0x18e>
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 8095 	bne.w	800314e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800302c:	f023 0302 	bic.w	r3, r3, #2
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003040:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7b1b      	ldrb	r3, [r3, #12]
 8003046:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003048:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4313      	orrs	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d003      	beq.n	8003062 <HAL_ADC_Init+0xa2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_ADC_Init+0xa8>
 8003062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003066:	e000      	b.n	800306a <HAL_ADC_Init+0xaa>
 8003068:	2300      	movs	r3, #0
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7d1b      	ldrb	r3, [r3, #20]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d119      	bne.n	80030ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7b1b      	ldrb	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	3b01      	subs	r3, #1
 8003086:	035a      	lsls	r2, r3, #13
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e00b      	b.n	80030ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f043 0220 	orr.w	r2, r3, #32
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f043 0201 	orr.w	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_ADC_Init+0x1a8>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030dc:	d003      	beq.n	80030e6 <HAL_ADC_Init+0x126>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d104      	bne.n	80030f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	430a      	orrs	r2, r1
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_ADC_Init+0x1ac>)
 800310c:	4013      	ands	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d10b      	bne.n	800312c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800312a:	e018      	b.n	800315e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	f023 0312 	bic.w	r3, r3, #18
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800314c:	e007      	b.n	800315e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f043 0210 	orr.w	r2, r3, #16
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	ffe1f7fd 	.word	0xffe1f7fd
 800316c:	ff1f0efe 	.word	0xff1f0efe

08003170 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADC_Start+0x1a>
 8003186:	2302      	movs	r3, #2
 8003188:	e098      	b.n	80032bc <HAL_ADC_Start+0x14c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f99e 	bl	80034d4 <ADC_Enable>
 8003198:	4603      	mov	r3, r0
 800319a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8087 	bne.w	80032b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a41      	ldr	r2, [pc, #260]	; (80032c4 <HAL_ADC_Start+0x154>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_Start+0x5e>
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_ADC_Start+0x158>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d026      	beq.n	8003236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031f8:	e01d      	b.n	8003236 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <HAL_ADC_Start+0x158>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_ADC_Start+0xaa>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_ADC_Start+0x154>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10d      	bne.n	8003236 <HAL_ADC_Start+0xc6>
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_ADC_Start+0x158>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800322e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f023 0206 	bic.w	r2, r3, #6
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
 800324e:	e002      	b.n	8003256 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f06f 0202 	mvn.w	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003276:	d113      	bne.n	80032a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_ADC_Start+0x154>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d105      	bne.n	800328e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_ADC_Start+0x158>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	e00c      	b.n	80032ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	e003      	b.n	80032ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40012800 	.word	0x40012800
 80032c8:	40012400 	.word	0x40012400

080032cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x20>
 8003300:	2302      	movs	r3, #2
 8003302:	e0dc      	b.n	80034be <HAL_ADC_ConfigChannel+0x1da>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d81c      	bhi.n	800334e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	3b05      	subs	r3, #5
 8003326:	221f      	movs	r2, #31
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	4019      	ands	r1, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b05      	subs	r3, #5
 8003340:	fa00 f203 	lsl.w	r2, r0, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
 800334c:	e03c      	b.n	80033c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d81c      	bhi.n	8003390 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	3b23      	subs	r3, #35	; 0x23
 8003368:	221f      	movs	r2, #31
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	4019      	ands	r1, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b23      	subs	r3, #35	; 0x23
 8003382:	fa00 f203 	lsl.w	r2, r0, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
 800338e:	e01b      	b.n	80033c8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	3b41      	subs	r3, #65	; 0x41
 80033a2:	221f      	movs	r2, #31
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	4019      	ands	r1, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b41      	subs	r3, #65	; 0x41
 80033bc:	fa00 f203 	lsl.w	r2, r0, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d91c      	bls.n	800340a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4019      	ands	r1, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6898      	ldr	r0, [r3, #8]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	3b1e      	subs	r3, #30
 80033fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e019      	b.n	800343e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	4019      	ands	r1, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6898      	ldr	r0, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b10      	cmp	r3, #16
 8003444:	d003      	beq.n	800344e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800344a:	2b11      	cmp	r3, #17
 800344c:	d132      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d125      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d126      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003474:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b10      	cmp	r3, #16
 800347c:	d11a      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_ADC_ConfigChannel+0x1e8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	0c9a      	lsrs	r2, r3, #18
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003494:	e002      	b.n	800349c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3b01      	subs	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x1b2>
 80034a2:	e007      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40012400 	.word	0x40012400
 80034cc:	2000000c 	.word	0x2000000c
 80034d0:	431bde83 	.word	0x431bde83

080034d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d040      	beq.n	8003574 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <ADC_Enable+0xac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <ADC_Enable+0xb0>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0c9b      	lsrs	r3, r3, #18
 800350e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003510:	e002      	b.n	8003518 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3b01      	subs	r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f9      	bne.n	8003512 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800351e:	f7ff fd21 	bl	8002f64 <HAL_GetTick>
 8003522:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003524:	e01f      	b.n	8003566 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003526:	f7ff fd1d 	bl	8002f64 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d918      	bls.n	8003566 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d011      	beq.n	8003566 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f043 0210 	orr.w	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d1d8      	bne.n	8003526 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	2000000c 	.word	0x2000000c
 8003584:	431bde83 	.word	0x431bde83

08003588 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d12e      	bne.n	8003600 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035b2:	f7ff fcd7 	bl	8002f64 <HAL_GetTick>
 80035b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035b8:	e01b      	b.n	80035f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ba:	f7ff fcd3 	bl	8002f64 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d914      	bls.n	80035f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10d      	bne.n	80035f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	f043 0210 	orr.w	r2, r3, #16
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e007      	b.n	8003602 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d0dc      	beq.n	80035ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db0b      	blt.n	800369a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4906      	ldr	r1, [pc, #24]	; (80036a4 <__NVIC_EnableIRQ+0x34>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	; (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	; 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3304      	adds	r3, #4
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b03      	subs	r3, #3
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
         );
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff4f 	bl	800360c <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003788:	f7ff ff64 	bl	8003654 <__NVIC_GetPriorityGrouping>
 800378c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ffb2 	bl	80036fc <NVIC_EncodePriority>
 8003798:	4602      	mov	r2, r0
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff81 	bl	80036a8 <__NVIC_SetPriority>
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff57 	bl	8003670 <__NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b08b      	sub	sp, #44	; 0x2c
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e169      	b.n	8003ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037e0:	2201      	movs	r2, #1
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 8158 	bne.w	8003aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4a9a      	ldr	r2, [pc, #616]	; (8003a6c <HAL_GPIO_Init+0x2a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d05e      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003808:	4a98      	ldr	r2, [pc, #608]	; (8003a6c <HAL_GPIO_Init+0x2a0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d875      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800380e:	4a98      	ldr	r2, [pc, #608]	; (8003a70 <HAL_GPIO_Init+0x2a4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d058      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003814:	4a96      	ldr	r2, [pc, #600]	; (8003a70 <HAL_GPIO_Init+0x2a4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d86f      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800381a:	4a96      	ldr	r2, [pc, #600]	; (8003a74 <HAL_GPIO_Init+0x2a8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d052      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003820:	4a94      	ldr	r2, [pc, #592]	; (8003a74 <HAL_GPIO_Init+0x2a8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d869      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003826:	4a94      	ldr	r2, [pc, #592]	; (8003a78 <HAL_GPIO_Init+0x2ac>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04c      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 800382c:	4a92      	ldr	r2, [pc, #584]	; (8003a78 <HAL_GPIO_Init+0x2ac>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d863      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003832:	4a92      	ldr	r2, [pc, #584]	; (8003a7c <HAL_GPIO_Init+0x2b0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d046      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
 8003838:	4a90      	ldr	r2, [pc, #576]	; (8003a7c <HAL_GPIO_Init+0x2b0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d85d      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 800383e:	2b12      	cmp	r3, #18
 8003840:	d82a      	bhi.n	8003898 <HAL_GPIO_Init+0xcc>
 8003842:	2b12      	cmp	r3, #18
 8003844:	d859      	bhi.n	80038fa <HAL_GPIO_Init+0x12e>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_GPIO_Init+0x80>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	080038c7 	.word	0x080038c7
 8003850:	080038a1 	.word	0x080038a1
 8003854:	080038b3 	.word	0x080038b3
 8003858:	080038f5 	.word	0x080038f5
 800385c:	080038fb 	.word	0x080038fb
 8003860:	080038fb 	.word	0x080038fb
 8003864:	080038fb 	.word	0x080038fb
 8003868:	080038fb 	.word	0x080038fb
 800386c:	080038fb 	.word	0x080038fb
 8003870:	080038fb 	.word	0x080038fb
 8003874:	080038fb 	.word	0x080038fb
 8003878:	080038fb 	.word	0x080038fb
 800387c:	080038fb 	.word	0x080038fb
 8003880:	080038fb 	.word	0x080038fb
 8003884:	080038fb 	.word	0x080038fb
 8003888:	080038fb 	.word	0x080038fb
 800388c:	080038fb 	.word	0x080038fb
 8003890:	080038a9 	.word	0x080038a9
 8003894:	080038bd 	.word	0x080038bd
 8003898:	4a79      	ldr	r2, [pc, #484]	; (8003a80 <HAL_GPIO_Init+0x2b4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800389e:	e02c      	b.n	80038fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	623b      	str	r3, [r7, #32]
          break;
 80038a6:	e029      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	3304      	adds	r3, #4
 80038ae:	623b      	str	r3, [r7, #32]
          break;
 80038b0:	e024      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	3308      	adds	r3, #8
 80038b8:	623b      	str	r3, [r7, #32]
          break;
 80038ba:	e01f      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	330c      	adds	r3, #12
 80038c2:	623b      	str	r3, [r7, #32]
          break;
 80038c4:	e01a      	b.n	80038fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038ce:	2304      	movs	r3, #4
 80038d0:	623b      	str	r3, [r7, #32]
          break;
 80038d2:	e013      	b.n	80038fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d105      	bne.n	80038e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038dc:	2308      	movs	r3, #8
 80038de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	611a      	str	r2, [r3, #16]
          break;
 80038e6:	e009      	b.n	80038fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038e8:	2308      	movs	r3, #8
 80038ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	615a      	str	r2, [r3, #20]
          break;
 80038f2:	e003      	b.n	80038fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038f4:	2300      	movs	r3, #0
 80038f6:	623b      	str	r3, [r7, #32]
          break;
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x130>
          break;
 80038fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2bff      	cmp	r3, #255	; 0xff
 8003900:	d801      	bhi.n	8003906 <HAL_GPIO_Init+0x13a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	e001      	b.n	800390a <HAL_GPIO_Init+0x13e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3304      	adds	r3, #4
 800390a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2bff      	cmp	r3, #255	; 0xff
 8003910:	d802      	bhi.n	8003918 <HAL_GPIO_Init+0x14c>
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	e002      	b.n	800391e <HAL_GPIO_Init+0x152>
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	3b08      	subs	r3, #8
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	210f      	movs	r1, #15
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	431a      	orrs	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80b1 	beq.w	8003aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800394c:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	4a4c      	ldr	r2, [pc, #304]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6193      	str	r3, [r2, #24]
 8003958:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_GPIO_Init+0x2b8>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003964:	4a48      	ldr	r2, [pc, #288]	; (8003a88 <HAL_GPIO_Init+0x2bc>)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_GPIO_Init+0x2c0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x1ec>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3f      	ldr	r2, [pc, #252]	; (8003a90 <HAL_GPIO_Init+0x2c4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_Init+0x1e8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3e      	ldr	r2, [pc, #248]	; (8003a94 <HAL_GPIO_Init+0x2c8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_Init+0x1e4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <HAL_GPIO_Init+0x2cc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_Init+0x1e0>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e006      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039ac:	2304      	movs	r3, #4
 80039ae:	e004      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e002      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_GPIO_Init+0x1ee>
 80039b8:	2300      	movs	r3, #0
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	f002 0203 	and.w	r2, r2, #3
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	4093      	lsls	r3, r2
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039ca:	492f      	ldr	r1, [pc, #188]	; (8003a88 <HAL_GPIO_Init+0x2bc>)
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	3302      	adds	r3, #2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	492c      	ldr	r1, [pc, #176]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]
 80039f0:	e006      	b.n	8003a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039f2:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4928      	ldr	r1, [pc, #160]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4922      	ldr	r1, [pc, #136]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	491e      	ldr	r1, [pc, #120]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	4918      	ldr	r1, [pc, #96]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	4914      	ldr	r1, [pc, #80]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_GPIO_Init+0x2d0>)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]
 8003a68:	e021      	b.n	8003aae <HAL_GPIO_Init+0x2e2>
 8003a6a:	bf00      	nop
 8003a6c:	10320000 	.word	0x10320000
 8003a70:	10310000 	.word	0x10310000
 8003a74:	10220000 	.word	0x10220000
 8003a78:	10210000 	.word	0x10210000
 8003a7c:	10120000 	.word	0x10120000
 8003a80:	10110000 	.word	0x10110000
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	40010c00 	.word	0x40010c00
 8003a94:	40011000 	.word	0x40011000
 8003a98:	40011400 	.word	0x40011400
 8003a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	4909      	ldr	r1, [pc, #36]	; (8003ad0 <HAL_GPIO_Init+0x304>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f47f ae8e 	bne.w	80037e0 <HAL_GPIO_Init+0x14>
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	372c      	adds	r7, #44	; 0x2c
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003af0:	e003      	b.n	8003afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e12b      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fe ff1a 	bl	8002964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0201 	bic.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b68:	f001 fd1e 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8003b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4a81      	ldr	r2, [pc, #516]	; (8003d78 <HAL_I2C_Init+0x274>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d807      	bhi.n	8003b88 <HAL_I2C_Init+0x84>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a80      	ldr	r2, [pc, #512]	; (8003d7c <HAL_I2C_Init+0x278>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e006      	b.n	8003b96 <HAL_I2C_Init+0x92>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a7d      	ldr	r2, [pc, #500]	; (8003d80 <HAL_I2C_Init+0x27c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	bf94      	ite	ls
 8003b90:	2301      	movls	r3, #1
 8003b92:	2300      	movhi	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0e7      	b.n	8003d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a78      	ldr	r2, [pc, #480]	; (8003d84 <HAL_I2C_Init+0x280>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0c9b      	lsrs	r3, r3, #18
 8003ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	; (8003d78 <HAL_I2C_Init+0x274>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d802      	bhi.n	8003bd8 <HAL_I2C_Init+0xd4>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	e009      	b.n	8003bec <HAL_I2C_Init+0xe8>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	4a69      	ldr	r2, [pc, #420]	; (8003d88 <HAL_I2C_Init+0x284>)
 8003be4:	fba2 2303 	umull	r2, r3, r2, r3
 8003be8:	099b      	lsrs	r3, r3, #6
 8003bea:	3301      	adds	r3, #1
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	495c      	ldr	r1, [pc, #368]	; (8003d78 <HAL_I2C_Init+0x274>)
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	d819      	bhi.n	8003c40 <HAL_I2C_Init+0x13c>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1e59      	subs	r1, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c20:	400b      	ands	r3, r1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_I2C_Init+0x138>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e59      	subs	r1, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	e051      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	e04f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d111      	bne.n	8003c6c <HAL_I2C_Init+0x168>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e58      	subs	r0, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	440b      	add	r3, r1
 8003c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	bf0c      	ite	eq
 8003c64:	2301      	moveq	r3, #1
 8003c66:	2300      	movne	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e012      	b.n	8003c92 <HAL_I2C_Init+0x18e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1e58      	subs	r0, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6859      	ldr	r1, [r3, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	0099      	lsls	r1, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c82:	3301      	adds	r3, #1
 8003c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2301      	moveq	r3, #1
 8003c8e:	2300      	movne	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_I2C_Init+0x196>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e022      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_I2C_Init+0x1bc>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1e58      	subs	r0, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	440b      	add	r3, r1
 8003cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	e00f      	b.n	8003ce0 <HAL_I2C_Init+0x1dc>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	1e58      	subs	r0, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6859      	ldr	r1, [r3, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	0099      	lsls	r1, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	6809      	ldr	r1, [r1, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6911      	ldr	r1, [r2, #16]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	4311      	orrs	r1, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	000186a0 	.word	0x000186a0
 8003d7c:	001e847f 	.word	0x001e847f
 8003d80:	003d08ff 	.word	0x003d08ff
 8003d84:	431bde83 	.word	0x431bde83
 8003d88:	10624dd3 	.word	0x10624dd3

08003d8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	4608      	mov	r0, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	813b      	strh	r3, [r7, #8]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da6:	f7ff f8dd 	bl	8002f64 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	f040 80d9 	bne.w	8003f6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2319      	movs	r3, #25
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	496d      	ldr	r1, [pc, #436]	; (8003f78 <HAL_I2C_Mem_Write+0x1ec>)
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 fdef 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e0cc      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_I2C_Mem_Write+0x56>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0c5      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d007      	beq.n	8003e08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2221      	movs	r2, #33	; 0x21
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_I2C_Mem_Write+0x1f0>)
 8003e48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4a:	88f8      	ldrh	r0, [r7, #6]
 8003e4c:	893a      	ldrh	r2, [r7, #8]
 8003e4e:	8979      	ldrh	r1, [r7, #10]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4603      	mov	r3, r0
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fc26 	bl	80046ac <I2C_RequestMemoryWrite>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d052      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e081      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 feb4 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d107      	bne.n	8003e92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d11b      	bne.n	8003f0c <HAL_I2C_Mem_Write+0x180>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1aa      	bne.n	8003e6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fea7 	bl	8004c6c <I2C_WaitOnBTFFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d107      	bne.n	8003f3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e016      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	00100002 	.word	0x00100002
 8003f7c:	ffff0000 	.word	0xffff0000

08003f80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	817b      	strh	r3, [r7, #10]
 8003f92:	460b      	mov	r3, r1
 8003f94:	813b      	strh	r3, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f9e:	f7fe ffe1 	bl	8002f64 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	f040 8244 	bne.w	800443a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2319      	movs	r3, #25
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4982      	ldr	r1, [pc, #520]	; (80041c4 <HAL_I2C_Mem_Read+0x244>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fcf3 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e237      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Mem_Read+0x5a>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e230      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d007      	beq.n	8004000 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2222      	movs	r2, #34	; 0x22
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a62      	ldr	r2, [pc, #392]	; (80041c8 <HAL_I2C_Mem_Read+0x248>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004042:	88f8      	ldrh	r0, [r7, #6]
 8004044:	893a      	ldrh	r2, [r7, #8]
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4603      	mov	r3, r0
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fbc0 	bl	80047d8 <I2C_RequestMemoryRead>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e1ec      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d113      	bne.n	8004092 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e1c0      	b.n	8004414 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11e      	bne.n	80040d8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040aa:	b672      	cpsid	i
}
 80040ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040d4:	b662      	cpsie	i
}
 80040d6:	e035      	b.n	8004144 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d11e      	bne.n	800411e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f0:	b672      	cpsid	i
}
 80040f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800411a:	b662      	cpsie	i
}
 800411c:	e012      	b.n	8004144 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004144:	e166      	b.n	8004414 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	2b03      	cmp	r3, #3
 800414c:	f200 811f 	bhi.w	800438e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004154:	2b01      	cmp	r3, #1
 8004156:	d123      	bne.n	80041a0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fdcd 	bl	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e167      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419e:	e139      	b.n	8004414 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d152      	bne.n	800424e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2200      	movs	r2, #0
 80041b0:	4906      	ldr	r1, [pc, #24]	; (80041cc <HAL_I2C_Mem_Read+0x24c>)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fbf8 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e13c      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
 80041c2:	bf00      	nop
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000
 80041cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80041d0:	b672      	cpsid	i
}
 80041d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004216:	b662      	cpsie	i
}
 8004218:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800424c:	e0e2      	b.n	8004414 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	2200      	movs	r2, #0
 8004256:	497b      	ldr	r1, [pc, #492]	; (8004444 <HAL_I2C_Mem_Read+0x4c4>)
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fba5 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0e9      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004276:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004278:	b672      	cpsid	i
}
 800427a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042ae:	4b66      	ldr	r3, [pc, #408]	; (8004448 <HAL_I2C_Mem_Read+0x4c8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	08db      	lsrs	r3, r3, #3
 80042b4:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_I2C_Mem_Read+0x4cc>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0a1a      	lsrs	r2, r3, #8
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	00da      	lsls	r2, r3, #3
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d118      	bne.n	8004306 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80042f6:	b662      	cpsie	i
}
 80042f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e09a      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d1d9      	bne.n	80042c8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004356:	b662      	cpsie	i
}
 8004358:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004376:	3b01      	subs	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438c:	e042      	b.n	8004414 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fcb2 	bl	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e04c      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0304 	and.w	r3, r3, #4
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d118      	bne.n	8004414 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f ae94 	bne.w	8004146 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
  }
}
 800443c:	4618      	mov	r0, r3
 800443e:	3728      	adds	r7, #40	; 0x28
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	00010004 	.word	0x00010004
 8004448:	2000000c 	.word	0x2000000c
 800444c:	14f8b589 	.word	0x14f8b589

08004450 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08a      	sub	sp, #40	; 0x28
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7fe fd80 	bl	8002f64 <HAL_GetTick>
 8004464:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b20      	cmp	r3, #32
 8004474:	f040 8111 	bne.w	800469a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2319      	movs	r3, #25
 800447e:	2201      	movs	r2, #1
 8004480:	4988      	ldr	r1, [pc, #544]	; (80046a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa90 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800448e:	2302      	movs	r3, #2
 8004490:	e104      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_I2C_IsDeviceReady+0x50>
 800449c:	2302      	movs	r3, #2
 800449e:	e0fd      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d007      	beq.n	80044c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2224      	movs	r2, #36	; 0x24
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a70      	ldr	r2, [pc, #448]	; (80046a8 <HAL_I2C_IsDeviceReady+0x258>)
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2200      	movs	r2, #0
 8004502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa4e 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004520:	d103      	bne.n	800452a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0b6      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800453e:	f7fe fd11 	bl	8002f64 <HAL_GetTick>
 8004542:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	bf0c      	ite	eq
 8004552:	2301      	moveq	r3, #1
 8004554:	2300      	movne	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004572:	e025      	b.n	80045c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fe fcf6 	bl	8002f64 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <HAL_I2C_IsDeviceReady+0x13a>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22a0      	movs	r2, #160	; 0xa0
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b6:	bf0c      	ite	eq
 80045b8:	2301      	moveq	r3, #1
 80045ba:	2300      	movne	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2ba0      	cmp	r3, #160	; 0xa0
 80045ca:	d005      	beq.n	80045d8 <HAL_I2C_IsDeviceReady+0x188>
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HAL_I2C_IsDeviceReady+0x188>
 80045d2:	7dbb      	ldrb	r3, [r7, #22]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0cd      	beq.n	8004574 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d129      	bne.n	8004642 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2319      	movs	r3, #25
 800461a:	2201      	movs	r2, #1
 800461c:	4921      	ldr	r1, [pc, #132]	; (80046a4 <HAL_I2C_IsDeviceReady+0x254>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f9c2 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e036      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e02c      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800465a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	2319      	movs	r3, #25
 8004662:	2201      	movs	r2, #1
 8004664:	490f      	ldr	r1, [pc, #60]	; (80046a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f99e 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e012      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3301      	adds	r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	429a      	cmp	r2, r3
 8004682:	f4ff af32 	bcc.w	80044ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800469a:	2302      	movs	r3, #2
  }
}
 800469c:	4618      	mov	r0, r3
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	00100002 	.word	0x00100002
 80046a8:	ffff0000 	.word	0xffff0000

080046ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	2200      	movs	r2, #0
 80046de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f960 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fc:	d103      	bne.n	8004706 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e05f      	b.n	80047ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004718:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	6a3a      	ldr	r2, [r7, #32]
 800471e:	492d      	ldr	r1, [pc, #180]	; (80047d4 <I2C_RequestMemoryWrite+0x128>)
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 f9bb 	bl	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e04c      	b.n	80047ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	6a39      	ldr	r1, [r7, #32]
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa46 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00d      	beq.n	8004772 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b04      	cmp	r3, #4
 800475c:	d107      	bne.n	800476e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e02b      	b.n	80047ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004778:	893b      	ldrh	r3, [r7, #8]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	611a      	str	r2, [r3, #16]
 8004782:	e021      	b.n	80047c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004784:	893b      	ldrh	r3, [r7, #8]
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	b29b      	uxth	r3, r3
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004794:	6a39      	ldr	r1, [r7, #32]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa20 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d107      	bne.n	80047ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e005      	b.n	80047ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047be:	893b      	ldrh	r3, [r7, #8]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	00010002 	.word	0x00010002

080047d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	460b      	mov	r3, r1
 80047ec:	813b      	strh	r3, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004800:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004810:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	2200      	movs	r2, #0
 800481a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f8c2 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004838:	d103      	bne.n	8004842 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e0aa      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004846:	897b      	ldrh	r3, [r7, #10]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004854:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	4952      	ldr	r1, [pc, #328]	; (80049a4 <I2C_RequestMemoryRead+0x1cc>)
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f91d 	bl	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e097      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	6a39      	ldr	r1, [r7, #32]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f9a8 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00d      	beq.n	80048ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b04      	cmp	r3, #4
 8004898:	d107      	bne.n	80048aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e076      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b4:	893b      	ldrh	r3, [r7, #8]
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]
 80048be:	e021      	b.n	8004904 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048c0:	893b      	ldrh	r3, [r7, #8]
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d0:	6a39      	ldr	r1, [r7, #32]
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f982 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d107      	bne.n	80048f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e050      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048fa:	893b      	ldrh	r3, [r7, #8]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004906:	6a39      	ldr	r1, [r7, #32]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f967 	bl	8004bdc <I2C_WaitOnTXEFlagUntilTimeout>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00d      	beq.n	8004930 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2b04      	cmp	r3, #4
 800491a:	d107      	bne.n	800492c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e035      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2200      	movs	r2, #0
 8004948:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f82b 	bl	80049a8 <I2C_WaitOnFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004966:	d103      	bne.n	8004970 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e013      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004974:	897b      	ldrh	r3, [r7, #10]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	b2da      	uxtb	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	6a3a      	ldr	r2, [r7, #32]
 8004988:	4906      	ldr	r1, [pc, #24]	; (80049a4 <I2C_RequestMemoryRead+0x1cc>)
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f886 	bl	8004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	00010002 	.word	0x00010002

080049a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b8:	e048      	b.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d044      	beq.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c2:	f7fe facf 	bl	8002f64 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d302      	bcc.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d139      	bne.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10d      	bne.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	43da      	mvns	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	e00c      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d116      	bne.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e023      	b.n	8004a94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	0c1b      	lsrs	r3, r3, #16
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10d      	bne.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4013      	ands	r3, r2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	e00c      	b.n	8004a8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d093      	beq.n	80049ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aaa:	e071      	b.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aba:	d123      	bne.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ad4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f043 0204 	orr.w	r2, r3, #4
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e067      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d041      	beq.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0c:	f7fe fa2a 	bl	8002f64 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d136      	bne.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	0c1b      	lsrs	r3, r3, #16
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10c      	bne.n	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	43da      	mvns	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e00b      	b.n	8004b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	43da      	mvns	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e021      	b.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	0c1b      	lsrs	r3, r3, #16
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d10c      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	e00b      	b.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf14      	ite	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	2300      	moveq	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f47f af6d 	bne.w	8004aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be8:	e034      	b.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f8e3 	bl	8004db6 <I2C_IsAcknowledgeFailed>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e034      	b.n	8004c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d028      	beq.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fe f9af 	bl	8002f64 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d11d      	bne.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d016      	beq.n	8004c54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f043 0220 	orr.w	r2, r3, #32
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e007      	b.n	8004c64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d1c3      	bne.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c78:	e034      	b.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f89b 	bl	8004db6 <I2C_IsAcknowledgeFailed>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e034      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d028      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe f967 	bl	8002f64 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11d      	bne.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d016      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d1c3      	bne.n	8004c7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d08:	e049      	b.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d119      	bne.n	8004d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0210 	mvn.w	r2, #16
 8004d20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e030      	b.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d4c:	f7fe f90a 	bl	8002f64 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11d      	bne.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b40      	cmp	r3, #64	; 0x40
 8004d6e:	d016      	beq.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	f043 0220 	orr.w	r2, r3, #32
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e007      	b.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d1ae      	bne.n	8004d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dcc:	d11b      	bne.n	8004e06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0204 	orr.w	r2, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
	...

08004e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e272      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8087 	beq.w	8004f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e34:	4b92      	ldr	r3, [pc, #584]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d00c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e40:	4b8f      	ldr	r3, [pc, #572]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 030c 	and.w	r3, r3, #12
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d112      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5e>
 8004e4c:	4b8c      	ldr	r3, [pc, #560]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d10b      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5a:	4b89      	ldr	r3, [pc, #548]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d06c      	beq.n	8004f40 <HAL_RCC_OscConfig+0x12c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d168      	bne.n	8004f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e24c      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x76>
 8004e7c:	4b80      	ldr	r3, [pc, #512]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a7f      	ldr	r2, [pc, #508]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e02e      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x98>
 8004e92:	4b7b      	ldr	r3, [pc, #492]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a7a      	ldr	r2, [pc, #488]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	4b78      	ldr	r3, [pc, #480]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a77      	ldr	r2, [pc, #476]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e01d      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xbc>
 8004eb6:	4b72      	ldr	r3, [pc, #456]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a71      	ldr	r2, [pc, #452]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	4b6f      	ldr	r3, [pc, #444]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a6e      	ldr	r2, [pc, #440]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0xd4>
 8004ed0:	4b6b      	ldr	r3, [pc, #428]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a6a      	ldr	r2, [pc, #424]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	4b68      	ldr	r3, [pc, #416]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a67      	ldr	r2, [pc, #412]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ee6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d013      	beq.n	8004f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fe f838 	bl	8002f64 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fe f834 	bl	8002f64 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e200      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0a:	4b5d      	ldr	r3, [pc, #372]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f0      	beq.n	8004ef8 <HAL_RCC_OscConfig+0xe4>
 8004f16:	e014      	b.n	8004f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe f824 	bl	8002f64 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fe f820 	bl	8002f64 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e1ec      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f32:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x10c>
 8004f3e:	e000      	b.n	8004f42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d063      	beq.n	8005016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f4e:	4b4c      	ldr	r3, [pc, #304]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f5a:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d11c      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x18c>
 8004f66:	4b46      	ldr	r3, [pc, #280]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d116      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f72:	4b43      	ldr	r3, [pc, #268]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCC_OscConfig+0x176>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d001      	beq.n	8004f8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e1c0      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4939      	ldr	r1, [pc, #228]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	e03a      	b.n	8005016 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d020      	beq.n	8004fea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa8:	4b36      	ldr	r3, [pc, #216]	; (8005084 <HAL_RCC_OscConfig+0x270>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7fd ffd9 	bl	8002f64 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb6:	f7fd ffd5 	bl	8002f64 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e1a1      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc8:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4927      	ldr	r1, [pc, #156]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fea:	4b26      	ldr	r3, [pc, #152]	; (8005084 <HAL_RCC_OscConfig+0x270>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd ffb8 	bl	8002f64 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7fd ffb4 	bl	8002f64 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e180      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1f0      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d03a      	beq.n	8005098 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d019      	beq.n	800505e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502a:	4b17      	ldr	r3, [pc, #92]	; (8005088 <HAL_RCC_OscConfig+0x274>)
 800502c:	2201      	movs	r2, #1
 800502e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005030:	f7fd ff98 	bl	8002f64 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005038:	f7fd ff94 	bl	8002f64 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e160      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCC_OscConfig+0x26c>)
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005056:	2001      	movs	r0, #1
 8005058:	f000 fafe 	bl	8005658 <RCC_Delay>
 800505c:	e01c      	b.n	8005098 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_RCC_OscConfig+0x274>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7fd ff7e 	bl	8002f64 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506a:	e00f      	b.n	800508c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506c:	f7fd ff7a 	bl	8002f64 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d908      	bls.n	800508c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e146      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
 8005084:	42420000 	.word	0x42420000
 8005088:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	4b92      	ldr	r3, [pc, #584]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e9      	bne.n	800506c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80a6 	beq.w	80051f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050aa:	4b8b      	ldr	r3, [pc, #556]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	4b88      	ldr	r3, [pc, #544]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4a87      	ldr	r2, [pc, #540]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	61d3      	str	r3, [r2, #28]
 80050c2:	4b85      	ldr	r3, [pc, #532]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d2:	4b82      	ldr	r3, [pc, #520]	; (80052dc <HAL_RCC_OscConfig+0x4c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d118      	bne.n	8005110 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050de:	4b7f      	ldr	r3, [pc, #508]	; (80052dc <HAL_RCC_OscConfig+0x4c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7e      	ldr	r2, [pc, #504]	; (80052dc <HAL_RCC_OscConfig+0x4c8>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ea:	f7fd ff3b 	bl	8002f64 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fd ff37 	bl	8002f64 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b64      	cmp	r3, #100	; 0x64
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e103      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	4b75      	ldr	r3, [pc, #468]	; (80052dc <HAL_RCC_OscConfig+0x4c8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <HAL_RCC_OscConfig+0x312>
 8005118:	4b6f      	ldr	r3, [pc, #444]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4a6e      	ldr	r2, [pc, #440]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	e02d      	b.n	8005182 <HAL_RCC_OscConfig+0x36e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x334>
 800512e:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4a69      	ldr	r2, [pc, #420]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	6213      	str	r3, [r2, #32]
 800513a:	4b67      	ldr	r3, [pc, #412]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	4a66      	ldr	r2, [pc, #408]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	6213      	str	r3, [r2, #32]
 8005146:	e01c      	b.n	8005182 <HAL_RCC_OscConfig+0x36e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b05      	cmp	r3, #5
 800514e:	d10c      	bne.n	800516a <HAL_RCC_OscConfig+0x356>
 8005150:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4a60      	ldr	r2, [pc, #384]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	f043 0304 	orr.w	r3, r3, #4
 800515a:	6213      	str	r3, [r2, #32]
 800515c:	4b5e      	ldr	r3, [pc, #376]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4a5d      	ldr	r2, [pc, #372]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6213      	str	r3, [r2, #32]
 8005168:	e00b      	b.n	8005182 <HAL_RCC_OscConfig+0x36e>
 800516a:	4b5b      	ldr	r3, [pc, #364]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4a5a      	ldr	r2, [pc, #360]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	6213      	str	r3, [r2, #32]
 8005176:	4b58      	ldr	r3, [pc, #352]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800517c:	f023 0304 	bic.w	r3, r3, #4
 8005180:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d015      	beq.n	80051b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fd feeb 	bl	8002f64 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd fee7 	bl	8002f64 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0b1      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a8:	4b4b      	ldr	r3, [pc, #300]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ee      	beq.n	8005192 <HAL_RCC_OscConfig+0x37e>
 80051b4:	e014      	b.n	80051e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b6:	f7fd fed5 	bl	8002f64 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051bc:	e00a      	b.n	80051d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051be:	f7fd fed1 	bl	8002f64 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e09b      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ee      	bne.n	80051be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d105      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b3c      	ldr	r3, [pc, #240]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8087 	beq.w	800530a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 030c 	and.w	r3, r3, #12
 8005204:	2b08      	cmp	r3, #8
 8005206:	d061      	beq.n	80052cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d146      	bne.n	800529e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b33      	ldr	r3, [pc, #204]	; (80052e0 <HAL_RCC_OscConfig+0x4cc>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fd fea5 	bl	8002f64 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521e:	f7fd fea1 	bl	8002f64 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e06d      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005244:	d108      	bne.n	8005258 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	4921      	ldr	r1, [pc, #132]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a19      	ldr	r1, [r3, #32]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	430b      	orrs	r3, r1
 800526a:	491b      	ldr	r1, [pc, #108]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005270:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <HAL_RCC_OscConfig+0x4cc>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005276:	f7fd fe75 	bl	8002f64 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527e:	f7fd fe71 	bl	8002f64 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e03d      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x46a>
 800529c:	e035      	b.n	800530a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_RCC_OscConfig+0x4cc>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fd fe5e 	bl	8002f64 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fd fe5a 	bl	8002f64 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e026      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x498>
 80052ca:	e01e      	b.n	800530a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e019      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40007000 	.word	0x40007000
 80052e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <HAL_RCC_OscConfig+0x500>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d001      	beq.n	800530a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000

08005318 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0d0      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b6a      	ldr	r3, [pc, #424]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d910      	bls.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b67      	ldr	r3, [pc, #412]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4965      	ldr	r1, [pc, #404]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800537e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005396:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d040      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b41      	ldr	r3, [pc, #260]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e073      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e06b      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b39      	ldr	r3, [pc, #228]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4936      	ldr	r1, [pc, #216]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fd fdac 	bl	8002f64 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fd fda8 	bl	8002f64 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e053      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2d      	ldr	r3, [pc, #180]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d210      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 0207 	bic.w	r2, r3, #7
 800544e:	4922      	ldr	r1, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1cc>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1d0>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fd fb5c 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40022000 	.word	0x40022000
 80054dc:	40021000 	.word	0x40021000
 80054e0:	0800e990 	.word	0x0800e990
 80054e4:	2000000c 	.word	0x2000000c
 80054e8:	20000010 	.word	0x20000010

080054ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005506:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCC_GetSysClockFreq+0x94>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b04      	cmp	r3, #4
 8005514:	d002      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x30>
 8005516:	2b08      	cmp	r3, #8
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0x36>
 800551a:	e027      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_GetSysClockFreq+0x98>)
 800551e:	613b      	str	r3, [r7, #16]
      break;
 8005520:	e027      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	0c9b      	lsrs	r3, r3, #18
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	4a17      	ldr	r2, [pc, #92]	; (8005588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800552c:	5cd3      	ldrb	r3, [r2, r3]
 800552e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d010      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_RCC_GetSysClockFreq+0x94>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	0c5b      	lsrs	r3, r3, #17
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005546:	5cd3      	ldrb	r3, [r2, r3]
 8005548:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <HAL_RCC_GetSysClockFreq+0x98>)
 800554e:	fb03 f202 	mul.w	r2, r3, r2
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e004      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	613b      	str	r3, [r7, #16]
      break;
 800556a:	e002      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetSysClockFreq+0x98>)
 800556e:	613b      	str	r3, [r7, #16]
      break;
 8005570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005572:	693b      	ldr	r3, [r7, #16]
}
 8005574:	4618      	mov	r0, r3
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000
 8005584:	007a1200 	.word	0x007a1200
 8005588:	0800e9a8 	.word	0x0800e9a8
 800558c:	0800e9b8 	.word	0x0800e9b8
 8005590:	003d0900 	.word	0x003d0900

08005594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005598:	4b02      	ldr	r3, [pc, #8]	; (80055a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	2000000c 	.word	0x2000000c

080055a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055ac:	f7ff fff2 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4903      	ldr	r1, [pc, #12]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800e9a0 	.word	0x0800e9a0

080055d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055d4:	f7ff ffde 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b05      	ldr	r3, [pc, #20]	; (80055f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	0adb      	lsrs	r3, r3, #11
 80055e0:	f003 0307 	and.w	r3, r3, #7
 80055e4:	4903      	ldr	r1, [pc, #12]	; (80055f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800e9a0 	.word	0x0800e9a0

080055f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	220f      	movs	r2, #15
 8005606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005608:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_RCC_GetClockConfig+0x58>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005614:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_RCC_GetClockConfig+0x58>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005620:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <HAL_RCC_GetClockConfig+0x58>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800562c:	4b08      	ldr	r3, [pc, #32]	; (8005650 <HAL_RCC_GetClockConfig+0x58>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	08db      	lsrs	r3, r3, #3
 8005632:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_GetClockConfig+0x5c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0207 	and.w	r2, r3, #7
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	40021000 	.word	0x40021000
 8005654:	40022000 	.word	0x40022000

08005658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <RCC_Delay+0x34>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <RCC_Delay+0x38>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	0a5b      	lsrs	r3, r3, #9
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005674:	bf00      	nop
  }
  while (Delay --);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	60fa      	str	r2, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f9      	bne.n	8005674 <RCC_Delay+0x1c>
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c
 8005690:	10624dd3 	.word	0x10624dd3

08005694 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d07d      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056b0:	2300      	movs	r3, #0
 80056b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b4:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c0:	4b4c      	ldr	r3, [pc, #304]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	4a4b      	ldr	r2, [pc, #300]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ca:	61d3      	str	r3, [r2, #28]
 80056cc:	4b49      	ldr	r3, [pc, #292]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d4:	60bb      	str	r3, [r7, #8]
 80056d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d8:	2301      	movs	r3, #1
 80056da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b46      	ldr	r3, [pc, #280]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d118      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e8:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f4:	f7fd fc36 	bl	8002f64 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fc:	f7fd fc32 	bl	8002f64 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e06d      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571a:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005722:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02e      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d027      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005738:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005748:	4b2c      	ldr	r3, [pc, #176]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800574e:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d014      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575e:	f7fd fc01 	bl	8002f64 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fd fbfd 	bl	8002f64 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e036      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ee      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4917      	ldr	r1, [pc, #92]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005796:	4313      	orrs	r3, r2
 8005798:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	490b      	ldr	r1, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	42420440 	.word	0x42420440

08005800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e076      	b.n	8005900 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005822:	d009      	beq.n	8005838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
 800582a:	e005      	b.n	8005838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fd f8c4 	bl	80029e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	431a      	orrs	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	ea42 0103 	orr.w	r1, r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	0c1a      	lsrs	r2, r3, #16
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f002 0204 	and.w	r2, r2, #4
 80058de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e041      	b.n	800599e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f839 	bl	80059a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 f9b4 	bl	8005cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d001      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e03a      	b.n	8005a46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_TIM_Base_Start_IT+0x98>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x58>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fa:	d009      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x58>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <HAL_TIM_Base_Start_IT+0x9c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_Base_Start_IT+0x58>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <HAL_TIM_Base_Start_IT+0xa0>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d111      	bne.n	8005a34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d010      	beq.n	8005a44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	e007      	b.n	8005a44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800

08005a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d122      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d11b      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0202 	mvn.w	r2, #2
 8005a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8ed 	bl	8005c7e <HAL_TIM_IC_CaptureCallback>
 8005aa4:	e005      	b.n	8005ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f8e0 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f8ef 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d122      	bne.n	8005b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d11b      	bne.n	8005b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0204 	mvn.w	r2, #4
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f8c3 	bl	8005c7e <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8b6 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f8c5 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d122      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d11b      	bne.n	8005b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0208 	mvn.w	r2, #8
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2204      	movs	r2, #4
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f899 	bl	8005c7e <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f88c 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f89b 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d122      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d11b      	bne.n	8005bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0210 	mvn.w	r2, #16
 8005b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2208      	movs	r2, #8
 8005b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f86f 	bl	8005c7e <HAL_TIM_IC_CaptureCallback>
 8005ba0:	e005      	b.n	8005bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f862 	bl	8005c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f871 	bl	8005c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d10e      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d107      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0201 	mvn.w	r2, #1
 8005bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc fe36 	bl	800284c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d10e      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf8:	2b80      	cmp	r3, #128	; 0x80
 8005bfa:	d107      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8bf 	bl	8005d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d10e      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d107      	bne.n	8005c38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f835 	bl	8005ca2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d10e      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d107      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0220 	mvn.w	r2, #32
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f88a 	bl	8005d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c64:	bf00      	nop
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <TIM_Base_SetConfig+0xb8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00b      	beq.n	8005ce4 <TIM_Base_SetConfig+0x30>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd2:	d007      	beq.n	8005ce4 <TIM_Base_SetConfig+0x30>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0xbc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_Base_SetConfig+0x30>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a25      	ldr	r2, [pc, #148]	; (8005d74 <TIM_Base_SetConfig+0xc0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d108      	bne.n	8005cf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <TIM_Base_SetConfig+0xb8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00b      	beq.n	8005d16 <TIM_Base_SetConfig+0x62>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d04:	d007      	beq.n	8005d16 <TIM_Base_SetConfig+0x62>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a19      	ldr	r2, [pc, #100]	; (8005d70 <TIM_Base_SetConfig+0xbc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_Base_SetConfig+0x62>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <TIM_Base_SetConfig+0xc0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d108      	bne.n	8005d28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a07      	ldr	r2, [pc, #28]	; (8005d6c <TIM_Base_SetConfig+0xb8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800

08005d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e042      	b.n	8005e34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fe92 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2224      	movs	r2, #36	; 0x24
 8005dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f91d 	bl	8006020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d16d      	bne.n	8005f38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_UART_Transmit+0x2c>
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e066      	b.n	8005f3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2221      	movs	r2, #33	; 0x21
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e7a:	f7fd f873 	bl	8002f64 <HAL_GetTick>
 8005e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	88fa      	ldrh	r2, [r7, #6]
 8005e84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d108      	bne.n	8005ea8 <HAL_UART_Transmit+0x6c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e003      	b.n	8005eb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005eb0:	e02a      	b.n	8005f08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f840 	bl	8005f42 <UART_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e036      	b.n	8005f3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10b      	bne.n	8005eea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e007      	b.n	8005efa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	781a      	ldrb	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1cf      	bne.n	8005eb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2140      	movs	r1, #64	; 0x40
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 f810 	bl	8005f42 <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e006      	b.n	8005f3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e000      	b.n	8005f3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005f38:	2302      	movs	r3, #2
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b090      	sub	sp, #64	; 0x40
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f52:	e050      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d04c      	beq.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f62:	f7fc ffff 	bl	8002f64 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d241      	bcs.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f92:	637a      	str	r2, [r7, #52]	; 0x34
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3314      	adds	r3, #20
 8005fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc6:	623a      	str	r2, [r7, #32]
 8005fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	e841 2300 	strex	r3, r2, [r1]
 8005fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1e5      	bne.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e00f      	b.n	8006016 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	429a      	cmp	r2, r3
 8006012:	d09f      	beq.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3740      	adds	r7, #64	; 0x40
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
	...

08006020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689a      	ldr	r2, [r3, #8]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	4313      	orrs	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800605a:	f023 030c 	bic.w	r3, r3, #12
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	430b      	orrs	r3, r1
 8006066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699a      	ldr	r2, [r3, #24]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a2c      	ldr	r2, [pc, #176]	; (8006134 <UART_SetConfig+0x114>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d103      	bne.n	8006090 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7ff faa2 	bl	80055d0 <HAL_RCC_GetPCLK2Freq>
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	e002      	b.n	8006096 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7ff fa8a 	bl	80055a8 <HAL_RCC_GetPCLK1Freq>
 8006094:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009a      	lsls	r2, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <UART_SetConfig+0x118>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	0119      	lsls	r1, r3, #4
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	009a      	lsls	r2, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <UART_SetConfig+0x118>)
 80060ce:	fba3 0302 	umull	r0, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2064      	movs	r0, #100	; 0x64
 80060d6:	fb00 f303 	mul.w	r3, r0, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	3332      	adds	r3, #50	; 0x32
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <UART_SetConfig+0x118>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060ec:	4419      	add	r1, r3
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009a      	lsls	r2, r3, #2
 80060f8:	441a      	add	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	fbb2 f2f3 	udiv	r2, r2, r3
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <UART_SetConfig+0x118>)
 8006106:	fba3 0302 	umull	r0, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2064      	movs	r0, #100	; 0x64
 800610e:	fb00 f303 	mul.w	r3, r0, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	3332      	adds	r3, #50	; 0x32
 8006118:	4a07      	ldr	r2, [pc, #28]	; (8006138 <UART_SetConfig+0x118>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	440a      	add	r2, r1
 800612a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40013800 	.word	0x40013800
 8006138:	51eb851f 	.word	0x51eb851f

0800613c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006142:	f3ef 8305 	mrs	r3, IPSR
 8006146:	60bb      	str	r3, [r7, #8]
  return(result);
 8006148:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10f      	bne.n	800616e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614e:	f3ef 8310 	mrs	r3, PRIMASK
 8006152:	607b      	str	r3, [r7, #4]
  return(result);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <osKernelInitialize+0x32>
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <osKernelInitialize+0x60>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d109      	bne.n	8006176 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006162:	f3ef 8311 	mrs	r3, BASEPRI
 8006166:	603b      	str	r3, [r7, #0]
  return(result);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800616e:	f06f 0305 	mvn.w	r3, #5
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e00c      	b.n	8006190 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006176:	4b09      	ldr	r3, [pc, #36]	; (800619c <osKernelInitialize+0x60>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <osKernelInitialize+0x60>)
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e002      	b.n	8006190 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006190:	68fb      	ldr	r3, [r7, #12]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	20001e28 	.word	0x20001e28

080061a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061a6:	f3ef 8305 	mrs	r3, IPSR
 80061aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80061ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10f      	bne.n	80061d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b2:	f3ef 8310 	mrs	r3, PRIMASK
 80061b6:	607b      	str	r3, [r7, #4]
  return(result);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <osKernelStart+0x32>
 80061be:	4b11      	ldr	r3, [pc, #68]	; (8006204 <osKernelStart+0x64>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d109      	bne.n	80061da <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061c6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ca:	603b      	str	r3, [r7, #0]
  return(result);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <osKernelStart+0x3a>
    stat = osErrorISR;
 80061d2:	f06f 0305 	mvn.w	r3, #5
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e00e      	b.n	80061f8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80061da:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <osKernelStart+0x64>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d107      	bne.n	80061f2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <osKernelStart+0x64>)
 80061e4:	2202      	movs	r2, #2
 80061e6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80061e8:	f001 fb18 	bl	800781c <vTaskStartScheduler>
      stat = osOK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	e002      	b.n	80061f8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80061f2:	f04f 33ff 	mov.w	r3, #4294967295
 80061f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061f8:	68fb      	ldr	r3, [r7, #12]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20001e28 	.word	0x20001e28

08006208 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b092      	sub	sp, #72	; 0x48
 800620c:	af04      	add	r7, sp, #16
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006218:	f3ef 8305 	mrs	r3, IPSR
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 8094 	bne.w	800634e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006226:	f3ef 8310 	mrs	r3, PRIMASK
 800622a:	623b      	str	r3, [r7, #32]
  return(result);
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 808d 	bne.w	800634e <osThreadNew+0x146>
 8006234:	4b48      	ldr	r3, [pc, #288]	; (8006358 <osThreadNew+0x150>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d106      	bne.n	800624a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	61fb      	str	r3, [r7, #28]
  return(result);
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 8082 	bne.w	800634e <osThreadNew+0x146>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d07e      	beq.n	800634e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006254:	2318      	movs	r3, #24
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006258:	2300      	movs	r3, #0
 800625a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800625c:	f107 031b 	add.w	r3, r7, #27
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d045      	beq.n	80062fa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <osThreadNew+0x74>
        name = attr->name;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <osThreadNew+0x9a>
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	2b38      	cmp	r3, #56	; 0x38
 8006294:	d805      	bhi.n	80062a2 <osThreadNew+0x9a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <osThreadNew+0x9e>
        return (NULL);
 80062a2:	2300      	movs	r3, #0
 80062a4:	e054      	b.n	8006350 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <osThreadNew+0xd4>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	2b5b      	cmp	r3, #91	; 0x5b
 80062c4:	d90a      	bls.n	80062dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d006      	beq.n	80062dc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <osThreadNew+0xd4>
        mem = 1;
 80062d6:	2301      	movs	r3, #1
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062da:	e010      	b.n	80062fe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10c      	bne.n	80062fe <osThreadNew+0xf6>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <osThreadNew+0xf6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <osThreadNew+0xf6>
          mem = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f8:	e001      	b.n	80062fe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	2b01      	cmp	r3, #1
 8006302:	d110      	bne.n	8006326 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800630c:	9202      	str	r2, [sp, #8]
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006318:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f001 f83c 	bl	8007398 <xTaskCreateStatic>
 8006320:	4603      	mov	r3, r0
 8006322:	617b      	str	r3, [r7, #20]
 8006324:	e013      	b.n	800634e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	b29a      	uxth	r2, r3
 8006330:	f107 0314 	add.w	r3, r7, #20
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f001 f886 	bl	8007450 <xTaskCreate>
 8006344:	4603      	mov	r3, r0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d001      	beq.n	800634e <osThreadNew+0x146>
          hTask = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800634e:	697b      	ldr	r3, [r7, #20]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3738      	adds	r7, #56	; 0x38
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20001e28 	.word	0x20001e28

0800635c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006364:	f3ef 8305 	mrs	r3, IPSR
 8006368:	613b      	str	r3, [r7, #16]
  return(result);
 800636a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10f      	bne.n	8006390 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006370:	f3ef 8310 	mrs	r3, PRIMASK
 8006374:	60fb      	str	r3, [r7, #12]
  return(result);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d109      	bne.n	8006390 <osDelay+0x34>
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <osDelay+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d109      	bne.n	8006398 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006384:	f3ef 8311 	mrs	r3, BASEPRI
 8006388:	60bb      	str	r3, [r7, #8]
  return(result);
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <osDelay+0x3c>
    stat = osErrorISR;
 8006390:	f06f 0305 	mvn.w	r3, #5
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e007      	b.n	80063a8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 f990 	bl	80076c8 <vTaskDelay>
    }
  }

  return (stat);
 80063a8:	697b      	ldr	r3, [r7, #20]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20001e28 	.word	0x20001e28

080063b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c8:	f3ef 8305 	mrs	r3, IPSR
 80063cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80063ce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d16f      	bne.n	80064b4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d4:	f3ef 8310 	mrs	r3, PRIMASK
 80063d8:	617b      	str	r3, [r7, #20]
  return(result);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d169      	bne.n	80064b4 <osMessageQueueNew+0xfc>
 80063e0:	4b37      	ldr	r3, [pc, #220]	; (80064c0 <osMessageQueueNew+0x108>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d105      	bne.n	80063f4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063e8:	f3ef 8311 	mrs	r3, BASEPRI
 80063ec:	613b      	str	r3, [r7, #16]
  return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d15f      	bne.n	80064b4 <osMessageQueueNew+0xfc>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d05c      	beq.n	80064b4 <osMessageQueueNew+0xfc>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d059      	beq.n	80064b4 <osMessageQueueNew+0xfc>
    mem = -1;
 8006400:	f04f 33ff 	mov.w	r3, #4294967295
 8006404:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d029      	beq.n	8006460 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <osMessageQueueNew+0x82>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b4f      	cmp	r3, #79	; 0x4f
 800641a:	d90e      	bls.n	800643a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <osMessageQueueNew+0x82>
        mem = 1;
 8006434:	2301      	movs	r3, #1
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	e014      	b.n	8006464 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d110      	bne.n	8006464 <osMessageQueueNew+0xac>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10c      	bne.n	8006464 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <osMessageQueueNew+0xac>
          mem = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	623b      	str	r3, [r7, #32]
 800645e:	e001      	b.n	8006464 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10b      	bne.n	8006482 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2100      	movs	r1, #0
 8006474:	9100      	str	r1, [sp, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fa53 	bl	8006924 <xQueueGenericCreateStatic>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24
 8006480:	e008      	b.n	8006494 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006488:	2200      	movs	r2, #0
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fac0 	bl	8006a12 <xQueueGenericCreate>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00c      	beq.n	80064b4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e001      	b.n	80064ac <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80064ac:	69f9      	ldr	r1, [r7, #28]
 80064ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064b0:	f000 ff16 	bl	80072e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3728      	adds	r7, #40	; 0x28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20001e28 	.word	0x20001e28

080064c4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064d8:	2300      	movs	r3, #0
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064dc:	f3ef 8305 	mrs	r3, IPSR
 80064e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80064e2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10f      	bne.n	8006508 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d109      	bne.n	8006508 <osMessageQueuePut+0x44>
 80064f4:	4b2b      	ldr	r3, [pc, #172]	; (80065a4 <osMessageQueuePut+0xe0>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d12e      	bne.n	800655a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006500:	617b      	str	r3, [r7, #20]
  return(result);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d028      	beq.n	800655a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <osMessageQueuePut+0x56>
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <osMessageQueuePut+0x56>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800651a:	f06f 0303 	mvn.w	r3, #3
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006520:	e039      	b.n	8006596 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006526:	f107 0210 	add.w	r2, r7, #16
 800652a:	2300      	movs	r3, #0
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6a38      	ldr	r0, [r7, #32]
 8006530:	f000 fbce 	bl	8006cd0 <xQueueGenericSendFromISR>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d003      	beq.n	8006542 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800653a:	f06f 0302 	mvn.w	r3, #2
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006540:	e029      	b.n	8006596 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d026      	beq.n	8006596 <osMessageQueuePut+0xd2>
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <osMessageQueuePut+0xe4>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006558:	e01d      	b.n	8006596 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <osMessageQueuePut+0xa2>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006566:	f06f 0303 	mvn.w	r3, #3
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
 800656c:	e014      	b.n	8006598 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800656e:	2300      	movs	r3, #0
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	6a38      	ldr	r0, [r7, #32]
 8006576:	f000 faad 	bl	8006ad4 <xQueueGenericSend>
 800657a:	4603      	mov	r3, r0
 800657c:	2b01      	cmp	r3, #1
 800657e:	d00b      	beq.n	8006598 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006586:	f06f 0301 	mvn.w	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
 800658c:	e004      	b.n	8006598 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800658e:	f06f 0302 	mvn.w	r3, #2
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
 8006594:	e000      	b.n	8006598 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006596:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800659a:	4618      	mov	r0, r3
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20001e28 	.word	0x20001e28
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c2:	f3ef 8305 	mrs	r3, IPSR
 80065c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80065c8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ce:	f3ef 8310 	mrs	r3, PRIMASK
 80065d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <osMessageQueueGet+0x42>
 80065da:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <osMessageQueueGet+0xdc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d12e      	bne.n	8006640 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065e2:	f3ef 8311 	mrs	r3, BASEPRI
 80065e6:	617b      	str	r3, [r7, #20]
  return(result);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d028      	beq.n	8006640 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <osMessageQueueGet+0x54>
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <osMessageQueueGet+0x54>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d003      	beq.n	8006608 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006600:	f06f 0303 	mvn.w	r3, #3
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006606:	e038      	b.n	800667a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	461a      	mov	r2, r3
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	6a38      	ldr	r0, [r7, #32]
 8006616:	f000 fcd3 	bl	8006fc0 <xQueueReceiveFromISR>
 800661a:	4603      	mov	r3, r0
 800661c:	2b01      	cmp	r3, #1
 800661e:	d003      	beq.n	8006628 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006620:	f06f 0302 	mvn.w	r3, #2
 8006624:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006626:	e028      	b.n	800667a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d025      	beq.n	800667a <osMessageQueueGet+0xce>
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <osMessageQueueGet+0xe0>)
 8006630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800663e:	e01c      	b.n	800667a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osMessageQueueGet+0xa0>
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800664c:	f06f 0303 	mvn.w	r3, #3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
 8006652:	e013      	b.n	800667c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68b9      	ldr	r1, [r7, #8]
 8006658:	6a38      	ldr	r0, [r7, #32]
 800665a:	f000 fbd1 	bl	8006e00 <xQueueReceive>
 800665e:	4603      	mov	r3, r0
 8006660:	2b01      	cmp	r3, #1
 8006662:	d00b      	beq.n	800667c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800666a:	f06f 0301 	mvn.w	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
 8006670:	e004      	b.n	800667c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006672:	f06f 0302 	mvn.w	r3, #2
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	e000      	b.n	800667c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800667a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001e28 	.word	0x20001e28
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a06      	ldr	r2, [pc, #24]	; (80066b8 <vApplicationGetIdleTaskMemory+0x28>)
 80066a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4a05      	ldr	r2, [pc, #20]	; (80066bc <vApplicationGetIdleTaskMemory+0x2c>)
 80066a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2280      	movs	r2, #128	; 0x80
 80066ac:	601a      	str	r2, [r3, #0]
}
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr
 80066b8:	20001e2c 	.word	0x20001e2c
 80066bc:	20001e88 	.word	0x20001e88

080066c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a07      	ldr	r2, [pc, #28]	; (80066ec <vApplicationGetTimerTaskMemory+0x2c>)
 80066d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <vApplicationGetTimerTaskMemory+0x30>)
 80066d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066de:	601a      	str	r2, [r3, #0]
}
 80066e0:	bf00      	nop
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	20002088 	.word	0x20002088
 80066f0:	200020e4 	.word	0x200020e4

080066f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f103 0208 	add.w	r2, r3, #8
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f103 0208 	add.w	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f103 0208 	add.w	r2, r3, #8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689a      	ldr	r2, [r3, #8]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	601a      	str	r2, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a6:	d103      	bne.n	80067b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e00c      	b.n	80067ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3308      	adds	r3, #8
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e002      	b.n	80067be <vListInsert+0x2e>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d2f6      	bcs.n	80067b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6892      	ldr	r2, [r2, #8]
 8006816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6852      	ldr	r2, [r2, #4]
 8006820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d103      	bne.n	8006834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	1e5a      	subs	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr
	...

08006854 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800687e:	f002 f8fd 	bl	8008a7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	3b01      	subs	r3, #1
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	441a      	add	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	22ff      	movs	r2, #255	; 0xff
 80068ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d114      	bne.n	80068fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01a      	beq.n	8006912 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3310      	adds	r3, #16
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fa25 	bl	8007d30 <xTaskRemoveFromEventList>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d012      	beq.n	8006912 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <xQueueGenericReset+0xcc>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	e009      	b.n	8006912 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3310      	adds	r3, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f7ff fef6 	bl	80066f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3324      	adds	r3, #36	; 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fef1 	bl	80066f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006912:	f002 f8e3 	bl	8008adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006916:	2301      	movs	r3, #1
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08e      	sub	sp, #56	; 0x38
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <xQueueGenericCreateStatic+0x52>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <xQueueGenericCreateStatic+0x56>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueGenericCreateStatic+0x58>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	623b      	str	r3, [r7, #32]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <xQueueGenericCreateStatic+0x7e>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xQueueGenericCreateStatic+0x82>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericCreateStatic+0x84>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61fb      	str	r3, [r7, #28]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069c2:	2350      	movs	r3, #80	; 0x50
 80069c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b50      	cmp	r3, #80	; 0x50
 80069ca:	d00a      	beq.n	80069e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61bb      	str	r3, [r7, #24]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f843 	bl	8006a8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3730      	adds	r7, #48	; 0x30
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b08a      	sub	sp, #40	; 0x28
 8006a16:	af02      	add	r7, sp, #8
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	613b      	str	r3, [r7, #16]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	e004      	b.n	8006a52 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	fb02 f303 	mul.w	r3, r2, r3
 8006a50:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3350      	adds	r3, #80	; 0x50
 8006a56:	4618      	mov	r0, r3
 8006a58:	f002 f910 	bl	8008c7c <pvPortMalloc>
 8006a5c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00f      	beq.n	8006a84 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	3350      	adds	r3, #80	; 0x50
 8006a68:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a72:	79fa      	ldrb	r2, [r7, #7]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f805 	bl	8006a8e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a84:	69bb      	ldr	r3, [r7, #24]
	}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e002      	b.n	8006ab0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006abc:	2101      	movs	r1, #1
 8006abe:	69b8      	ldr	r0, [r7, #24]
 8006ac0:	f7ff fec8 	bl	8006854 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08e      	sub	sp, #56	; 0x38
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xQueueGenericSend+0x32>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x40>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <xQueueGenericSend+0x44>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <xQueueGenericSend+0x46>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <xQueueGenericSend+0x60>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d103      	bne.n	8006b42 <xQueueGenericSend+0x6e>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <xQueueGenericSend+0x72>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <xQueueGenericSend+0x74>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	623b      	str	r3, [r7, #32]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b62:	f001 faa7 	bl	80080b4 <xTaskGetSchedulerState>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <xQueueGenericSend+0x9e>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <xQueueGenericSend+0xa2>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e000      	b.n	8006b78 <xQueueGenericSend+0xa4>
 8006b76:	2300      	movs	r3, #0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10a      	bne.n	8006b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	61fb      	str	r3, [r7, #28]
}
 8006b8e:	bf00      	nop
 8006b90:	e7fe      	b.n	8006b90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b92:	f001 ff73 	bl	8008a7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <xQueueGenericSend+0xd4>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d129      	bne.n	8006bfc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bae:	f000 fa87 	bl	80070c0 <prvCopyDataToQueue>
 8006bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d010      	beq.n	8006bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	3324      	adds	r3, #36	; 0x24
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 f8b5 	bl	8007d30 <xTaskRemoveFromEventList>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bcc:	4b3f      	ldr	r3, [pc, #252]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	e00a      	b.n	8006bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d007      	beq.n	8006bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006be4:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bf4:	f001 ff72 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e063      	b.n	8006cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c02:	f001 ff6b 	bl	8008adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e05c      	b.n	8006cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c10:	f107 0314 	add.w	r3, r7, #20
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 f8ef 	bl	8007df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c1e:	f001 ff5d 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c22:	f000 fe61 	bl	80078e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c26:	f001 ff29 	bl	8008a7c <vPortEnterCritical>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d103      	bne.n	8006c40 <xQueueGenericSend+0x16c>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c46:	b25b      	sxtb	r3, r3
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x182>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c56:	f001 ff41 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c5a:	1d3a      	adds	r2, r7, #4
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4611      	mov	r1, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 f8de 	bl	8007e24 <xTaskCheckForTimeOut>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d124      	bne.n	8006cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c70:	f000 fb1e 	bl	80072b0 <prvIsQueueFull>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f804 	bl	8007c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8a:	f000 faa9 	bl	80071e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c8e:	f000 fe39 	bl	8007904 <xTaskResumeAll>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f47f af7c 	bne.w	8006b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ccc <xQueueGenericSend+0x1f8>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	e772      	b.n	8006b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cae:	f000 fa97 	bl	80071e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb2:	f000 fe27 	bl	8007904 <xTaskResumeAll>
 8006cb6:	e76c      	b.n	8006b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cba:	f000 fa91 	bl	80071e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cbe:	f000 fe21 	bl	8007904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cc2:	2300      	movs	r3, #0
		}
	}
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3738      	adds	r7, #56	; 0x38
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <xQueueGenericSendFromISR+0x3c>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <xQueueGenericSendFromISR+0x40>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <xQueueGenericSendFromISR+0x42>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	623b      	str	r3, [r7, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d103      	bne.n	8006d3a <xQueueGenericSendFromISR+0x6a>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericSendFromISR+0x6e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericSendFromISR+0x70>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61fb      	str	r3, [r7, #28]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5a:	f001 ff51 	bl	8008c00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	61ba      	str	r2, [r7, #24]
 8006d74:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d76:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <xQueueGenericSendFromISR+0xbc>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d12c      	bne.n	8006de6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9c:	f000 f990 	bl	80070c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006da0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d112      	bne.n	8006dd0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	3324      	adds	r3, #36	; 0x24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 ffba 	bl	8007d30 <xTaskRemoveFromEventList>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e007      	b.n	8006de0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	b25a      	sxtb	r2, r3
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006de0:	2301      	movs	r3, #1
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006de4:	e001      	b.n	8006dea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006df4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3738      	adds	r7, #56	; 0x38
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	; 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <xQueueReceive+0x30>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	623b      	str	r3, [r7, #32]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <xQueueReceive+0x3e>
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <xQueueReceive+0x42>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <xQueueReceive+0x44>
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueReceive+0x5e>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	61fb      	str	r3, [r7, #28]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e5e:	f001 f929 	bl	80080b4 <xTaskGetSchedulerState>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <xQueueReceive+0x6e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <xQueueReceive+0x72>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <xQueueReceive+0x74>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10a      	bne.n	8006e8e <xQueueReceive+0x8e>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	61bb      	str	r3, [r7, #24]
}
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e8e:	f001 fdf5 	bl	8008a7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01f      	beq.n	8006ede <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea2:	f000 f977 	bl	8007194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	1e5a      	subs	r2, r3, #1
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00f      	beq.n	8006ed6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	3310      	adds	r3, #16
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 ff38 	bl	8007d30 <xTaskRemoveFromEventList>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ec6:	4b3d      	ldr	r3, [pc, #244]	; (8006fbc <xQueueReceive+0x1bc>)
 8006ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ed6:	f001 fe01 	bl	8008adc <vPortExitCritical>
				return pdPASS;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e069      	b.n	8006fb2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee4:	f001 fdfa 	bl	8008adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e062      	b.n	8006fb2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef2:	f107 0310 	add.w	r3, r7, #16
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 ff7e 	bl	8007df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f00:	f001 fdec 	bl	8008adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f04:	f000 fcf0 	bl	80078e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f08:	f001 fdb8 	bl	8008a7c <vPortEnterCritical>
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d103      	bne.n	8006f22 <xQueueReceive+0x122>
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2e:	d103      	bne.n	8006f38 <xQueueReceive+0x138>
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f38:	f001 fdd0 	bl	8008adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3c:	1d3a      	adds	r2, r7, #4
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 ff6d 	bl	8007e24 <xTaskCheckForTimeOut>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d123      	bne.n	8006f98 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f52:	f000 f997 	bl	8007284 <prvIsQueueEmpty>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d017      	beq.n	8006f8c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fe93 	bl	8007c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6c:	f000 f938 	bl	80071e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f70:	f000 fcc8 	bl	8007904 <xTaskResumeAll>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d189      	bne.n	8006e8e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <xQueueReceive+0x1bc>)
 8006f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	e780      	b.n	8006e8e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f8e:	f000 f927 	bl	80071e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f92:	f000 fcb7 	bl	8007904 <xTaskResumeAll>
 8006f96:	e77a      	b.n	8006e8e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9a:	f000 f921 	bl	80071e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9e:	f000 fcb1 	bl	8007904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa4:	f000 f96e 	bl	8007284 <prvIsQueueEmpty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f43f af6f 	beq.w	8006e8e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3730      	adds	r7, #48	; 0x30
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08e      	sub	sp, #56	; 0x38
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	623b      	str	r3, [r7, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <xQueueReceiveFromISR+0x3a>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <xQueueReceiveFromISR+0x3e>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <xQueueReceiveFromISR+0x40>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	61fb      	str	r3, [r7, #28]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800701a:	f001 fdf1 	bl	8008c00 <vPortValidateInterruptPriority>
	__asm volatile
 800701e:	f3ef 8211 	mrs	r2, BASEPRI
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	61ba      	str	r2, [r7, #24]
 8007034:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007036:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d02f      	beq.n	80070a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800704c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007054:	f000 f89e 	bl	8007194 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007060:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d112      	bne.n	8007090 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d016      	beq.n	80070a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	3310      	adds	r3, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fe5a 	bl	8007d30 <xTaskRemoveFromEventList>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e007      	b.n	80070a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007094:	3301      	adds	r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	b25a      	sxtb	r2, r3
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070a0:	2301      	movs	r3, #1
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	e001      	b.n	80070aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f383 8811 	msr	BASEPRI, r3
}
 80070b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3738      	adds	r7, #56	; 0x38
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10d      	bne.n	80070fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d14d      	bne.n	8007182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f800 	bl	80080f0 <xTaskPriorityDisinherit>
 80070f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
 80070f8:	e043      	b.n	8007182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d119      	bne.n	8007134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6898      	ldr	r0, [r3, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	461a      	mov	r2, r3
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	f001 ffb8 	bl	8009080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	441a      	add	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d32b      	bcc.n	8007182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	609a      	str	r2, [r3, #8]
 8007132:	e026      	b.n	8007182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	68d8      	ldr	r0, [r3, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	461a      	mov	r2, r3
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	f001 ff9e 	bl	8009080 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	425b      	negs	r3, r3
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d207      	bcs.n	8007170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	425b      	negs	r3, r3
 800716a:	441a      	add	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b02      	cmp	r3, #2
 8007174:	d105      	bne.n	8007182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3b01      	subs	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800718a:	697b      	ldr	r3, [r7, #20]
}
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d018      	beq.n	80071d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	441a      	add	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d303      	bcc.n	80071c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68d9      	ldr	r1, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	461a      	mov	r2, r3
 80071d2:	6838      	ldr	r0, [r7, #0]
 80071d4:	f001 ff54 	bl	8009080 <memcpy>
	}
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071e8:	f001 fc48 	bl	8008a7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f4:	e011      	b.n	800721a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3324      	adds	r3, #36	; 0x24
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fd94 	bl	8007d30 <xTaskRemoveFromEventList>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800720e:	f000 fe6b 	bl	8007ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	3b01      	subs	r3, #1
 8007216:	b2db      	uxtb	r3, r3
 8007218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	dce9      	bgt.n	80071f6 <prvUnlockQueue+0x16>
 8007222:	e000      	b.n	8007226 <prvUnlockQueue+0x46>
					break;
 8007224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	22ff      	movs	r2, #255	; 0xff
 800722a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800722e:	f001 fc55 	bl	8008adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007232:	f001 fc23 	bl	8008a7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800723c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800723e:	e011      	b.n	8007264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d012      	beq.n	800726e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fd6f 	bl	8007d30 <xTaskRemoveFromEventList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007258:	f000 fe46 	bl	8007ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	3b01      	subs	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007268:	2b00      	cmp	r3, #0
 800726a:	dce9      	bgt.n	8007240 <prvUnlockQueue+0x60>
 800726c:	e000      	b.n	8007270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800726e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	22ff      	movs	r2, #255	; 0xff
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007278:	f001 fc30 	bl	8008adc <vPortExitCritical>
}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800728c:	f001 fbf6 	bl	8008a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e001      	b.n	80072a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072a2:	f001 fc1b 	bl	8008adc <vPortExitCritical>

	return xReturn;
 80072a6:	68fb      	ldr	r3, [r7, #12]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072b8:	f001 fbe0 	bl	8008a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d102      	bne.n	80072ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e001      	b.n	80072d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 fc03 	bl	8008adc <vPortExitCritical>

	return xReturn;
 80072d6:	68fb      	ldr	r3, [r7, #12]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e014      	b.n	800731a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <vQueueAddToRegistry+0x4c>)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10b      	bne.n	8007314 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072fc:	490b      	ldr	r1, [pc, #44]	; (800732c <vQueueAddToRegistry+0x4c>)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007306:	4a09      	ldr	r2, [pc, #36]	; (800732c <vQueueAddToRegistry+0x4c>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4413      	add	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007312:	e006      	b.n	8007322 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3301      	adds	r3, #1
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b07      	cmp	r3, #7
 800731e:	d9e7      	bls.n	80072f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	200024e4 	.word	0x200024e4

08007330 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007340:	f001 fb9c 	bl	8008a7c <vPortEnterCritical>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800734a:	b25b      	sxtb	r3, r3
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <vQueueWaitForMessageRestricted+0x2a>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007360:	b25b      	sxtb	r3, r3
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d103      	bne.n	8007370 <vQueueWaitForMessageRestricted+0x40>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007370:	f001 fbb4 	bl	8008adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3324      	adds	r3, #36	; 0x24
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fca7 	bl	8007cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800738a:	6978      	ldr	r0, [r7, #20]
 800738c:	f7ff ff28 	bl	80071e0 <prvUnlockQueue>
	}
 8007390:	bf00      	nop
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	; 0x38
 800739c:	af04      	add	r7, sp, #16
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	623b      	str	r3, [r7, #32]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTaskCreateStatic+0x46>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61fb      	str	r3, [r7, #28]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073de:	235c      	movs	r3, #92	; 0x5c
 80073e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b5c      	cmp	r3, #92	; 0x5c
 80073e6:	d00a      	beq.n	80073fe <xTaskCreateStatic+0x66>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	61bb      	str	r3, [r7, #24]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d01e      	beq.n	8007442 <xTaskCreateStatic+0xaa>
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01b      	beq.n	8007442 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007412:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	2202      	movs	r2, #2
 8007418:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800741c:	2300      	movs	r3, #0
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	9302      	str	r3, [sp, #8]
 8007424:	f107 0314 	add.w	r3, r7, #20
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f850 	bl	80074da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800743a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800743c:	f000 f8d4 	bl	80075e8 <prvAddNewTaskToReadyList>
 8007440:	e001      	b.n	8007446 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007446:	697b      	ldr	r3, [r7, #20]
	}
 8007448:	4618      	mov	r0, r3
 800744a:	3728      	adds	r7, #40	; 0x28
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08c      	sub	sp, #48	; 0x30
 8007454:	af04      	add	r7, sp, #16
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	4613      	mov	r3, r2
 800745e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fc09 	bl	8008c7c <pvPortMalloc>
 800746a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00e      	beq.n	8007490 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007472:	205c      	movs	r0, #92	; 0x5c
 8007474:	f001 fc02 	bl	8008c7c <pvPortMalloc>
 8007478:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
 8007486:	e005      	b.n	8007494 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007488:	6978      	ldr	r0, [r7, #20]
 800748a:	f001 fcbb 	bl	8008e04 <vPortFree>
 800748e:	e001      	b.n	8007494 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007490:	2300      	movs	r3, #0
 8007492:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d017      	beq.n	80074ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	2300      	movs	r3, #0
 80074a6:	9303      	str	r3, [sp, #12]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68b9      	ldr	r1, [r7, #8]
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f80e 	bl	80074da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074be:	69f8      	ldr	r0, [r7, #28]
 80074c0:	f000 f892 	bl	80075e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074c4:	2301      	movs	r3, #1
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	e002      	b.n	80074d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295
 80074ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074d0:	69bb      	ldr	r3, [r7, #24]
	}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3720      	adds	r7, #32
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b088      	sub	sp, #32
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	461a      	mov	r2, r3
 80074f2:	21a5      	movs	r1, #165	; 0xa5
 80074f4:	f001 fdd2 	bl	800909c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007502:	3b01      	subs	r3, #1
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f023 0307 	bic.w	r3, r3, #7
 8007510:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <prvInitialiseNewTask+0x58>
	__asm volatile
 800751c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007520:	f383 8811 	msr	BASEPRI, r3
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	617b      	str	r3, [r7, #20]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007532:	2300      	movs	r3, #0
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	e012      	b.n	800755e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	4413      	add	r3, r2
 800753e:	7819      	ldrb	r1, [r3, #0]
 8007540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	3334      	adds	r3, #52	; 0x34
 8007548:	460a      	mov	r2, r1
 800754a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d9e9      	bls.n	8007538 <prvInitialiseNewTask+0x5e>
 8007564:	e000      	b.n	8007568 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007566:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2b37      	cmp	r3, #55	; 0x37
 8007574:	d901      	bls.n	800757a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007576:	2337      	movs	r3, #55	; 0x37
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007584:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2200      	movs	r2, #0
 800758a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	3304      	adds	r3, #4
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff f8ce 	bl	8006732 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	3318      	adds	r3, #24
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f8c9 	bl	8006732 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	2200      	movs	r2, #0
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075c4:	683a      	ldr	r2, [r7, #0]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	69b8      	ldr	r0, [r7, #24]
 80075ca:	f001 f965 	bl	8008898 <pxPortInitialiseStack>
 80075ce:	4602      	mov	r2, r0
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e0:	bf00      	nop
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075f0:	f001 fa44 	bl	8008a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075f4:	4b2d      	ldr	r3, [pc, #180]	; (80076ac <prvAddNewTaskToReadyList+0xc4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	4a2c      	ldr	r2, [pc, #176]	; (80076ac <prvAddNewTaskToReadyList+0xc4>)
 80075fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075fe:	4b2c      	ldr	r3, [pc, #176]	; (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007606:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800760c:	4b27      	ldr	r3, [pc, #156]	; (80076ac <prvAddNewTaskToReadyList+0xc4>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d110      	bne.n	8007636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007614:	f000 fc8c 	bl	8007f30 <prvInitialiseTaskLists>
 8007618:	e00d      	b.n	8007636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800761a:	4b26      	ldr	r3, [pc, #152]	; (80076b4 <prvAddNewTaskToReadyList+0xcc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	429a      	cmp	r2, r3
 800762e:	d802      	bhi.n	8007636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007636:	4b20      	ldr	r3, [pc, #128]	; (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	4a1e      	ldr	r2, [pc, #120]	; (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 800763e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007640:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <prvAddNewTaskToReadyList+0xd0>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <prvAddNewTaskToReadyList+0xd4>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d903      	bls.n	800765c <prvAddNewTaskToReadyList+0x74>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	4a18      	ldr	r2, [pc, #96]	; (80076bc <prvAddNewTaskToReadyList+0xd4>)
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <prvAddNewTaskToReadyList+0xd8>)
 800766a:	441a      	add	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7ff f869 	bl	800674a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007678:	f001 fa30 	bl	8008adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800767c:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <prvAddNewTaskToReadyList+0xcc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00e      	beq.n	80076a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <prvAddNewTaskToReadyList+0xc8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d207      	bcs.n	80076a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007692:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <prvAddNewTaskToReadyList+0xdc>)
 8007694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	200029f8 	.word	0x200029f8
 80076b0:	20002524 	.word	0x20002524
 80076b4:	20002a04 	.word	0x20002a04
 80076b8:	20002a14 	.word	0x20002a14
 80076bc:	20002a00 	.word	0x20002a00
 80076c0:	20002528 	.word	0x20002528
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <vTaskDelay+0x60>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00a      	beq.n	80076f8 <vTaskDelay+0x30>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
}
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076f8:	f000 f8f6 	bl	80078e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fd64 	bl	80081cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007704:	f000 f8fe 	bl	8007904 <xTaskResumeAll>
 8007708:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d107      	bne.n	8007720 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <vTaskDelay+0x64>)
 8007712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20002a20 	.word	0x20002a20
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007738:	f001 f9a0 	bl	8008a7c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <vTaskSuspend+0x18>
 8007742:	4b30      	ldr	r3, [pc, #192]	; (8007804 <vTaskSuspend+0xd4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	e000      	b.n	800774a <vTaskSuspend+0x1a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3304      	adds	r3, #4
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f855 	bl	8006800 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d004      	beq.n	8007768 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3318      	adds	r3, #24
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f84c 	bl	8006800 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4826      	ldr	r0, [pc, #152]	; (8007808 <vTaskSuspend+0xd8>)
 8007770:	f7fe ffeb 	bl	800674a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d103      	bne.n	8007788 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007788:	f001 f9a8 	bl	8008adc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800778c:	4b1f      	ldr	r3, [pc, #124]	; (800780c <vTaskSuspend+0xdc>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d005      	beq.n	80077a0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007794:	f001 f972 	bl	8008a7c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007798:	f000 fc68 	bl	800806c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800779c:	f001 f99e 	bl	8008adc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80077a0:	4b18      	ldr	r3, [pc, #96]	; (8007804 <vTaskSuspend+0xd4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d127      	bne.n	80077fa <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80077aa:	4b18      	ldr	r3, [pc, #96]	; (800780c <vTaskSuspend+0xdc>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d017      	beq.n	80077e2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <vTaskSuspend+0xe0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <vTaskSuspend+0xa0>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	60bb      	str	r3, [r7, #8]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80077d0:	4b10      	ldr	r3, [pc, #64]	; (8007814 <vTaskSuspend+0xe4>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e0:	e00b      	b.n	80077fa <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <vTaskSuspend+0xd8>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <vTaskSuspend+0xe8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d103      	bne.n	80077f6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <vTaskSuspend+0xd4>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
	}
 80077f4:	e001      	b.n	80077fa <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80077f6:	f000 f9ef 	bl	8007bd8 <vTaskSwitchContext>
	}
 80077fa:	bf00      	nop
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20002524 	.word	0x20002524
 8007808:	200029e4 	.word	0x200029e4
 800780c:	20002a04 	.word	0x20002a04
 8007810:	20002a20 	.word	0x20002a20
 8007814:	e000ed04 	.word	0xe000ed04
 8007818:	200029f8 	.word	0x200029f8

0800781c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800782a:	463a      	mov	r2, r7
 800782c:	1d39      	adds	r1, r7, #4
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe ff2c 	bl	8006690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	9202      	str	r2, [sp, #8]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	2300      	movs	r3, #0
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	460a      	mov	r2, r1
 800784a:	4921      	ldr	r1, [pc, #132]	; (80078d0 <vTaskStartScheduler+0xb4>)
 800784c:	4821      	ldr	r0, [pc, #132]	; (80078d4 <vTaskStartScheduler+0xb8>)
 800784e:	f7ff fda3 	bl	8007398 <xTaskCreateStatic>
 8007852:	4603      	mov	r3, r0
 8007854:	4a20      	ldr	r2, [pc, #128]	; (80078d8 <vTaskStartScheduler+0xbc>)
 8007856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007858:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <vTaskStartScheduler+0xbc>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007860:	2301      	movs	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e001      	b.n	800786a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d102      	bne.n	8007876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007870:	f000 fd00 	bl	8008274 <xTimerCreateTimerTask>
 8007874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d116      	bne.n	80078aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	613b      	str	r3, [r7, #16]
}
 800788e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007890:	4b12      	ldr	r3, [pc, #72]	; (80078dc <vTaskStartScheduler+0xc0>)
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007898:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <vTaskStartScheduler+0xc4>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800789e:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <vTaskStartScheduler+0xc8>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078a4:	f001 f878 	bl	8008998 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078a8:	e00e      	b.n	80078c8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d10a      	bne.n	80078c8 <vTaskStartScheduler+0xac>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	60fb      	str	r3, [r7, #12]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <vTaskStartScheduler+0xaa>
}
 80078c8:	bf00      	nop
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	0800dae4 	.word	0x0800dae4
 80078d4:	08007f01 	.word	0x08007f01
 80078d8:	20002a1c 	.word	0x20002a1c
 80078dc:	20002a18 	.word	0x20002a18
 80078e0:	20002a04 	.word	0x20002a04
 80078e4:	200029fc 	.word	0x200029fc

080078e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078e8:	b480      	push	{r7}
 80078ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078ec:	4b04      	ldr	r3, [pc, #16]	; (8007900 <vTaskSuspendAll+0x18>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	4a03      	ldr	r2, [pc, #12]	; (8007900 <vTaskSuspendAll+0x18>)
 80078f4:	6013      	str	r3, [r2, #0]
}
 80078f6:	bf00      	nop
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20002a20 	.word	0x20002a20

08007904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007912:	4b42      	ldr	r3, [pc, #264]	; (8007a1c <xTaskResumeAll+0x118>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <xTaskResumeAll+0x2c>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	603b      	str	r3, [r7, #0]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007930:	f001 f8a4 	bl	8008a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007934:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <xTaskResumeAll+0x118>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3b01      	subs	r3, #1
 800793a:	4a38      	ldr	r2, [pc, #224]	; (8007a1c <xTaskResumeAll+0x118>)
 800793c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800793e:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <xTaskResumeAll+0x118>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d162      	bne.n	8007a0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007946:	4b36      	ldr	r3, [pc, #216]	; (8007a20 <xTaskResumeAll+0x11c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d05e      	beq.n	8007a0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800794e:	e02f      	b.n	80079b0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007950:	4b34      	ldr	r3, [pc, #208]	; (8007a24 <xTaskResumeAll+0x120>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3318      	adds	r3, #24
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe ff4f 	bl	8006800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3304      	adds	r3, #4
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe ff4a 	bl	8006800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <xTaskResumeAll+0x124>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d903      	bls.n	8007980 <xTaskResumeAll+0x7c>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a2a      	ldr	r2, [pc, #168]	; (8007a28 <xTaskResumeAll+0x124>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a27      	ldr	r2, [pc, #156]	; (8007a2c <xTaskResumeAll+0x128>)
 800798e:	441a      	add	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fe fed7 	bl	800674a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b23      	ldr	r3, [pc, #140]	; (8007a30 <xTaskResumeAll+0x12c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d302      	bcc.n	80079b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079aa:	4b22      	ldr	r3, [pc, #136]	; (8007a34 <xTaskResumeAll+0x130>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b0:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <xTaskResumeAll+0x120>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1cb      	bne.n	8007950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079be:	f000 fb55 	bl	800806c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079c2:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <xTaskResumeAll+0x134>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d010      	beq.n	80079f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ce:	f000 f845 	bl	8007a5c <xTaskIncrementTick>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079d8:	4b16      	ldr	r3, [pc, #88]	; (8007a34 <xTaskResumeAll+0x130>)
 80079da:	2201      	movs	r2, #1
 80079dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f1      	bne.n	80079ce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80079ea:	4b13      	ldr	r3, [pc, #76]	; (8007a38 <xTaskResumeAll+0x134>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079f0:	4b10      	ldr	r3, [pc, #64]	; (8007a34 <xTaskResumeAll+0x130>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d009      	beq.n	8007a0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <xTaskResumeAll+0x138>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a0c:	f001 f866 	bl	8008adc <vPortExitCritical>

	return xAlreadyYielded;
 8007a10:	68bb      	ldr	r3, [r7, #8]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20002a20 	.word	0x20002a20
 8007a20:	200029f8 	.word	0x200029f8
 8007a24:	200029b8 	.word	0x200029b8
 8007a28:	20002a00 	.word	0x20002a00
 8007a2c:	20002528 	.word	0x20002528
 8007a30:	20002524 	.word	0x20002524
 8007a34:	20002a0c 	.word	0x20002a0c
 8007a38:	20002a08 	.word	0x20002a08
 8007a3c:	e000ed04 	.word	0xe000ed04

08007a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a46:	4b04      	ldr	r3, [pc, #16]	; (8007a58 <xTaskGetTickCount+0x18>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a4c:	687b      	ldr	r3, [r7, #4]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr
 8007a58:	200029fc 	.word	0x200029fc

08007a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a66:	4b51      	ldr	r3, [pc, #324]	; (8007bac <xTaskIncrementTick+0x150>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 808e 	bne.w	8007b8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a70:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <xTaskIncrementTick+0x154>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a78:	4a4d      	ldr	r2, [pc, #308]	; (8007bb0 <xTaskIncrementTick+0x154>)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d120      	bne.n	8007ac6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	603b      	str	r3, [r7, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xTaskIncrementTick+0x46>
 8007aa4:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	4b43      	ldr	r3, [pc, #268]	; (8007bb8 <xTaskIncrementTick+0x15c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a41      	ldr	r2, [pc, #260]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4a41      	ldr	r2, [pc, #260]	; (8007bb8 <xTaskIncrementTick+0x15c>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <xTaskIncrementTick+0x160>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	4a3f      	ldr	r2, [pc, #252]	; (8007bbc <xTaskIncrementTick+0x160>)
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	f000 fad3 	bl	800806c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d34e      	bcc.n	8007b6e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ad0:	4b38      	ldr	r3, [pc, #224]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <xTaskIncrementTick+0x82>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e000      	b.n	8007ae0 <xTaskIncrementTick+0x84>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae4:	4b36      	ldr	r3, [pc, #216]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	601a      	str	r2, [r3, #0]
					break;
 8007aec:	e03f      	b.n	8007b6e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007aee:	4b31      	ldr	r3, [pc, #196]	; (8007bb4 <xTaskIncrementTick+0x158>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d203      	bcs.n	8007b0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b06:	4a2e      	ldr	r2, [pc, #184]	; (8007bc0 <xTaskIncrementTick+0x164>)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6013      	str	r3, [r2, #0]
						break;
 8007b0c:	e02f      	b.n	8007b6e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fe74 	bl	8006800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	3318      	adds	r3, #24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fe6b 	bl	8006800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	4b25      	ldr	r3, [pc, #148]	; (8007bc4 <xTaskIncrementTick+0x168>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d903      	bls.n	8007b3e <xTaskIncrementTick+0xe2>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a22      	ldr	r2, [pc, #136]	; (8007bc4 <xTaskIncrementTick+0x168>)
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <xTaskIncrementTick+0x16c>)
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe fdf8 	bl	800674a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5e:	4b1b      	ldr	r3, [pc, #108]	; (8007bcc <xTaskIncrementTick+0x170>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d3b3      	bcc.n	8007ad0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6c:	e7b0      	b.n	8007ad0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b6e:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <xTaskIncrementTick+0x170>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	4914      	ldr	r1, [pc, #80]	; (8007bc8 <xTaskIncrementTick+0x16c>)
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d907      	bls.n	8007b96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007b86:	2301      	movs	r3, #1
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e004      	b.n	8007b96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b8c:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <xTaskIncrementTick+0x174>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3301      	adds	r3, #1
 8007b92:	4a0f      	ldr	r2, [pc, #60]	; (8007bd0 <xTaskIncrementTick+0x174>)
 8007b94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <xTaskIncrementTick+0x178>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ba2:	697b      	ldr	r3, [r7, #20]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3718      	adds	r7, #24
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20002a20 	.word	0x20002a20
 8007bb0:	200029fc 	.word	0x200029fc
 8007bb4:	200029b0 	.word	0x200029b0
 8007bb8:	200029b4 	.word	0x200029b4
 8007bbc:	20002a10 	.word	0x20002a10
 8007bc0:	20002a18 	.word	0x20002a18
 8007bc4:	20002a00 	.word	0x20002a00
 8007bc8:	20002528 	.word	0x20002528
 8007bcc:	20002524 	.word	0x20002524
 8007bd0:	20002a08 	.word	0x20002a08
 8007bd4:	20002a0c 	.word	0x20002a0c

08007bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bde:	4b27      	ldr	r3, [pc, #156]	; (8007c7c <vTaskSwitchContext+0xa4>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007be6:	4b26      	ldr	r3, [pc, #152]	; (8007c80 <vTaskSwitchContext+0xa8>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bec:	e041      	b.n	8007c72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007bee:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <vTaskSwitchContext+0xa8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007bf4:	4b23      	ldr	r3, [pc, #140]	; (8007c84 <vTaskSwitchContext+0xac>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e010      	b.n	8007c1e <vTaskSwitchContext+0x46>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	607b      	str	r3, [r7, #4]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <vTaskSwitchContext+0x3e>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	491a      	ldr	r1, [pc, #104]	; (8007c88 <vTaskSwitchContext+0xb0>)
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0e4      	beq.n	8007bfc <vTaskSwitchContext+0x24>
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4a12      	ldr	r2, [pc, #72]	; (8007c88 <vTaskSwitchContext+0xb0>)
 8007c3e:	4413      	add	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	605a      	str	r2, [r3, #4]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3308      	adds	r3, #8
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d104      	bne.n	8007c62 <vTaskSwitchContext+0x8a>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	4a08      	ldr	r2, [pc, #32]	; (8007c8c <vTaskSwitchContext+0xb4>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	4a05      	ldr	r2, [pc, #20]	; (8007c84 <vTaskSwitchContext+0xac>)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6013      	str	r3, [r2, #0]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr
 8007c7c:	20002a20 	.word	0x20002a20
 8007c80:	20002a0c 	.word	0x20002a0c
 8007c84:	20002a00 	.word	0x20002a00
 8007c88:	20002528 	.word	0x20002528
 8007c8c:	20002524 	.word	0x20002524

08007c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb6:	4b07      	ldr	r3, [pc, #28]	; (8007cd4 <vTaskPlaceOnEventList+0x44>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3318      	adds	r3, #24
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f7fe fd66 	bl	8006790 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	6838      	ldr	r0, [r7, #0]
 8007cc8:	f000 fa80 	bl	80081cc <prvAddCurrentTaskToDelayedList>
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20002524 	.word	0x20002524

08007cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	617b      	str	r3, [r7, #20]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3318      	adds	r3, #24
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7fe fd1e 	bl	800674a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295
 8007d18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	68b8      	ldr	r0, [r7, #8]
 8007d1e:	f000 fa55 	bl	80081cc <prvAddCurrentTaskToDelayedList>
	}
 8007d22:	bf00      	nop
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20002524 	.word	0x20002524

08007d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	60fb      	str	r3, [r7, #12]
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3318      	adds	r3, #24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fd4d 	bl	8006800 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d66:	4b1e      	ldr	r3, [pc, #120]	; (8007de0 <xTaskRemoveFromEventList+0xb0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d11d      	bne.n	8007daa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd44 	bl	8006800 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <xTaskRemoveFromEventList+0xb4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <xTaskRemoveFromEventList+0x5c>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d88:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <xTaskRemoveFromEventList+0xb4>)
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <xTaskRemoveFromEventList+0xb8>)
 8007d9a:	441a      	add	r2, r3
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f7fe fcd1 	bl	800674a <vListInsertEnd>
 8007da8:	e005      	b.n	8007db6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	3318      	adds	r3, #24
 8007dae:	4619      	mov	r1, r3
 8007db0:	480e      	ldr	r0, [pc, #56]	; (8007dec <xTaskRemoveFromEventList+0xbc>)
 8007db2:	f7fe fcca 	bl	800674a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <xTaskRemoveFromEventList+0xc0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d905      	bls.n	8007dd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	; (8007df4 <xTaskRemoveFromEventList+0xc4>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	e001      	b.n	8007dd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007dd4:	697b      	ldr	r3, [r7, #20]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20002a20 	.word	0x20002a20
 8007de4:	20002a00 	.word	0x20002a00
 8007de8:	20002528 	.word	0x20002528
 8007dec:	200029b8 	.word	0x200029b8
 8007df0:	20002524 	.word	0x20002524
 8007df4:	20002a0c 	.word	0x20002a0c

08007df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <vTaskInternalSetTimeOutState+0x24>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <vTaskInternalSetTimeOutState+0x28>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	605a      	str	r2, [r3, #4]
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20002a10 	.word	0x20002a10
 8007e20:	200029fc 	.word	0x200029fc

08007e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	613b      	str	r3, [r7, #16]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e66:	f000 fe09 	bl	8008a7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ee0 <xTaskCheckForTimeOut+0xbc>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d102      	bne.n	8007e8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e023      	b.n	8007ed2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <xTaskCheckForTimeOut+0xc0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d007      	beq.n	8007ea6 <xTaskCheckForTimeOut+0x82>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	e015      	b.n	8007ed2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d20b      	bcs.n	8007ec8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff ff9b 	bl	8007df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	e004      	b.n	8007ed2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ed2:	f000 fe03 	bl	8008adc <vPortExitCritical>

	return xReturn;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3720      	adds	r7, #32
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	200029fc 	.word	0x200029fc
 8007ee4:	20002a10 	.word	0x20002a10

08007ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <vTaskMissedYield+0x14>)
 8007eee:	2201      	movs	r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20002a0c 	.word	0x20002a0c

08007f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f08:	f000 f852 	bl	8007fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <prvIdleTask+0x28>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d9f9      	bls.n	8007f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <prvIdleTask+0x2c>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f24:	e7f0      	b.n	8007f08 <prvIdleTask+0x8>
 8007f26:	bf00      	nop
 8007f28:	20002528 	.word	0x20002528
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f36:	2300      	movs	r3, #0
 8007f38:	607b      	str	r3, [r7, #4]
 8007f3a:	e00c      	b.n	8007f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <prvInitialiseTaskLists+0x60>)
 8007f48:	4413      	add	r3, r2
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fe fbd2 	bl	80066f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3301      	adds	r3, #1
 8007f54:	607b      	str	r3, [r7, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b37      	cmp	r3, #55	; 0x37
 8007f5a:	d9ef      	bls.n	8007f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f5c:	480d      	ldr	r0, [pc, #52]	; (8007f94 <prvInitialiseTaskLists+0x64>)
 8007f5e:	f7fe fbc9 	bl	80066f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f62:	480d      	ldr	r0, [pc, #52]	; (8007f98 <prvInitialiseTaskLists+0x68>)
 8007f64:	f7fe fbc6 	bl	80066f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f68:	480c      	ldr	r0, [pc, #48]	; (8007f9c <prvInitialiseTaskLists+0x6c>)
 8007f6a:	f7fe fbc3 	bl	80066f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f6e:	480c      	ldr	r0, [pc, #48]	; (8007fa0 <prvInitialiseTaskLists+0x70>)
 8007f70:	f7fe fbc0 	bl	80066f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f74:	480b      	ldr	r0, [pc, #44]	; (8007fa4 <prvInitialiseTaskLists+0x74>)
 8007f76:	f7fe fbbd 	bl	80066f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <prvInitialiseTaskLists+0x78>)
 8007f7c:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <prvInitialiseTaskLists+0x64>)
 8007f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f80:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <prvInitialiseTaskLists+0x7c>)
 8007f82:	4a05      	ldr	r2, [pc, #20]	; (8007f98 <prvInitialiseTaskLists+0x68>)
 8007f84:	601a      	str	r2, [r3, #0]
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20002528 	.word	0x20002528
 8007f94:	20002988 	.word	0x20002988
 8007f98:	2000299c 	.word	0x2000299c
 8007f9c:	200029b8 	.word	0x200029b8
 8007fa0:	200029cc 	.word	0x200029cc
 8007fa4:	200029e4 	.word	0x200029e4
 8007fa8:	200029b0 	.word	0x200029b0
 8007fac:	200029b4 	.word	0x200029b4

08007fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb6:	e019      	b.n	8007fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fb8:	f000 fd60 	bl	8008a7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <prvCheckTasksWaitingTermination+0x50>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe fc19 	bl	8006800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fce:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <prvCheckTasksWaitingTermination+0x54>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4a0b      	ldr	r2, [pc, #44]	; (8008004 <prvCheckTasksWaitingTermination+0x54>)
 8007fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <prvCheckTasksWaitingTermination+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	4a0a      	ldr	r2, [pc, #40]	; (8008008 <prvCheckTasksWaitingTermination+0x58>)
 8007fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fe2:	f000 fd7b 	bl	8008adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f810 	bl	800800c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <prvCheckTasksWaitingTermination+0x58>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e1      	bne.n	8007fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	200029cc 	.word	0x200029cc
 8008004:	200029f8 	.word	0x200029f8
 8008008:	200029e0 	.word	0x200029e0

0800800c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800801a:	2b00      	cmp	r3, #0
 800801c:	d108      	bne.n	8008030 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	4618      	mov	r0, r3
 8008024:	f000 feee 	bl	8008e04 <vPortFree>
				vPortFree( pxTCB );
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 feeb 	bl	8008e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800802e:	e018      	b.n	8008062 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008036:	2b01      	cmp	r3, #1
 8008038:	d103      	bne.n	8008042 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fee2 	bl	8008e04 <vPortFree>
	}
 8008040:	e00f      	b.n	8008062 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008048:	2b02      	cmp	r3, #2
 800804a:	d00a      	beq.n	8008062 <prvDeleteTCB+0x56>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	60fb      	str	r3, [r7, #12]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <prvDeleteTCB+0x54>
	}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <prvResetNextTaskUnblockTime+0x40>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <prvResetNextTaskUnblockTime+0x14>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <prvResetNextTaskUnblockTime+0x16>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <prvResetNextTaskUnblockTime+0x44>)
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800808e:	e008      	b.n	80080a2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008090:	4b06      	ldr	r3, [pc, #24]	; (80080ac <prvResetNextTaskUnblockTime+0x40>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	4a04      	ldr	r2, [pc, #16]	; (80080b0 <prvResetNextTaskUnblockTime+0x44>)
 80080a0:	6013      	str	r3, [r2, #0]
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	200029b0 	.word	0x200029b0
 80080b0:	20002a18 	.word	0x20002a18

080080b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <xTaskGetSchedulerState+0x34>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080c2:	2301      	movs	r3, #1
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	e008      	b.n	80080da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c8:	4b08      	ldr	r3, [pc, #32]	; (80080ec <xTaskGetSchedulerState+0x38>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080d0:	2302      	movs	r3, #2
 80080d2:	607b      	str	r3, [r7, #4]
 80080d4:	e001      	b.n	80080da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d6:	2300      	movs	r3, #0
 80080d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080da:	687b      	ldr	r3, [r7, #4]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	20002a04 	.word	0x20002a04
 80080ec:	20002a20 	.word	0x20002a20

080080f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d056      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008106:	4b2e      	ldr	r3, [pc, #184]	; (80081c0 <xTaskPriorityDisinherit+0xd0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d00a      	beq.n	8008126 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60fb      	str	r3, [r7, #12]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60bb      	str	r3, [r7, #8]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	429a      	cmp	r2, r3
 8008158:	d02c      	beq.n	80081b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800815e:	2b00      	cmp	r3, #0
 8008160:	d128      	bne.n	80081b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3304      	adds	r3, #4
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fb4a 	bl	8006800 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <xTaskPriorityDisinherit+0xd4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	429a      	cmp	r2, r3
 800818a:	d903      	bls.n	8008194 <xTaskPriorityDisinherit+0xa4>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	4a0c      	ldr	r2, [pc, #48]	; (80081c4 <xTaskPriorityDisinherit+0xd4>)
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <xTaskPriorityDisinherit+0xd8>)
 80081a2:	441a      	add	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe facd 	bl	800674a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081b4:	697b      	ldr	r3, [r7, #20]
	}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20002524 	.word	0x20002524
 80081c4:	20002a00 	.word	0x20002a00
 80081c8:	20002528 	.word	0x20002528

080081cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081d6:	4b21      	ldr	r3, [pc, #132]	; (800825c <prvAddCurrentTaskToDelayedList+0x90>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081dc:	4b20      	ldr	r3, [pc, #128]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3304      	adds	r3, #4
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fe fb0c 	bl	8006800 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ee:	d10a      	bne.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4619      	mov	r1, r3
 80081fe:	4819      	ldr	r0, [pc, #100]	; (8008264 <prvAddCurrentTaskToDelayedList+0x98>)
 8008200:	f7fe faa3 	bl	800674a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008204:	e026      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4413      	add	r3, r2
 800820c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800820e:	4b14      	ldr	r3, [pc, #80]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d209      	bcs.n	8008232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821e:	4b12      	ldr	r3, [pc, #72]	; (8008268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3304      	adds	r3, #4
 8008228:	4619      	mov	r1, r3
 800822a:	4610      	mov	r0, r2
 800822c:	f7fe fab0 	bl	8006790 <vListInsert>
}
 8008230:	e010      	b.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008232:	4b0e      	ldr	r3, [pc, #56]	; (800826c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0a      	ldr	r3, [pc, #40]	; (8008260 <prvAddCurrentTaskToDelayedList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fe faa6 	bl	8006790 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	429a      	cmp	r2, r3
 800824c:	d202      	bcs.n	8008254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800824e:	4a08      	ldr	r2, [pc, #32]	; (8008270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6013      	str	r3, [r2, #0]
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200029fc 	.word	0x200029fc
 8008260:	20002524 	.word	0x20002524
 8008264:	200029e4 	.word	0x200029e4
 8008268:	200029b4 	.word	0x200029b4
 800826c:	200029b0 	.word	0x200029b0
 8008270:	20002a18 	.word	0x20002a18

08008274 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	; 0x28
 8008278:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800827a:	2300      	movs	r3, #0
 800827c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800827e:	f000 facb 	bl	8008818 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008282:	4b1c      	ldr	r3, [pc, #112]	; (80082f4 <xTimerCreateTimerTask+0x80>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d021      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008292:	1d3a      	adds	r2, r7, #4
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fa0f 	bl	80066c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	9202      	str	r2, [sp, #8]
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	2302      	movs	r3, #2
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	2300      	movs	r3, #0
 80082b2:	460a      	mov	r2, r1
 80082b4:	4910      	ldr	r1, [pc, #64]	; (80082f8 <xTimerCreateTimerTask+0x84>)
 80082b6:	4811      	ldr	r0, [pc, #68]	; (80082fc <xTimerCreateTimerTask+0x88>)
 80082b8:	f7ff f86e 	bl	8007398 <xTaskCreateStatic>
 80082bc:	4603      	mov	r3, r0
 80082be:	4a10      	ldr	r2, [pc, #64]	; (8008300 <xTimerCreateTimerTask+0x8c>)
 80082c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <xTimerCreateTimerTask+0x8c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082ca:	2301      	movs	r3, #1
 80082cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10a      	bne.n	80082ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	613b      	str	r3, [r7, #16]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082ea:	697b      	ldr	r3, [r7, #20]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20002a54 	.word	0x20002a54
 80082f8:	0800daec 	.word	0x0800daec
 80082fc:	08008421 	.word	0x08008421
 8008300:	20002a58 	.word	0x20002a58

08008304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xTimerGenericCommand+0x2e>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	623b      	str	r3, [r7, #32]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008332:	4b1a      	ldr	r3, [pc, #104]	; (800839c <xTimerGenericCommand+0x98>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d02a      	beq.n	8008390 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	2b05      	cmp	r3, #5
 800834a:	dc18      	bgt.n	800837e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800834c:	f7ff feb2 	bl	80080b4 <xTaskGetSchedulerState>
 8008350:	4603      	mov	r3, r0
 8008352:	2b02      	cmp	r3, #2
 8008354:	d109      	bne.n	800836a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <xTimerGenericCommand+0x98>)
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f107 0110 	add.w	r1, r7, #16
 800835e:	2300      	movs	r3, #0
 8008360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008362:	f7fe fbb7 	bl	8006ad4 <xQueueGenericSend>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
 8008368:	e012      	b.n	8008390 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800836a:	4b0c      	ldr	r3, [pc, #48]	; (800839c <xTimerGenericCommand+0x98>)
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	f107 0110 	add.w	r1, r7, #16
 8008372:	2300      	movs	r3, #0
 8008374:	2200      	movs	r2, #0
 8008376:	f7fe fbad 	bl	8006ad4 <xQueueGenericSend>
 800837a:	6278      	str	r0, [r7, #36]	; 0x24
 800837c:	e008      	b.n	8008390 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <xTimerGenericCommand+0x98>)
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f107 0110 	add.w	r1, r7, #16
 8008386:	2300      	movs	r3, #0
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	f7fe fca1 	bl	8006cd0 <xQueueGenericSendFromISR>
 800838e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008392:	4618      	mov	r0, r3
 8008394:	3728      	adds	r7, #40	; 0x28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20002a54 	.word	0x20002a54

080083a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083aa:	4b1c      	ldr	r3, [pc, #112]	; (800841c <prvProcessExpiredTimer+0x7c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3304      	adds	r3, #4
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fe fa21 	bl	8006800 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d122      	bne.n	800840c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	18d1      	adds	r1, r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f000 f8c8 	bl	8008568 <prvInsertTimerInActiveList>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d016      	beq.n	800840c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083de:	2300      	movs	r3, #0
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	2100      	movs	r1, #0
 80083e8:	6978      	ldr	r0, [r7, #20]
 80083ea:	f7ff ff8b 	bl	8008304 <xTimerGenericCommand>
 80083ee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008410:	6978      	ldr	r0, [r7, #20]
 8008412:	4798      	blx	r3
}
 8008414:	bf00      	nop
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20002a4c 	.word	0x20002a4c

08008420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008428:	f107 0308 	add.w	r3, r7, #8
 800842c:	4618      	mov	r0, r3
 800842e:	f000 f857 	bl	80084e0 <prvGetNextExpireTime>
 8008432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4619      	mov	r1, r3
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f803 	bl	8008444 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800843e:	f000 f8d5 	bl	80085ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008442:	e7f1      	b.n	8008428 <prvTimerTask+0x8>

08008444 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800844e:	f7ff fa4b 	bl	80078e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008452:	f107 0308 	add.w	r3, r7, #8
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f866 	bl	8008528 <prvSampleTimeNow>
 800845c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d130      	bne.n	80084c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10a      	bne.n	8008480 <prvProcessTimerOrBlockTask+0x3c>
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	429a      	cmp	r2, r3
 8008470:	d806      	bhi.n	8008480 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008472:	f7ff fa47 	bl	8007904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008476:	68f9      	ldr	r1, [r7, #12]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff91 	bl	80083a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800847e:	e024      	b.n	80084ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d008      	beq.n	8008498 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008486:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <prvProcessTimerOrBlockTask+0x90>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	bf0c      	ite	eq
 8008490:	2301      	moveq	r3, #1
 8008492:	2300      	movne	r3, #0
 8008494:	b2db      	uxtb	r3, r3
 8008496:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008498:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <prvProcessTimerOrBlockTask+0x94>)
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4619      	mov	r1, r3
 80084a6:	f7fe ff43 	bl	8007330 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084aa:	f7ff fa2b 	bl	8007904 <xTaskResumeAll>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084b4:	4b09      	ldr	r3, [pc, #36]	; (80084dc <prvProcessTimerOrBlockTask+0x98>)
 80084b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	f3bf 8f6f 	isb	sy
}
 80084c4:	e001      	b.n	80084ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084c6:	f7ff fa1d 	bl	8007904 <xTaskResumeAll>
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20002a50 	.word	0x20002a50
 80084d8:	20002a54 	.word	0x20002a54
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084e8:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <prvGetNextExpireTime+0x44>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bf0c      	ite	eq
 80084f2:	2301      	moveq	r3, #1
 80084f4:	2300      	movne	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d105      	bne.n	8008512 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008506:	4b07      	ldr	r3, [pc, #28]	; (8008524 <prvGetNextExpireTime+0x44>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e001      	b.n	8008516 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008516:	68fb      	ldr	r3, [r7, #12]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20002a4c 	.word	0x20002a4c

08008528 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008530:	f7ff fa86 	bl	8007a40 <xTaskGetTickCount>
 8008534:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <prvSampleTimeNow+0x3c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	429a      	cmp	r2, r3
 800853e:	d205      	bcs.n	800854c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008540:	f000 f908 	bl	8008754 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	e002      	b.n	8008552 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008552:	4a04      	ldr	r2, [pc, #16]	; (8008564 <prvSampleTimeNow+0x3c>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008558:	68fb      	ldr	r3, [r7, #12]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20002a5c 	.word	0x20002a5c

08008568 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008576:	2300      	movs	r3, #0
 8008578:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	429a      	cmp	r2, r3
 800858c:	d812      	bhi.n	80085b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	429a      	cmp	r2, r3
 800859a:	d302      	bcc.n	80085a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e01b      	b.n	80085da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085a2:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <prvInsertTimerInActiveList+0x7c>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	3304      	adds	r3, #4
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f7fe f8ef 	bl	8006790 <vListInsert>
 80085b2:	e012      	b.n	80085da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d206      	bcs.n	80085ca <prvInsertTimerInActiveList+0x62>
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d302      	bcc.n	80085ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085c4:	2301      	movs	r3, #1
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	e007      	b.n	80085da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085ca:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <prvInsertTimerInActiveList+0x80>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f7fe f8db 	bl	8006790 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085da:	697b      	ldr	r3, [r7, #20]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20002a50 	.word	0x20002a50
 80085e8:	20002a4c 	.word	0x20002a4c

080085ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08e      	sub	sp, #56	; 0x38
 80085f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085f2:	e09d      	b.n	8008730 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	da18      	bge.n	800862c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085fa:	1d3b      	adds	r3, r7, #4
 80085fc:	3304      	adds	r3, #4
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10a      	bne.n	800861c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	61fb      	str	r3, [r7, #28]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800861c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008622:	6850      	ldr	r0, [r2, #4]
 8008624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008626:	6892      	ldr	r2, [r2, #8]
 8008628:	4611      	mov	r1, r2
 800862a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	db7d      	blt.n	800872e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe f8dc 	bl	8006800 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008648:	463b      	mov	r3, r7
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff ff6c 	bl	8008528 <prvSampleTimeNow>
 8008650:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b09      	cmp	r3, #9
 8008656:	d86b      	bhi.n	8008730 <prvProcessReceivedCommands+0x144>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <prvProcessReceivedCommands+0x74>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008689 	.word	0x08008689
 8008664:	08008689 	.word	0x08008689
 8008668:	08008689 	.word	0x08008689
 800866c:	08008731 	.word	0x08008731
 8008670:	080086e5 	.word	0x080086e5
 8008674:	0800871d 	.word	0x0800871d
 8008678:	08008689 	.word	0x08008689
 800867c:	08008689 	.word	0x08008689
 8008680:	08008731 	.word	0x08008731
 8008684:	080086e5 	.word	0x080086e5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	18d1      	adds	r1, r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008696:	f7ff ff67 	bl	8008568 <prvInsertTimerInActiveList>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d047      	beq.n	8008730 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d13f      	bne.n	8008730 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	441a      	add	r2, r3
 80086b8:	2300      	movs	r3, #0
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	2100      	movs	r1, #0
 80086c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086c2:	f7ff fe1f 	bl	8008304 <xTimerGenericCommand>
 80086c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d130      	bne.n	8008730 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	61bb      	str	r3, [r7, #24]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	617b      	str	r3, [r7, #20]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	699a      	ldr	r2, [r3, #24]
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	18d1      	adds	r1, r2, r3
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008716:	f7ff ff27 	bl	8008568 <prvInsertTimerInActiveList>
					break;
 800871a:	e009      	b.n	8008730 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008728:	f000 fb6c 	bl	8008e04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800872c:	e000      	b.n	8008730 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800872e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <prvProcessReceivedCommands+0x164>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	1d39      	adds	r1, r7, #4
 8008736:	2200      	movs	r2, #0
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fb61 	bl	8006e00 <xQueueReceive>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	f47f af57 	bne.w	80085f4 <prvProcessReceivedCommands+0x8>
	}
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	3730      	adds	r7, #48	; 0x30
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20002a54 	.word	0x20002a54

08008754 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800875a:	e045      	b.n	80087e8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800875c:	4b2c      	ldr	r3, [pc, #176]	; (8008810 <prvSwitchTimerLists+0xbc>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008766:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <prvSwitchTimerLists+0xbc>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3304      	adds	r3, #4
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe f843 	bl	8006800 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d12e      	bne.n	80087e8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d90e      	bls.n	80087ba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087a8:	4b19      	ldr	r3, [pc, #100]	; (8008810 <prvSwitchTimerLists+0xbc>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fd ffec 	bl	8006790 <vListInsert>
 80087b8:	e016      	b.n	80087e8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ba:	2300      	movs	r3, #0
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	2300      	movs	r3, #0
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	2100      	movs	r1, #0
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f7ff fd9d 	bl	8008304 <xTimerGenericCommand>
 80087ca:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10a      	bne.n	80087e8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	603b      	str	r3, [r7, #0]
}
 80087e4:	bf00      	nop
 80087e6:	e7fe      	b.n	80087e6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <prvSwitchTimerLists+0xbc>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1b4      	bne.n	800875c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <prvSwitchTimerLists+0xbc>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087f8:	4b06      	ldr	r3, [pc, #24]	; (8008814 <prvSwitchTimerLists+0xc0>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a04      	ldr	r2, [pc, #16]	; (8008810 <prvSwitchTimerLists+0xbc>)
 80087fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008800:	4a04      	ldr	r2, [pc, #16]	; (8008814 <prvSwitchTimerLists+0xc0>)
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	6013      	str	r3, [r2, #0]
}
 8008806:	bf00      	nop
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20002a4c 	.word	0x20002a4c
 8008814:	20002a50 	.word	0x20002a50

08008818 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800881e:	f000 f92d 	bl	8008a7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008822:	4b15      	ldr	r3, [pc, #84]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d120      	bne.n	800886c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800882a:	4814      	ldr	r0, [pc, #80]	; (800887c <prvCheckForValidListAndQueue+0x64>)
 800882c:	f7fd ff62 	bl	80066f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008830:	4813      	ldr	r0, [pc, #76]	; (8008880 <prvCheckForValidListAndQueue+0x68>)
 8008832:	f7fd ff5f 	bl	80066f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008836:	4b13      	ldr	r3, [pc, #76]	; (8008884 <prvCheckForValidListAndQueue+0x6c>)
 8008838:	4a10      	ldr	r2, [pc, #64]	; (800887c <prvCheckForValidListAndQueue+0x64>)
 800883a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <prvCheckForValidListAndQueue+0x70>)
 800883e:	4a10      	ldr	r2, [pc, #64]	; (8008880 <prvCheckForValidListAndQueue+0x68>)
 8008840:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008842:	2300      	movs	r3, #0
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4b11      	ldr	r3, [pc, #68]	; (800888c <prvCheckForValidListAndQueue+0x74>)
 8008848:	4a11      	ldr	r2, [pc, #68]	; (8008890 <prvCheckForValidListAndQueue+0x78>)
 800884a:	2110      	movs	r1, #16
 800884c:	200a      	movs	r0, #10
 800884e:	f7fe f869 	bl	8006924 <xQueueGenericCreateStatic>
 8008852:	4603      	mov	r3, r0
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008856:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <prvCheckForValidListAndQueue+0x60>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	490b      	ldr	r1, [pc, #44]	; (8008894 <prvCheckForValidListAndQueue+0x7c>)
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fd3a 	bl	80072e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800886c:	f000 f936 	bl	8008adc <vPortExitCritical>
}
 8008870:	bf00      	nop
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20002a54 	.word	0x20002a54
 800887c:	20002a24 	.word	0x20002a24
 8008880:	20002a38 	.word	0x20002a38
 8008884:	20002a4c 	.word	0x20002a4c
 8008888:	20002a50 	.word	0x20002a50
 800888c:	20002b00 	.word	0x20002b00
 8008890:	20002a60 	.word	0x20002a60
 8008894:	0800daf4 	.word	0x0800daf4

08008898 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3b04      	subs	r3, #4
 80088a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f023 0201 	bic.w	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3b04      	subs	r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <pxPortInitialiseStack+0x54>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3b14      	subs	r3, #20
 80088d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3b20      	subs	r3, #32
 80088de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088e0:	68fb      	ldr	r3, [r7, #12]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bc80      	pop	{r7}
 80088ea:	4770      	bx	lr
 80088ec:	080088f1 	.word	0x080088f1

080088f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <prvTaskExitError+0x54>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d00a      	beq.n	800891a <prvTaskExitError+0x2a>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <prvTaskExitError+0x28>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60bb      	str	r3, [r7, #8]
}
 800892c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800892e:	bf00      	nop
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0fc      	beq.n	8008930 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000018 	.word	0x20000018
	...

08008950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	f04e 0e0d 	orr.w	lr, lr, #13
 800896e:	4770      	bx	lr

08008970 <pxCurrentTCBConst2>:
 8008970:	20002524 	.word	0x20002524
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <prvPortStartFirstTask+0x1c>)
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f380 8808 	msr	MSP, r0
 8008982:	b662      	cpsie	i
 8008984:	b661      	cpsie	f
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	df00      	svc	0
 8008990:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008992:	bf00      	nop
 8008994:	e000ed08 	.word	0xe000ed08

08008998 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800899e:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <xPortStartScheduler+0xd0>)
 80089a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089b8:	78fb      	ldrb	r3, [r7, #3]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	4b2a      	ldr	r3, [pc, #168]	; (8008a6c <xPortStartScheduler+0xd4>)
 80089c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089c6:	4b2a      	ldr	r3, [pc, #168]	; (8008a70 <xPortStartScheduler+0xd8>)
 80089c8:	2207      	movs	r2, #7
 80089ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089cc:	e009      	b.n	80089e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80089ce:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <xPortStartScheduler+0xd8>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	4a26      	ldr	r2, [pc, #152]	; (8008a70 <xPortStartScheduler+0xd8>)
 80089d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	005b      	lsls	r3, r3, #1
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ea:	2b80      	cmp	r3, #128	; 0x80
 80089ec:	d0ef      	beq.n	80089ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ee:	4b20      	ldr	r3, [pc, #128]	; (8008a70 <xPortStartScheduler+0xd8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f1c3 0307 	rsb	r3, r3, #7
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d00a      	beq.n	8008a10 <xPortStartScheduler+0x78>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	60bb      	str	r3, [r7, #8]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a10:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <xPortStartScheduler+0xd8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	4a16      	ldr	r2, [pc, #88]	; (8008a70 <xPortStartScheduler+0xd8>)
 8008a18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a1a:	4b15      	ldr	r3, [pc, #84]	; (8008a70 <xPortStartScheduler+0xd8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a22:	4a13      	ldr	r2, [pc, #76]	; (8008a70 <xPortStartScheduler+0xd8>)
 8008a24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <xPortStartScheduler+0xdc>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a10      	ldr	r2, [pc, #64]	; (8008a74 <xPortStartScheduler+0xdc>)
 8008a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <xPortStartScheduler+0xdc>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a0d      	ldr	r2, [pc, #52]	; (8008a74 <xPortStartScheduler+0xdc>)
 8008a40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a46:	f000 f8b9 	bl	8008bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <xPortStartScheduler+0xe0>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a50:	f7ff ff92 	bl	8008978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a54:	f7ff f8c0 	bl	8007bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8008a58:	f7ff ff4a 	bl	80088f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	e000e400 	.word	0xe000e400
 8008a6c:	20002b50 	.word	0x20002b50
 8008a70:	20002b54 	.word	0x20002b54
 8008a74:	e000ed20 	.word	0xe000ed20
 8008a78:	20000018 	.word	0x20000018

08008a7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	607b      	str	r3, [r7, #4]
}
 8008a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a96:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <vPortEnterCritical+0x58>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <vPortEnterCritical+0x58>)
 8008a9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008aa0:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <vPortEnterCritical+0x58>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d10f      	bne.n	8008ac8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008aa8:	4b0b      	ldr	r3, [pc, #44]	; (8008ad8 <vPortEnterCritical+0x5c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	603b      	str	r3, [r7, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <vPortEnterCritical+0x4a>
	}
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bc80      	pop	{r7}
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000018 	.word	0x20000018
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ae2:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <vPortExitCritical+0x4c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <vPortExitCritical+0x24>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	607b      	str	r3, [r7, #4]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b00:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <vPortExitCritical+0x4c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	4a08      	ldr	r2, [pc, #32]	; (8008b28 <vPortExitCritical+0x4c>)
 8008b08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <vPortExitCritical+0x4c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d105      	bne.n	8008b1e <vPortExitCritical+0x42>
 8008b12:	2300      	movs	r3, #0
 8008b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	f383 8811 	msr	BASEPRI, r3
}
 8008b1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bc80      	pop	{r7}
 8008b26:	4770      	bx	lr
 8008b28:	20000018 	.word	0x20000018
 8008b2c:	00000000 	.word	0x00000000

08008b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b30:	f3ef 8009 	mrs	r0, PSP
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <pxCurrentTCBConst>)
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b40:	6010      	str	r0, [r2, #0]
 8008b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008b46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b4a:	f380 8811 	msr	BASEPRI, r0
 8008b4e:	f7ff f843 	bl	8007bd8 <vTaskSwitchContext>
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8811 	msr	BASEPRI, r0
 8008b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008b66:	f380 8809 	msr	PSP, r0
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	4770      	bx	lr

08008b70 <pxCurrentTCBConst>:
 8008b70:	20002524 	.word	0x20002524
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop

08008b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	607b      	str	r3, [r7, #4]
}
 8008b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b92:	f7fe ff63 	bl	8007a5c <xTaskIncrementTick>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b9c:	4b06      	ldr	r3, [pc, #24]	; (8008bb8 <SysTick_Handler+0x40>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f383 8811 	msr	BASEPRI, r3
}
 8008bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <vPortSetupTimerInterrupt+0x30>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bc6:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <vPortSetupTimerInterrupt+0x34>)
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <vPortSetupTimerInterrupt+0x38>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <vPortSetupTimerInterrupt+0x3c>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	099b      	lsrs	r3, r3, #6
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <vPortSetupTimerInterrupt+0x40>)
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bde:	4b03      	ldr	r3, [pc, #12]	; (8008bec <vPortSetupTimerInterrupt+0x30>)
 8008be0:	2207      	movs	r2, #7
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bc80      	pop	{r7}
 8008bea:	4770      	bx	lr
 8008bec:	e000e010 	.word	0xe000e010
 8008bf0:	e000e018 	.word	0xe000e018
 8008bf4:	2000000c 	.word	0x2000000c
 8008bf8:	10624dd3 	.word	0x10624dd3
 8008bfc:	e000e014 	.word	0xe000e014

08008c00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c06:	f3ef 8305 	mrs	r3, IPSR
 8008c0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	d914      	bls.n	8008c3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c12:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <vPortValidateInterruptPriority+0x6c>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4413      	add	r3, r2
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c1c:	4b14      	ldr	r3, [pc, #80]	; (8008c70 <vPortValidateInterruptPriority+0x70>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	7afa      	ldrb	r2, [r7, #11]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d20a      	bcs.n	8008c3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	607b      	str	r3, [r7, #4]
}
 8008c38:	bf00      	nop
 8008c3a:	e7fe      	b.n	8008c3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <vPortValidateInterruptPriority+0x74>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c44:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <vPortValidateInterruptPriority+0x78>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d90a      	bls.n	8008c62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	603b      	str	r3, [r7, #0]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <vPortValidateInterruptPriority+0x60>
	}
 8008c62:	bf00      	nop
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bc80      	pop	{r7}
 8008c6a:	4770      	bx	lr
 8008c6c:	e000e3f0 	.word	0xe000e3f0
 8008c70:	20002b50 	.word	0x20002b50
 8008c74:	e000ed0c 	.word	0xe000ed0c
 8008c78:	20002b54 	.word	0x20002b54

08008c7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c88:	f7fe fe2e 	bl	80078e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c8c:	4b58      	ldr	r3, [pc, #352]	; (8008df0 <pvPortMalloc+0x174>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c94:	f000 f910 	bl	8008eb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c98:	4b56      	ldr	r3, [pc, #344]	; (8008df4 <pvPortMalloc+0x178>)
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f040 808e 	bne.w	8008dc2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01d      	beq.n	8008ce8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008cac:	2208      	movs	r2, #8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d014      	beq.n	8008ce8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f023 0307 	bic.w	r3, r3, #7
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <pvPortMalloc+0x6c>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	617b      	str	r3, [r7, #20]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d069      	beq.n	8008dc2 <pvPortMalloc+0x146>
 8008cee:	4b42      	ldr	r3, [pc, #264]	; (8008df8 <pvPortMalloc+0x17c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d864      	bhi.n	8008dc2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cf8:	4b40      	ldr	r3, [pc, #256]	; (8008dfc <pvPortMalloc+0x180>)
 8008cfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cfc:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <pvPortMalloc+0x180>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d02:	e004      	b.n	8008d0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d903      	bls.n	8008d20 <pvPortMalloc+0xa4>
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1f1      	bne.n	8008d04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d20:	4b33      	ldr	r3, [pc, #204]	; (8008df0 <pvPortMalloc+0x174>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d04b      	beq.n	8008dc2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2208      	movs	r2, #8
 8008d30:	4413      	add	r3, r2
 8008d32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	1ad2      	subs	r2, r2, r3
 8008d44:	2308      	movs	r3, #8
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d91f      	bls.n	8008d8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <pvPortMalloc+0xf8>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	613b      	str	r3, [r7, #16]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d86:	69b8      	ldr	r0, [r7, #24]
 8008d88:	f000 f8f8 	bl	8008f7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <pvPortMalloc+0x17c>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x17c>)
 8008d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d9a:	4b17      	ldr	r3, [pc, #92]	; (8008df8 <pvPortMalloc+0x17c>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <pvPortMalloc+0x184>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d203      	bcs.n	8008dae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da6:	4b14      	ldr	r3, [pc, #80]	; (8008df8 <pvPortMalloc+0x17c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <pvPortMalloc+0x184>)
 8008dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <pvPortMalloc+0x178>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dc2:	f7fe fd9f 	bl	8007904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00a      	beq.n	8008de6 <pvPortMalloc+0x16a>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	60fb      	str	r3, [r7, #12]
}
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <pvPortMalloc+0x168>
	return pvReturn;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3728      	adds	r7, #40	; 0x28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20003760 	.word	0x20003760
 8008df4:	2000376c 	.word	0x2000376c
 8008df8:	20003764 	.word	0x20003764
 8008dfc:	20003758 	.word	0x20003758
 8008e00:	20003768 	.word	0x20003768

08008e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d048      	beq.n	8008ea8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e16:	2308      	movs	r3, #8
 8008e18:	425b      	negs	r3, r3
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4b21      	ldr	r3, [pc, #132]	; (8008eb0 <vPortFree+0xac>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <vPortFree+0x44>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60fb      	str	r3, [r7, #12]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <vPortFree+0x62>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	60bb      	str	r3, [r7, #8]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <vPortFree+0xac>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d019      	beq.n	8008ea8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d115      	bne.n	8008ea8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <vPortFree+0xac>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	401a      	ands	r2, r3
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e8c:	f7fe fd2c 	bl	80078e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <vPortFree+0xb0>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4413      	add	r3, r2
 8008e9a:	4a06      	ldr	r2, [pc, #24]	; (8008eb4 <vPortFree+0xb0>)
 8008e9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9e:	6938      	ldr	r0, [r7, #16]
 8008ea0:	f000 f86c 	bl	8008f7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ea4:	f7fe fd2e 	bl	8007904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ea8:	bf00      	nop
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	2000376c 	.word	0x2000376c
 8008eb4:	20003764 	.word	0x20003764

08008eb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ebe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ec2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ec4:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <prvHeapInit+0xac>)
 8008ec6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00c      	beq.n	8008eec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	3307      	adds	r3, #7
 8008ed6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0307 	bic.w	r3, r3, #7
 8008ede:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	4a1f      	ldr	r2, [pc, #124]	; (8008f64 <prvHeapInit+0xac>)
 8008ee8:	4413      	add	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ef0:	4a1d      	ldr	r2, [pc, #116]	; (8008f68 <prvHeapInit+0xb0>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ef6:	4b1c      	ldr	r3, [pc, #112]	; (8008f68 <prvHeapInit+0xb0>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f04:	2208      	movs	r2, #8
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <prvHeapInit+0xb4>)
 8008f18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f1a:	4b14      	ldr	r3, [pc, #80]	; (8008f6c <prvHeapInit+0xb4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f22:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <prvHeapInit+0xb4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	1ad2      	subs	r2, r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <prvHeapInit+0xb4>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <prvHeapInit+0xb8>)
 8008f46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4a09      	ldr	r2, [pc, #36]	; (8008f74 <prvHeapInit+0xbc>)
 8008f4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f50:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <prvHeapInit+0xc0>)
 8008f52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	20002b58 	.word	0x20002b58
 8008f68:	20003758 	.word	0x20003758
 8008f6c:	20003760 	.word	0x20003760
 8008f70:	20003768 	.word	0x20003768
 8008f74:	20003764 	.word	0x20003764
 8008f78:	2000376c 	.word	0x2000376c

08008f7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f84:	4b27      	ldr	r3, [pc, #156]	; (8009024 <prvInsertBlockIntoFreeList+0xa8>)
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	e002      	b.n	8008f90 <prvInsertBlockIntoFreeList+0x14>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d8f7      	bhi.n	8008f8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d108      	bne.n	8008fbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	441a      	add	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	441a      	add	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d118      	bne.n	8009004 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <prvInsertBlockIntoFreeList+0xac>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d00d      	beq.n	8008ffa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	441a      	add	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e008      	b.n	800900c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <prvInsertBlockIntoFreeList+0xac>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	e003      	b.n	800900c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	429a      	cmp	r2, r3
 8009012:	d002      	beq.n	800901a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr
 8009024:	20003758 	.word	0x20003758
 8009028:	20003760 	.word	0x20003760

0800902c <__errno>:
 800902c:	4b01      	ldr	r3, [pc, #4]	; (8009034 <__errno+0x8>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	2000001c 	.word	0x2000001c

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	2600      	movs	r6, #0
 800903c:	4d0c      	ldr	r5, [pc, #48]	; (8009070 <__libc_init_array+0x38>)
 800903e:	4c0d      	ldr	r4, [pc, #52]	; (8009074 <__libc_init_array+0x3c>)
 8009040:	1b64      	subs	r4, r4, r5
 8009042:	10a4      	asrs	r4, r4, #2
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	f004 fc5a 	bl	800d900 <_init>
 800904c:	2600      	movs	r6, #0
 800904e:	4d0a      	ldr	r5, [pc, #40]	; (8009078 <__libc_init_array+0x40>)
 8009050:	4c0a      	ldr	r4, [pc, #40]	; (800907c <__libc_init_array+0x44>)
 8009052:	1b64      	subs	r4, r4, r5
 8009054:	10a4      	asrs	r4, r4, #2
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	0800ee64 	.word	0x0800ee64
 8009074:	0800ee64 	.word	0x0800ee64
 8009078:	0800ee64 	.word	0x0800ee64
 800907c:	0800ee68 	.word	0x0800ee68

08009080 <memcpy>:
 8009080:	440a      	add	r2, r1
 8009082:	4291      	cmp	r1, r2
 8009084:	f100 33ff 	add.w	r3, r0, #4294967295
 8009088:	d100      	bne.n	800908c <memcpy+0xc>
 800908a:	4770      	bx	lr
 800908c:	b510      	push	{r4, lr}
 800908e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009092:	4291      	cmp	r1, r2
 8009094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009098:	d1f9      	bne.n	800908e <memcpy+0xe>
 800909a:	bd10      	pop	{r4, pc}

0800909c <memset>:
 800909c:	4603      	mov	r3, r0
 800909e:	4402      	add	r2, r0
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d100      	bne.n	80090a6 <memset+0xa>
 80090a4:	4770      	bx	lr
 80090a6:	f803 1b01 	strb.w	r1, [r3], #1
 80090aa:	e7f9      	b.n	80090a0 <memset+0x4>

080090ac <__cvt>:
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b2:	461f      	mov	r7, r3
 80090b4:	bfbb      	ittet	lt
 80090b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80090ba:	461f      	movlt	r7, r3
 80090bc:	2300      	movge	r3, #0
 80090be:	232d      	movlt	r3, #45	; 0x2d
 80090c0:	b088      	sub	sp, #32
 80090c2:	4614      	mov	r4, r2
 80090c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80090c8:	7013      	strb	r3, [r2, #0]
 80090ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80090d0:	f023 0820 	bic.w	r8, r3, #32
 80090d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80090d8:	d005      	beq.n	80090e6 <__cvt+0x3a>
 80090da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80090de:	d100      	bne.n	80090e2 <__cvt+0x36>
 80090e0:	3501      	adds	r5, #1
 80090e2:	2302      	movs	r3, #2
 80090e4:	e000      	b.n	80090e8 <__cvt+0x3c>
 80090e6:	2303      	movs	r3, #3
 80090e8:	aa07      	add	r2, sp, #28
 80090ea:	9204      	str	r2, [sp, #16]
 80090ec:	aa06      	add	r2, sp, #24
 80090ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80090f2:	e9cd 3500 	strd	r3, r5, [sp]
 80090f6:	4622      	mov	r2, r4
 80090f8:	463b      	mov	r3, r7
 80090fa:	f001 fd8d 	bl	800ac18 <_dtoa_r>
 80090fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009102:	4606      	mov	r6, r0
 8009104:	d102      	bne.n	800910c <__cvt+0x60>
 8009106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009108:	07db      	lsls	r3, r3, #31
 800910a:	d522      	bpl.n	8009152 <__cvt+0xa6>
 800910c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009110:	eb06 0905 	add.w	r9, r6, r5
 8009114:	d110      	bne.n	8009138 <__cvt+0x8c>
 8009116:	7833      	ldrb	r3, [r6, #0]
 8009118:	2b30      	cmp	r3, #48	; 0x30
 800911a:	d10a      	bne.n	8009132 <__cvt+0x86>
 800911c:	2200      	movs	r2, #0
 800911e:	2300      	movs	r3, #0
 8009120:	4620      	mov	r0, r4
 8009122:	4639      	mov	r1, r7
 8009124:	f7f7 fc4a 	bl	80009bc <__aeabi_dcmpeq>
 8009128:	b918      	cbnz	r0, 8009132 <__cvt+0x86>
 800912a:	f1c5 0501 	rsb	r5, r5, #1
 800912e:	f8ca 5000 	str.w	r5, [sl]
 8009132:	f8da 3000 	ldr.w	r3, [sl]
 8009136:	4499      	add	r9, r3
 8009138:	2200      	movs	r2, #0
 800913a:	2300      	movs	r3, #0
 800913c:	4620      	mov	r0, r4
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fc3c 	bl	80009bc <__aeabi_dcmpeq>
 8009144:	b108      	cbz	r0, 800914a <__cvt+0x9e>
 8009146:	f8cd 901c 	str.w	r9, [sp, #28]
 800914a:	2230      	movs	r2, #48	; 0x30
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	454b      	cmp	r3, r9
 8009150:	d307      	bcc.n	8009162 <__cvt+0xb6>
 8009152:	4630      	mov	r0, r6
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009158:	1b9b      	subs	r3, r3, r6
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	b008      	add	sp, #32
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	9107      	str	r1, [sp, #28]
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	e7f0      	b.n	800914c <__cvt+0xa0>

0800916a <__exponent>:
 800916a:	4603      	mov	r3, r0
 800916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916e:	2900      	cmp	r1, #0
 8009170:	f803 2b02 	strb.w	r2, [r3], #2
 8009174:	bfb6      	itet	lt
 8009176:	222d      	movlt	r2, #45	; 0x2d
 8009178:	222b      	movge	r2, #43	; 0x2b
 800917a:	4249      	neglt	r1, r1
 800917c:	2909      	cmp	r1, #9
 800917e:	7042      	strb	r2, [r0, #1]
 8009180:	dd2b      	ble.n	80091da <__exponent+0x70>
 8009182:	f10d 0407 	add.w	r4, sp, #7
 8009186:	46a4      	mov	ip, r4
 8009188:	270a      	movs	r7, #10
 800918a:	fb91 f6f7 	sdiv	r6, r1, r7
 800918e:	460a      	mov	r2, r1
 8009190:	46a6      	mov	lr, r4
 8009192:	fb07 1516 	mls	r5, r7, r6, r1
 8009196:	2a63      	cmp	r2, #99	; 0x63
 8009198:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800919c:	4631      	mov	r1, r6
 800919e:	f104 34ff 	add.w	r4, r4, #4294967295
 80091a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091a6:	dcf0      	bgt.n	800918a <__exponent+0x20>
 80091a8:	3130      	adds	r1, #48	; 0x30
 80091aa:	f1ae 0502 	sub.w	r5, lr, #2
 80091ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091b2:	4629      	mov	r1, r5
 80091b4:	1c44      	adds	r4, r0, #1
 80091b6:	4561      	cmp	r1, ip
 80091b8:	d30a      	bcc.n	80091d0 <__exponent+0x66>
 80091ba:	f10d 0209 	add.w	r2, sp, #9
 80091be:	eba2 020e 	sub.w	r2, r2, lr
 80091c2:	4565      	cmp	r5, ip
 80091c4:	bf88      	it	hi
 80091c6:	2200      	movhi	r2, #0
 80091c8:	4413      	add	r3, r2
 80091ca:	1a18      	subs	r0, r3, r0
 80091cc:	b003      	add	sp, #12
 80091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80091d8:	e7ed      	b.n	80091b6 <__exponent+0x4c>
 80091da:	2330      	movs	r3, #48	; 0x30
 80091dc:	3130      	adds	r1, #48	; 0x30
 80091de:	7083      	strb	r3, [r0, #2]
 80091e0:	70c1      	strb	r1, [r0, #3]
 80091e2:	1d03      	adds	r3, r0, #4
 80091e4:	e7f1      	b.n	80091ca <__exponent+0x60>
	...

080091e8 <_printf_float>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	b091      	sub	sp, #68	; 0x44
 80091ee:	460c      	mov	r4, r1
 80091f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80091f4:	4616      	mov	r6, r2
 80091f6:	461f      	mov	r7, r3
 80091f8:	4605      	mov	r5, r0
 80091fa:	f002 fe61 	bl	800bec0 <_localeconv_r>
 80091fe:	6803      	ldr	r3, [r0, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	9309      	str	r3, [sp, #36]	; 0x24
 8009204:	f7f6 ffae 	bl	8000164 <strlen>
 8009208:	2300      	movs	r3, #0
 800920a:	930e      	str	r3, [sp, #56]	; 0x38
 800920c:	f8d8 3000 	ldr.w	r3, [r8]
 8009210:	900a      	str	r0, [sp, #40]	; 0x28
 8009212:	3307      	adds	r3, #7
 8009214:	f023 0307 	bic.w	r3, r3, #7
 8009218:	f103 0208 	add.w	r2, r3, #8
 800921c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009220:	f8d4 b000 	ldr.w	fp, [r4]
 8009224:	f8c8 2000 	str.w	r2, [r8]
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009230:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009234:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009238:	930b      	str	r3, [sp, #44]	; 0x2c
 800923a:	f04f 32ff 	mov.w	r2, #4294967295
 800923e:	4640      	mov	r0, r8
 8009240:	4b9c      	ldr	r3, [pc, #624]	; (80094b4 <_printf_float+0x2cc>)
 8009242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009244:	f7f7 fbec 	bl	8000a20 <__aeabi_dcmpun>
 8009248:	bb70      	cbnz	r0, 80092a8 <_printf_float+0xc0>
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	4640      	mov	r0, r8
 8009250:	4b98      	ldr	r3, [pc, #608]	; (80094b4 <_printf_float+0x2cc>)
 8009252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009254:	f7f7 fbc6 	bl	80009e4 <__aeabi_dcmple>
 8009258:	bb30      	cbnz	r0, 80092a8 <_printf_float+0xc0>
 800925a:	2200      	movs	r2, #0
 800925c:	2300      	movs	r3, #0
 800925e:	4640      	mov	r0, r8
 8009260:	4651      	mov	r1, sl
 8009262:	f7f7 fbb5 	bl	80009d0 <__aeabi_dcmplt>
 8009266:	b110      	cbz	r0, 800926e <_printf_float+0x86>
 8009268:	232d      	movs	r3, #45	; 0x2d
 800926a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800926e:	4b92      	ldr	r3, [pc, #584]	; (80094b8 <_printf_float+0x2d0>)
 8009270:	4892      	ldr	r0, [pc, #584]	; (80094bc <_printf_float+0x2d4>)
 8009272:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009276:	bf94      	ite	ls
 8009278:	4698      	movls	r8, r3
 800927a:	4680      	movhi	r8, r0
 800927c:	2303      	movs	r3, #3
 800927e:	f04f 0a00 	mov.w	sl, #0
 8009282:	6123      	str	r3, [r4, #16]
 8009284:	f02b 0304 	bic.w	r3, fp, #4
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	4633      	mov	r3, r6
 800928c:	4621      	mov	r1, r4
 800928e:	4628      	mov	r0, r5
 8009290:	9700      	str	r7, [sp, #0]
 8009292:	aa0f      	add	r2, sp, #60	; 0x3c
 8009294:	f000 f9d4 	bl	8009640 <_printf_common>
 8009298:	3001      	adds	r0, #1
 800929a:	f040 8090 	bne.w	80093be <_printf_float+0x1d6>
 800929e:	f04f 30ff 	mov.w	r0, #4294967295
 80092a2:	b011      	add	sp, #68	; 0x44
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a8:	4642      	mov	r2, r8
 80092aa:	4653      	mov	r3, sl
 80092ac:	4640      	mov	r0, r8
 80092ae:	4651      	mov	r1, sl
 80092b0:	f7f7 fbb6 	bl	8000a20 <__aeabi_dcmpun>
 80092b4:	b148      	cbz	r0, 80092ca <_printf_float+0xe2>
 80092b6:	f1ba 0f00 	cmp.w	sl, #0
 80092ba:	bfb8      	it	lt
 80092bc:	232d      	movlt	r3, #45	; 0x2d
 80092be:	4880      	ldr	r0, [pc, #512]	; (80094c0 <_printf_float+0x2d8>)
 80092c0:	bfb8      	it	lt
 80092c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092c6:	4b7f      	ldr	r3, [pc, #508]	; (80094c4 <_printf_float+0x2dc>)
 80092c8:	e7d3      	b.n	8009272 <_printf_float+0x8a>
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	d142      	bne.n	800935a <_printf_float+0x172>
 80092d4:	2306      	movs	r3, #6
 80092d6:	6063      	str	r3, [r4, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	9206      	str	r2, [sp, #24]
 80092dc:	aa0e      	add	r2, sp, #56	; 0x38
 80092de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80092e2:	aa0d      	add	r2, sp, #52	; 0x34
 80092e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80092e8:	9203      	str	r2, [sp, #12]
 80092ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80092ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	4642      	mov	r2, r8
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	4628      	mov	r0, r5
 80092fc:	4653      	mov	r3, sl
 80092fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8009300:	f7ff fed4 	bl	80090ac <__cvt>
 8009304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009306:	4680      	mov	r8, r0
 8009308:	2947      	cmp	r1, #71	; 0x47
 800930a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800930c:	d108      	bne.n	8009320 <_printf_float+0x138>
 800930e:	1cc8      	adds	r0, r1, #3
 8009310:	db02      	blt.n	8009318 <_printf_float+0x130>
 8009312:	6863      	ldr	r3, [r4, #4]
 8009314:	4299      	cmp	r1, r3
 8009316:	dd40      	ble.n	800939a <_printf_float+0x1b2>
 8009318:	f1a9 0902 	sub.w	r9, r9, #2
 800931c:	fa5f f989 	uxtb.w	r9, r9
 8009320:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009324:	d81f      	bhi.n	8009366 <_printf_float+0x17e>
 8009326:	464a      	mov	r2, r9
 8009328:	3901      	subs	r1, #1
 800932a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800932e:	910d      	str	r1, [sp, #52]	; 0x34
 8009330:	f7ff ff1b 	bl	800916a <__exponent>
 8009334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009336:	4682      	mov	sl, r0
 8009338:	1813      	adds	r3, r2, r0
 800933a:	2a01      	cmp	r2, #1
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	dc02      	bgt.n	8009346 <_printf_float+0x15e>
 8009340:	6822      	ldr	r2, [r4, #0]
 8009342:	07d2      	lsls	r2, r2, #31
 8009344:	d501      	bpl.n	800934a <_printf_float+0x162>
 8009346:	3301      	adds	r3, #1
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800934e:	2b00      	cmp	r3, #0
 8009350:	d09b      	beq.n	800928a <_printf_float+0xa2>
 8009352:	232d      	movs	r3, #45	; 0x2d
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009358:	e797      	b.n	800928a <_printf_float+0xa2>
 800935a:	2947      	cmp	r1, #71	; 0x47
 800935c:	d1bc      	bne.n	80092d8 <_printf_float+0xf0>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1ba      	bne.n	80092d8 <_printf_float+0xf0>
 8009362:	2301      	movs	r3, #1
 8009364:	e7b7      	b.n	80092d6 <_printf_float+0xee>
 8009366:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800936a:	d118      	bne.n	800939e <_printf_float+0x1b6>
 800936c:	2900      	cmp	r1, #0
 800936e:	6863      	ldr	r3, [r4, #4]
 8009370:	dd0b      	ble.n	800938a <_printf_float+0x1a2>
 8009372:	6121      	str	r1, [r4, #16]
 8009374:	b913      	cbnz	r3, 800937c <_printf_float+0x194>
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	07d0      	lsls	r0, r2, #31
 800937a:	d502      	bpl.n	8009382 <_printf_float+0x19a>
 800937c:	3301      	adds	r3, #1
 800937e:	440b      	add	r3, r1
 8009380:	6123      	str	r3, [r4, #16]
 8009382:	f04f 0a00 	mov.w	sl, #0
 8009386:	65a1      	str	r1, [r4, #88]	; 0x58
 8009388:	e7df      	b.n	800934a <_printf_float+0x162>
 800938a:	b913      	cbnz	r3, 8009392 <_printf_float+0x1aa>
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	07d2      	lsls	r2, r2, #31
 8009390:	d501      	bpl.n	8009396 <_printf_float+0x1ae>
 8009392:	3302      	adds	r3, #2
 8009394:	e7f4      	b.n	8009380 <_printf_float+0x198>
 8009396:	2301      	movs	r3, #1
 8009398:	e7f2      	b.n	8009380 <_printf_float+0x198>
 800939a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800939e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a0:	4299      	cmp	r1, r3
 80093a2:	db05      	blt.n	80093b0 <_printf_float+0x1c8>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	6121      	str	r1, [r4, #16]
 80093a8:	07d8      	lsls	r0, r3, #31
 80093aa:	d5ea      	bpl.n	8009382 <_printf_float+0x19a>
 80093ac:	1c4b      	adds	r3, r1, #1
 80093ae:	e7e7      	b.n	8009380 <_printf_float+0x198>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	bfcc      	ite	gt
 80093b4:	2201      	movgt	r2, #1
 80093b6:	f1c1 0202 	rsble	r2, r1, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	e7e0      	b.n	8009380 <_printf_float+0x198>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	055a      	lsls	r2, r3, #21
 80093c2:	d407      	bmi.n	80093d4 <_printf_float+0x1ec>
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	4642      	mov	r2, r8
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	d12b      	bne.n	800942a <_printf_float+0x242>
 80093d2:	e764      	b.n	800929e <_printf_float+0xb6>
 80093d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80093d8:	f240 80dd 	bls.w	8009596 <_printf_float+0x3ae>
 80093dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093e0:	2200      	movs	r2, #0
 80093e2:	2300      	movs	r3, #0
 80093e4:	f7f7 faea 	bl	80009bc <__aeabi_dcmpeq>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d033      	beq.n	8009454 <_printf_float+0x26c>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4631      	mov	r1, r6
 80093f0:	4628      	mov	r0, r5
 80093f2:	4a35      	ldr	r2, [pc, #212]	; (80094c8 <_printf_float+0x2e0>)
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f af51 	beq.w	800929e <_printf_float+0xb6>
 80093fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009400:	429a      	cmp	r2, r3
 8009402:	db02      	blt.n	800940a <_printf_float+0x222>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	07d8      	lsls	r0, r3, #31
 8009408:	d50f      	bpl.n	800942a <_printf_float+0x242>
 800940a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	f43f af42 	beq.w	800929e <_printf_float+0xb6>
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	f104 091a 	add.w	r9, r4, #26
 8009422:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009424:	3b01      	subs	r3, #1
 8009426:	4543      	cmp	r3, r8
 8009428:	dc09      	bgt.n	800943e <_printf_float+0x256>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	079b      	lsls	r3, r3, #30
 800942e:	f100 8102 	bmi.w	8009636 <_printf_float+0x44e>
 8009432:	68e0      	ldr	r0, [r4, #12]
 8009434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009436:	4298      	cmp	r0, r3
 8009438:	bfb8      	it	lt
 800943a:	4618      	movlt	r0, r3
 800943c:	e731      	b.n	80092a2 <_printf_float+0xba>
 800943e:	2301      	movs	r3, #1
 8009440:	464a      	mov	r2, r9
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f af28 	beq.w	800929e <_printf_float+0xb6>
 800944e:	f108 0801 	add.w	r8, r8, #1
 8009452:	e7e6      	b.n	8009422 <_printf_float+0x23a>
 8009454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	dc38      	bgt.n	80094cc <_printf_float+0x2e4>
 800945a:	2301      	movs	r3, #1
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <_printf_float+0x2e0>)
 8009462:	47b8      	blx	r7
 8009464:	3001      	adds	r0, #1
 8009466:	f43f af1a 	beq.w	800929e <_printf_float+0xb6>
 800946a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800946e:	4313      	orrs	r3, r2
 8009470:	d102      	bne.n	8009478 <_printf_float+0x290>
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	07d9      	lsls	r1, r3, #31
 8009476:	d5d8      	bpl.n	800942a <_printf_float+0x242>
 8009478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f af0b 	beq.w	800929e <_printf_float+0xb6>
 8009488:	f04f 0900 	mov.w	r9, #0
 800948c:	f104 0a1a 	add.w	sl, r4, #26
 8009490:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009492:	425b      	negs	r3, r3
 8009494:	454b      	cmp	r3, r9
 8009496:	dc01      	bgt.n	800949c <_printf_float+0x2b4>
 8009498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800949a:	e794      	b.n	80093c6 <_printf_float+0x1de>
 800949c:	2301      	movs	r3, #1
 800949e:	4652      	mov	r2, sl
 80094a0:	4631      	mov	r1, r6
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	f43f aef9 	beq.w	800929e <_printf_float+0xb6>
 80094ac:	f109 0901 	add.w	r9, r9, #1
 80094b0:	e7ee      	b.n	8009490 <_printf_float+0x2a8>
 80094b2:	bf00      	nop
 80094b4:	7fefffff 	.word	0x7fefffff
 80094b8:	0800e9c0 	.word	0x0800e9c0
 80094bc:	0800e9c4 	.word	0x0800e9c4
 80094c0:	0800e9cc 	.word	0x0800e9cc
 80094c4:	0800e9c8 	.word	0x0800e9c8
 80094c8:	0800e9d0 	.word	0x0800e9d0
 80094cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094d0:	429a      	cmp	r2, r3
 80094d2:	bfa8      	it	ge
 80094d4:	461a      	movge	r2, r3
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	4691      	mov	r9, r2
 80094da:	dc37      	bgt.n	800954c <_printf_float+0x364>
 80094dc:	f04f 0b00 	mov.w	fp, #0
 80094e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094e4:	f104 021a 	add.w	r2, r4, #26
 80094e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80094ec:	ebaa 0309 	sub.w	r3, sl, r9
 80094f0:	455b      	cmp	r3, fp
 80094f2:	dc33      	bgt.n	800955c <_printf_float+0x374>
 80094f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80094f8:	429a      	cmp	r2, r3
 80094fa:	db3b      	blt.n	8009574 <_printf_float+0x38c>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	07da      	lsls	r2, r3, #31
 8009500:	d438      	bmi.n	8009574 <_printf_float+0x38c>
 8009502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009504:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009506:	eba3 020a 	sub.w	r2, r3, sl
 800950a:	eba3 0901 	sub.w	r9, r3, r1
 800950e:	4591      	cmp	r9, r2
 8009510:	bfa8      	it	ge
 8009512:	4691      	movge	r9, r2
 8009514:	f1b9 0f00 	cmp.w	r9, #0
 8009518:	dc34      	bgt.n	8009584 <_printf_float+0x39c>
 800951a:	f04f 0800 	mov.w	r8, #0
 800951e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009522:	f104 0a1a 	add.w	sl, r4, #26
 8009526:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	eba3 0309 	sub.w	r3, r3, r9
 8009530:	4543      	cmp	r3, r8
 8009532:	f77f af7a 	ble.w	800942a <_printf_float+0x242>
 8009536:	2301      	movs	r3, #1
 8009538:	4652      	mov	r2, sl
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f aeac 	beq.w	800929e <_printf_float+0xb6>
 8009546:	f108 0801 	add.w	r8, r8, #1
 800954a:	e7ec      	b.n	8009526 <_printf_float+0x33e>
 800954c:	4613      	mov	r3, r2
 800954e:	4631      	mov	r1, r6
 8009550:	4642      	mov	r2, r8
 8009552:	4628      	mov	r0, r5
 8009554:	47b8      	blx	r7
 8009556:	3001      	adds	r0, #1
 8009558:	d1c0      	bne.n	80094dc <_printf_float+0x2f4>
 800955a:	e6a0      	b.n	800929e <_printf_float+0xb6>
 800955c:	2301      	movs	r3, #1
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	920b      	str	r2, [sp, #44]	; 0x2c
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f ae99 	beq.w	800929e <_printf_float+0xb6>
 800956c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800956e:	f10b 0b01 	add.w	fp, fp, #1
 8009572:	e7b9      	b.n	80094e8 <_printf_float+0x300>
 8009574:	4631      	mov	r1, r6
 8009576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	d1bf      	bne.n	8009502 <_printf_float+0x31a>
 8009582:	e68c      	b.n	800929e <_printf_float+0xb6>
 8009584:	464b      	mov	r3, r9
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	eb08 020a 	add.w	r2, r8, sl
 800958e:	47b8      	blx	r7
 8009590:	3001      	adds	r0, #1
 8009592:	d1c2      	bne.n	800951a <_printf_float+0x332>
 8009594:	e683      	b.n	800929e <_printf_float+0xb6>
 8009596:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009598:	2a01      	cmp	r2, #1
 800959a:	dc01      	bgt.n	80095a0 <_printf_float+0x3b8>
 800959c:	07db      	lsls	r3, r3, #31
 800959e:	d537      	bpl.n	8009610 <_printf_float+0x428>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4642      	mov	r2, r8
 80095a4:	4631      	mov	r1, r6
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b8      	blx	r7
 80095aa:	3001      	adds	r0, #1
 80095ac:	f43f ae77 	beq.w	800929e <_printf_float+0xb6>
 80095b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095b4:	4631      	mov	r1, r6
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b8      	blx	r7
 80095ba:	3001      	adds	r0, #1
 80095bc:	f43f ae6f 	beq.w	800929e <_printf_float+0xb6>
 80095c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095c4:	2200      	movs	r2, #0
 80095c6:	2300      	movs	r3, #0
 80095c8:	f7f7 f9f8 	bl	80009bc <__aeabi_dcmpeq>
 80095cc:	b9d8      	cbnz	r0, 8009606 <_printf_float+0x41e>
 80095ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095d0:	f108 0201 	add.w	r2, r8, #1
 80095d4:	3b01      	subs	r3, #1
 80095d6:	4631      	mov	r1, r6
 80095d8:	4628      	mov	r0, r5
 80095da:	47b8      	blx	r7
 80095dc:	3001      	adds	r0, #1
 80095de:	d10e      	bne.n	80095fe <_printf_float+0x416>
 80095e0:	e65d      	b.n	800929e <_printf_float+0xb6>
 80095e2:	2301      	movs	r3, #1
 80095e4:	464a      	mov	r2, r9
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	47b8      	blx	r7
 80095ec:	3001      	adds	r0, #1
 80095ee:	f43f ae56 	beq.w	800929e <_printf_float+0xb6>
 80095f2:	f108 0801 	add.w	r8, r8, #1
 80095f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4543      	cmp	r3, r8
 80095fc:	dcf1      	bgt.n	80095e2 <_printf_float+0x3fa>
 80095fe:	4653      	mov	r3, sl
 8009600:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009604:	e6e0      	b.n	80093c8 <_printf_float+0x1e0>
 8009606:	f04f 0800 	mov.w	r8, #0
 800960a:	f104 091a 	add.w	r9, r4, #26
 800960e:	e7f2      	b.n	80095f6 <_printf_float+0x40e>
 8009610:	2301      	movs	r3, #1
 8009612:	4642      	mov	r2, r8
 8009614:	e7df      	b.n	80095d6 <_printf_float+0x3ee>
 8009616:	2301      	movs	r3, #1
 8009618:	464a      	mov	r2, r9
 800961a:	4631      	mov	r1, r6
 800961c:	4628      	mov	r0, r5
 800961e:	47b8      	blx	r7
 8009620:	3001      	adds	r0, #1
 8009622:	f43f ae3c 	beq.w	800929e <_printf_float+0xb6>
 8009626:	f108 0801 	add.w	r8, r8, #1
 800962a:	68e3      	ldr	r3, [r4, #12]
 800962c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800962e:	1a5b      	subs	r3, r3, r1
 8009630:	4543      	cmp	r3, r8
 8009632:	dcf0      	bgt.n	8009616 <_printf_float+0x42e>
 8009634:	e6fd      	b.n	8009432 <_printf_float+0x24a>
 8009636:	f04f 0800 	mov.w	r8, #0
 800963a:	f104 0919 	add.w	r9, r4, #25
 800963e:	e7f4      	b.n	800962a <_printf_float+0x442>

08009640 <_printf_common>:
 8009640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009644:	4616      	mov	r6, r2
 8009646:	4699      	mov	r9, r3
 8009648:	688a      	ldr	r2, [r1, #8]
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	4607      	mov	r7, r0
 800964e:	4293      	cmp	r3, r2
 8009650:	bfb8      	it	lt
 8009652:	4613      	movlt	r3, r2
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800965a:	460c      	mov	r4, r1
 800965c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009660:	b10a      	cbz	r2, 8009666 <_printf_common+0x26>
 8009662:	3301      	adds	r3, #1
 8009664:	6033      	str	r3, [r6, #0]
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	0699      	lsls	r1, r3, #26
 800966a:	bf42      	ittt	mi
 800966c:	6833      	ldrmi	r3, [r6, #0]
 800966e:	3302      	addmi	r3, #2
 8009670:	6033      	strmi	r3, [r6, #0]
 8009672:	6825      	ldr	r5, [r4, #0]
 8009674:	f015 0506 	ands.w	r5, r5, #6
 8009678:	d106      	bne.n	8009688 <_printf_common+0x48>
 800967a:	f104 0a19 	add.w	sl, r4, #25
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	6832      	ldr	r2, [r6, #0]
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	42ab      	cmp	r3, r5
 8009686:	dc28      	bgt.n	80096da <_printf_common+0x9a>
 8009688:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800968c:	1e13      	subs	r3, r2, #0
 800968e:	6822      	ldr	r2, [r4, #0]
 8009690:	bf18      	it	ne
 8009692:	2301      	movne	r3, #1
 8009694:	0692      	lsls	r2, r2, #26
 8009696:	d42d      	bmi.n	80096f4 <_printf_common+0xb4>
 8009698:	4649      	mov	r1, r9
 800969a:	4638      	mov	r0, r7
 800969c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096a0:	47c0      	blx	r8
 80096a2:	3001      	adds	r0, #1
 80096a4:	d020      	beq.n	80096e8 <_printf_common+0xa8>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	68e5      	ldr	r5, [r4, #12]
 80096aa:	f003 0306 	and.w	r3, r3, #6
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	bf18      	it	ne
 80096b2:	2500      	movne	r5, #0
 80096b4:	6832      	ldr	r2, [r6, #0]
 80096b6:	f04f 0600 	mov.w	r6, #0
 80096ba:	68a3      	ldr	r3, [r4, #8]
 80096bc:	bf08      	it	eq
 80096be:	1aad      	subeq	r5, r5, r2
 80096c0:	6922      	ldr	r2, [r4, #16]
 80096c2:	bf08      	it	eq
 80096c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096c8:	4293      	cmp	r3, r2
 80096ca:	bfc4      	itt	gt
 80096cc:	1a9b      	subgt	r3, r3, r2
 80096ce:	18ed      	addgt	r5, r5, r3
 80096d0:	341a      	adds	r4, #26
 80096d2:	42b5      	cmp	r5, r6
 80096d4:	d11a      	bne.n	800970c <_printf_common+0xcc>
 80096d6:	2000      	movs	r0, #0
 80096d8:	e008      	b.n	80096ec <_printf_common+0xac>
 80096da:	2301      	movs	r3, #1
 80096dc:	4652      	mov	r2, sl
 80096de:	4649      	mov	r1, r9
 80096e0:	4638      	mov	r0, r7
 80096e2:	47c0      	blx	r8
 80096e4:	3001      	adds	r0, #1
 80096e6:	d103      	bne.n	80096f0 <_printf_common+0xb0>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f0:	3501      	adds	r5, #1
 80096f2:	e7c4      	b.n	800967e <_printf_common+0x3e>
 80096f4:	2030      	movs	r0, #48	; 0x30
 80096f6:	18e1      	adds	r1, r4, r3
 80096f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009702:	4422      	add	r2, r4
 8009704:	3302      	adds	r3, #2
 8009706:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800970a:	e7c5      	b.n	8009698 <_printf_common+0x58>
 800970c:	2301      	movs	r3, #1
 800970e:	4622      	mov	r2, r4
 8009710:	4649      	mov	r1, r9
 8009712:	4638      	mov	r0, r7
 8009714:	47c0      	blx	r8
 8009716:	3001      	adds	r0, #1
 8009718:	d0e6      	beq.n	80096e8 <_printf_common+0xa8>
 800971a:	3601      	adds	r6, #1
 800971c:	e7d9      	b.n	80096d2 <_printf_common+0x92>
	...

08009720 <_printf_i>:
 8009720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	7e0f      	ldrb	r7, [r1, #24]
 8009726:	4691      	mov	r9, r2
 8009728:	2f78      	cmp	r7, #120	; 0x78
 800972a:	4680      	mov	r8, r0
 800972c:	460c      	mov	r4, r1
 800972e:	469a      	mov	sl, r3
 8009730:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009736:	d807      	bhi.n	8009748 <_printf_i+0x28>
 8009738:	2f62      	cmp	r7, #98	; 0x62
 800973a:	d80a      	bhi.n	8009752 <_printf_i+0x32>
 800973c:	2f00      	cmp	r7, #0
 800973e:	f000 80d9 	beq.w	80098f4 <_printf_i+0x1d4>
 8009742:	2f58      	cmp	r7, #88	; 0x58
 8009744:	f000 80a4 	beq.w	8009890 <_printf_i+0x170>
 8009748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800974c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009750:	e03a      	b.n	80097c8 <_printf_i+0xa8>
 8009752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009756:	2b15      	cmp	r3, #21
 8009758:	d8f6      	bhi.n	8009748 <_printf_i+0x28>
 800975a:	a101      	add	r1, pc, #4	; (adr r1, 8009760 <_printf_i+0x40>)
 800975c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009760:	080097b9 	.word	0x080097b9
 8009764:	080097cd 	.word	0x080097cd
 8009768:	08009749 	.word	0x08009749
 800976c:	08009749 	.word	0x08009749
 8009770:	08009749 	.word	0x08009749
 8009774:	08009749 	.word	0x08009749
 8009778:	080097cd 	.word	0x080097cd
 800977c:	08009749 	.word	0x08009749
 8009780:	08009749 	.word	0x08009749
 8009784:	08009749 	.word	0x08009749
 8009788:	08009749 	.word	0x08009749
 800978c:	080098db 	.word	0x080098db
 8009790:	080097fd 	.word	0x080097fd
 8009794:	080098bd 	.word	0x080098bd
 8009798:	08009749 	.word	0x08009749
 800979c:	08009749 	.word	0x08009749
 80097a0:	080098fd 	.word	0x080098fd
 80097a4:	08009749 	.word	0x08009749
 80097a8:	080097fd 	.word	0x080097fd
 80097ac:	08009749 	.word	0x08009749
 80097b0:	08009749 	.word	0x08009749
 80097b4:	080098c5 	.word	0x080098c5
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	602a      	str	r2, [r5, #0]
 80097c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0a4      	b.n	8009916 <_printf_i+0x1f6>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	6829      	ldr	r1, [r5, #0]
 80097d0:	0606      	lsls	r6, r0, #24
 80097d2:	f101 0304 	add.w	r3, r1, #4
 80097d6:	d50a      	bpl.n	80097ee <_printf_i+0xce>
 80097d8:	680e      	ldr	r6, [r1, #0]
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	2e00      	cmp	r6, #0
 80097de:	da03      	bge.n	80097e8 <_printf_i+0xc8>
 80097e0:	232d      	movs	r3, #45	; 0x2d
 80097e2:	4276      	negs	r6, r6
 80097e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e8:	230a      	movs	r3, #10
 80097ea:	485e      	ldr	r0, [pc, #376]	; (8009964 <_printf_i+0x244>)
 80097ec:	e019      	b.n	8009822 <_printf_i+0x102>
 80097ee:	680e      	ldr	r6, [r1, #0]
 80097f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097f4:	602b      	str	r3, [r5, #0]
 80097f6:	bf18      	it	ne
 80097f8:	b236      	sxthne	r6, r6
 80097fa:	e7ef      	b.n	80097dc <_printf_i+0xbc>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	1d19      	adds	r1, r3, #4
 8009802:	6029      	str	r1, [r5, #0]
 8009804:	0601      	lsls	r1, r0, #24
 8009806:	d501      	bpl.n	800980c <_printf_i+0xec>
 8009808:	681e      	ldr	r6, [r3, #0]
 800980a:	e002      	b.n	8009812 <_printf_i+0xf2>
 800980c:	0646      	lsls	r6, r0, #25
 800980e:	d5fb      	bpl.n	8009808 <_printf_i+0xe8>
 8009810:	881e      	ldrh	r6, [r3, #0]
 8009812:	2f6f      	cmp	r7, #111	; 0x6f
 8009814:	bf0c      	ite	eq
 8009816:	2308      	moveq	r3, #8
 8009818:	230a      	movne	r3, #10
 800981a:	4852      	ldr	r0, [pc, #328]	; (8009964 <_printf_i+0x244>)
 800981c:	2100      	movs	r1, #0
 800981e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009822:	6865      	ldr	r5, [r4, #4]
 8009824:	2d00      	cmp	r5, #0
 8009826:	bfa8      	it	ge
 8009828:	6821      	ldrge	r1, [r4, #0]
 800982a:	60a5      	str	r5, [r4, #8]
 800982c:	bfa4      	itt	ge
 800982e:	f021 0104 	bicge.w	r1, r1, #4
 8009832:	6021      	strge	r1, [r4, #0]
 8009834:	b90e      	cbnz	r6, 800983a <_printf_i+0x11a>
 8009836:	2d00      	cmp	r5, #0
 8009838:	d04d      	beq.n	80098d6 <_printf_i+0x1b6>
 800983a:	4615      	mov	r5, r2
 800983c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009840:	fb03 6711 	mls	r7, r3, r1, r6
 8009844:	5dc7      	ldrb	r7, [r0, r7]
 8009846:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800984a:	4637      	mov	r7, r6
 800984c:	42bb      	cmp	r3, r7
 800984e:	460e      	mov	r6, r1
 8009850:	d9f4      	bls.n	800983c <_printf_i+0x11c>
 8009852:	2b08      	cmp	r3, #8
 8009854:	d10b      	bne.n	800986e <_printf_i+0x14e>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	07de      	lsls	r6, r3, #31
 800985a:	d508      	bpl.n	800986e <_printf_i+0x14e>
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	6861      	ldr	r1, [r4, #4]
 8009860:	4299      	cmp	r1, r3
 8009862:	bfde      	ittt	le
 8009864:	2330      	movle	r3, #48	; 0x30
 8009866:	f805 3c01 	strble.w	r3, [r5, #-1]
 800986a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800986e:	1b52      	subs	r2, r2, r5
 8009870:	6122      	str	r2, [r4, #16]
 8009872:	464b      	mov	r3, r9
 8009874:	4621      	mov	r1, r4
 8009876:	4640      	mov	r0, r8
 8009878:	f8cd a000 	str.w	sl, [sp]
 800987c:	aa03      	add	r2, sp, #12
 800987e:	f7ff fedf 	bl	8009640 <_printf_common>
 8009882:	3001      	adds	r0, #1
 8009884:	d14c      	bne.n	8009920 <_printf_i+0x200>
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	b004      	add	sp, #16
 800988c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009890:	4834      	ldr	r0, [pc, #208]	; (8009964 <_printf_i+0x244>)
 8009892:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009896:	6829      	ldr	r1, [r5, #0]
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	f851 6b04 	ldr.w	r6, [r1], #4
 800989e:	6029      	str	r1, [r5, #0]
 80098a0:	061d      	lsls	r5, r3, #24
 80098a2:	d514      	bpl.n	80098ce <_printf_i+0x1ae>
 80098a4:	07df      	lsls	r7, r3, #31
 80098a6:	bf44      	itt	mi
 80098a8:	f043 0320 	orrmi.w	r3, r3, #32
 80098ac:	6023      	strmi	r3, [r4, #0]
 80098ae:	b91e      	cbnz	r6, 80098b8 <_printf_i+0x198>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	f023 0320 	bic.w	r3, r3, #32
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	2310      	movs	r3, #16
 80098ba:	e7af      	b.n	800981c <_printf_i+0xfc>
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	f043 0320 	orr.w	r3, r3, #32
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	2378      	movs	r3, #120	; 0x78
 80098c6:	4828      	ldr	r0, [pc, #160]	; (8009968 <_printf_i+0x248>)
 80098c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098cc:	e7e3      	b.n	8009896 <_printf_i+0x176>
 80098ce:	0659      	lsls	r1, r3, #25
 80098d0:	bf48      	it	mi
 80098d2:	b2b6      	uxthmi	r6, r6
 80098d4:	e7e6      	b.n	80098a4 <_printf_i+0x184>
 80098d6:	4615      	mov	r5, r2
 80098d8:	e7bb      	b.n	8009852 <_printf_i+0x132>
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	6826      	ldr	r6, [r4, #0]
 80098de:	1d18      	adds	r0, r3, #4
 80098e0:	6961      	ldr	r1, [r4, #20]
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	0635      	lsls	r5, r6, #24
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	d501      	bpl.n	80098ee <_printf_i+0x1ce>
 80098ea:	6019      	str	r1, [r3, #0]
 80098ec:	e002      	b.n	80098f4 <_printf_i+0x1d4>
 80098ee:	0670      	lsls	r0, r6, #25
 80098f0:	d5fb      	bpl.n	80098ea <_printf_i+0x1ca>
 80098f2:	8019      	strh	r1, [r3, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	4615      	mov	r5, r2
 80098f8:	6123      	str	r3, [r4, #16]
 80098fa:	e7ba      	b.n	8009872 <_printf_i+0x152>
 80098fc:	682b      	ldr	r3, [r5, #0]
 80098fe:	2100      	movs	r1, #0
 8009900:	1d1a      	adds	r2, r3, #4
 8009902:	602a      	str	r2, [r5, #0]
 8009904:	681d      	ldr	r5, [r3, #0]
 8009906:	6862      	ldr	r2, [r4, #4]
 8009908:	4628      	mov	r0, r5
 800990a:	f002 faf7 	bl	800befc <memchr>
 800990e:	b108      	cbz	r0, 8009914 <_printf_i+0x1f4>
 8009910:	1b40      	subs	r0, r0, r5
 8009912:	6060      	str	r0, [r4, #4]
 8009914:	6863      	ldr	r3, [r4, #4]
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	2300      	movs	r3, #0
 800991a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800991e:	e7a8      	b.n	8009872 <_printf_i+0x152>
 8009920:	462a      	mov	r2, r5
 8009922:	4649      	mov	r1, r9
 8009924:	4640      	mov	r0, r8
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	47d0      	blx	sl
 800992a:	3001      	adds	r0, #1
 800992c:	d0ab      	beq.n	8009886 <_printf_i+0x166>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	079b      	lsls	r3, r3, #30
 8009932:	d413      	bmi.n	800995c <_printf_i+0x23c>
 8009934:	68e0      	ldr	r0, [r4, #12]
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	4298      	cmp	r0, r3
 800993a:	bfb8      	it	lt
 800993c:	4618      	movlt	r0, r3
 800993e:	e7a4      	b.n	800988a <_printf_i+0x16a>
 8009940:	2301      	movs	r3, #1
 8009942:	4632      	mov	r2, r6
 8009944:	4649      	mov	r1, r9
 8009946:	4640      	mov	r0, r8
 8009948:	47d0      	blx	sl
 800994a:	3001      	adds	r0, #1
 800994c:	d09b      	beq.n	8009886 <_printf_i+0x166>
 800994e:	3501      	adds	r5, #1
 8009950:	68e3      	ldr	r3, [r4, #12]
 8009952:	9903      	ldr	r1, [sp, #12]
 8009954:	1a5b      	subs	r3, r3, r1
 8009956:	42ab      	cmp	r3, r5
 8009958:	dcf2      	bgt.n	8009940 <_printf_i+0x220>
 800995a:	e7eb      	b.n	8009934 <_printf_i+0x214>
 800995c:	2500      	movs	r5, #0
 800995e:	f104 0619 	add.w	r6, r4, #25
 8009962:	e7f5      	b.n	8009950 <_printf_i+0x230>
 8009964:	0800e9d2 	.word	0x0800e9d2
 8009968:	0800e9e3 	.word	0x0800e9e3

0800996c <_scanf_float>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	b087      	sub	sp, #28
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	688b      	ldr	r3, [r1, #8]
 8009976:	4617      	mov	r7, r2
 8009978:	1e5a      	subs	r2, r3, #1
 800997a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800997e:	bf85      	ittet	hi
 8009980:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009984:	195b      	addhi	r3, r3, r5
 8009986:	2300      	movls	r3, #0
 8009988:	9302      	strhi	r3, [sp, #8]
 800998a:	bf88      	it	hi
 800998c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009990:	468b      	mov	fp, r1
 8009992:	f04f 0500 	mov.w	r5, #0
 8009996:	bf8c      	ite	hi
 8009998:	608b      	strhi	r3, [r1, #8]
 800999a:	9302      	strls	r3, [sp, #8]
 800999c:	680b      	ldr	r3, [r1, #0]
 800999e:	4680      	mov	r8, r0
 80099a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80099a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80099a8:	460c      	mov	r4, r1
 80099aa:	465e      	mov	r6, fp
 80099ac:	46aa      	mov	sl, r5
 80099ae:	46a9      	mov	r9, r5
 80099b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80099b4:	9501      	str	r5, [sp, #4]
 80099b6:	68a2      	ldr	r2, [r4, #8]
 80099b8:	b152      	cbz	r2, 80099d0 <_scanf_float+0x64>
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b4e      	cmp	r3, #78	; 0x4e
 80099c0:	d864      	bhi.n	8009a8c <_scanf_float+0x120>
 80099c2:	2b40      	cmp	r3, #64	; 0x40
 80099c4:	d83c      	bhi.n	8009a40 <_scanf_float+0xd4>
 80099c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80099ca:	b2c8      	uxtb	r0, r1
 80099cc:	280e      	cmp	r0, #14
 80099ce:	d93a      	bls.n	8009a46 <_scanf_float+0xda>
 80099d0:	f1b9 0f00 	cmp.w	r9, #0
 80099d4:	d003      	beq.n	80099de <_scanf_float+0x72>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099e2:	f1ba 0f01 	cmp.w	sl, #1
 80099e6:	f200 8113 	bhi.w	8009c10 <_scanf_float+0x2a4>
 80099ea:	455e      	cmp	r6, fp
 80099ec:	f200 8105 	bhi.w	8009bfa <_scanf_float+0x28e>
 80099f0:	2501      	movs	r5, #1
 80099f2:	4628      	mov	r0, r5
 80099f4:	b007      	add	sp, #28
 80099f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80099fe:	2a0d      	cmp	r2, #13
 8009a00:	d8e6      	bhi.n	80099d0 <_scanf_float+0x64>
 8009a02:	a101      	add	r1, pc, #4	; (adr r1, 8009a08 <_scanf_float+0x9c>)
 8009a04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a08:	08009b47 	.word	0x08009b47
 8009a0c:	080099d1 	.word	0x080099d1
 8009a10:	080099d1 	.word	0x080099d1
 8009a14:	080099d1 	.word	0x080099d1
 8009a18:	08009ba7 	.word	0x08009ba7
 8009a1c:	08009b7f 	.word	0x08009b7f
 8009a20:	080099d1 	.word	0x080099d1
 8009a24:	080099d1 	.word	0x080099d1
 8009a28:	08009b55 	.word	0x08009b55
 8009a2c:	080099d1 	.word	0x080099d1
 8009a30:	080099d1 	.word	0x080099d1
 8009a34:	080099d1 	.word	0x080099d1
 8009a38:	080099d1 	.word	0x080099d1
 8009a3c:	08009b0d 	.word	0x08009b0d
 8009a40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009a44:	e7db      	b.n	80099fe <_scanf_float+0x92>
 8009a46:	290e      	cmp	r1, #14
 8009a48:	d8c2      	bhi.n	80099d0 <_scanf_float+0x64>
 8009a4a:	a001      	add	r0, pc, #4	; (adr r0, 8009a50 <_scanf_float+0xe4>)
 8009a4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009a50:	08009aff 	.word	0x08009aff
 8009a54:	080099d1 	.word	0x080099d1
 8009a58:	08009aff 	.word	0x08009aff
 8009a5c:	08009b93 	.word	0x08009b93
 8009a60:	080099d1 	.word	0x080099d1
 8009a64:	08009aad 	.word	0x08009aad
 8009a68:	08009ae9 	.word	0x08009ae9
 8009a6c:	08009ae9 	.word	0x08009ae9
 8009a70:	08009ae9 	.word	0x08009ae9
 8009a74:	08009ae9 	.word	0x08009ae9
 8009a78:	08009ae9 	.word	0x08009ae9
 8009a7c:	08009ae9 	.word	0x08009ae9
 8009a80:	08009ae9 	.word	0x08009ae9
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009ae9 	.word	0x08009ae9
 8009a8c:	2b6e      	cmp	r3, #110	; 0x6e
 8009a8e:	d809      	bhi.n	8009aa4 <_scanf_float+0x138>
 8009a90:	2b60      	cmp	r3, #96	; 0x60
 8009a92:	d8b2      	bhi.n	80099fa <_scanf_float+0x8e>
 8009a94:	2b54      	cmp	r3, #84	; 0x54
 8009a96:	d077      	beq.n	8009b88 <_scanf_float+0x21c>
 8009a98:	2b59      	cmp	r3, #89	; 0x59
 8009a9a:	d199      	bne.n	80099d0 <_scanf_float+0x64>
 8009a9c:	2d07      	cmp	r5, #7
 8009a9e:	d197      	bne.n	80099d0 <_scanf_float+0x64>
 8009aa0:	2508      	movs	r5, #8
 8009aa2:	e029      	b.n	8009af8 <_scanf_float+0x18c>
 8009aa4:	2b74      	cmp	r3, #116	; 0x74
 8009aa6:	d06f      	beq.n	8009b88 <_scanf_float+0x21c>
 8009aa8:	2b79      	cmp	r3, #121	; 0x79
 8009aaa:	e7f6      	b.n	8009a9a <_scanf_float+0x12e>
 8009aac:	6821      	ldr	r1, [r4, #0]
 8009aae:	05c8      	lsls	r0, r1, #23
 8009ab0:	d51a      	bpl.n	8009ae8 <_scanf_float+0x17c>
 8009ab2:	9b02      	ldr	r3, [sp, #8]
 8009ab4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ab8:	6021      	str	r1, [r4, #0]
 8009aba:	f109 0901 	add.w	r9, r9, #1
 8009abe:	b11b      	cbz	r3, 8009ac8 <_scanf_float+0x15c>
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	3201      	adds	r2, #1
 8009ac4:	9302      	str	r3, [sp, #8]
 8009ac6:	60a2      	str	r2, [r4, #8]
 8009ac8:	68a3      	ldr	r3, [r4, #8]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	60a3      	str	r3, [r4, #8]
 8009ace:	6923      	ldr	r3, [r4, #16]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	607b      	str	r3, [r7, #4]
 8009adc:	f340 8084 	ble.w	8009be8 <_scanf_float+0x27c>
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	e766      	b.n	80099b6 <_scanf_float+0x4a>
 8009ae8:	eb1a 0f05 	cmn.w	sl, r5
 8009aec:	f47f af70 	bne.w	80099d0 <_scanf_float+0x64>
 8009af0:	6822      	ldr	r2, [r4, #0]
 8009af2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	f806 3b01 	strb.w	r3, [r6], #1
 8009afc:	e7e4      	b.n	8009ac8 <_scanf_float+0x15c>
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	0610      	lsls	r0, r2, #24
 8009b02:	f57f af65 	bpl.w	80099d0 <_scanf_float+0x64>
 8009b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b0a:	e7f4      	b.n	8009af6 <_scanf_float+0x18a>
 8009b0c:	f1ba 0f00 	cmp.w	sl, #0
 8009b10:	d10e      	bne.n	8009b30 <_scanf_float+0x1c4>
 8009b12:	f1b9 0f00 	cmp.w	r9, #0
 8009b16:	d10e      	bne.n	8009b36 <_scanf_float+0x1ca>
 8009b18:	6822      	ldr	r2, [r4, #0]
 8009b1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b22:	d108      	bne.n	8009b36 <_scanf_float+0x1ca>
 8009b24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b28:	f04f 0a01 	mov.w	sl, #1
 8009b2c:	6022      	str	r2, [r4, #0]
 8009b2e:	e7e3      	b.n	8009af8 <_scanf_float+0x18c>
 8009b30:	f1ba 0f02 	cmp.w	sl, #2
 8009b34:	d055      	beq.n	8009be2 <_scanf_float+0x276>
 8009b36:	2d01      	cmp	r5, #1
 8009b38:	d002      	beq.n	8009b40 <_scanf_float+0x1d4>
 8009b3a:	2d04      	cmp	r5, #4
 8009b3c:	f47f af48 	bne.w	80099d0 <_scanf_float+0x64>
 8009b40:	3501      	adds	r5, #1
 8009b42:	b2ed      	uxtb	r5, r5
 8009b44:	e7d8      	b.n	8009af8 <_scanf_float+0x18c>
 8009b46:	f1ba 0f01 	cmp.w	sl, #1
 8009b4a:	f47f af41 	bne.w	80099d0 <_scanf_float+0x64>
 8009b4e:	f04f 0a02 	mov.w	sl, #2
 8009b52:	e7d1      	b.n	8009af8 <_scanf_float+0x18c>
 8009b54:	b97d      	cbnz	r5, 8009b76 <_scanf_float+0x20a>
 8009b56:	f1b9 0f00 	cmp.w	r9, #0
 8009b5a:	f47f af3c 	bne.w	80099d6 <_scanf_float+0x6a>
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b68:	f47f af39 	bne.w	80099de <_scanf_float+0x72>
 8009b6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b70:	2501      	movs	r5, #1
 8009b72:	6022      	str	r2, [r4, #0]
 8009b74:	e7c0      	b.n	8009af8 <_scanf_float+0x18c>
 8009b76:	2d03      	cmp	r5, #3
 8009b78:	d0e2      	beq.n	8009b40 <_scanf_float+0x1d4>
 8009b7a:	2d05      	cmp	r5, #5
 8009b7c:	e7de      	b.n	8009b3c <_scanf_float+0x1d0>
 8009b7e:	2d02      	cmp	r5, #2
 8009b80:	f47f af26 	bne.w	80099d0 <_scanf_float+0x64>
 8009b84:	2503      	movs	r5, #3
 8009b86:	e7b7      	b.n	8009af8 <_scanf_float+0x18c>
 8009b88:	2d06      	cmp	r5, #6
 8009b8a:	f47f af21 	bne.w	80099d0 <_scanf_float+0x64>
 8009b8e:	2507      	movs	r5, #7
 8009b90:	e7b2      	b.n	8009af8 <_scanf_float+0x18c>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	0591      	lsls	r1, r2, #22
 8009b96:	f57f af1b 	bpl.w	80099d0 <_scanf_float+0x64>
 8009b9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ba4:	e7a8      	b.n	8009af8 <_scanf_float+0x18c>
 8009ba6:	6822      	ldr	r2, [r4, #0]
 8009ba8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009bac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009bb0:	d006      	beq.n	8009bc0 <_scanf_float+0x254>
 8009bb2:	0550      	lsls	r0, r2, #21
 8009bb4:	f57f af0c 	bpl.w	80099d0 <_scanf_float+0x64>
 8009bb8:	f1b9 0f00 	cmp.w	r9, #0
 8009bbc:	f43f af0f 	beq.w	80099de <_scanf_float+0x72>
 8009bc0:	0591      	lsls	r1, r2, #22
 8009bc2:	bf58      	it	pl
 8009bc4:	9901      	ldrpl	r1, [sp, #4]
 8009bc6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bca:	bf58      	it	pl
 8009bcc:	eba9 0101 	subpl.w	r1, r9, r1
 8009bd0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009bd4:	f04f 0900 	mov.w	r9, #0
 8009bd8:	bf58      	it	pl
 8009bda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009bde:	6022      	str	r2, [r4, #0]
 8009be0:	e78a      	b.n	8009af8 <_scanf_float+0x18c>
 8009be2:	f04f 0a03 	mov.w	sl, #3
 8009be6:	e787      	b.n	8009af8 <_scanf_float+0x18c>
 8009be8:	4639      	mov	r1, r7
 8009bea:	4640      	mov	r0, r8
 8009bec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bf0:	4798      	blx	r3
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	f43f aedf 	beq.w	80099b6 <_scanf_float+0x4a>
 8009bf8:	e6ea      	b.n	80099d0 <_scanf_float+0x64>
 8009bfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4640      	mov	r0, r8
 8009c02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c06:	4798      	blx	r3
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	6123      	str	r3, [r4, #16]
 8009c0e:	e6ec      	b.n	80099ea <_scanf_float+0x7e>
 8009c10:	1e6b      	subs	r3, r5, #1
 8009c12:	2b06      	cmp	r3, #6
 8009c14:	d825      	bhi.n	8009c62 <_scanf_float+0x2f6>
 8009c16:	2d02      	cmp	r5, #2
 8009c18:	d836      	bhi.n	8009c88 <_scanf_float+0x31c>
 8009c1a:	455e      	cmp	r6, fp
 8009c1c:	f67f aee8 	bls.w	80099f0 <_scanf_float+0x84>
 8009c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c24:	463a      	mov	r2, r7
 8009c26:	4640      	mov	r0, r8
 8009c28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c2c:	4798      	blx	r3
 8009c2e:	6923      	ldr	r3, [r4, #16]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	e7f1      	b.n	8009c1a <_scanf_float+0x2ae>
 8009c36:	9802      	ldr	r0, [sp, #8]
 8009c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009c40:	463a      	mov	r2, r7
 8009c42:	9002      	str	r0, [sp, #8]
 8009c44:	4640      	mov	r0, r8
 8009c46:	4798      	blx	r3
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	6123      	str	r3, [r4, #16]
 8009c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c52:	fa5f fa8a 	uxtb.w	sl, sl
 8009c56:	f1ba 0f02 	cmp.w	sl, #2
 8009c5a:	d1ec      	bne.n	8009c36 <_scanf_float+0x2ca>
 8009c5c:	3d03      	subs	r5, #3
 8009c5e:	b2ed      	uxtb	r5, r5
 8009c60:	1b76      	subs	r6, r6, r5
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	05da      	lsls	r2, r3, #23
 8009c66:	d52f      	bpl.n	8009cc8 <_scanf_float+0x35c>
 8009c68:	055b      	lsls	r3, r3, #21
 8009c6a:	d510      	bpl.n	8009c8e <_scanf_float+0x322>
 8009c6c:	455e      	cmp	r6, fp
 8009c6e:	f67f aebf 	bls.w	80099f0 <_scanf_float+0x84>
 8009c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c76:	463a      	mov	r2, r7
 8009c78:	4640      	mov	r0, r8
 8009c7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c7e:	4798      	blx	r3
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	e7f1      	b.n	8009c6c <_scanf_float+0x300>
 8009c88:	46aa      	mov	sl, r5
 8009c8a:	9602      	str	r6, [sp, #8]
 8009c8c:	e7df      	b.n	8009c4e <_scanf_float+0x2e2>
 8009c8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	2965      	cmp	r1, #101	; 0x65
 8009c96:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	d00c      	beq.n	8009cbc <_scanf_float+0x350>
 8009ca2:	2945      	cmp	r1, #69	; 0x45
 8009ca4:	d00a      	beq.n	8009cbc <_scanf_float+0x350>
 8009ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009caa:	463a      	mov	r2, r7
 8009cac:	4640      	mov	r0, r8
 8009cae:	4798      	blx	r3
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	1eb5      	subs	r5, r6, #2
 8009cba:	6123      	str	r3, [r4, #16]
 8009cbc:	463a      	mov	r2, r7
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cc4:	4798      	blx	r3
 8009cc6:	462e      	mov	r6, r5
 8009cc8:	6825      	ldr	r5, [r4, #0]
 8009cca:	f015 0510 	ands.w	r5, r5, #16
 8009cce:	d155      	bne.n	8009d7c <_scanf_float+0x410>
 8009cd0:	7035      	strb	r5, [r6, #0]
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cdc:	d11b      	bne.n	8009d16 <_scanf_float+0x3aa>
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	454b      	cmp	r3, r9
 8009ce2:	eba3 0209 	sub.w	r2, r3, r9
 8009ce6:	d123      	bne.n	8009d30 <_scanf_float+0x3c4>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4659      	mov	r1, fp
 8009cec:	4640      	mov	r0, r8
 8009cee:	f000 fe83 	bl	800a9f8 <_strtod_r>
 8009cf2:	6822      	ldr	r2, [r4, #0]
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	f012 0f02 	tst.w	r2, #2
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	460f      	mov	r7, r1
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	d021      	beq.n	8009d46 <_scanf_float+0x3da>
 8009d02:	1d1a      	adds	r2, r3, #4
 8009d04:	9903      	ldr	r1, [sp, #12]
 8009d06:	600a      	str	r2, [r1, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	e9c3 6700 	strd	r6, r7, [r3]
 8009d0e:	68e3      	ldr	r3, [r4, #12]
 8009d10:	3301      	adds	r3, #1
 8009d12:	60e3      	str	r3, [r4, #12]
 8009d14:	e66d      	b.n	80099f2 <_scanf_float+0x86>
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0e5      	beq.n	8009ce8 <_scanf_float+0x37c>
 8009d1c:	9905      	ldr	r1, [sp, #20]
 8009d1e:	230a      	movs	r3, #10
 8009d20:	462a      	mov	r2, r5
 8009d22:	4640      	mov	r0, r8
 8009d24:	3101      	adds	r1, #1
 8009d26:	f000 fee9 	bl	800aafc <_strtol_r>
 8009d2a:	9b04      	ldr	r3, [sp, #16]
 8009d2c:	9e05      	ldr	r6, [sp, #20]
 8009d2e:	1ac2      	subs	r2, r0, r3
 8009d30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009d34:	429e      	cmp	r6, r3
 8009d36:	bf28      	it	cs
 8009d38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4910      	ldr	r1, [pc, #64]	; (8009d80 <_scanf_float+0x414>)
 8009d40:	f000 f826 	bl	8009d90 <siprintf>
 8009d44:	e7d0      	b.n	8009ce8 <_scanf_float+0x37c>
 8009d46:	f012 0f04 	tst.w	r2, #4
 8009d4a:	f103 0204 	add.w	r2, r3, #4
 8009d4e:	d1d9      	bne.n	8009d04 <_scanf_float+0x398>
 8009d50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009d54:	f8cc 2000 	str.w	r2, [ip]
 8009d58:	f8d3 8000 	ldr.w	r8, [r3]
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	f7f6 fe5e 	bl	8000a20 <__aeabi_dcmpun>
 8009d64:	b128      	cbz	r0, 8009d72 <_scanf_float+0x406>
 8009d66:	4807      	ldr	r0, [pc, #28]	; (8009d84 <_scanf_float+0x418>)
 8009d68:	f000 f80e 	bl	8009d88 <nanf>
 8009d6c:	f8c8 0000 	str.w	r0, [r8]
 8009d70:	e7cd      	b.n	8009d0e <_scanf_float+0x3a2>
 8009d72:	4630      	mov	r0, r6
 8009d74:	4639      	mov	r1, r7
 8009d76:	f7f6 feb1 	bl	8000adc <__aeabi_d2f>
 8009d7a:	e7f7      	b.n	8009d6c <_scanf_float+0x400>
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	e638      	b.n	80099f2 <_scanf_float+0x86>
 8009d80:	0800e9f4 	.word	0x0800e9f4
 8009d84:	0800ee00 	.word	0x0800ee00

08009d88 <nanf>:
 8009d88:	4800      	ldr	r0, [pc, #0]	; (8009d8c <nanf+0x4>)
 8009d8a:	4770      	bx	lr
 8009d8c:	7fc00000 	.word	0x7fc00000

08009d90 <siprintf>:
 8009d90:	b40e      	push	{r1, r2, r3}
 8009d92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d96:	b500      	push	{lr}
 8009d98:	b09c      	sub	sp, #112	; 0x70
 8009d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d9c:	9002      	str	r0, [sp, #8]
 8009d9e:	9006      	str	r0, [sp, #24]
 8009da0:	9107      	str	r1, [sp, #28]
 8009da2:	9104      	str	r1, [sp, #16]
 8009da4:	4808      	ldr	r0, [pc, #32]	; (8009dc8 <siprintf+0x38>)
 8009da6:	4909      	ldr	r1, [pc, #36]	; (8009dcc <siprintf+0x3c>)
 8009da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	6800      	ldr	r0, [r0, #0]
 8009db0:	a902      	add	r1, sp, #8
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	f002 feb4 	bl	800cb20 <_svfiprintf_r>
 8009db8:	2200      	movs	r2, #0
 8009dba:	9b02      	ldr	r3, [sp, #8]
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	b01c      	add	sp, #112	; 0x70
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b003      	add	sp, #12
 8009dc6:	4770      	bx	lr
 8009dc8:	2000001c 	.word	0x2000001c
 8009dcc:	ffff0208 	.word	0xffff0208

08009dd0 <strcpy>:
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd6:	f803 2b01 	strb.w	r2, [r3], #1
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	d1f9      	bne.n	8009dd2 <strcpy+0x2>
 8009dde:	4770      	bx	lr

08009de0 <sulp>:
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	460f      	mov	r7, r1
 8009de6:	4690      	mov	r8, r2
 8009de8:	f002 fc06 	bl	800c5f8 <__ulp>
 8009dec:	4604      	mov	r4, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	f1b8 0f00 	cmp.w	r8, #0
 8009df4:	d011      	beq.n	8009e1a <sulp+0x3a>
 8009df6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009dfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd0b      	ble.n	8009e1a <sulp+0x3a>
 8009e02:	2400      	movs	r4, #0
 8009e04:	051b      	lsls	r3, r3, #20
 8009e06:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e0e:	4622      	mov	r2, r4
 8009e10:	462b      	mov	r3, r5
 8009e12:	f7f6 fb6b 	bl	80004ec <__aeabi_dmul>
 8009e16:	4604      	mov	r4, r0
 8009e18:	460d      	mov	r5, r1
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e22:	0000      	movs	r0, r0
 8009e24:	0000      	movs	r0, r0
	...

08009e28 <_strtod_l>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	469b      	mov	fp, r3
 8009e2e:	2300      	movs	r3, #0
 8009e30:	b09f      	sub	sp, #124	; 0x7c
 8009e32:	931a      	str	r3, [sp, #104]	; 0x68
 8009e34:	4b9e      	ldr	r3, [pc, #632]	; (800a0b0 <_strtod_l+0x288>)
 8009e36:	4682      	mov	sl, r0
 8009e38:	681f      	ldr	r7, [r3, #0]
 8009e3a:	460e      	mov	r6, r1
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	9215      	str	r2, [sp, #84]	; 0x54
 8009e40:	f7f6 f990 	bl	8000164 <strlen>
 8009e44:	f04f 0800 	mov.w	r8, #0
 8009e48:	4604      	mov	r4, r0
 8009e4a:	f04f 0900 	mov.w	r9, #0
 8009e4e:	9619      	str	r6, [sp, #100]	; 0x64
 8009e50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e52:	781a      	ldrb	r2, [r3, #0]
 8009e54:	2a2b      	cmp	r2, #43	; 0x2b
 8009e56:	d04c      	beq.n	8009ef2 <_strtod_l+0xca>
 8009e58:	d83a      	bhi.n	8009ed0 <_strtod_l+0xa8>
 8009e5a:	2a0d      	cmp	r2, #13
 8009e5c:	d833      	bhi.n	8009ec6 <_strtod_l+0x9e>
 8009e5e:	2a08      	cmp	r2, #8
 8009e60:	d833      	bhi.n	8009eca <_strtod_l+0xa2>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d03d      	beq.n	8009ee2 <_strtod_l+0xba>
 8009e66:	2300      	movs	r3, #0
 8009e68:	930a      	str	r3, [sp, #40]	; 0x28
 8009e6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009e6c:	782b      	ldrb	r3, [r5, #0]
 8009e6e:	2b30      	cmp	r3, #48	; 0x30
 8009e70:	f040 80aa 	bne.w	8009fc8 <_strtod_l+0x1a0>
 8009e74:	786b      	ldrb	r3, [r5, #1]
 8009e76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e7a:	2b58      	cmp	r3, #88	; 0x58
 8009e7c:	d166      	bne.n	8009f4c <_strtod_l+0x124>
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	4650      	mov	r0, sl
 8009e82:	9301      	str	r3, [sp, #4]
 8009e84:	ab1a      	add	r3, sp, #104	; 0x68
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	4a8a      	ldr	r2, [pc, #552]	; (800a0b4 <_strtod_l+0x28c>)
 8009e8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009e8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009e90:	a919      	add	r1, sp, #100	; 0x64
 8009e92:	f001 fd17 	bl	800b8c4 <__gethex>
 8009e96:	f010 0607 	ands.w	r6, r0, #7
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	d005      	beq.n	8009eaa <_strtod_l+0x82>
 8009e9e:	2e06      	cmp	r6, #6
 8009ea0:	d129      	bne.n	8009ef6 <_strtod_l+0xce>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	9519      	str	r5, [sp, #100]	; 0x64
 8009ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8009eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f040 858a 	bne.w	800a9c6 <_strtod_l+0xb9e>
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	b1d3      	cbz	r3, 8009eec <_strtod_l+0xc4>
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	b01f      	add	sp, #124	; 0x7c
 8009ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec6:	2a20      	cmp	r2, #32
 8009ec8:	d1cd      	bne.n	8009e66 <_strtod_l+0x3e>
 8009eca:	3301      	adds	r3, #1
 8009ecc:	9319      	str	r3, [sp, #100]	; 0x64
 8009ece:	e7bf      	b.n	8009e50 <_strtod_l+0x28>
 8009ed0:	2a2d      	cmp	r2, #45	; 0x2d
 8009ed2:	d1c8      	bne.n	8009e66 <_strtod_l+0x3e>
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	920a      	str	r2, [sp, #40]	; 0x28
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	9219      	str	r2, [sp, #100]	; 0x64
 8009edc:	785b      	ldrb	r3, [r3, #1]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1c3      	bne.n	8009e6a <_strtod_l+0x42>
 8009ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee4:	9619      	str	r6, [sp, #100]	; 0x64
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f040 856b 	bne.w	800a9c2 <_strtod_l+0xb9a>
 8009eec:	4642      	mov	r2, r8
 8009eee:	464b      	mov	r3, r9
 8009ef0:	e7e4      	b.n	8009ebc <_strtod_l+0x94>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	e7ef      	b.n	8009ed6 <_strtod_l+0xae>
 8009ef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ef8:	b13a      	cbz	r2, 8009f0a <_strtod_l+0xe2>
 8009efa:	2135      	movs	r1, #53	; 0x35
 8009efc:	a81c      	add	r0, sp, #112	; 0x70
 8009efe:	f002 fc7f 	bl	800c800 <__copybits>
 8009f02:	4650      	mov	r0, sl
 8009f04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f06:	f002 f847 	bl	800bf98 <_Bfree>
 8009f0a:	3e01      	subs	r6, #1
 8009f0c:	2e04      	cmp	r6, #4
 8009f0e:	d806      	bhi.n	8009f1e <_strtod_l+0xf6>
 8009f10:	e8df f006 	tbb	[pc, r6]
 8009f14:	1714030a 	.word	0x1714030a
 8009f18:	0a          	.byte	0x0a
 8009f19:	00          	.byte	0x00
 8009f1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009f1e:	0721      	lsls	r1, r4, #28
 8009f20:	d5c3      	bpl.n	8009eaa <_strtod_l+0x82>
 8009f22:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009f26:	e7c0      	b.n	8009eaa <_strtod_l+0x82>
 8009f28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009f2a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009f2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f36:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009f3a:	e7f0      	b.n	8009f1e <_strtod_l+0xf6>
 8009f3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a0b8 <_strtod_l+0x290>
 8009f40:	e7ed      	b.n	8009f1e <_strtod_l+0xf6>
 8009f42:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009f46:	f04f 38ff 	mov.w	r8, #4294967295
 8009f4a:	e7e8      	b.n	8009f1e <_strtod_l+0xf6>
 8009f4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	9219      	str	r2, [sp, #100]	; 0x64
 8009f52:	785b      	ldrb	r3, [r3, #1]
 8009f54:	2b30      	cmp	r3, #48	; 0x30
 8009f56:	d0f9      	beq.n	8009f4c <_strtod_l+0x124>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d0a6      	beq.n	8009eaa <_strtod_l+0x82>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9307      	str	r3, [sp, #28]
 8009f60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f62:	220a      	movs	r2, #10
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	2300      	movs	r3, #0
 8009f68:	469b      	mov	fp, r3
 8009f6a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009f6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009f70:	7805      	ldrb	r5, [r0, #0]
 8009f72:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009f76:	b2d9      	uxtb	r1, r3
 8009f78:	2909      	cmp	r1, #9
 8009f7a:	d927      	bls.n	8009fcc <_strtod_l+0x1a4>
 8009f7c:	4622      	mov	r2, r4
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f002 fee4 	bl	800cd4c <strncmp>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d033      	beq.n	8009ff0 <_strtod_l+0x1c8>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	465c      	mov	r4, fp
 8009f8e:	4603      	mov	r3, r0
 8009f90:	9004      	str	r0, [sp, #16]
 8009f92:	2a65      	cmp	r2, #101	; 0x65
 8009f94:	d001      	beq.n	8009f9a <_strtod_l+0x172>
 8009f96:	2a45      	cmp	r2, #69	; 0x45
 8009f98:	d114      	bne.n	8009fc4 <_strtod_l+0x19c>
 8009f9a:	b91c      	cbnz	r4, 8009fa4 <_strtod_l+0x17c>
 8009f9c:	9a07      	ldr	r2, [sp, #28]
 8009f9e:	4302      	orrs	r2, r0
 8009fa0:	d09f      	beq.n	8009ee2 <_strtod_l+0xba>
 8009fa2:	2400      	movs	r4, #0
 8009fa4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009fa6:	1c72      	adds	r2, r6, #1
 8009fa8:	9219      	str	r2, [sp, #100]	; 0x64
 8009faa:	7872      	ldrb	r2, [r6, #1]
 8009fac:	2a2b      	cmp	r2, #43	; 0x2b
 8009fae:	d079      	beq.n	800a0a4 <_strtod_l+0x27c>
 8009fb0:	2a2d      	cmp	r2, #45	; 0x2d
 8009fb2:	f000 8083 	beq.w	800a0bc <_strtod_l+0x294>
 8009fb6:	2700      	movs	r7, #0
 8009fb8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009fbc:	2909      	cmp	r1, #9
 8009fbe:	f240 8083 	bls.w	800a0c8 <_strtod_l+0x2a0>
 8009fc2:	9619      	str	r6, [sp, #100]	; 0x64
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	e09f      	b.n	800a108 <_strtod_l+0x2e0>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e7c8      	b.n	8009f5e <_strtod_l+0x136>
 8009fcc:	f1bb 0f08 	cmp.w	fp, #8
 8009fd0:	bfd5      	itete	le
 8009fd2:	9906      	ldrle	r1, [sp, #24]
 8009fd4:	9905      	ldrgt	r1, [sp, #20]
 8009fd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fda:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009fde:	f100 0001 	add.w	r0, r0, #1
 8009fe2:	bfd4      	ite	le
 8009fe4:	9306      	strle	r3, [sp, #24]
 8009fe6:	9305      	strgt	r3, [sp, #20]
 8009fe8:	f10b 0b01 	add.w	fp, fp, #1
 8009fec:	9019      	str	r0, [sp, #100]	; 0x64
 8009fee:	e7be      	b.n	8009f6e <_strtod_l+0x146>
 8009ff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ff2:	191a      	adds	r2, r3, r4
 8009ff4:	9219      	str	r2, [sp, #100]	; 0x64
 8009ff6:	5d1a      	ldrb	r2, [r3, r4]
 8009ff8:	f1bb 0f00 	cmp.w	fp, #0
 8009ffc:	d036      	beq.n	800a06c <_strtod_l+0x244>
 8009ffe:	465c      	mov	r4, fp
 800a000:	9004      	str	r0, [sp, #16]
 800a002:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a006:	2b09      	cmp	r3, #9
 800a008:	d912      	bls.n	800a030 <_strtod_l+0x208>
 800a00a:	2301      	movs	r3, #1
 800a00c:	e7c1      	b.n	8009f92 <_strtod_l+0x16a>
 800a00e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a010:	3001      	adds	r0, #1
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	9219      	str	r2, [sp, #100]	; 0x64
 800a016:	785a      	ldrb	r2, [r3, #1]
 800a018:	2a30      	cmp	r2, #48	; 0x30
 800a01a:	d0f8      	beq.n	800a00e <_strtod_l+0x1e6>
 800a01c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a020:	2b08      	cmp	r3, #8
 800a022:	f200 84d5 	bhi.w	800a9d0 <_strtod_l+0xba8>
 800a026:	9004      	str	r0, [sp, #16]
 800a028:	2000      	movs	r0, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a02e:	9308      	str	r3, [sp, #32]
 800a030:	3a30      	subs	r2, #48	; 0x30
 800a032:	f100 0301 	add.w	r3, r0, #1
 800a036:	d013      	beq.n	800a060 <_strtod_l+0x238>
 800a038:	9904      	ldr	r1, [sp, #16]
 800a03a:	1905      	adds	r5, r0, r4
 800a03c:	4419      	add	r1, r3
 800a03e:	9104      	str	r1, [sp, #16]
 800a040:	4623      	mov	r3, r4
 800a042:	210a      	movs	r1, #10
 800a044:	42ab      	cmp	r3, r5
 800a046:	d113      	bne.n	800a070 <_strtod_l+0x248>
 800a048:	1823      	adds	r3, r4, r0
 800a04a:	2b08      	cmp	r3, #8
 800a04c:	f104 0401 	add.w	r4, r4, #1
 800a050:	4404      	add	r4, r0
 800a052:	dc1b      	bgt.n	800a08c <_strtod_l+0x264>
 800a054:	230a      	movs	r3, #10
 800a056:	9906      	ldr	r1, [sp, #24]
 800a058:	fb03 2301 	mla	r3, r3, r1, r2
 800a05c:	9306      	str	r3, [sp, #24]
 800a05e:	2300      	movs	r3, #0
 800a060:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a062:	4618      	mov	r0, r3
 800a064:	1c51      	adds	r1, r2, #1
 800a066:	9119      	str	r1, [sp, #100]	; 0x64
 800a068:	7852      	ldrb	r2, [r2, #1]
 800a06a:	e7ca      	b.n	800a002 <_strtod_l+0x1da>
 800a06c:	4658      	mov	r0, fp
 800a06e:	e7d3      	b.n	800a018 <_strtod_l+0x1f0>
 800a070:	2b08      	cmp	r3, #8
 800a072:	dc04      	bgt.n	800a07e <_strtod_l+0x256>
 800a074:	9f06      	ldr	r7, [sp, #24]
 800a076:	434f      	muls	r7, r1
 800a078:	9706      	str	r7, [sp, #24]
 800a07a:	3301      	adds	r3, #1
 800a07c:	e7e2      	b.n	800a044 <_strtod_l+0x21c>
 800a07e:	1c5f      	adds	r7, r3, #1
 800a080:	2f10      	cmp	r7, #16
 800a082:	bfde      	ittt	le
 800a084:	9f05      	ldrle	r7, [sp, #20]
 800a086:	434f      	mulle	r7, r1
 800a088:	9705      	strle	r7, [sp, #20]
 800a08a:	e7f6      	b.n	800a07a <_strtod_l+0x252>
 800a08c:	2c10      	cmp	r4, #16
 800a08e:	bfdf      	itttt	le
 800a090:	230a      	movle	r3, #10
 800a092:	9905      	ldrle	r1, [sp, #20]
 800a094:	fb03 2301 	mlale	r3, r3, r1, r2
 800a098:	9305      	strle	r3, [sp, #20]
 800a09a:	e7e0      	b.n	800a05e <_strtod_l+0x236>
 800a09c:	2300      	movs	r3, #0
 800a09e:	9304      	str	r3, [sp, #16]
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e77b      	b.n	8009f9c <_strtod_l+0x174>
 800a0a4:	2700      	movs	r7, #0
 800a0a6:	1cb2      	adds	r2, r6, #2
 800a0a8:	9219      	str	r2, [sp, #100]	; 0x64
 800a0aa:	78b2      	ldrb	r2, [r6, #2]
 800a0ac:	e784      	b.n	8009fb8 <_strtod_l+0x190>
 800a0ae:	bf00      	nop
 800a0b0:	0800ec48 	.word	0x0800ec48
 800a0b4:	0800e9fc 	.word	0x0800e9fc
 800a0b8:	7ff00000 	.word	0x7ff00000
 800a0bc:	2701      	movs	r7, #1
 800a0be:	e7f2      	b.n	800a0a6 <_strtod_l+0x27e>
 800a0c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0c2:	1c51      	adds	r1, r2, #1
 800a0c4:	9119      	str	r1, [sp, #100]	; 0x64
 800a0c6:	7852      	ldrb	r2, [r2, #1]
 800a0c8:	2a30      	cmp	r2, #48	; 0x30
 800a0ca:	d0f9      	beq.n	800a0c0 <_strtod_l+0x298>
 800a0cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a0d0:	2908      	cmp	r1, #8
 800a0d2:	f63f af77 	bhi.w	8009fc4 <_strtod_l+0x19c>
 800a0d6:	f04f 0e0a 	mov.w	lr, #10
 800a0da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a0de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0e4:	1c51      	adds	r1, r2, #1
 800a0e6:	9119      	str	r1, [sp, #100]	; 0x64
 800a0e8:	7852      	ldrb	r2, [r2, #1]
 800a0ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a0ee:	2d09      	cmp	r5, #9
 800a0f0:	d935      	bls.n	800a15e <_strtod_l+0x336>
 800a0f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0f4:	1b49      	subs	r1, r1, r5
 800a0f6:	2908      	cmp	r1, #8
 800a0f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a0fc:	dc02      	bgt.n	800a104 <_strtod_l+0x2dc>
 800a0fe:	4565      	cmp	r5, ip
 800a100:	bfa8      	it	ge
 800a102:	4665      	movge	r5, ip
 800a104:	b107      	cbz	r7, 800a108 <_strtod_l+0x2e0>
 800a106:	426d      	negs	r5, r5
 800a108:	2c00      	cmp	r4, #0
 800a10a:	d14c      	bne.n	800a1a6 <_strtod_l+0x37e>
 800a10c:	9907      	ldr	r1, [sp, #28]
 800a10e:	4301      	orrs	r1, r0
 800a110:	f47f aecb 	bne.w	8009eaa <_strtod_l+0x82>
 800a114:	2b00      	cmp	r3, #0
 800a116:	f47f aee4 	bne.w	8009ee2 <_strtod_l+0xba>
 800a11a:	2a69      	cmp	r2, #105	; 0x69
 800a11c:	d026      	beq.n	800a16c <_strtod_l+0x344>
 800a11e:	dc23      	bgt.n	800a168 <_strtod_l+0x340>
 800a120:	2a49      	cmp	r2, #73	; 0x49
 800a122:	d023      	beq.n	800a16c <_strtod_l+0x344>
 800a124:	2a4e      	cmp	r2, #78	; 0x4e
 800a126:	f47f aedc 	bne.w	8009ee2 <_strtod_l+0xba>
 800a12a:	499d      	ldr	r1, [pc, #628]	; (800a3a0 <_strtod_l+0x578>)
 800a12c:	a819      	add	r0, sp, #100	; 0x64
 800a12e:	f001 fe17 	bl	800bd60 <__match>
 800a132:	2800      	cmp	r0, #0
 800a134:	f43f aed5 	beq.w	8009ee2 <_strtod_l+0xba>
 800a138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b28      	cmp	r3, #40	; 0x28
 800a13e:	d12c      	bne.n	800a19a <_strtod_l+0x372>
 800a140:	4998      	ldr	r1, [pc, #608]	; (800a3a4 <_strtod_l+0x57c>)
 800a142:	aa1c      	add	r2, sp, #112	; 0x70
 800a144:	a819      	add	r0, sp, #100	; 0x64
 800a146:	f001 fe1f 	bl	800bd88 <__hexnan>
 800a14a:	2805      	cmp	r0, #5
 800a14c:	d125      	bne.n	800a19a <_strtod_l+0x372>
 800a14e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a150:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a154:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a158:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a15c:	e6a5      	b.n	8009eaa <_strtod_l+0x82>
 800a15e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a162:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a166:	e7bc      	b.n	800a0e2 <_strtod_l+0x2ba>
 800a168:	2a6e      	cmp	r2, #110	; 0x6e
 800a16a:	e7dc      	b.n	800a126 <_strtod_l+0x2fe>
 800a16c:	498e      	ldr	r1, [pc, #568]	; (800a3a8 <_strtod_l+0x580>)
 800a16e:	a819      	add	r0, sp, #100	; 0x64
 800a170:	f001 fdf6 	bl	800bd60 <__match>
 800a174:	2800      	cmp	r0, #0
 800a176:	f43f aeb4 	beq.w	8009ee2 <_strtod_l+0xba>
 800a17a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a17c:	498b      	ldr	r1, [pc, #556]	; (800a3ac <_strtod_l+0x584>)
 800a17e:	3b01      	subs	r3, #1
 800a180:	a819      	add	r0, sp, #100	; 0x64
 800a182:	9319      	str	r3, [sp, #100]	; 0x64
 800a184:	f001 fdec 	bl	800bd60 <__match>
 800a188:	b910      	cbnz	r0, 800a190 <_strtod_l+0x368>
 800a18a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a18c:	3301      	adds	r3, #1
 800a18e:	9319      	str	r3, [sp, #100]	; 0x64
 800a190:	f04f 0800 	mov.w	r8, #0
 800a194:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a3b0 <_strtod_l+0x588>
 800a198:	e687      	b.n	8009eaa <_strtod_l+0x82>
 800a19a:	4886      	ldr	r0, [pc, #536]	; (800a3b4 <_strtod_l+0x58c>)
 800a19c:	f002 fdc0 	bl	800cd20 <nan>
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	4689      	mov	r9, r1
 800a1a4:	e681      	b.n	8009eaa <_strtod_l+0x82>
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	f1bb 0f00 	cmp.w	fp, #0
 800a1ac:	bf08      	it	eq
 800a1ae:	46a3      	moveq	fp, r4
 800a1b0:	1aeb      	subs	r3, r5, r3
 800a1b2:	2c10      	cmp	r4, #16
 800a1b4:	9806      	ldr	r0, [sp, #24]
 800a1b6:	4626      	mov	r6, r4
 800a1b8:	9307      	str	r3, [sp, #28]
 800a1ba:	bfa8      	it	ge
 800a1bc:	2610      	movge	r6, #16
 800a1be:	f7f6 f91b 	bl	80003f8 <__aeabi_ui2d>
 800a1c2:	2c09      	cmp	r4, #9
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	dd13      	ble.n	800a1f2 <_strtod_l+0x3ca>
 800a1ca:	4b7b      	ldr	r3, [pc, #492]	; (800a3b8 <_strtod_l+0x590>)
 800a1cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a1d4:	f7f6 f98a 	bl	80004ec <__aeabi_dmul>
 800a1d8:	4680      	mov	r8, r0
 800a1da:	9805      	ldr	r0, [sp, #20]
 800a1dc:	4689      	mov	r9, r1
 800a1de:	f7f6 f90b 	bl	80003f8 <__aeabi_ui2d>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	4640      	mov	r0, r8
 800a1e8:	4649      	mov	r1, r9
 800a1ea:	f7f5 ffc9 	bl	8000180 <__adddf3>
 800a1ee:	4680      	mov	r8, r0
 800a1f0:	4689      	mov	r9, r1
 800a1f2:	2c0f      	cmp	r4, #15
 800a1f4:	dc36      	bgt.n	800a264 <_strtod_l+0x43c>
 800a1f6:	9b07      	ldr	r3, [sp, #28]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f43f ae56 	beq.w	8009eaa <_strtod_l+0x82>
 800a1fe:	dd22      	ble.n	800a246 <_strtod_l+0x41e>
 800a200:	2b16      	cmp	r3, #22
 800a202:	dc09      	bgt.n	800a218 <_strtod_l+0x3f0>
 800a204:	496c      	ldr	r1, [pc, #432]	; (800a3b8 <_strtod_l+0x590>)
 800a206:	4642      	mov	r2, r8
 800a208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a20c:	464b      	mov	r3, r9
 800a20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a212:	f7f6 f96b 	bl	80004ec <__aeabi_dmul>
 800a216:	e7c3      	b.n	800a1a0 <_strtod_l+0x378>
 800a218:	9a07      	ldr	r2, [sp, #28]
 800a21a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a21e:	4293      	cmp	r3, r2
 800a220:	db20      	blt.n	800a264 <_strtod_l+0x43c>
 800a222:	4d65      	ldr	r5, [pc, #404]	; (800a3b8 <_strtod_l+0x590>)
 800a224:	f1c4 040f 	rsb	r4, r4, #15
 800a228:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a22c:	4642      	mov	r2, r8
 800a22e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a232:	464b      	mov	r3, r9
 800a234:	f7f6 f95a 	bl	80004ec <__aeabi_dmul>
 800a238:	9b07      	ldr	r3, [sp, #28]
 800a23a:	1b1c      	subs	r4, r3, r4
 800a23c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a244:	e7e5      	b.n	800a212 <_strtod_l+0x3ea>
 800a246:	9b07      	ldr	r3, [sp, #28]
 800a248:	3316      	adds	r3, #22
 800a24a:	db0b      	blt.n	800a264 <_strtod_l+0x43c>
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	4640      	mov	r0, r8
 800a250:	1b5d      	subs	r5, r3, r5
 800a252:	4b59      	ldr	r3, [pc, #356]	; (800a3b8 <_strtod_l+0x590>)
 800a254:	4649      	mov	r1, r9
 800a256:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a25a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a25e:	f7f6 fa6f 	bl	8000740 <__aeabi_ddiv>
 800a262:	e79d      	b.n	800a1a0 <_strtod_l+0x378>
 800a264:	9b07      	ldr	r3, [sp, #28]
 800a266:	1ba6      	subs	r6, r4, r6
 800a268:	441e      	add	r6, r3
 800a26a:	2e00      	cmp	r6, #0
 800a26c:	dd74      	ble.n	800a358 <_strtod_l+0x530>
 800a26e:	f016 030f 	ands.w	r3, r6, #15
 800a272:	d00a      	beq.n	800a28a <_strtod_l+0x462>
 800a274:	4950      	ldr	r1, [pc, #320]	; (800a3b8 <_strtod_l+0x590>)
 800a276:	4642      	mov	r2, r8
 800a278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a27c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a280:	464b      	mov	r3, r9
 800a282:	f7f6 f933 	bl	80004ec <__aeabi_dmul>
 800a286:	4680      	mov	r8, r0
 800a288:	4689      	mov	r9, r1
 800a28a:	f036 060f 	bics.w	r6, r6, #15
 800a28e:	d052      	beq.n	800a336 <_strtod_l+0x50e>
 800a290:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a294:	dd27      	ble.n	800a2e6 <_strtod_l+0x4be>
 800a296:	f04f 0b00 	mov.w	fp, #0
 800a29a:	f8cd b010 	str.w	fp, [sp, #16]
 800a29e:	f8cd b020 	str.w	fp, [sp, #32]
 800a2a2:	f8cd b018 	str.w	fp, [sp, #24]
 800a2a6:	2322      	movs	r3, #34	; 0x22
 800a2a8:	f04f 0800 	mov.w	r8, #0
 800a2ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a3b0 <_strtod_l+0x588>
 800a2b0:	f8ca 3000 	str.w	r3, [sl]
 800a2b4:	9b08      	ldr	r3, [sp, #32]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f43f adf7 	beq.w	8009eaa <_strtod_l+0x82>
 800a2bc:	4650      	mov	r0, sl
 800a2be:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a2c0:	f001 fe6a 	bl	800bf98 <_Bfree>
 800a2c4:	4650      	mov	r0, sl
 800a2c6:	9906      	ldr	r1, [sp, #24]
 800a2c8:	f001 fe66 	bl	800bf98 <_Bfree>
 800a2cc:	4650      	mov	r0, sl
 800a2ce:	9904      	ldr	r1, [sp, #16]
 800a2d0:	f001 fe62 	bl	800bf98 <_Bfree>
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	9908      	ldr	r1, [sp, #32]
 800a2d8:	f001 fe5e 	bl	800bf98 <_Bfree>
 800a2dc:	4659      	mov	r1, fp
 800a2de:	4650      	mov	r0, sl
 800a2e0:	f001 fe5a 	bl	800bf98 <_Bfree>
 800a2e4:	e5e1      	b.n	8009eaa <_strtod_l+0x82>
 800a2e6:	4b35      	ldr	r3, [pc, #212]	; (800a3bc <_strtod_l+0x594>)
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	9305      	str	r3, [sp, #20]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	461f      	mov	r7, r3
 800a2f2:	1136      	asrs	r6, r6, #4
 800a2f4:	2e01      	cmp	r6, #1
 800a2f6:	dc21      	bgt.n	800a33c <_strtod_l+0x514>
 800a2f8:	b10b      	cbz	r3, 800a2fe <_strtod_l+0x4d6>
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	4b2f      	ldr	r3, [pc, #188]	; (800a3bc <_strtod_l+0x594>)
 800a300:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a304:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a308:	4642      	mov	r2, r8
 800a30a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a30e:	464b      	mov	r3, r9
 800a310:	f7f6 f8ec 	bl	80004ec <__aeabi_dmul>
 800a314:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <_strtod_l+0x588>)
 800a316:	460a      	mov	r2, r1
 800a318:	400b      	ands	r3, r1
 800a31a:	4929      	ldr	r1, [pc, #164]	; (800a3c0 <_strtod_l+0x598>)
 800a31c:	4680      	mov	r8, r0
 800a31e:	428b      	cmp	r3, r1
 800a320:	d8b9      	bhi.n	800a296 <_strtod_l+0x46e>
 800a322:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a326:	428b      	cmp	r3, r1
 800a328:	bf86      	itte	hi
 800a32a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a32e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a3c4 <_strtod_l+0x59c>
 800a332:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a336:	2300      	movs	r3, #0
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	e07f      	b.n	800a43c <_strtod_l+0x614>
 800a33c:	07f2      	lsls	r2, r6, #31
 800a33e:	d505      	bpl.n	800a34c <_strtod_l+0x524>
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	f7f6 f8d1 	bl	80004ec <__aeabi_dmul>
 800a34a:	2301      	movs	r3, #1
 800a34c:	9a05      	ldr	r2, [sp, #20]
 800a34e:	3701      	adds	r7, #1
 800a350:	3208      	adds	r2, #8
 800a352:	1076      	asrs	r6, r6, #1
 800a354:	9205      	str	r2, [sp, #20]
 800a356:	e7cd      	b.n	800a2f4 <_strtod_l+0x4cc>
 800a358:	d0ed      	beq.n	800a336 <_strtod_l+0x50e>
 800a35a:	4276      	negs	r6, r6
 800a35c:	f016 020f 	ands.w	r2, r6, #15
 800a360:	d00a      	beq.n	800a378 <_strtod_l+0x550>
 800a362:	4b15      	ldr	r3, [pc, #84]	; (800a3b8 <_strtod_l+0x590>)
 800a364:	4640      	mov	r0, r8
 800a366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a36a:	4649      	mov	r1, r9
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f7f6 f9e6 	bl	8000740 <__aeabi_ddiv>
 800a374:	4680      	mov	r8, r0
 800a376:	4689      	mov	r9, r1
 800a378:	1136      	asrs	r6, r6, #4
 800a37a:	d0dc      	beq.n	800a336 <_strtod_l+0x50e>
 800a37c:	2e1f      	cmp	r6, #31
 800a37e:	dd23      	ble.n	800a3c8 <_strtod_l+0x5a0>
 800a380:	f04f 0b00 	mov.w	fp, #0
 800a384:	f8cd b010 	str.w	fp, [sp, #16]
 800a388:	f8cd b020 	str.w	fp, [sp, #32]
 800a38c:	f8cd b018 	str.w	fp, [sp, #24]
 800a390:	2322      	movs	r3, #34	; 0x22
 800a392:	f04f 0800 	mov.w	r8, #0
 800a396:	f04f 0900 	mov.w	r9, #0
 800a39a:	f8ca 3000 	str.w	r3, [sl]
 800a39e:	e789      	b.n	800a2b4 <_strtod_l+0x48c>
 800a3a0:	0800e9cd 	.word	0x0800e9cd
 800a3a4:	0800ea10 	.word	0x0800ea10
 800a3a8:	0800e9c5 	.word	0x0800e9c5
 800a3ac:	0800eb54 	.word	0x0800eb54
 800a3b0:	7ff00000 	.word	0x7ff00000
 800a3b4:	0800ee00 	.word	0x0800ee00
 800a3b8:	0800ece0 	.word	0x0800ece0
 800a3bc:	0800ecb8 	.word	0x0800ecb8
 800a3c0:	7ca00000 	.word	0x7ca00000
 800a3c4:	7fefffff 	.word	0x7fefffff
 800a3c8:	f016 0310 	ands.w	r3, r6, #16
 800a3cc:	bf18      	it	ne
 800a3ce:	236a      	movne	r3, #106	; 0x6a
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	4fb0      	ldr	r7, [pc, #704]	; (800a69c <_strtod_l+0x874>)
 800a3da:	07f2      	lsls	r2, r6, #31
 800a3dc:	d504      	bpl.n	800a3e8 <_strtod_l+0x5c0>
 800a3de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e2:	f7f6 f883 	bl	80004ec <__aeabi_dmul>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	1076      	asrs	r6, r6, #1
 800a3ea:	f107 0708 	add.w	r7, r7, #8
 800a3ee:	d1f4      	bne.n	800a3da <_strtod_l+0x5b2>
 800a3f0:	b10b      	cbz	r3, 800a3f6 <_strtod_l+0x5ce>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	9b05      	ldr	r3, [sp, #20]
 800a3f8:	b1c3      	cbz	r3, 800a42c <_strtod_l+0x604>
 800a3fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a3fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a402:	2b00      	cmp	r3, #0
 800a404:	4649      	mov	r1, r9
 800a406:	dd11      	ble.n	800a42c <_strtod_l+0x604>
 800a408:	2b1f      	cmp	r3, #31
 800a40a:	f340 8127 	ble.w	800a65c <_strtod_l+0x834>
 800a40e:	2b34      	cmp	r3, #52	; 0x34
 800a410:	bfd8      	it	le
 800a412:	f04f 33ff 	movle.w	r3, #4294967295
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	bfcf      	iteee	gt
 800a41c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a420:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a424:	fa03 f202 	lslle.w	r2, r3, r2
 800a428:	ea02 0901 	andle.w	r9, r2, r1
 800a42c:	2200      	movs	r2, #0
 800a42e:	2300      	movs	r3, #0
 800a430:	4640      	mov	r0, r8
 800a432:	4649      	mov	r1, r9
 800a434:	f7f6 fac2 	bl	80009bc <__aeabi_dcmpeq>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d1a1      	bne.n	800a380 <_strtod_l+0x558>
 800a43c:	9b06      	ldr	r3, [sp, #24]
 800a43e:	465a      	mov	r2, fp
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	4650      	mov	r0, sl
 800a444:	4623      	mov	r3, r4
 800a446:	9908      	ldr	r1, [sp, #32]
 800a448:	f001 fe0e 	bl	800c068 <__s2b>
 800a44c:	9008      	str	r0, [sp, #32]
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f af21 	beq.w	800a296 <_strtod_l+0x46e>
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	f04f 0b00 	mov.w	fp, #0
 800a45a:	1b5d      	subs	r5, r3, r5
 800a45c:	9b07      	ldr	r3, [sp, #28]
 800a45e:	f8cd b010 	str.w	fp, [sp, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	bfb4      	ite	lt
 800a466:	462b      	movlt	r3, r5
 800a468:	2300      	movge	r3, #0
 800a46a:	930e      	str	r3, [sp, #56]	; 0x38
 800a46c:	9b07      	ldr	r3, [sp, #28]
 800a46e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a472:	9314      	str	r3, [sp, #80]	; 0x50
 800a474:	9b08      	ldr	r3, [sp, #32]
 800a476:	4650      	mov	r0, sl
 800a478:	6859      	ldr	r1, [r3, #4]
 800a47a:	f001 fd4d 	bl	800bf18 <_Balloc>
 800a47e:	9006      	str	r0, [sp, #24]
 800a480:	2800      	cmp	r0, #0
 800a482:	f43f af10 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a486:	9b08      	ldr	r3, [sp, #32]
 800a488:	300c      	adds	r0, #12
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	f103 010c 	add.w	r1, r3, #12
 800a490:	3202      	adds	r2, #2
 800a492:	0092      	lsls	r2, r2, #2
 800a494:	f7fe fdf4 	bl	8009080 <memcpy>
 800a498:	ab1c      	add	r3, sp, #112	; 0x70
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	4650      	mov	r0, sl
 800a4a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a4aa:	f002 f91f 	bl	800c6ec <__d2b>
 800a4ae:	901a      	str	r0, [sp, #104]	; 0x68
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f43f aef8 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f001 fe6d 	bl	800c198 <__i2b>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	9004      	str	r0, [sp, #16]
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	f43f aeef 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a4c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a4ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	bfab      	itete	ge
 800a4d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a4d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a4d4:	18ee      	addge	r6, r5, r3
 800a4d6:	1b5c      	sublt	r4, r3, r5
 800a4d8:	9b05      	ldr	r3, [sp, #20]
 800a4da:	bfa8      	it	ge
 800a4dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a4de:	eba5 0503 	sub.w	r5, r5, r3
 800a4e2:	4415      	add	r5, r2
 800a4e4:	4b6e      	ldr	r3, [pc, #440]	; (800a6a0 <_strtod_l+0x878>)
 800a4e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a4ea:	bfb8      	it	lt
 800a4ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a4ee:	429d      	cmp	r5, r3
 800a4f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a4f4:	f280 80c4 	bge.w	800a680 <_strtod_l+0x858>
 800a4f8:	1b5b      	subs	r3, r3, r5
 800a4fa:	2b1f      	cmp	r3, #31
 800a4fc:	f04f 0701 	mov.w	r7, #1
 800a500:	eba2 0203 	sub.w	r2, r2, r3
 800a504:	f300 80b1 	bgt.w	800a66a <_strtod_l+0x842>
 800a508:	2500      	movs	r5, #0
 800a50a:	fa07 f303 	lsl.w	r3, r7, r3
 800a50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a510:	18b7      	adds	r7, r6, r2
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	42be      	cmp	r6, r7
 800a516:	4414      	add	r4, r2
 800a518:	441c      	add	r4, r3
 800a51a:	4633      	mov	r3, r6
 800a51c:	bfa8      	it	ge
 800a51e:	463b      	movge	r3, r7
 800a520:	42a3      	cmp	r3, r4
 800a522:	bfa8      	it	ge
 800a524:	4623      	movge	r3, r4
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfc2      	ittt	gt
 800a52a:	1aff      	subgt	r7, r7, r3
 800a52c:	1ae4      	subgt	r4, r4, r3
 800a52e:	1af6      	subgt	r6, r6, r3
 800a530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a532:	2b00      	cmp	r3, #0
 800a534:	dd17      	ble.n	800a566 <_strtod_l+0x73e>
 800a536:	461a      	mov	r2, r3
 800a538:	4650      	mov	r0, sl
 800a53a:	9904      	ldr	r1, [sp, #16]
 800a53c:	f001 feea 	bl	800c314 <__pow5mult>
 800a540:	9004      	str	r0, [sp, #16]
 800a542:	2800      	cmp	r0, #0
 800a544:	f43f aeaf 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a548:	4601      	mov	r1, r0
 800a54a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a54c:	4650      	mov	r0, sl
 800a54e:	f001 fe39 	bl	800c1c4 <__multiply>
 800a552:	9009      	str	r0, [sp, #36]	; 0x24
 800a554:	2800      	cmp	r0, #0
 800a556:	f43f aea6 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a55a:	4650      	mov	r0, sl
 800a55c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a55e:	f001 fd1b 	bl	800bf98 <_Bfree>
 800a562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a564:	931a      	str	r3, [sp, #104]	; 0x68
 800a566:	2f00      	cmp	r7, #0
 800a568:	f300 808e 	bgt.w	800a688 <_strtod_l+0x860>
 800a56c:	9b07      	ldr	r3, [sp, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	dd08      	ble.n	800a584 <_strtod_l+0x75c>
 800a572:	4650      	mov	r0, sl
 800a574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a576:	9906      	ldr	r1, [sp, #24]
 800a578:	f001 fecc 	bl	800c314 <__pow5mult>
 800a57c:	9006      	str	r0, [sp, #24]
 800a57e:	2800      	cmp	r0, #0
 800a580:	f43f ae91 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a584:	2c00      	cmp	r4, #0
 800a586:	dd08      	ble.n	800a59a <_strtod_l+0x772>
 800a588:	4622      	mov	r2, r4
 800a58a:	4650      	mov	r0, sl
 800a58c:	9906      	ldr	r1, [sp, #24]
 800a58e:	f001 ff1b 	bl	800c3c8 <__lshift>
 800a592:	9006      	str	r0, [sp, #24]
 800a594:	2800      	cmp	r0, #0
 800a596:	f43f ae86 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	dd08      	ble.n	800a5b0 <_strtod_l+0x788>
 800a59e:	4632      	mov	r2, r6
 800a5a0:	4650      	mov	r0, sl
 800a5a2:	9904      	ldr	r1, [sp, #16]
 800a5a4:	f001 ff10 	bl	800c3c8 <__lshift>
 800a5a8:	9004      	str	r0, [sp, #16]
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f ae7b 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	9a06      	ldr	r2, [sp, #24]
 800a5b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5b6:	f001 ff93 	bl	800c4e0 <__mdiff>
 800a5ba:	4683      	mov	fp, r0
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	f43f ae72 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a5c2:	2400      	movs	r4, #0
 800a5c4:	68c3      	ldr	r3, [r0, #12]
 800a5c6:	9904      	ldr	r1, [sp, #16]
 800a5c8:	60c4      	str	r4, [r0, #12]
 800a5ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5cc:	f001 ff6c 	bl	800c4a8 <__mcmp>
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	da6b      	bge.n	800a6ac <_strtod_l+0x884>
 800a5d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d6:	ea53 0308 	orrs.w	r3, r3, r8
 800a5da:	f040 8091 	bne.w	800a700 <_strtod_l+0x8d8>
 800a5de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 808c 	bne.w	800a700 <_strtod_l+0x8d8>
 800a5e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5ec:	0d1b      	lsrs	r3, r3, #20
 800a5ee:	051b      	lsls	r3, r3, #20
 800a5f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a5f4:	f240 8084 	bls.w	800a700 <_strtod_l+0x8d8>
 800a5f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a5fc:	b91b      	cbnz	r3, 800a606 <_strtod_l+0x7de>
 800a5fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a602:	2b01      	cmp	r3, #1
 800a604:	dd7c      	ble.n	800a700 <_strtod_l+0x8d8>
 800a606:	4659      	mov	r1, fp
 800a608:	2201      	movs	r2, #1
 800a60a:	4650      	mov	r0, sl
 800a60c:	f001 fedc 	bl	800c3c8 <__lshift>
 800a610:	9904      	ldr	r1, [sp, #16]
 800a612:	4683      	mov	fp, r0
 800a614:	f001 ff48 	bl	800c4a8 <__mcmp>
 800a618:	2800      	cmp	r0, #0
 800a61a:	dd71      	ble.n	800a700 <_strtod_l+0x8d8>
 800a61c:	9905      	ldr	r1, [sp, #20]
 800a61e:	464b      	mov	r3, r9
 800a620:	4a20      	ldr	r2, [pc, #128]	; (800a6a4 <_strtod_l+0x87c>)
 800a622:	2900      	cmp	r1, #0
 800a624:	f000 808c 	beq.w	800a740 <_strtod_l+0x918>
 800a628:	ea02 0109 	and.w	r1, r2, r9
 800a62c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a630:	f300 8086 	bgt.w	800a740 <_strtod_l+0x918>
 800a634:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a638:	f77f aeaa 	ble.w	800a390 <_strtod_l+0x568>
 800a63c:	4640      	mov	r0, r8
 800a63e:	4649      	mov	r1, r9
 800a640:	4b19      	ldr	r3, [pc, #100]	; (800a6a8 <_strtod_l+0x880>)
 800a642:	2200      	movs	r2, #0
 800a644:	f7f5 ff52 	bl	80004ec <__aeabi_dmul>
 800a648:	460b      	mov	r3, r1
 800a64a:	4303      	orrs	r3, r0
 800a64c:	bf08      	it	eq
 800a64e:	2322      	moveq	r3, #34	; 0x22
 800a650:	4680      	mov	r8, r0
 800a652:	4689      	mov	r9, r1
 800a654:	bf08      	it	eq
 800a656:	f8ca 3000 	streq.w	r3, [sl]
 800a65a:	e62f      	b.n	800a2bc <_strtod_l+0x494>
 800a65c:	f04f 32ff 	mov.w	r2, #4294967295
 800a660:	fa02 f303 	lsl.w	r3, r2, r3
 800a664:	ea03 0808 	and.w	r8, r3, r8
 800a668:	e6e0      	b.n	800a42c <_strtod_l+0x604>
 800a66a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a66e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a672:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a676:	35e2      	adds	r5, #226	; 0xe2
 800a678:	fa07 f505 	lsl.w	r5, r7, r5
 800a67c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a67e:	e747      	b.n	800a510 <_strtod_l+0x6e8>
 800a680:	2301      	movs	r3, #1
 800a682:	2500      	movs	r5, #0
 800a684:	930f      	str	r3, [sp, #60]	; 0x3c
 800a686:	e743      	b.n	800a510 <_strtod_l+0x6e8>
 800a688:	463a      	mov	r2, r7
 800a68a:	4650      	mov	r0, sl
 800a68c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a68e:	f001 fe9b 	bl	800c3c8 <__lshift>
 800a692:	901a      	str	r0, [sp, #104]	; 0x68
 800a694:	2800      	cmp	r0, #0
 800a696:	f47f af69 	bne.w	800a56c <_strtod_l+0x744>
 800a69a:	e604      	b.n	800a2a6 <_strtod_l+0x47e>
 800a69c:	0800ea28 	.word	0x0800ea28
 800a6a0:	fffffc02 	.word	0xfffffc02
 800a6a4:	7ff00000 	.word	0x7ff00000
 800a6a8:	39500000 	.word	0x39500000
 800a6ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a6b0:	d165      	bne.n	800a77e <_strtod_l+0x956>
 800a6b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6b8:	b35a      	cbz	r2, 800a712 <_strtod_l+0x8ea>
 800a6ba:	4a99      	ldr	r2, [pc, #612]	; (800a920 <_strtod_l+0xaf8>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d12b      	bne.n	800a718 <_strtod_l+0x8f0>
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	b303      	cbz	r3, 800a708 <_strtod_l+0x8e0>
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	4b96      	ldr	r3, [pc, #600]	; (800a924 <_strtod_l+0xafc>)
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d4:	d81b      	bhi.n	800a70e <_strtod_l+0x8e6>
 800a6d6:	0d1b      	lsrs	r3, r3, #20
 800a6d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d119      	bne.n	800a718 <_strtod_l+0x8f0>
 800a6e4:	4b90      	ldr	r3, [pc, #576]	; (800a928 <_strtod_l+0xb00>)
 800a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d102      	bne.n	800a6f2 <_strtod_l+0x8ca>
 800a6ec:	3101      	adds	r1, #1
 800a6ee:	f43f adda 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a6f2:	f04f 0800 	mov.w	r8, #0
 800a6f6:	4b8b      	ldr	r3, [pc, #556]	; (800a924 <_strtod_l+0xafc>)
 800a6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6fa:	401a      	ands	r2, r3
 800a6fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a700:	9b05      	ldr	r3, [sp, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d19a      	bne.n	800a63c <_strtod_l+0x814>
 800a706:	e5d9      	b.n	800a2bc <_strtod_l+0x494>
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	e7e8      	b.n	800a6e0 <_strtod_l+0x8b8>
 800a70e:	4613      	mov	r3, r2
 800a710:	e7e6      	b.n	800a6e0 <_strtod_l+0x8b8>
 800a712:	ea53 0308 	orrs.w	r3, r3, r8
 800a716:	d081      	beq.n	800a61c <_strtod_l+0x7f4>
 800a718:	b1e5      	cbz	r5, 800a754 <_strtod_l+0x92c>
 800a71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a71c:	421d      	tst	r5, r3
 800a71e:	d0ef      	beq.n	800a700 <_strtod_l+0x8d8>
 800a720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	9a05      	ldr	r2, [sp, #20]
 800a728:	b1c3      	cbz	r3, 800a75c <_strtod_l+0x934>
 800a72a:	f7ff fb59 	bl	8009de0 <sulp>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a736:	f7f5 fd23 	bl	8000180 <__adddf3>
 800a73a:	4680      	mov	r8, r0
 800a73c:	4689      	mov	r9, r1
 800a73e:	e7df      	b.n	800a700 <_strtod_l+0x8d8>
 800a740:	4013      	ands	r3, r2
 800a742:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a746:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a74a:	f04f 38ff 	mov.w	r8, #4294967295
 800a74e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a752:	e7d5      	b.n	800a700 <_strtod_l+0x8d8>
 800a754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a756:	ea13 0f08 	tst.w	r3, r8
 800a75a:	e7e0      	b.n	800a71e <_strtod_l+0x8f6>
 800a75c:	f7ff fb40 	bl	8009de0 <sulp>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a768:	f7f5 fd08 	bl	800017c <__aeabi_dsub>
 800a76c:	2200      	movs	r2, #0
 800a76e:	2300      	movs	r3, #0
 800a770:	4680      	mov	r8, r0
 800a772:	4689      	mov	r9, r1
 800a774:	f7f6 f922 	bl	80009bc <__aeabi_dcmpeq>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0c1      	beq.n	800a700 <_strtod_l+0x8d8>
 800a77c:	e608      	b.n	800a390 <_strtod_l+0x568>
 800a77e:	4658      	mov	r0, fp
 800a780:	9904      	ldr	r1, [sp, #16]
 800a782:	f002 f80f 	bl	800c7a4 <__ratio>
 800a786:	2200      	movs	r2, #0
 800a788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a78c:	4606      	mov	r6, r0
 800a78e:	460f      	mov	r7, r1
 800a790:	f7f6 f928 	bl	80009e4 <__aeabi_dcmple>
 800a794:	2800      	cmp	r0, #0
 800a796:	d070      	beq.n	800a87a <_strtod_l+0xa52>
 800a798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d042      	beq.n	800a824 <_strtod_l+0x9fc>
 800a79e:	2600      	movs	r6, #0
 800a7a0:	4f62      	ldr	r7, [pc, #392]	; (800a92c <_strtod_l+0xb04>)
 800a7a2:	4d62      	ldr	r5, [pc, #392]	; (800a92c <_strtod_l+0xb04>)
 800a7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7aa:	0d1b      	lsrs	r3, r3, #20
 800a7ac:	051b      	lsls	r3, r3, #20
 800a7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7b2:	4b5f      	ldr	r3, [pc, #380]	; (800a930 <_strtod_l+0xb08>)
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	f040 80c3 	bne.w	800a940 <_strtod_l+0xb18>
 800a7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7bc:	4640      	mov	r0, r8
 800a7be:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f001 ff18 	bl	800c5f8 <__ulp>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	4639      	mov	r1, r7
 800a7d0:	f7f5 fe8c 	bl	80004ec <__aeabi_dmul>
 800a7d4:	4642      	mov	r2, r8
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	f7f5 fcd2 	bl	8000180 <__adddf3>
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4951      	ldr	r1, [pc, #324]	; (800a924 <_strtod_l+0xafc>)
 800a7e0:	4a54      	ldr	r2, [pc, #336]	; (800a934 <_strtod_l+0xb0c>)
 800a7e2:	4019      	ands	r1, r3
 800a7e4:	4291      	cmp	r1, r2
 800a7e6:	4680      	mov	r8, r0
 800a7e8:	d95d      	bls.n	800a8a6 <_strtod_l+0xa7e>
 800a7ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ec:	4b4e      	ldr	r3, [pc, #312]	; (800a928 <_strtod_l+0xb00>)
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d103      	bne.n	800a7fa <_strtod_l+0x9d2>
 800a7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f43f ad56 	beq.w	800a2a6 <_strtod_l+0x47e>
 800a7fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a7fe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a928 <_strtod_l+0xb00>
 800a802:	4650      	mov	r0, sl
 800a804:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a806:	f001 fbc7 	bl	800bf98 <_Bfree>
 800a80a:	4650      	mov	r0, sl
 800a80c:	9906      	ldr	r1, [sp, #24]
 800a80e:	f001 fbc3 	bl	800bf98 <_Bfree>
 800a812:	4650      	mov	r0, sl
 800a814:	9904      	ldr	r1, [sp, #16]
 800a816:	f001 fbbf 	bl	800bf98 <_Bfree>
 800a81a:	4659      	mov	r1, fp
 800a81c:	4650      	mov	r0, sl
 800a81e:	f001 fbbb 	bl	800bf98 <_Bfree>
 800a822:	e627      	b.n	800a474 <_strtod_l+0x64c>
 800a824:	f1b8 0f00 	cmp.w	r8, #0
 800a828:	d119      	bne.n	800a85e <_strtod_l+0xa36>
 800a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a830:	b9e3      	cbnz	r3, 800a86c <_strtod_l+0xa44>
 800a832:	2200      	movs	r2, #0
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	4b3c      	ldr	r3, [pc, #240]	; (800a92c <_strtod_l+0xb04>)
 800a83a:	f7f6 f8c9 	bl	80009d0 <__aeabi_dcmplt>
 800a83e:	b9c8      	cbnz	r0, 800a874 <_strtod_l+0xa4c>
 800a840:	2200      	movs	r2, #0
 800a842:	4630      	mov	r0, r6
 800a844:	4639      	mov	r1, r7
 800a846:	4b3c      	ldr	r3, [pc, #240]	; (800a938 <_strtod_l+0xb10>)
 800a848:	f7f5 fe50 	bl	80004ec <__aeabi_dmul>
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a854:	9416      	str	r4, [sp, #88]	; 0x58
 800a856:	9317      	str	r3, [sp, #92]	; 0x5c
 800a858:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a85c:	e7a2      	b.n	800a7a4 <_strtod_l+0x97c>
 800a85e:	f1b8 0f01 	cmp.w	r8, #1
 800a862:	d103      	bne.n	800a86c <_strtod_l+0xa44>
 800a864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	f43f ad92 	beq.w	800a390 <_strtod_l+0x568>
 800a86c:	2600      	movs	r6, #0
 800a86e:	2400      	movs	r4, #0
 800a870:	4f32      	ldr	r7, [pc, #200]	; (800a93c <_strtod_l+0xb14>)
 800a872:	e796      	b.n	800a7a2 <_strtod_l+0x97a>
 800a874:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a876:	4d30      	ldr	r5, [pc, #192]	; (800a938 <_strtod_l+0xb10>)
 800a878:	e7ea      	b.n	800a850 <_strtod_l+0xa28>
 800a87a:	4b2f      	ldr	r3, [pc, #188]	; (800a938 <_strtod_l+0xb10>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 fe33 	bl	80004ec <__aeabi_dmul>
 800a886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	b933      	cbnz	r3, 800a89c <_strtod_l+0xa74>
 800a88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a892:	9010      	str	r0, [sp, #64]	; 0x40
 800a894:	9311      	str	r3, [sp, #68]	; 0x44
 800a896:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a89a:	e783      	b.n	800a7a4 <_strtod_l+0x97c>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a8a4:	e7f7      	b.n	800a896 <_strtod_l+0xa6e>
 800a8a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a8aa:	9b05      	ldr	r3, [sp, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1a8      	bne.n	800a802 <_strtod_l+0x9da>
 800a8b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a8b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a8b6:	0d1b      	lsrs	r3, r3, #20
 800a8b8:	051b      	lsls	r3, r3, #20
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d1a1      	bne.n	800a802 <_strtod_l+0x9da>
 800a8be:	4620      	mov	r0, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	f7f6 fc2f 	bl	8001124 <__aeabi_d2lz>
 800a8c6:	f7f5 fde3 	bl	8000490 <__aeabi_l2d>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fc53 	bl	800017c <__aeabi_dsub>
 800a8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8dc:	ea43 0308 	orr.w	r3, r3, r8
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	460d      	mov	r5, r1
 800a8e6:	d066      	beq.n	800a9b6 <_strtod_l+0xb8e>
 800a8e8:	a309      	add	r3, pc, #36	; (adr r3, 800a910 <_strtod_l+0xae8>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f6 f86f 	bl	80009d0 <__aeabi_dcmplt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f47f ace2 	bne.w	800a2bc <_strtod_l+0x494>
 800a8f8:	a307      	add	r3, pc, #28	; (adr r3, 800a918 <_strtod_l+0xaf0>)
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	4620      	mov	r0, r4
 800a900:	4629      	mov	r1, r5
 800a902:	f7f6 f883 	bl	8000a0c <__aeabi_dcmpgt>
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f af7b 	beq.w	800a802 <_strtod_l+0x9da>
 800a90c:	e4d6      	b.n	800a2bc <_strtod_l+0x494>
 800a90e:	bf00      	nop
 800a910:	94a03595 	.word	0x94a03595
 800a914:	3fdfffff 	.word	0x3fdfffff
 800a918:	35afe535 	.word	0x35afe535
 800a91c:	3fe00000 	.word	0x3fe00000
 800a920:	000fffff 	.word	0x000fffff
 800a924:	7ff00000 	.word	0x7ff00000
 800a928:	7fefffff 	.word	0x7fefffff
 800a92c:	3ff00000 	.word	0x3ff00000
 800a930:	7fe00000 	.word	0x7fe00000
 800a934:	7c9fffff 	.word	0x7c9fffff
 800a938:	3fe00000 	.word	0x3fe00000
 800a93c:	bff00000 	.word	0xbff00000
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	b313      	cbz	r3, 800a98a <_strtod_l+0xb62>
 800a944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a946:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a94a:	d81e      	bhi.n	800a98a <_strtod_l+0xb62>
 800a94c:	a326      	add	r3, pc, #152	; (adr r3, 800a9e8 <_strtod_l+0xbc0>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4620      	mov	r0, r4
 800a954:	4629      	mov	r1, r5
 800a956:	f7f6 f845 	bl	80009e4 <__aeabi_dcmple>
 800a95a:	b190      	cbz	r0, 800a982 <_strtod_l+0xb5a>
 800a95c:	4629      	mov	r1, r5
 800a95e:	4620      	mov	r0, r4
 800a960:	f7f6 f89c 	bl	8000a9c <__aeabi_d2uiz>
 800a964:	2801      	cmp	r0, #1
 800a966:	bf38      	it	cc
 800a968:	2001      	movcc	r0, #1
 800a96a:	f7f5 fd45 	bl	80003f8 <__aeabi_ui2d>
 800a96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a970:	4604      	mov	r4, r0
 800a972:	460d      	mov	r5, r1
 800a974:	b9d3      	cbnz	r3, 800a9ac <_strtod_l+0xb84>
 800a976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a97a:	9012      	str	r0, [sp, #72]	; 0x48
 800a97c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a97e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a984:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a988:	1a9f      	subs	r7, r3, r2
 800a98a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a98e:	f001 fe33 	bl	800c5f8 <__ulp>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	f7f5 fda7 	bl	80004ec <__aeabi_dmul>
 800a99e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9a2:	f7f5 fbed 	bl	8000180 <__adddf3>
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4689      	mov	r9, r1
 800a9aa:	e77e      	b.n	800a8aa <_strtod_l+0xa82>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a9b4:	e7e3      	b.n	800a97e <_strtod_l+0xb56>
 800a9b6:	a30e      	add	r3, pc, #56	; (adr r3, 800a9f0 <_strtod_l+0xbc8>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f6 f808 	bl	80009d0 <__aeabi_dcmplt>
 800a9c0:	e7a1      	b.n	800a906 <_strtod_l+0xade>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a9c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	f7ff ba71 	b.w	8009eb2 <_strtod_l+0x8a>
 800a9d0:	2a65      	cmp	r2, #101	; 0x65
 800a9d2:	f43f ab63 	beq.w	800a09c <_strtod_l+0x274>
 800a9d6:	2a45      	cmp	r2, #69	; 0x45
 800a9d8:	f43f ab60 	beq.w	800a09c <_strtod_l+0x274>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f7ff bb95 	b.w	800a10c <_strtod_l+0x2e4>
 800a9e2:	bf00      	nop
 800a9e4:	f3af 8000 	nop.w
 800a9e8:	ffc00000 	.word	0xffc00000
 800a9ec:	41dfffff 	.word	0x41dfffff
 800a9f0:	94a03595 	.word	0x94a03595
 800a9f4:	3fcfffff 	.word	0x3fcfffff

0800a9f8 <_strtod_r>:
 800a9f8:	4b01      	ldr	r3, [pc, #4]	; (800aa00 <_strtod_r+0x8>)
 800a9fa:	f7ff ba15 	b.w	8009e28 <_strtod_l>
 800a9fe:	bf00      	nop
 800aa00:	20000084 	.word	0x20000084

0800aa04 <_strtol_l.constprop.0>:
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	d001      	beq.n	800aa12 <_strtol_l.constprop.0+0xe>
 800aa0e:	2b24      	cmp	r3, #36	; 0x24
 800aa10:	d906      	bls.n	800aa20 <_strtol_l.constprop.0+0x1c>
 800aa12:	f7fe fb0b 	bl	800902c <__errno>
 800aa16:	2316      	movs	r3, #22
 800aa18:	6003      	str	r3, [r0, #0]
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	460d      	mov	r5, r1
 800aa22:	4f35      	ldr	r7, [pc, #212]	; (800aaf8 <_strtol_l.constprop.0+0xf4>)
 800aa24:	4628      	mov	r0, r5
 800aa26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa2a:	5de6      	ldrb	r6, [r4, r7]
 800aa2c:	f016 0608 	ands.w	r6, r6, #8
 800aa30:	d1f8      	bne.n	800aa24 <_strtol_l.constprop.0+0x20>
 800aa32:	2c2d      	cmp	r4, #45	; 0x2d
 800aa34:	d12f      	bne.n	800aa96 <_strtol_l.constprop.0+0x92>
 800aa36:	2601      	movs	r6, #1
 800aa38:	782c      	ldrb	r4, [r5, #0]
 800aa3a:	1c85      	adds	r5, r0, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d057      	beq.n	800aaf0 <_strtol_l.constprop.0+0xec>
 800aa40:	2b10      	cmp	r3, #16
 800aa42:	d109      	bne.n	800aa58 <_strtol_l.constprop.0+0x54>
 800aa44:	2c30      	cmp	r4, #48	; 0x30
 800aa46:	d107      	bne.n	800aa58 <_strtol_l.constprop.0+0x54>
 800aa48:	7828      	ldrb	r0, [r5, #0]
 800aa4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa4e:	2858      	cmp	r0, #88	; 0x58
 800aa50:	d149      	bne.n	800aae6 <_strtol_l.constprop.0+0xe2>
 800aa52:	2310      	movs	r3, #16
 800aa54:	786c      	ldrb	r4, [r5, #1]
 800aa56:	3502      	adds	r5, #2
 800aa58:	2700      	movs	r7, #0
 800aa5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800aa5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800aa62:	fbbe f9f3 	udiv	r9, lr, r3
 800aa66:	4638      	mov	r0, r7
 800aa68:	fb03 ea19 	mls	sl, r3, r9, lr
 800aa6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aa70:	f1bc 0f09 	cmp.w	ip, #9
 800aa74:	d814      	bhi.n	800aaa0 <_strtol_l.constprop.0+0x9c>
 800aa76:	4664      	mov	r4, ip
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	dd22      	ble.n	800aac2 <_strtol_l.constprop.0+0xbe>
 800aa7c:	2f00      	cmp	r7, #0
 800aa7e:	db1d      	blt.n	800aabc <_strtol_l.constprop.0+0xb8>
 800aa80:	4581      	cmp	r9, r0
 800aa82:	d31b      	bcc.n	800aabc <_strtol_l.constprop.0+0xb8>
 800aa84:	d101      	bne.n	800aa8a <_strtol_l.constprop.0+0x86>
 800aa86:	45a2      	cmp	sl, r4
 800aa88:	db18      	blt.n	800aabc <_strtol_l.constprop.0+0xb8>
 800aa8a:	2701      	movs	r7, #1
 800aa8c:	fb00 4003 	mla	r0, r0, r3, r4
 800aa90:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa94:	e7ea      	b.n	800aa6c <_strtol_l.constprop.0+0x68>
 800aa96:	2c2b      	cmp	r4, #43	; 0x2b
 800aa98:	bf04      	itt	eq
 800aa9a:	782c      	ldrbeq	r4, [r5, #0]
 800aa9c:	1c85      	addeq	r5, r0, #2
 800aa9e:	e7cd      	b.n	800aa3c <_strtol_l.constprop.0+0x38>
 800aaa0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aaa4:	f1bc 0f19 	cmp.w	ip, #25
 800aaa8:	d801      	bhi.n	800aaae <_strtol_l.constprop.0+0xaa>
 800aaaa:	3c37      	subs	r4, #55	; 0x37
 800aaac:	e7e4      	b.n	800aa78 <_strtol_l.constprop.0+0x74>
 800aaae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aab2:	f1bc 0f19 	cmp.w	ip, #25
 800aab6:	d804      	bhi.n	800aac2 <_strtol_l.constprop.0+0xbe>
 800aab8:	3c57      	subs	r4, #87	; 0x57
 800aaba:	e7dd      	b.n	800aa78 <_strtol_l.constprop.0+0x74>
 800aabc:	f04f 37ff 	mov.w	r7, #4294967295
 800aac0:	e7e6      	b.n	800aa90 <_strtol_l.constprop.0+0x8c>
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	da07      	bge.n	800aad6 <_strtol_l.constprop.0+0xd2>
 800aac6:	2322      	movs	r3, #34	; 0x22
 800aac8:	4670      	mov	r0, lr
 800aaca:	f8c8 3000 	str.w	r3, [r8]
 800aace:	2a00      	cmp	r2, #0
 800aad0:	d0a4      	beq.n	800aa1c <_strtol_l.constprop.0+0x18>
 800aad2:	1e69      	subs	r1, r5, #1
 800aad4:	e005      	b.n	800aae2 <_strtol_l.constprop.0+0xde>
 800aad6:	b106      	cbz	r6, 800aada <_strtol_l.constprop.0+0xd6>
 800aad8:	4240      	negs	r0, r0
 800aada:	2a00      	cmp	r2, #0
 800aadc:	d09e      	beq.n	800aa1c <_strtol_l.constprop.0+0x18>
 800aade:	2f00      	cmp	r7, #0
 800aae0:	d1f7      	bne.n	800aad2 <_strtol_l.constprop.0+0xce>
 800aae2:	6011      	str	r1, [r2, #0]
 800aae4:	e79a      	b.n	800aa1c <_strtol_l.constprop.0+0x18>
 800aae6:	2430      	movs	r4, #48	; 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1b5      	bne.n	800aa58 <_strtol_l.constprop.0+0x54>
 800aaec:	2308      	movs	r3, #8
 800aaee:	e7b3      	b.n	800aa58 <_strtol_l.constprop.0+0x54>
 800aaf0:	2c30      	cmp	r4, #48	; 0x30
 800aaf2:	d0a9      	beq.n	800aa48 <_strtol_l.constprop.0+0x44>
 800aaf4:	230a      	movs	r3, #10
 800aaf6:	e7af      	b.n	800aa58 <_strtol_l.constprop.0+0x54>
 800aaf8:	0800ea51 	.word	0x0800ea51

0800aafc <_strtol_r>:
 800aafc:	f7ff bf82 	b.w	800aa04 <_strtol_l.constprop.0>

0800ab00 <quorem>:
 800ab00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	6903      	ldr	r3, [r0, #16]
 800ab06:	690c      	ldr	r4, [r1, #16]
 800ab08:	4607      	mov	r7, r0
 800ab0a:	42a3      	cmp	r3, r4
 800ab0c:	f2c0 8082 	blt.w	800ac14 <quorem+0x114>
 800ab10:	3c01      	subs	r4, #1
 800ab12:	f100 0514 	add.w	r5, r0, #20
 800ab16:	f101 0814 	add.w	r8, r1, #20
 800ab1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab1e:	9301      	str	r3, [sp, #4]
 800ab20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab38:	d331      	bcc.n	800ab9e <quorem+0x9e>
 800ab3a:	f04f 0e00 	mov.w	lr, #0
 800ab3e:	4640      	mov	r0, r8
 800ab40:	46ac      	mov	ip, r5
 800ab42:	46f2      	mov	sl, lr
 800ab44:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab48:	b293      	uxth	r3, r2
 800ab4a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab4e:	0c12      	lsrs	r2, r2, #16
 800ab50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	fb06 e202 	mla	r2, r6, r2, lr
 800ab5a:	ebaa 0303 	sub.w	r3, sl, r3
 800ab5e:	f8dc a000 	ldr.w	sl, [ip]
 800ab62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab66:	fa1f fa8a 	uxth.w	sl, sl
 800ab6a:	4453      	add	r3, sl
 800ab6c:	f8dc a000 	ldr.w	sl, [ip]
 800ab70:	b292      	uxth	r2, r2
 800ab72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ab76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab80:	4581      	cmp	r9, r0
 800ab82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab86:	f84c 3b04 	str.w	r3, [ip], #4
 800ab8a:	d2db      	bcs.n	800ab44 <quorem+0x44>
 800ab8c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab90:	b92b      	cbnz	r3, 800ab9e <quorem+0x9e>
 800ab92:	9b01      	ldr	r3, [sp, #4]
 800ab94:	3b04      	subs	r3, #4
 800ab96:	429d      	cmp	r5, r3
 800ab98:	461a      	mov	r2, r3
 800ab9a:	d32f      	bcc.n	800abfc <quorem+0xfc>
 800ab9c:	613c      	str	r4, [r7, #16]
 800ab9e:	4638      	mov	r0, r7
 800aba0:	f001 fc82 	bl	800c4a8 <__mcmp>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	db25      	blt.n	800abf4 <quorem+0xf4>
 800aba8:	4628      	mov	r0, r5
 800abaa:	f04f 0c00 	mov.w	ip, #0
 800abae:	3601      	adds	r6, #1
 800abb0:	f858 1b04 	ldr.w	r1, [r8], #4
 800abb4:	f8d0 e000 	ldr.w	lr, [r0]
 800abb8:	b28b      	uxth	r3, r1
 800abba:	ebac 0303 	sub.w	r3, ip, r3
 800abbe:	fa1f f28e 	uxth.w	r2, lr
 800abc2:	4413      	add	r3, r2
 800abc4:	0c0a      	lsrs	r2, r1, #16
 800abc6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800abca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abce:	b29b      	uxth	r3, r3
 800abd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abd4:	45c1      	cmp	r9, r8
 800abd6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800abda:	f840 3b04 	str.w	r3, [r0], #4
 800abde:	d2e7      	bcs.n	800abb0 <quorem+0xb0>
 800abe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abe8:	b922      	cbnz	r2, 800abf4 <quorem+0xf4>
 800abea:	3b04      	subs	r3, #4
 800abec:	429d      	cmp	r5, r3
 800abee:	461a      	mov	r2, r3
 800abf0:	d30a      	bcc.n	800ac08 <quorem+0x108>
 800abf2:	613c      	str	r4, [r7, #16]
 800abf4:	4630      	mov	r0, r6
 800abf6:	b003      	add	sp, #12
 800abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfc:	6812      	ldr	r2, [r2, #0]
 800abfe:	3b04      	subs	r3, #4
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d1cb      	bne.n	800ab9c <quorem+0x9c>
 800ac04:	3c01      	subs	r4, #1
 800ac06:	e7c6      	b.n	800ab96 <quorem+0x96>
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	3b04      	subs	r3, #4
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	d1f0      	bne.n	800abf2 <quorem+0xf2>
 800ac10:	3c01      	subs	r4, #1
 800ac12:	e7eb      	b.n	800abec <quorem+0xec>
 800ac14:	2000      	movs	r0, #0
 800ac16:	e7ee      	b.n	800abf6 <quorem+0xf6>

0800ac18 <_dtoa_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	4616      	mov	r6, r2
 800ac1e:	461f      	mov	r7, r3
 800ac20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac22:	b099      	sub	sp, #100	; 0x64
 800ac24:	4605      	mov	r5, r0
 800ac26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ac2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ac2e:	b974      	cbnz	r4, 800ac4e <_dtoa_r+0x36>
 800ac30:	2010      	movs	r0, #16
 800ac32:	f001 f949 	bl	800bec8 <malloc>
 800ac36:	4602      	mov	r2, r0
 800ac38:	6268      	str	r0, [r5, #36]	; 0x24
 800ac3a:	b920      	cbnz	r0, 800ac46 <_dtoa_r+0x2e>
 800ac3c:	21ea      	movs	r1, #234	; 0xea
 800ac3e:	4ba8      	ldr	r3, [pc, #672]	; (800aee0 <_dtoa_r+0x2c8>)
 800ac40:	48a8      	ldr	r0, [pc, #672]	; (800aee4 <_dtoa_r+0x2cc>)
 800ac42:	f002 f8a5 	bl	800cd90 <__assert_func>
 800ac46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac4a:	6004      	str	r4, [r0, #0]
 800ac4c:	60c4      	str	r4, [r0, #12]
 800ac4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac50:	6819      	ldr	r1, [r3, #0]
 800ac52:	b151      	cbz	r1, 800ac6a <_dtoa_r+0x52>
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	2301      	movs	r3, #1
 800ac58:	4093      	lsls	r3, r2
 800ac5a:	604a      	str	r2, [r1, #4]
 800ac5c:	608b      	str	r3, [r1, #8]
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f001 f99a 	bl	800bf98 <_Bfree>
 800ac64:	2200      	movs	r2, #0
 800ac66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	1e3b      	subs	r3, r7, #0
 800ac6c:	bfaf      	iteee	ge
 800ac6e:	2300      	movge	r3, #0
 800ac70:	2201      	movlt	r2, #1
 800ac72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ac76:	9305      	strlt	r3, [sp, #20]
 800ac78:	bfa8      	it	ge
 800ac7a:	f8c8 3000 	strge.w	r3, [r8]
 800ac7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ac82:	4b99      	ldr	r3, [pc, #612]	; (800aee8 <_dtoa_r+0x2d0>)
 800ac84:	bfb8      	it	lt
 800ac86:	f8c8 2000 	strlt.w	r2, [r8]
 800ac8a:	ea33 0309 	bics.w	r3, r3, r9
 800ac8e:	d119      	bne.n	800acc4 <_dtoa_r+0xac>
 800ac90:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac96:	6013      	str	r3, [r2, #0]
 800ac98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac9c:	4333      	orrs	r3, r6
 800ac9e:	f000 857f 	beq.w	800b7a0 <_dtoa_r+0xb88>
 800aca2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aca4:	b953      	cbnz	r3, 800acbc <_dtoa_r+0xa4>
 800aca6:	4b91      	ldr	r3, [pc, #580]	; (800aeec <_dtoa_r+0x2d4>)
 800aca8:	e022      	b.n	800acf0 <_dtoa_r+0xd8>
 800acaa:	4b91      	ldr	r3, [pc, #580]	; (800aef0 <_dtoa_r+0x2d8>)
 800acac:	9303      	str	r3, [sp, #12]
 800acae:	3308      	adds	r3, #8
 800acb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	9803      	ldr	r0, [sp, #12]
 800acb6:	b019      	add	sp, #100	; 0x64
 800acb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbc:	4b8b      	ldr	r3, [pc, #556]	; (800aeec <_dtoa_r+0x2d4>)
 800acbe:	9303      	str	r3, [sp, #12]
 800acc0:	3303      	adds	r3, #3
 800acc2:	e7f5      	b.n	800acb0 <_dtoa_r+0x98>
 800acc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800acc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800accc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acd0:	2200      	movs	r2, #0
 800acd2:	2300      	movs	r3, #0
 800acd4:	f7f5 fe72 	bl	80009bc <__aeabi_dcmpeq>
 800acd8:	4680      	mov	r8, r0
 800acda:	b158      	cbz	r0, 800acf4 <_dtoa_r+0xdc>
 800acdc:	2301      	movs	r3, #1
 800acde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8558 	beq.w	800b79a <_dtoa_r+0xb82>
 800acea:	4882      	ldr	r0, [pc, #520]	; (800aef4 <_dtoa_r+0x2dc>)
 800acec:	6018      	str	r0, [r3, #0]
 800acee:	1e43      	subs	r3, r0, #1
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	e7df      	b.n	800acb4 <_dtoa_r+0x9c>
 800acf4:	ab16      	add	r3, sp, #88	; 0x58
 800acf6:	9301      	str	r3, [sp, #4]
 800acf8:	ab17      	add	r3, sp, #92	; 0x5c
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	4628      	mov	r0, r5
 800acfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ad02:	f001 fcf3 	bl	800c6ec <__d2b>
 800ad06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ad0a:	4683      	mov	fp, r0
 800ad0c:	2c00      	cmp	r4, #0
 800ad0e:	d07f      	beq.n	800ae10 <_dtoa_r+0x1f8>
 800ad10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad16:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ad1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad1e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ad22:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ad26:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4b72      	ldr	r3, [pc, #456]	; (800aef8 <_dtoa_r+0x2e0>)
 800ad2e:	f7f5 fa25 	bl	800017c <__aeabi_dsub>
 800ad32:	a365      	add	r3, pc, #404	; (adr r3, 800aec8 <_dtoa_r+0x2b0>)
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	f7f5 fbd8 	bl	80004ec <__aeabi_dmul>
 800ad3c:	a364      	add	r3, pc, #400	; (adr r3, 800aed0 <_dtoa_r+0x2b8>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	f7f5 fa1d 	bl	8000180 <__adddf3>
 800ad46:	4606      	mov	r6, r0
 800ad48:	4620      	mov	r0, r4
 800ad4a:	460f      	mov	r7, r1
 800ad4c:	f7f5 fb64 	bl	8000418 <__aeabi_i2d>
 800ad50:	a361      	add	r3, pc, #388	; (adr r3, 800aed8 <_dtoa_r+0x2c0>)
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fbc9 	bl	80004ec <__aeabi_dmul>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	4630      	mov	r0, r6
 800ad60:	4639      	mov	r1, r7
 800ad62:	f7f5 fa0d 	bl	8000180 <__adddf3>
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	f7f5 fe6f 	bl	8000a4c <__aeabi_d2iz>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4682      	mov	sl, r0
 800ad72:	2300      	movs	r3, #0
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 fe2a 	bl	80009d0 <__aeabi_dcmplt>
 800ad7c:	b148      	cbz	r0, 800ad92 <_dtoa_r+0x17a>
 800ad7e:	4650      	mov	r0, sl
 800ad80:	f7f5 fb4a 	bl	8000418 <__aeabi_i2d>
 800ad84:	4632      	mov	r2, r6
 800ad86:	463b      	mov	r3, r7
 800ad88:	f7f5 fe18 	bl	80009bc <__aeabi_dcmpeq>
 800ad8c:	b908      	cbnz	r0, 800ad92 <_dtoa_r+0x17a>
 800ad8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad92:	f1ba 0f16 	cmp.w	sl, #22
 800ad96:	d858      	bhi.n	800ae4a <_dtoa_r+0x232>
 800ad98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad9c:	4b57      	ldr	r3, [pc, #348]	; (800aefc <_dtoa_r+0x2e4>)
 800ad9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fe13 	bl	80009d0 <__aeabi_dcmplt>
 800adaa:	2800      	cmp	r0, #0
 800adac:	d04f      	beq.n	800ae4e <_dtoa_r+0x236>
 800adae:	2300      	movs	r3, #0
 800adb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800adb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adb8:	1b1c      	subs	r4, r3, r4
 800adba:	1e63      	subs	r3, r4, #1
 800adbc:	9309      	str	r3, [sp, #36]	; 0x24
 800adbe:	bf49      	itett	mi
 800adc0:	f1c4 0301 	rsbmi	r3, r4, #1
 800adc4:	2300      	movpl	r3, #0
 800adc6:	9306      	strmi	r3, [sp, #24]
 800adc8:	2300      	movmi	r3, #0
 800adca:	bf54      	ite	pl
 800adcc:	9306      	strpl	r3, [sp, #24]
 800adce:	9309      	strmi	r3, [sp, #36]	; 0x24
 800add0:	f1ba 0f00 	cmp.w	sl, #0
 800add4:	db3d      	blt.n	800ae52 <_dtoa_r+0x23a>
 800add6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800add8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800addc:	4453      	add	r3, sl
 800adde:	9309      	str	r3, [sp, #36]	; 0x24
 800ade0:	2300      	movs	r3, #0
 800ade2:	930a      	str	r3, [sp, #40]	; 0x28
 800ade4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ade6:	2b09      	cmp	r3, #9
 800ade8:	f200 808c 	bhi.w	800af04 <_dtoa_r+0x2ec>
 800adec:	2b05      	cmp	r3, #5
 800adee:	bfc4      	itt	gt
 800adf0:	3b04      	subgt	r3, #4
 800adf2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800adf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf6:	bfc8      	it	gt
 800adf8:	2400      	movgt	r4, #0
 800adfa:	f1a3 0302 	sub.w	r3, r3, #2
 800adfe:	bfd8      	it	le
 800ae00:	2401      	movle	r4, #1
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	f200 808a 	bhi.w	800af1c <_dtoa_r+0x304>
 800ae08:	e8df f003 	tbb	[pc, r3]
 800ae0c:	5b4d4f2d 	.word	0x5b4d4f2d
 800ae10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ae14:	441c      	add	r4, r3
 800ae16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	bfc3      	ittte	gt
 800ae1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae22:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ae26:	fa09 f303 	lslgt.w	r3, r9, r3
 800ae2a:	f1c3 0320 	rsble	r3, r3, #32
 800ae2e:	bfc6      	itte	gt
 800ae30:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae34:	4318      	orrgt	r0, r3
 800ae36:	fa06 f003 	lslle.w	r0, r6, r3
 800ae3a:	f7f5 fadd 	bl	80003f8 <__aeabi_ui2d>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ae44:	3c01      	subs	r4, #1
 800ae46:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae48:	e76f      	b.n	800ad2a <_dtoa_r+0x112>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e7b2      	b.n	800adb4 <_dtoa_r+0x19c>
 800ae4e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ae50:	e7b1      	b.n	800adb6 <_dtoa_r+0x19e>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	eba3 030a 	sub.w	r3, r3, sl
 800ae58:	9306      	str	r3, [sp, #24]
 800ae5a:	f1ca 0300 	rsb	r3, sl, #0
 800ae5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae60:	2300      	movs	r3, #0
 800ae62:	930e      	str	r3, [sp, #56]	; 0x38
 800ae64:	e7be      	b.n	800ade4 <_dtoa_r+0x1cc>
 800ae66:	2300      	movs	r3, #0
 800ae68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dc58      	bgt.n	800af22 <_dtoa_r+0x30a>
 800ae70:	f04f 0901 	mov.w	r9, #1
 800ae74:	464b      	mov	r3, r9
 800ae76:	f8cd 9020 	str.w	r9, [sp, #32]
 800ae7a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ae7e:	2200      	movs	r2, #0
 800ae80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ae82:	6042      	str	r2, [r0, #4]
 800ae84:	2204      	movs	r2, #4
 800ae86:	f102 0614 	add.w	r6, r2, #20
 800ae8a:	429e      	cmp	r6, r3
 800ae8c:	6841      	ldr	r1, [r0, #4]
 800ae8e:	d94e      	bls.n	800af2e <_dtoa_r+0x316>
 800ae90:	4628      	mov	r0, r5
 800ae92:	f001 f841 	bl	800bf18 <_Balloc>
 800ae96:	9003      	str	r0, [sp, #12]
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d14c      	bne.n	800af36 <_dtoa_r+0x31e>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aea2:	4b17      	ldr	r3, [pc, #92]	; (800af00 <_dtoa_r+0x2e8>)
 800aea4:	e6cc      	b.n	800ac40 <_dtoa_r+0x28>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e7de      	b.n	800ae68 <_dtoa_r+0x250>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aeb0:	eb0a 0903 	add.w	r9, sl, r3
 800aeb4:	f109 0301 	add.w	r3, r9, #1
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	bfb8      	it	lt
 800aebe:	2301      	movlt	r3, #1
 800aec0:	e7dd      	b.n	800ae7e <_dtoa_r+0x266>
 800aec2:	2301      	movs	r3, #1
 800aec4:	e7f2      	b.n	800aeac <_dtoa_r+0x294>
 800aec6:	bf00      	nop
 800aec8:	636f4361 	.word	0x636f4361
 800aecc:	3fd287a7 	.word	0x3fd287a7
 800aed0:	8b60c8b3 	.word	0x8b60c8b3
 800aed4:	3fc68a28 	.word	0x3fc68a28
 800aed8:	509f79fb 	.word	0x509f79fb
 800aedc:	3fd34413 	.word	0x3fd34413
 800aee0:	0800eb5e 	.word	0x0800eb5e
 800aee4:	0800eb75 	.word	0x0800eb75
 800aee8:	7ff00000 	.word	0x7ff00000
 800aeec:	0800eb5a 	.word	0x0800eb5a
 800aef0:	0800eb51 	.word	0x0800eb51
 800aef4:	0800e9d1 	.word	0x0800e9d1
 800aef8:	3ff80000 	.word	0x3ff80000
 800aefc:	0800ece0 	.word	0x0800ece0
 800af00:	0800ebd0 	.word	0x0800ebd0
 800af04:	2401      	movs	r4, #1
 800af06:	2300      	movs	r3, #0
 800af08:	940b      	str	r4, [sp, #44]	; 0x2c
 800af0a:	9322      	str	r3, [sp, #136]	; 0x88
 800af0c:	f04f 39ff 	mov.w	r9, #4294967295
 800af10:	2200      	movs	r2, #0
 800af12:	2312      	movs	r3, #18
 800af14:	f8cd 9020 	str.w	r9, [sp, #32]
 800af18:	9223      	str	r2, [sp, #140]	; 0x8c
 800af1a:	e7b0      	b.n	800ae7e <_dtoa_r+0x266>
 800af1c:	2301      	movs	r3, #1
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	e7f4      	b.n	800af0c <_dtoa_r+0x2f4>
 800af22:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800af26:	464b      	mov	r3, r9
 800af28:	f8cd 9020 	str.w	r9, [sp, #32]
 800af2c:	e7a7      	b.n	800ae7e <_dtoa_r+0x266>
 800af2e:	3101      	adds	r1, #1
 800af30:	6041      	str	r1, [r0, #4]
 800af32:	0052      	lsls	r2, r2, #1
 800af34:	e7a7      	b.n	800ae86 <_dtoa_r+0x26e>
 800af36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af38:	9a03      	ldr	r2, [sp, #12]
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	9b08      	ldr	r3, [sp, #32]
 800af3e:	2b0e      	cmp	r3, #14
 800af40:	f200 80a8 	bhi.w	800b094 <_dtoa_r+0x47c>
 800af44:	2c00      	cmp	r4, #0
 800af46:	f000 80a5 	beq.w	800b094 <_dtoa_r+0x47c>
 800af4a:	f1ba 0f00 	cmp.w	sl, #0
 800af4e:	dd34      	ble.n	800afba <_dtoa_r+0x3a2>
 800af50:	4a9a      	ldr	r2, [pc, #616]	; (800b1bc <_dtoa_r+0x5a4>)
 800af52:	f00a 030f 	and.w	r3, sl, #15
 800af56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af5a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800af5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800af62:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af66:	ea4f 142a 	mov.w	r4, sl, asr #4
 800af6a:	d016      	beq.n	800af9a <_dtoa_r+0x382>
 800af6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af70:	4b93      	ldr	r3, [pc, #588]	; (800b1c0 <_dtoa_r+0x5a8>)
 800af72:	2703      	movs	r7, #3
 800af74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af78:	f7f5 fbe2 	bl	8000740 <__aeabi_ddiv>
 800af7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af80:	f004 040f 	and.w	r4, r4, #15
 800af84:	4e8e      	ldr	r6, [pc, #568]	; (800b1c0 <_dtoa_r+0x5a8>)
 800af86:	b954      	cbnz	r4, 800af9e <_dtoa_r+0x386>
 800af88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af90:	f7f5 fbd6 	bl	8000740 <__aeabi_ddiv>
 800af94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af98:	e029      	b.n	800afee <_dtoa_r+0x3d6>
 800af9a:	2702      	movs	r7, #2
 800af9c:	e7f2      	b.n	800af84 <_dtoa_r+0x36c>
 800af9e:	07e1      	lsls	r1, r4, #31
 800afa0:	d508      	bpl.n	800afb4 <_dtoa_r+0x39c>
 800afa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800afa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afaa:	f7f5 fa9f 	bl	80004ec <__aeabi_dmul>
 800afae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afb2:	3701      	adds	r7, #1
 800afb4:	1064      	asrs	r4, r4, #1
 800afb6:	3608      	adds	r6, #8
 800afb8:	e7e5      	b.n	800af86 <_dtoa_r+0x36e>
 800afba:	f000 80a5 	beq.w	800b108 <_dtoa_r+0x4f0>
 800afbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afc2:	f1ca 0400 	rsb	r4, sl, #0
 800afc6:	4b7d      	ldr	r3, [pc, #500]	; (800b1bc <_dtoa_r+0x5a4>)
 800afc8:	f004 020f 	and.w	r2, r4, #15
 800afcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	f7f5 fa8a 	bl	80004ec <__aeabi_dmul>
 800afd8:	2702      	movs	r7, #2
 800afda:	2300      	movs	r3, #0
 800afdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afe0:	4e77      	ldr	r6, [pc, #476]	; (800b1c0 <_dtoa_r+0x5a8>)
 800afe2:	1124      	asrs	r4, r4, #4
 800afe4:	2c00      	cmp	r4, #0
 800afe6:	f040 8084 	bne.w	800b0f2 <_dtoa_r+0x4da>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1d2      	bne.n	800af94 <_dtoa_r+0x37c>
 800afee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 808b 	beq.w	800b10c <_dtoa_r+0x4f4>
 800aff6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800affa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800affe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b002:	2200      	movs	r2, #0
 800b004:	4b6f      	ldr	r3, [pc, #444]	; (800b1c4 <_dtoa_r+0x5ac>)
 800b006:	f7f5 fce3 	bl	80009d0 <__aeabi_dcmplt>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d07e      	beq.n	800b10c <_dtoa_r+0x4f4>
 800b00e:	9b08      	ldr	r3, [sp, #32]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d07b      	beq.n	800b10c <_dtoa_r+0x4f4>
 800b014:	f1b9 0f00 	cmp.w	r9, #0
 800b018:	dd38      	ble.n	800b08c <_dtoa_r+0x474>
 800b01a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b01e:	2200      	movs	r2, #0
 800b020:	4b69      	ldr	r3, [pc, #420]	; (800b1c8 <_dtoa_r+0x5b0>)
 800b022:	f7f5 fa63 	bl	80004ec <__aeabi_dmul>
 800b026:	464c      	mov	r4, r9
 800b028:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b02c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b030:	3701      	adds	r7, #1
 800b032:	4638      	mov	r0, r7
 800b034:	f7f5 f9f0 	bl	8000418 <__aeabi_i2d>
 800b038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b03c:	f7f5 fa56 	bl	80004ec <__aeabi_dmul>
 800b040:	2200      	movs	r2, #0
 800b042:	4b62      	ldr	r3, [pc, #392]	; (800b1cc <_dtoa_r+0x5b4>)
 800b044:	f7f5 f89c 	bl	8000180 <__adddf3>
 800b048:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b04c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b050:	9611      	str	r6, [sp, #68]	; 0x44
 800b052:	2c00      	cmp	r4, #0
 800b054:	d15d      	bne.n	800b112 <_dtoa_r+0x4fa>
 800b056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b05a:	2200      	movs	r2, #0
 800b05c:	4b5c      	ldr	r3, [pc, #368]	; (800b1d0 <_dtoa_r+0x5b8>)
 800b05e:	f7f5 f88d 	bl	800017c <__aeabi_dsub>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b06a:	4633      	mov	r3, r6
 800b06c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b06e:	f7f5 fccd 	bl	8000a0c <__aeabi_dcmpgt>
 800b072:	2800      	cmp	r0, #0
 800b074:	f040 829c 	bne.w	800b5b0 <_dtoa_r+0x998>
 800b078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b07c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b07e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b082:	f7f5 fca5 	bl	80009d0 <__aeabi_dcmplt>
 800b086:	2800      	cmp	r0, #0
 800b088:	f040 8290 	bne.w	800b5ac <_dtoa_r+0x994>
 800b08c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b090:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b094:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b096:	2b00      	cmp	r3, #0
 800b098:	f2c0 8152 	blt.w	800b340 <_dtoa_r+0x728>
 800b09c:	f1ba 0f0e 	cmp.w	sl, #14
 800b0a0:	f300 814e 	bgt.w	800b340 <_dtoa_r+0x728>
 800b0a4:	4b45      	ldr	r3, [pc, #276]	; (800b1bc <_dtoa_r+0x5a4>)
 800b0a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b0ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b0b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f280 80db 	bge.w	800b270 <_dtoa_r+0x658>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f300 80d7 	bgt.w	800b270 <_dtoa_r+0x658>
 800b0c2:	f040 8272 	bne.w	800b5aa <_dtoa_r+0x992>
 800b0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	4b40      	ldr	r3, [pc, #256]	; (800b1d0 <_dtoa_r+0x5b8>)
 800b0ce:	f7f5 fa0d 	bl	80004ec <__aeabi_dmul>
 800b0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0d6:	f7f5 fc8f 	bl	80009f8 <__aeabi_dcmpge>
 800b0da:	9c08      	ldr	r4, [sp, #32]
 800b0dc:	4626      	mov	r6, r4
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8248 	bne.w	800b574 <_dtoa_r+0x95c>
 800b0e4:	2331      	movs	r3, #49	; 0x31
 800b0e6:	9f03      	ldr	r7, [sp, #12]
 800b0e8:	f10a 0a01 	add.w	sl, sl, #1
 800b0ec:	f807 3b01 	strb.w	r3, [r7], #1
 800b0f0:	e244      	b.n	800b57c <_dtoa_r+0x964>
 800b0f2:	07e2      	lsls	r2, r4, #31
 800b0f4:	d505      	bpl.n	800b102 <_dtoa_r+0x4ea>
 800b0f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0fa:	f7f5 f9f7 	bl	80004ec <__aeabi_dmul>
 800b0fe:	2301      	movs	r3, #1
 800b100:	3701      	adds	r7, #1
 800b102:	1064      	asrs	r4, r4, #1
 800b104:	3608      	adds	r6, #8
 800b106:	e76d      	b.n	800afe4 <_dtoa_r+0x3cc>
 800b108:	2702      	movs	r7, #2
 800b10a:	e770      	b.n	800afee <_dtoa_r+0x3d6>
 800b10c:	46d0      	mov	r8, sl
 800b10e:	9c08      	ldr	r4, [sp, #32]
 800b110:	e78f      	b.n	800b032 <_dtoa_r+0x41a>
 800b112:	9903      	ldr	r1, [sp, #12]
 800b114:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <_dtoa_r+0x5a4>)
 800b116:	4421      	add	r1, r4
 800b118:	9112      	str	r1, [sp, #72]	; 0x48
 800b11a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b11c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b120:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b124:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b128:	2900      	cmp	r1, #0
 800b12a:	d055      	beq.n	800b1d8 <_dtoa_r+0x5c0>
 800b12c:	2000      	movs	r0, #0
 800b12e:	4929      	ldr	r1, [pc, #164]	; (800b1d4 <_dtoa_r+0x5bc>)
 800b130:	f7f5 fb06 	bl	8000740 <__aeabi_ddiv>
 800b134:	463b      	mov	r3, r7
 800b136:	4632      	mov	r2, r6
 800b138:	f7f5 f820 	bl	800017c <__aeabi_dsub>
 800b13c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b140:	9f03      	ldr	r7, [sp, #12]
 800b142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b146:	f7f5 fc81 	bl	8000a4c <__aeabi_d2iz>
 800b14a:	4604      	mov	r4, r0
 800b14c:	f7f5 f964 	bl	8000418 <__aeabi_i2d>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b158:	f7f5 f810 	bl	800017c <__aeabi_dsub>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	3430      	adds	r4, #48	; 0x30
 800b162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b16a:	f807 4b01 	strb.w	r4, [r7], #1
 800b16e:	f7f5 fc2f 	bl	80009d0 <__aeabi_dcmplt>
 800b172:	2800      	cmp	r0, #0
 800b174:	d174      	bne.n	800b260 <_dtoa_r+0x648>
 800b176:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b17a:	2000      	movs	r0, #0
 800b17c:	4911      	ldr	r1, [pc, #68]	; (800b1c4 <_dtoa_r+0x5ac>)
 800b17e:	f7f4 fffd 	bl	800017c <__aeabi_dsub>
 800b182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b186:	f7f5 fc23 	bl	80009d0 <__aeabi_dcmplt>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	f040 80b7 	bne.w	800b2fe <_dtoa_r+0x6e6>
 800b190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b192:	429f      	cmp	r7, r3
 800b194:	f43f af7a 	beq.w	800b08c <_dtoa_r+0x474>
 800b198:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b19c:	2200      	movs	r2, #0
 800b19e:	4b0a      	ldr	r3, [pc, #40]	; (800b1c8 <_dtoa_r+0x5b0>)
 800b1a0:	f7f5 f9a4 	bl	80004ec <__aeabi_dmul>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b1aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1ae:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <_dtoa_r+0x5b0>)
 800b1b0:	f7f5 f99c 	bl	80004ec <__aeabi_dmul>
 800b1b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1b8:	e7c3      	b.n	800b142 <_dtoa_r+0x52a>
 800b1ba:	bf00      	nop
 800b1bc:	0800ece0 	.word	0x0800ece0
 800b1c0:	0800ecb8 	.word	0x0800ecb8
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	40240000 	.word	0x40240000
 800b1cc:	401c0000 	.word	0x401c0000
 800b1d0:	40140000 	.word	0x40140000
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4639      	mov	r1, r7
 800b1dc:	f7f5 f986 	bl	80004ec <__aeabi_dmul>
 800b1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b1e6:	9c03      	ldr	r4, [sp, #12]
 800b1e8:	9314      	str	r3, [sp, #80]	; 0x50
 800b1ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1ee:	f7f5 fc2d 	bl	8000a4c <__aeabi_d2iz>
 800b1f2:	9015      	str	r0, [sp, #84]	; 0x54
 800b1f4:	f7f5 f910 	bl	8000418 <__aeabi_i2d>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b200:	f7f4 ffbc 	bl	800017c <__aeabi_dsub>
 800b204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b206:	4606      	mov	r6, r0
 800b208:	3330      	adds	r3, #48	; 0x30
 800b20a:	f804 3b01 	strb.w	r3, [r4], #1
 800b20e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b210:	460f      	mov	r7, r1
 800b212:	429c      	cmp	r4, r3
 800b214:	f04f 0200 	mov.w	r2, #0
 800b218:	d124      	bne.n	800b264 <_dtoa_r+0x64c>
 800b21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b21e:	4bb0      	ldr	r3, [pc, #704]	; (800b4e0 <_dtoa_r+0x8c8>)
 800b220:	f7f4 ffae 	bl	8000180 <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4630      	mov	r0, r6
 800b22a:	4639      	mov	r1, r7
 800b22c:	f7f5 fbee 	bl	8000a0c <__aeabi_dcmpgt>
 800b230:	2800      	cmp	r0, #0
 800b232:	d163      	bne.n	800b2fc <_dtoa_r+0x6e4>
 800b234:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b238:	2000      	movs	r0, #0
 800b23a:	49a9      	ldr	r1, [pc, #676]	; (800b4e0 <_dtoa_r+0x8c8>)
 800b23c:	f7f4 ff9e 	bl	800017c <__aeabi_dsub>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	f7f5 fbc2 	bl	80009d0 <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f43f af1d 	beq.w	800b08c <_dtoa_r+0x474>
 800b252:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b254:	1e7b      	subs	r3, r7, #1
 800b256:	9314      	str	r3, [sp, #80]	; 0x50
 800b258:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b25c:	2b30      	cmp	r3, #48	; 0x30
 800b25e:	d0f8      	beq.n	800b252 <_dtoa_r+0x63a>
 800b260:	46c2      	mov	sl, r8
 800b262:	e03b      	b.n	800b2dc <_dtoa_r+0x6c4>
 800b264:	4b9f      	ldr	r3, [pc, #636]	; (800b4e4 <_dtoa_r+0x8cc>)
 800b266:	f7f5 f941 	bl	80004ec <__aeabi_dmul>
 800b26a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b26e:	e7bc      	b.n	800b1ea <_dtoa_r+0x5d2>
 800b270:	9f03      	ldr	r7, [sp, #12]
 800b272:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 fa5f 	bl	8000740 <__aeabi_ddiv>
 800b282:	f7f5 fbe3 	bl	8000a4c <__aeabi_d2iz>
 800b286:	4604      	mov	r4, r0
 800b288:	f7f5 f8c6 	bl	8000418 <__aeabi_i2d>
 800b28c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b290:	f7f5 f92c 	bl	80004ec <__aeabi_dmul>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4640      	mov	r0, r8
 800b29a:	4649      	mov	r1, r9
 800b29c:	f7f4 ff6e 	bl	800017c <__aeabi_dsub>
 800b2a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b2a4:	f807 6b01 	strb.w	r6, [r7], #1
 800b2a8:	9e03      	ldr	r6, [sp, #12]
 800b2aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b2ae:	1bbe      	subs	r6, r7, r6
 800b2b0:	45b4      	cmp	ip, r6
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	d136      	bne.n	800b326 <_dtoa_r+0x70e>
 800b2b8:	f7f4 ff62 	bl	8000180 <__adddf3>
 800b2bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	4689      	mov	r9, r1
 800b2c4:	f7f5 fba2 	bl	8000a0c <__aeabi_dcmpgt>
 800b2c8:	bb58      	cbnz	r0, 800b322 <_dtoa_r+0x70a>
 800b2ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f5 fb73 	bl	80009bc <__aeabi_dcmpeq>
 800b2d6:	b108      	cbz	r0, 800b2dc <_dtoa_r+0x6c4>
 800b2d8:	07e1      	lsls	r1, r4, #31
 800b2da:	d422      	bmi.n	800b322 <_dtoa_r+0x70a>
 800b2dc:	4628      	mov	r0, r5
 800b2de:	4659      	mov	r1, fp
 800b2e0:	f000 fe5a 	bl	800bf98 <_Bfree>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	703b      	strb	r3, [r7, #0]
 800b2e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b2ea:	f10a 0001 	add.w	r0, sl, #1
 800b2ee:	6018      	str	r0, [r3, #0]
 800b2f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f43f acde 	beq.w	800acb4 <_dtoa_r+0x9c>
 800b2f8:	601f      	str	r7, [r3, #0]
 800b2fa:	e4db      	b.n	800acb4 <_dtoa_r+0x9c>
 800b2fc:	4627      	mov	r7, r4
 800b2fe:	463b      	mov	r3, r7
 800b300:	461f      	mov	r7, r3
 800b302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b306:	2a39      	cmp	r2, #57	; 0x39
 800b308:	d107      	bne.n	800b31a <_dtoa_r+0x702>
 800b30a:	9a03      	ldr	r2, [sp, #12]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d1f7      	bne.n	800b300 <_dtoa_r+0x6e8>
 800b310:	2230      	movs	r2, #48	; 0x30
 800b312:	9903      	ldr	r1, [sp, #12]
 800b314:	f108 0801 	add.w	r8, r8, #1
 800b318:	700a      	strb	r2, [r1, #0]
 800b31a:	781a      	ldrb	r2, [r3, #0]
 800b31c:	3201      	adds	r2, #1
 800b31e:	701a      	strb	r2, [r3, #0]
 800b320:	e79e      	b.n	800b260 <_dtoa_r+0x648>
 800b322:	46d0      	mov	r8, sl
 800b324:	e7eb      	b.n	800b2fe <_dtoa_r+0x6e6>
 800b326:	2200      	movs	r2, #0
 800b328:	4b6e      	ldr	r3, [pc, #440]	; (800b4e4 <_dtoa_r+0x8cc>)
 800b32a:	f7f5 f8df 	bl	80004ec <__aeabi_dmul>
 800b32e:	2200      	movs	r2, #0
 800b330:	2300      	movs	r3, #0
 800b332:	4680      	mov	r8, r0
 800b334:	4689      	mov	r9, r1
 800b336:	f7f5 fb41 	bl	80009bc <__aeabi_dcmpeq>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d09b      	beq.n	800b276 <_dtoa_r+0x65e>
 800b33e:	e7cd      	b.n	800b2dc <_dtoa_r+0x6c4>
 800b340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b342:	2a00      	cmp	r2, #0
 800b344:	f000 80d0 	beq.w	800b4e8 <_dtoa_r+0x8d0>
 800b348:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b34a:	2a01      	cmp	r2, #1
 800b34c:	f300 80ae 	bgt.w	800b4ac <_dtoa_r+0x894>
 800b350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b352:	2a00      	cmp	r2, #0
 800b354:	f000 80a6 	beq.w	800b4a4 <_dtoa_r+0x88c>
 800b358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b35c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b35e:	9f06      	ldr	r7, [sp, #24]
 800b360:	9a06      	ldr	r2, [sp, #24]
 800b362:	2101      	movs	r1, #1
 800b364:	441a      	add	r2, r3
 800b366:	9206      	str	r2, [sp, #24]
 800b368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36a:	4628      	mov	r0, r5
 800b36c:	441a      	add	r2, r3
 800b36e:	9209      	str	r2, [sp, #36]	; 0x24
 800b370:	f000 ff12 	bl	800c198 <__i2b>
 800b374:	4606      	mov	r6, r0
 800b376:	2f00      	cmp	r7, #0
 800b378:	dd0c      	ble.n	800b394 <_dtoa_r+0x77c>
 800b37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	dd09      	ble.n	800b394 <_dtoa_r+0x77c>
 800b380:	42bb      	cmp	r3, r7
 800b382:	bfa8      	it	ge
 800b384:	463b      	movge	r3, r7
 800b386:	9a06      	ldr	r2, [sp, #24]
 800b388:	1aff      	subs	r7, r7, r3
 800b38a:	1ad2      	subs	r2, r2, r3
 800b38c:	9206      	str	r2, [sp, #24]
 800b38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	9309      	str	r3, [sp, #36]	; 0x24
 800b394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b396:	b1f3      	cbz	r3, 800b3d6 <_dtoa_r+0x7be>
 800b398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 80a8 	beq.w	800b4f0 <_dtoa_r+0x8d8>
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	dd10      	ble.n	800b3c6 <_dtoa_r+0x7ae>
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 ffb3 	bl	800c314 <__pow5mult>
 800b3ae:	465a      	mov	r2, fp
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 ff05 	bl	800c1c4 <__multiply>
 800b3ba:	4680      	mov	r8, r0
 800b3bc:	4659      	mov	r1, fp
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 fdea 	bl	800bf98 <_Bfree>
 800b3c4:	46c3      	mov	fp, r8
 800b3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3c8:	1b1a      	subs	r2, r3, r4
 800b3ca:	d004      	beq.n	800b3d6 <_dtoa_r+0x7be>
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 ffa0 	bl	800c314 <__pow5mult>
 800b3d4:	4683      	mov	fp, r0
 800b3d6:	2101      	movs	r1, #1
 800b3d8:	4628      	mov	r0, r5
 800b3da:	f000 fedd 	bl	800c198 <__i2b>
 800b3de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f340 8086 	ble.w	800b4f4 <_dtoa_r+0x8dc>
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f000 ff91 	bl	800c314 <__pow5mult>
 800b3f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	dd7f      	ble.n	800b4fa <_dtoa_r+0x8e2>
 800b3fa:	f04f 0800 	mov.w	r8, #0
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b404:	6918      	ldr	r0, [r3, #16]
 800b406:	f000 fe79 	bl	800c0fc <__hi0bits>
 800b40a:	f1c0 0020 	rsb	r0, r0, #32
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	4418      	add	r0, r3
 800b412:	f010 001f 	ands.w	r0, r0, #31
 800b416:	f000 8092 	beq.w	800b53e <_dtoa_r+0x926>
 800b41a:	f1c0 0320 	rsb	r3, r0, #32
 800b41e:	2b04      	cmp	r3, #4
 800b420:	f340 808a 	ble.w	800b538 <_dtoa_r+0x920>
 800b424:	f1c0 001c 	rsb	r0, r0, #28
 800b428:	9b06      	ldr	r3, [sp, #24]
 800b42a:	4407      	add	r7, r0
 800b42c:	4403      	add	r3, r0
 800b42e:	9306      	str	r3, [sp, #24]
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	4403      	add	r3, r0
 800b434:	9309      	str	r3, [sp, #36]	; 0x24
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	dd05      	ble.n	800b448 <_dtoa_r+0x830>
 800b43c:	4659      	mov	r1, fp
 800b43e:	461a      	mov	r2, r3
 800b440:	4628      	mov	r0, r5
 800b442:	f000 ffc1 	bl	800c3c8 <__lshift>
 800b446:	4683      	mov	fp, r0
 800b448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dd05      	ble.n	800b45a <_dtoa_r+0x842>
 800b44e:	4621      	mov	r1, r4
 800b450:	461a      	mov	r2, r3
 800b452:	4628      	mov	r0, r5
 800b454:	f000 ffb8 	bl	800c3c8 <__lshift>
 800b458:	4604      	mov	r4, r0
 800b45a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d070      	beq.n	800b542 <_dtoa_r+0x92a>
 800b460:	4621      	mov	r1, r4
 800b462:	4658      	mov	r0, fp
 800b464:	f001 f820 	bl	800c4a8 <__mcmp>
 800b468:	2800      	cmp	r0, #0
 800b46a:	da6a      	bge.n	800b542 <_dtoa_r+0x92a>
 800b46c:	2300      	movs	r3, #0
 800b46e:	4659      	mov	r1, fp
 800b470:	220a      	movs	r2, #10
 800b472:	4628      	mov	r0, r5
 800b474:	f000 fdb2 	bl	800bfdc <__multadd>
 800b478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b47a:	4683      	mov	fp, r0
 800b47c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 8194 	beq.w	800b7ae <_dtoa_r+0xb96>
 800b486:	4631      	mov	r1, r6
 800b488:	2300      	movs	r3, #0
 800b48a:	220a      	movs	r2, #10
 800b48c:	4628      	mov	r0, r5
 800b48e:	f000 fda5 	bl	800bfdc <__multadd>
 800b492:	f1b9 0f00 	cmp.w	r9, #0
 800b496:	4606      	mov	r6, r0
 800b498:	f300 8093 	bgt.w	800b5c2 <_dtoa_r+0x9aa>
 800b49c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	dc57      	bgt.n	800b552 <_dtoa_r+0x93a>
 800b4a2:	e08e      	b.n	800b5c2 <_dtoa_r+0x9aa>
 800b4a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b4a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4aa:	e757      	b.n	800b35c <_dtoa_r+0x744>
 800b4ac:	9b08      	ldr	r3, [sp, #32]
 800b4ae:	1e5c      	subs	r4, r3, #1
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	bfb7      	itett	lt
 800b4b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4b8:	1b1c      	subge	r4, r3, r4
 800b4ba:	1ae2      	sublt	r2, r4, r3
 800b4bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b4be:	bfbe      	ittt	lt
 800b4c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b4c2:	189b      	addlt	r3, r3, r2
 800b4c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b4c6:	9b08      	ldr	r3, [sp, #32]
 800b4c8:	bfb8      	it	lt
 800b4ca:	2400      	movlt	r4, #0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	bfbb      	ittet	lt
 800b4d0:	9b06      	ldrlt	r3, [sp, #24]
 800b4d2:	9a08      	ldrlt	r2, [sp, #32]
 800b4d4:	9f06      	ldrge	r7, [sp, #24]
 800b4d6:	1a9f      	sublt	r7, r3, r2
 800b4d8:	bfac      	ite	ge
 800b4da:	9b08      	ldrge	r3, [sp, #32]
 800b4dc:	2300      	movlt	r3, #0
 800b4de:	e73f      	b.n	800b360 <_dtoa_r+0x748>
 800b4e0:	3fe00000 	.word	0x3fe00000
 800b4e4:	40240000 	.word	0x40240000
 800b4e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b4ea:	9f06      	ldr	r7, [sp, #24]
 800b4ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b4ee:	e742      	b.n	800b376 <_dtoa_r+0x75e>
 800b4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4f2:	e76b      	b.n	800b3cc <_dtoa_r+0x7b4>
 800b4f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	dc19      	bgt.n	800b52e <_dtoa_r+0x916>
 800b4fa:	9b04      	ldr	r3, [sp, #16]
 800b4fc:	b9bb      	cbnz	r3, 800b52e <_dtoa_r+0x916>
 800b4fe:	9b05      	ldr	r3, [sp, #20]
 800b500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b504:	b99b      	cbnz	r3, 800b52e <_dtoa_r+0x916>
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b50c:	0d1b      	lsrs	r3, r3, #20
 800b50e:	051b      	lsls	r3, r3, #20
 800b510:	b183      	cbz	r3, 800b534 <_dtoa_r+0x91c>
 800b512:	f04f 0801 	mov.w	r8, #1
 800b516:	9b06      	ldr	r3, [sp, #24]
 800b518:	3301      	adds	r3, #1
 800b51a:	9306      	str	r3, [sp, #24]
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	3301      	adds	r3, #1
 800b520:	9309      	str	r3, [sp, #36]	; 0x24
 800b522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	f47f af6a 	bne.w	800b3fe <_dtoa_r+0x7e6>
 800b52a:	2001      	movs	r0, #1
 800b52c:	e76f      	b.n	800b40e <_dtoa_r+0x7f6>
 800b52e:	f04f 0800 	mov.w	r8, #0
 800b532:	e7f6      	b.n	800b522 <_dtoa_r+0x90a>
 800b534:	4698      	mov	r8, r3
 800b536:	e7f4      	b.n	800b522 <_dtoa_r+0x90a>
 800b538:	f43f af7d 	beq.w	800b436 <_dtoa_r+0x81e>
 800b53c:	4618      	mov	r0, r3
 800b53e:	301c      	adds	r0, #28
 800b540:	e772      	b.n	800b428 <_dtoa_r+0x810>
 800b542:	9b08      	ldr	r3, [sp, #32]
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc36      	bgt.n	800b5b6 <_dtoa_r+0x99e>
 800b548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	dd33      	ble.n	800b5b6 <_dtoa_r+0x99e>
 800b54e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b552:	f1b9 0f00 	cmp.w	r9, #0
 800b556:	d10d      	bne.n	800b574 <_dtoa_r+0x95c>
 800b558:	4621      	mov	r1, r4
 800b55a:	464b      	mov	r3, r9
 800b55c:	2205      	movs	r2, #5
 800b55e:	4628      	mov	r0, r5
 800b560:	f000 fd3c 	bl	800bfdc <__multadd>
 800b564:	4601      	mov	r1, r0
 800b566:	4604      	mov	r4, r0
 800b568:	4658      	mov	r0, fp
 800b56a:	f000 ff9d 	bl	800c4a8 <__mcmp>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f73f adb8 	bgt.w	800b0e4 <_dtoa_r+0x4cc>
 800b574:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b576:	9f03      	ldr	r7, [sp, #12]
 800b578:	ea6f 0a03 	mvn.w	sl, r3
 800b57c:	f04f 0800 	mov.w	r8, #0
 800b580:	4621      	mov	r1, r4
 800b582:	4628      	mov	r0, r5
 800b584:	f000 fd08 	bl	800bf98 <_Bfree>
 800b588:	2e00      	cmp	r6, #0
 800b58a:	f43f aea7 	beq.w	800b2dc <_dtoa_r+0x6c4>
 800b58e:	f1b8 0f00 	cmp.w	r8, #0
 800b592:	d005      	beq.n	800b5a0 <_dtoa_r+0x988>
 800b594:	45b0      	cmp	r8, r6
 800b596:	d003      	beq.n	800b5a0 <_dtoa_r+0x988>
 800b598:	4641      	mov	r1, r8
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 fcfc 	bl	800bf98 <_Bfree>
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	f000 fcf8 	bl	800bf98 <_Bfree>
 800b5a8:	e698      	b.n	800b2dc <_dtoa_r+0x6c4>
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	4626      	mov	r6, r4
 800b5ae:	e7e1      	b.n	800b574 <_dtoa_r+0x95c>
 800b5b0:	46c2      	mov	sl, r8
 800b5b2:	4626      	mov	r6, r4
 800b5b4:	e596      	b.n	800b0e4 <_dtoa_r+0x4cc>
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 80fd 	beq.w	800b7bc <_dtoa_r+0xba4>
 800b5c2:	2f00      	cmp	r7, #0
 800b5c4:	dd05      	ble.n	800b5d2 <_dtoa_r+0x9ba>
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	463a      	mov	r2, r7
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f000 fefc 	bl	800c3c8 <__lshift>
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	f1b8 0f00 	cmp.w	r8, #0
 800b5d6:	d05c      	beq.n	800b692 <_dtoa_r+0xa7a>
 800b5d8:	4628      	mov	r0, r5
 800b5da:	6871      	ldr	r1, [r6, #4]
 800b5dc:	f000 fc9c 	bl	800bf18 <_Balloc>
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	b928      	cbnz	r0, 800b5f0 <_dtoa_r+0x9d8>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b5ea:	4b7f      	ldr	r3, [pc, #508]	; (800b7e8 <_dtoa_r+0xbd0>)
 800b5ec:	f7ff bb28 	b.w	800ac40 <_dtoa_r+0x28>
 800b5f0:	6932      	ldr	r2, [r6, #16]
 800b5f2:	f106 010c 	add.w	r1, r6, #12
 800b5f6:	3202      	adds	r2, #2
 800b5f8:	0092      	lsls	r2, r2, #2
 800b5fa:	300c      	adds	r0, #12
 800b5fc:	f7fd fd40 	bl	8009080 <memcpy>
 800b600:	2201      	movs	r2, #1
 800b602:	4639      	mov	r1, r7
 800b604:	4628      	mov	r0, r5
 800b606:	f000 fedf 	bl	800c3c8 <__lshift>
 800b60a:	46b0      	mov	r8, r6
 800b60c:	4606      	mov	r6, r0
 800b60e:	9b03      	ldr	r3, [sp, #12]
 800b610:	3301      	adds	r3, #1
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	444b      	add	r3, r9
 800b618:	930a      	str	r3, [sp, #40]	; 0x28
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	f003 0301 	and.w	r3, r3, #1
 800b620:	9309      	str	r3, [sp, #36]	; 0x24
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	4621      	mov	r1, r4
 800b626:	3b01      	subs	r3, #1
 800b628:	4658      	mov	r0, fp
 800b62a:	9304      	str	r3, [sp, #16]
 800b62c:	f7ff fa68 	bl	800ab00 <quorem>
 800b630:	4603      	mov	r3, r0
 800b632:	4641      	mov	r1, r8
 800b634:	3330      	adds	r3, #48	; 0x30
 800b636:	9006      	str	r0, [sp, #24]
 800b638:	4658      	mov	r0, fp
 800b63a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b63c:	f000 ff34 	bl	800c4a8 <__mcmp>
 800b640:	4632      	mov	r2, r6
 800b642:	4681      	mov	r9, r0
 800b644:	4621      	mov	r1, r4
 800b646:	4628      	mov	r0, r5
 800b648:	f000 ff4a 	bl	800c4e0 <__mdiff>
 800b64c:	68c2      	ldr	r2, [r0, #12]
 800b64e:	4607      	mov	r7, r0
 800b650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b652:	bb02      	cbnz	r2, 800b696 <_dtoa_r+0xa7e>
 800b654:	4601      	mov	r1, r0
 800b656:	4658      	mov	r0, fp
 800b658:	f000 ff26 	bl	800c4a8 <__mcmp>
 800b65c:	4602      	mov	r2, r0
 800b65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b660:	4639      	mov	r1, r7
 800b662:	4628      	mov	r0, r5
 800b664:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b668:	f000 fc96 	bl	800bf98 <_Bfree>
 800b66c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b66e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b670:	9f08      	ldr	r7, [sp, #32]
 800b672:	ea43 0102 	orr.w	r1, r3, r2
 800b676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b678:	430b      	orrs	r3, r1
 800b67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b67c:	d10d      	bne.n	800b69a <_dtoa_r+0xa82>
 800b67e:	2b39      	cmp	r3, #57	; 0x39
 800b680:	d029      	beq.n	800b6d6 <_dtoa_r+0xabe>
 800b682:	f1b9 0f00 	cmp.w	r9, #0
 800b686:	dd01      	ble.n	800b68c <_dtoa_r+0xa74>
 800b688:	9b06      	ldr	r3, [sp, #24]
 800b68a:	3331      	adds	r3, #49	; 0x31
 800b68c:	9a04      	ldr	r2, [sp, #16]
 800b68e:	7013      	strb	r3, [r2, #0]
 800b690:	e776      	b.n	800b580 <_dtoa_r+0x968>
 800b692:	4630      	mov	r0, r6
 800b694:	e7b9      	b.n	800b60a <_dtoa_r+0x9f2>
 800b696:	2201      	movs	r2, #1
 800b698:	e7e2      	b.n	800b660 <_dtoa_r+0xa48>
 800b69a:	f1b9 0f00 	cmp.w	r9, #0
 800b69e:	db06      	blt.n	800b6ae <_dtoa_r+0xa96>
 800b6a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b6a2:	ea41 0909 	orr.w	r9, r1, r9
 800b6a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6a8:	ea59 0101 	orrs.w	r1, r9, r1
 800b6ac:	d120      	bne.n	800b6f0 <_dtoa_r+0xad8>
 800b6ae:	2a00      	cmp	r2, #0
 800b6b0:	ddec      	ble.n	800b68c <_dtoa_r+0xa74>
 800b6b2:	4659      	mov	r1, fp
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	9308      	str	r3, [sp, #32]
 800b6ba:	f000 fe85 	bl	800c3c8 <__lshift>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4683      	mov	fp, r0
 800b6c2:	f000 fef1 	bl	800c4a8 <__mcmp>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	dc02      	bgt.n	800b6d2 <_dtoa_r+0xaba>
 800b6cc:	d1de      	bne.n	800b68c <_dtoa_r+0xa74>
 800b6ce:	07da      	lsls	r2, r3, #31
 800b6d0:	d5dc      	bpl.n	800b68c <_dtoa_r+0xa74>
 800b6d2:	2b39      	cmp	r3, #57	; 0x39
 800b6d4:	d1d8      	bne.n	800b688 <_dtoa_r+0xa70>
 800b6d6:	2339      	movs	r3, #57	; 0x39
 800b6d8:	9a04      	ldr	r2, [sp, #16]
 800b6da:	7013      	strb	r3, [r2, #0]
 800b6dc:	463b      	mov	r3, r7
 800b6de:	461f      	mov	r7, r3
 800b6e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	2a39      	cmp	r2, #57	; 0x39
 800b6e8:	d050      	beq.n	800b78c <_dtoa_r+0xb74>
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	e747      	b.n	800b580 <_dtoa_r+0x968>
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	dd03      	ble.n	800b6fc <_dtoa_r+0xae4>
 800b6f4:	2b39      	cmp	r3, #57	; 0x39
 800b6f6:	d0ee      	beq.n	800b6d6 <_dtoa_r+0xabe>
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	e7c7      	b.n	800b68c <_dtoa_r+0xa74>
 800b6fc:	9a08      	ldr	r2, [sp, #32]
 800b6fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b700:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b704:	428a      	cmp	r2, r1
 800b706:	d02a      	beq.n	800b75e <_dtoa_r+0xb46>
 800b708:	4659      	mov	r1, fp
 800b70a:	2300      	movs	r3, #0
 800b70c:	220a      	movs	r2, #10
 800b70e:	4628      	mov	r0, r5
 800b710:	f000 fc64 	bl	800bfdc <__multadd>
 800b714:	45b0      	cmp	r8, r6
 800b716:	4683      	mov	fp, r0
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	f04f 020a 	mov.w	r2, #10
 800b720:	4641      	mov	r1, r8
 800b722:	4628      	mov	r0, r5
 800b724:	d107      	bne.n	800b736 <_dtoa_r+0xb1e>
 800b726:	f000 fc59 	bl	800bfdc <__multadd>
 800b72a:	4680      	mov	r8, r0
 800b72c:	4606      	mov	r6, r0
 800b72e:	9b08      	ldr	r3, [sp, #32]
 800b730:	3301      	adds	r3, #1
 800b732:	9308      	str	r3, [sp, #32]
 800b734:	e775      	b.n	800b622 <_dtoa_r+0xa0a>
 800b736:	f000 fc51 	bl	800bfdc <__multadd>
 800b73a:	4631      	mov	r1, r6
 800b73c:	4680      	mov	r8, r0
 800b73e:	2300      	movs	r3, #0
 800b740:	220a      	movs	r2, #10
 800b742:	4628      	mov	r0, r5
 800b744:	f000 fc4a 	bl	800bfdc <__multadd>
 800b748:	4606      	mov	r6, r0
 800b74a:	e7f0      	b.n	800b72e <_dtoa_r+0xb16>
 800b74c:	f1b9 0f00 	cmp.w	r9, #0
 800b750:	bfcc      	ite	gt
 800b752:	464f      	movgt	r7, r9
 800b754:	2701      	movle	r7, #1
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	9a03      	ldr	r2, [sp, #12]
 800b75c:	4417      	add	r7, r2
 800b75e:	4659      	mov	r1, fp
 800b760:	2201      	movs	r2, #1
 800b762:	4628      	mov	r0, r5
 800b764:	9308      	str	r3, [sp, #32]
 800b766:	f000 fe2f 	bl	800c3c8 <__lshift>
 800b76a:	4621      	mov	r1, r4
 800b76c:	4683      	mov	fp, r0
 800b76e:	f000 fe9b 	bl	800c4a8 <__mcmp>
 800b772:	2800      	cmp	r0, #0
 800b774:	dcb2      	bgt.n	800b6dc <_dtoa_r+0xac4>
 800b776:	d102      	bne.n	800b77e <_dtoa_r+0xb66>
 800b778:	9b08      	ldr	r3, [sp, #32]
 800b77a:	07db      	lsls	r3, r3, #31
 800b77c:	d4ae      	bmi.n	800b6dc <_dtoa_r+0xac4>
 800b77e:	463b      	mov	r3, r7
 800b780:	461f      	mov	r7, r3
 800b782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b786:	2a30      	cmp	r2, #48	; 0x30
 800b788:	d0fa      	beq.n	800b780 <_dtoa_r+0xb68>
 800b78a:	e6f9      	b.n	800b580 <_dtoa_r+0x968>
 800b78c:	9a03      	ldr	r2, [sp, #12]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d1a5      	bne.n	800b6de <_dtoa_r+0xac6>
 800b792:	2331      	movs	r3, #49	; 0x31
 800b794:	f10a 0a01 	add.w	sl, sl, #1
 800b798:	e779      	b.n	800b68e <_dtoa_r+0xa76>
 800b79a:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <_dtoa_r+0xbd4>)
 800b79c:	f7ff baa8 	b.w	800acf0 <_dtoa_r+0xd8>
 800b7a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f47f aa81 	bne.w	800acaa <_dtoa_r+0x92>
 800b7a8:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <_dtoa_r+0xbd8>)
 800b7aa:	f7ff baa1 	b.w	800acf0 <_dtoa_r+0xd8>
 800b7ae:	f1b9 0f00 	cmp.w	r9, #0
 800b7b2:	dc03      	bgt.n	800b7bc <_dtoa_r+0xba4>
 800b7b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	f73f aecb 	bgt.w	800b552 <_dtoa_r+0x93a>
 800b7bc:	9f03      	ldr	r7, [sp, #12]
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4658      	mov	r0, fp
 800b7c2:	f7ff f99d 	bl	800ab00 <quorem>
 800b7c6:	9a03      	ldr	r2, [sp, #12]
 800b7c8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b7cc:	f807 3b01 	strb.w	r3, [r7], #1
 800b7d0:	1aba      	subs	r2, r7, r2
 800b7d2:	4591      	cmp	r9, r2
 800b7d4:	ddba      	ble.n	800b74c <_dtoa_r+0xb34>
 800b7d6:	4659      	mov	r1, fp
 800b7d8:	2300      	movs	r3, #0
 800b7da:	220a      	movs	r2, #10
 800b7dc:	4628      	mov	r0, r5
 800b7de:	f000 fbfd 	bl	800bfdc <__multadd>
 800b7e2:	4683      	mov	fp, r0
 800b7e4:	e7eb      	b.n	800b7be <_dtoa_r+0xba6>
 800b7e6:	bf00      	nop
 800b7e8:	0800ebd0 	.word	0x0800ebd0
 800b7ec:	0800e9d0 	.word	0x0800e9d0
 800b7f0:	0800eb51 	.word	0x0800eb51

0800b7f4 <rshift>:
 800b7f4:	6903      	ldr	r3, [r0, #16]
 800b7f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7fe:	f100 0414 	add.w	r4, r0, #20
 800b802:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b806:	dd46      	ble.n	800b896 <rshift+0xa2>
 800b808:	f011 011f 	ands.w	r1, r1, #31
 800b80c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b810:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b814:	d10c      	bne.n	800b830 <rshift+0x3c>
 800b816:	4629      	mov	r1, r5
 800b818:	f100 0710 	add.w	r7, r0, #16
 800b81c:	42b1      	cmp	r1, r6
 800b81e:	d335      	bcc.n	800b88c <rshift+0x98>
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	1eea      	subs	r2, r5, #3
 800b826:	4296      	cmp	r6, r2
 800b828:	bf38      	it	cc
 800b82a:	2300      	movcc	r3, #0
 800b82c:	4423      	add	r3, r4
 800b82e:	e015      	b.n	800b85c <rshift+0x68>
 800b830:	46a1      	mov	r9, r4
 800b832:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b836:	f1c1 0820 	rsb	r8, r1, #32
 800b83a:	40cf      	lsrs	r7, r1
 800b83c:	f105 0e04 	add.w	lr, r5, #4
 800b840:	4576      	cmp	r6, lr
 800b842:	46f4      	mov	ip, lr
 800b844:	d816      	bhi.n	800b874 <rshift+0x80>
 800b846:	1a9a      	subs	r2, r3, r2
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	3a04      	subs	r2, #4
 800b84c:	3501      	adds	r5, #1
 800b84e:	42ae      	cmp	r6, r5
 800b850:	bf38      	it	cc
 800b852:	2200      	movcc	r2, #0
 800b854:	18a3      	adds	r3, r4, r2
 800b856:	50a7      	str	r7, [r4, r2]
 800b858:	b107      	cbz	r7, 800b85c <rshift+0x68>
 800b85a:	3304      	adds	r3, #4
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	eba3 0204 	sub.w	r2, r3, r4
 800b862:	bf08      	it	eq
 800b864:	2300      	moveq	r3, #0
 800b866:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b86a:	6102      	str	r2, [r0, #16]
 800b86c:	bf08      	it	eq
 800b86e:	6143      	streq	r3, [r0, #20]
 800b870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b874:	f8dc c000 	ldr.w	ip, [ip]
 800b878:	fa0c fc08 	lsl.w	ip, ip, r8
 800b87c:	ea4c 0707 	orr.w	r7, ip, r7
 800b880:	f849 7b04 	str.w	r7, [r9], #4
 800b884:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b888:	40cf      	lsrs	r7, r1
 800b88a:	e7d9      	b.n	800b840 <rshift+0x4c>
 800b88c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b890:	f847 cf04 	str.w	ip, [r7, #4]!
 800b894:	e7c2      	b.n	800b81c <rshift+0x28>
 800b896:	4623      	mov	r3, r4
 800b898:	e7e0      	b.n	800b85c <rshift+0x68>

0800b89a <__hexdig_fun>:
 800b89a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d802      	bhi.n	800b8a8 <__hexdig_fun+0xe>
 800b8a2:	3820      	subs	r0, #32
 800b8a4:	b2c0      	uxtb	r0, r0
 800b8a6:	4770      	bx	lr
 800b8a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b8ac:	2b05      	cmp	r3, #5
 800b8ae:	d801      	bhi.n	800b8b4 <__hexdig_fun+0x1a>
 800b8b0:	3847      	subs	r0, #71	; 0x47
 800b8b2:	e7f7      	b.n	800b8a4 <__hexdig_fun+0xa>
 800b8b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	d801      	bhi.n	800b8c0 <__hexdig_fun+0x26>
 800b8bc:	3827      	subs	r0, #39	; 0x27
 800b8be:	e7f1      	b.n	800b8a4 <__hexdig_fun+0xa>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	4770      	bx	lr

0800b8c4 <__gethex>:
 800b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c8:	b08b      	sub	sp, #44	; 0x2c
 800b8ca:	9305      	str	r3, [sp, #20]
 800b8cc:	4bb2      	ldr	r3, [pc, #712]	; (800bb98 <__gethex+0x2d4>)
 800b8ce:	9002      	str	r0, [sp, #8]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	468b      	mov	fp, r1
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4690      	mov	r8, r2
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	f7f4 fc43 	bl	8000164 <strlen>
 800b8de:	4682      	mov	sl, r0
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	f8db 2000 	ldr.w	r2, [fp]
 800b8e6:	4403      	add	r3, r0
 800b8e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b8ec:	9306      	str	r3, [sp, #24]
 800b8ee:	1c93      	adds	r3, r2, #2
 800b8f0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8f4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8f8:	32fe      	adds	r2, #254	; 0xfe
 800b8fa:	18d1      	adds	r1, r2, r3
 800b8fc:	461f      	mov	r7, r3
 800b8fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b902:	9101      	str	r1, [sp, #4]
 800b904:	2830      	cmp	r0, #48	; 0x30
 800b906:	d0f8      	beq.n	800b8fa <__gethex+0x36>
 800b908:	f7ff ffc7 	bl	800b89a <__hexdig_fun>
 800b90c:	4604      	mov	r4, r0
 800b90e:	2800      	cmp	r0, #0
 800b910:	d13a      	bne.n	800b988 <__gethex+0xc4>
 800b912:	4652      	mov	r2, sl
 800b914:	4638      	mov	r0, r7
 800b916:	9903      	ldr	r1, [sp, #12]
 800b918:	f001 fa18 	bl	800cd4c <strncmp>
 800b91c:	4605      	mov	r5, r0
 800b91e:	2800      	cmp	r0, #0
 800b920:	d166      	bne.n	800b9f0 <__gethex+0x12c>
 800b922:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b926:	eb07 060a 	add.w	r6, r7, sl
 800b92a:	f7ff ffb6 	bl	800b89a <__hexdig_fun>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d060      	beq.n	800b9f4 <__gethex+0x130>
 800b932:	4633      	mov	r3, r6
 800b934:	7818      	ldrb	r0, [r3, #0]
 800b936:	461f      	mov	r7, r3
 800b938:	2830      	cmp	r0, #48	; 0x30
 800b93a:	f103 0301 	add.w	r3, r3, #1
 800b93e:	d0f9      	beq.n	800b934 <__gethex+0x70>
 800b940:	f7ff ffab 	bl	800b89a <__hexdig_fun>
 800b944:	2301      	movs	r3, #1
 800b946:	fab0 f480 	clz	r4, r0
 800b94a:	4635      	mov	r5, r6
 800b94c:	0964      	lsrs	r4, r4, #5
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	463a      	mov	r2, r7
 800b952:	4616      	mov	r6, r2
 800b954:	7830      	ldrb	r0, [r6, #0]
 800b956:	3201      	adds	r2, #1
 800b958:	f7ff ff9f 	bl	800b89a <__hexdig_fun>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d1f8      	bne.n	800b952 <__gethex+0x8e>
 800b960:	4652      	mov	r2, sl
 800b962:	4630      	mov	r0, r6
 800b964:	9903      	ldr	r1, [sp, #12]
 800b966:	f001 f9f1 	bl	800cd4c <strncmp>
 800b96a:	b980      	cbnz	r0, 800b98e <__gethex+0xca>
 800b96c:	b94d      	cbnz	r5, 800b982 <__gethex+0xbe>
 800b96e:	eb06 050a 	add.w	r5, r6, sl
 800b972:	462a      	mov	r2, r5
 800b974:	4616      	mov	r6, r2
 800b976:	7830      	ldrb	r0, [r6, #0]
 800b978:	3201      	adds	r2, #1
 800b97a:	f7ff ff8e 	bl	800b89a <__hexdig_fun>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d1f8      	bne.n	800b974 <__gethex+0xb0>
 800b982:	1bad      	subs	r5, r5, r6
 800b984:	00ad      	lsls	r5, r5, #2
 800b986:	e004      	b.n	800b992 <__gethex+0xce>
 800b988:	2400      	movs	r4, #0
 800b98a:	4625      	mov	r5, r4
 800b98c:	e7e0      	b.n	800b950 <__gethex+0x8c>
 800b98e:	2d00      	cmp	r5, #0
 800b990:	d1f7      	bne.n	800b982 <__gethex+0xbe>
 800b992:	7833      	ldrb	r3, [r6, #0]
 800b994:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b998:	2b50      	cmp	r3, #80	; 0x50
 800b99a:	d139      	bne.n	800ba10 <__gethex+0x14c>
 800b99c:	7873      	ldrb	r3, [r6, #1]
 800b99e:	2b2b      	cmp	r3, #43	; 0x2b
 800b9a0:	d02a      	beq.n	800b9f8 <__gethex+0x134>
 800b9a2:	2b2d      	cmp	r3, #45	; 0x2d
 800b9a4:	d02c      	beq.n	800ba00 <__gethex+0x13c>
 800b9a6:	f04f 0900 	mov.w	r9, #0
 800b9aa:	1c71      	adds	r1, r6, #1
 800b9ac:	7808      	ldrb	r0, [r1, #0]
 800b9ae:	f7ff ff74 	bl	800b89a <__hexdig_fun>
 800b9b2:	1e43      	subs	r3, r0, #1
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b18      	cmp	r3, #24
 800b9b8:	d82a      	bhi.n	800ba10 <__gethex+0x14c>
 800b9ba:	f1a0 0210 	sub.w	r2, r0, #16
 800b9be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9c2:	f7ff ff6a 	bl	800b89a <__hexdig_fun>
 800b9c6:	1e43      	subs	r3, r0, #1
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b18      	cmp	r3, #24
 800b9cc:	d91b      	bls.n	800ba06 <__gethex+0x142>
 800b9ce:	f1b9 0f00 	cmp.w	r9, #0
 800b9d2:	d000      	beq.n	800b9d6 <__gethex+0x112>
 800b9d4:	4252      	negs	r2, r2
 800b9d6:	4415      	add	r5, r2
 800b9d8:	f8cb 1000 	str.w	r1, [fp]
 800b9dc:	b1d4      	cbz	r4, 800ba14 <__gethex+0x150>
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	bf14      	ite	ne
 800b9e4:	2700      	movne	r7, #0
 800b9e6:	2706      	moveq	r7, #6
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	b00b      	add	sp, #44	; 0x2c
 800b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f0:	463e      	mov	r6, r7
 800b9f2:	4625      	mov	r5, r4
 800b9f4:	2401      	movs	r4, #1
 800b9f6:	e7cc      	b.n	800b992 <__gethex+0xce>
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	1cb1      	adds	r1, r6, #2
 800b9fe:	e7d5      	b.n	800b9ac <__gethex+0xe8>
 800ba00:	f04f 0901 	mov.w	r9, #1
 800ba04:	e7fa      	b.n	800b9fc <__gethex+0x138>
 800ba06:	230a      	movs	r3, #10
 800ba08:	fb03 0202 	mla	r2, r3, r2, r0
 800ba0c:	3a10      	subs	r2, #16
 800ba0e:	e7d6      	b.n	800b9be <__gethex+0xfa>
 800ba10:	4631      	mov	r1, r6
 800ba12:	e7e1      	b.n	800b9d8 <__gethex+0x114>
 800ba14:	4621      	mov	r1, r4
 800ba16:	1bf3      	subs	r3, r6, r7
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	2b07      	cmp	r3, #7
 800ba1c:	dc0a      	bgt.n	800ba34 <__gethex+0x170>
 800ba1e:	9802      	ldr	r0, [sp, #8]
 800ba20:	f000 fa7a 	bl	800bf18 <_Balloc>
 800ba24:	4604      	mov	r4, r0
 800ba26:	b940      	cbnz	r0, 800ba3a <__gethex+0x176>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	21de      	movs	r1, #222	; 0xde
 800ba2c:	4b5b      	ldr	r3, [pc, #364]	; (800bb9c <__gethex+0x2d8>)
 800ba2e:	485c      	ldr	r0, [pc, #368]	; (800bba0 <__gethex+0x2dc>)
 800ba30:	f001 f9ae 	bl	800cd90 <__assert_func>
 800ba34:	3101      	adds	r1, #1
 800ba36:	105b      	asrs	r3, r3, #1
 800ba38:	e7ef      	b.n	800ba1a <__gethex+0x156>
 800ba3a:	f04f 0b00 	mov.w	fp, #0
 800ba3e:	f100 0914 	add.w	r9, r0, #20
 800ba42:	f1ca 0301 	rsb	r3, sl, #1
 800ba46:	f8cd 9010 	str.w	r9, [sp, #16]
 800ba4a:	f8cd b004 	str.w	fp, [sp, #4]
 800ba4e:	9308      	str	r3, [sp, #32]
 800ba50:	42b7      	cmp	r7, r6
 800ba52:	d33f      	bcc.n	800bad4 <__gethex+0x210>
 800ba54:	9f04      	ldr	r7, [sp, #16]
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	f847 3b04 	str.w	r3, [r7], #4
 800ba5c:	eba7 0709 	sub.w	r7, r7, r9
 800ba60:	10bf      	asrs	r7, r7, #2
 800ba62:	6127      	str	r7, [r4, #16]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fb49 	bl	800c0fc <__hi0bits>
 800ba6a:	017f      	lsls	r7, r7, #5
 800ba6c:	f8d8 6000 	ldr.w	r6, [r8]
 800ba70:	1a3f      	subs	r7, r7, r0
 800ba72:	42b7      	cmp	r7, r6
 800ba74:	dd62      	ble.n	800bb3c <__gethex+0x278>
 800ba76:	1bbf      	subs	r7, r7, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fee3 	bl	800c846 <__any_on>
 800ba80:	4682      	mov	sl, r0
 800ba82:	b1a8      	cbz	r0, 800bab0 <__gethex+0x1ec>
 800ba84:	f04f 0a01 	mov.w	sl, #1
 800ba88:	1e7b      	subs	r3, r7, #1
 800ba8a:	1159      	asrs	r1, r3, #5
 800ba8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba90:	f003 021f 	and.w	r2, r3, #31
 800ba94:	fa0a f202 	lsl.w	r2, sl, r2
 800ba98:	420a      	tst	r2, r1
 800ba9a:	d009      	beq.n	800bab0 <__gethex+0x1ec>
 800ba9c:	4553      	cmp	r3, sl
 800ba9e:	dd05      	ble.n	800baac <__gethex+0x1e8>
 800baa0:	4620      	mov	r0, r4
 800baa2:	1eb9      	subs	r1, r7, #2
 800baa4:	f000 fecf 	bl	800c846 <__any_on>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d144      	bne.n	800bb36 <__gethex+0x272>
 800baac:	f04f 0a02 	mov.w	sl, #2
 800bab0:	4639      	mov	r1, r7
 800bab2:	4620      	mov	r0, r4
 800bab4:	f7ff fe9e 	bl	800b7f4 <rshift>
 800bab8:	443d      	add	r5, r7
 800baba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800babe:	42ab      	cmp	r3, r5
 800bac0:	da4a      	bge.n	800bb58 <__gethex+0x294>
 800bac2:	4621      	mov	r1, r4
 800bac4:	9802      	ldr	r0, [sp, #8]
 800bac6:	f000 fa67 	bl	800bf98 <_Bfree>
 800baca:	2300      	movs	r3, #0
 800bacc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bace:	27a3      	movs	r7, #163	; 0xa3
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	e789      	b.n	800b9e8 <__gethex+0x124>
 800bad4:	1e73      	subs	r3, r6, #1
 800bad6:	9a06      	ldr	r2, [sp, #24]
 800bad8:	9307      	str	r3, [sp, #28]
 800bada:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bade:	4293      	cmp	r3, r2
 800bae0:	d019      	beq.n	800bb16 <__gethex+0x252>
 800bae2:	f1bb 0f20 	cmp.w	fp, #32
 800bae6:	d107      	bne.n	800baf8 <__gethex+0x234>
 800bae8:	9b04      	ldr	r3, [sp, #16]
 800baea:	9a01      	ldr	r2, [sp, #4]
 800baec:	f843 2b04 	str.w	r2, [r3], #4
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	469b      	mov	fp, r3
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bafc:	f7ff fecd 	bl	800b89a <__hexdig_fun>
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	f000 000f 	and.w	r0, r0, #15
 800bb06:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb0a:	4303      	orrs	r3, r0
 800bb0c:	9301      	str	r3, [sp, #4]
 800bb0e:	f10b 0b04 	add.w	fp, fp, #4
 800bb12:	9b07      	ldr	r3, [sp, #28]
 800bb14:	e00d      	b.n	800bb32 <__gethex+0x26e>
 800bb16:	9a08      	ldr	r2, [sp, #32]
 800bb18:	1e73      	subs	r3, r6, #1
 800bb1a:	4413      	add	r3, r2
 800bb1c:	42bb      	cmp	r3, r7
 800bb1e:	d3e0      	bcc.n	800bae2 <__gethex+0x21e>
 800bb20:	4618      	mov	r0, r3
 800bb22:	4652      	mov	r2, sl
 800bb24:	9903      	ldr	r1, [sp, #12]
 800bb26:	9309      	str	r3, [sp, #36]	; 0x24
 800bb28:	f001 f910 	bl	800cd4c <strncmp>
 800bb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d1d7      	bne.n	800bae2 <__gethex+0x21e>
 800bb32:	461e      	mov	r6, r3
 800bb34:	e78c      	b.n	800ba50 <__gethex+0x18c>
 800bb36:	f04f 0a03 	mov.w	sl, #3
 800bb3a:	e7b9      	b.n	800bab0 <__gethex+0x1ec>
 800bb3c:	da09      	bge.n	800bb52 <__gethex+0x28e>
 800bb3e:	1bf7      	subs	r7, r6, r7
 800bb40:	4621      	mov	r1, r4
 800bb42:	463a      	mov	r2, r7
 800bb44:	9802      	ldr	r0, [sp, #8]
 800bb46:	f000 fc3f 	bl	800c3c8 <__lshift>
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	1bed      	subs	r5, r5, r7
 800bb4e:	f100 0914 	add.w	r9, r0, #20
 800bb52:	f04f 0a00 	mov.w	sl, #0
 800bb56:	e7b0      	b.n	800baba <__gethex+0x1f6>
 800bb58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb5c:	42a8      	cmp	r0, r5
 800bb5e:	dd72      	ble.n	800bc46 <__gethex+0x382>
 800bb60:	1b45      	subs	r5, r0, r5
 800bb62:	42ae      	cmp	r6, r5
 800bb64:	dc35      	bgt.n	800bbd2 <__gethex+0x30e>
 800bb66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	d029      	beq.n	800bbc2 <__gethex+0x2fe>
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d02b      	beq.n	800bbca <__gethex+0x306>
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d11c      	bne.n	800bbb0 <__gethex+0x2ec>
 800bb76:	42ae      	cmp	r6, r5
 800bb78:	d11a      	bne.n	800bbb0 <__gethex+0x2ec>
 800bb7a:	2e01      	cmp	r6, #1
 800bb7c:	d112      	bne.n	800bba4 <__gethex+0x2e0>
 800bb7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb82:	9a05      	ldr	r2, [sp, #20]
 800bb84:	2762      	movs	r7, #98	; 0x62
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	6123      	str	r3, [r4, #16]
 800bb8c:	f8c9 3000 	str.w	r3, [r9]
 800bb90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb92:	601c      	str	r4, [r3, #0]
 800bb94:	e728      	b.n	800b9e8 <__gethex+0x124>
 800bb96:	bf00      	nop
 800bb98:	0800ec48 	.word	0x0800ec48
 800bb9c:	0800ebd0 	.word	0x0800ebd0
 800bba0:	0800ebe1 	.word	0x0800ebe1
 800bba4:	4620      	mov	r0, r4
 800bba6:	1e71      	subs	r1, r6, #1
 800bba8:	f000 fe4d 	bl	800c846 <__any_on>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d1e6      	bne.n	800bb7e <__gethex+0x2ba>
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	9802      	ldr	r0, [sp, #8]
 800bbb4:	f000 f9f0 	bl	800bf98 <_Bfree>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbbc:	2750      	movs	r7, #80	; 0x50
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	e712      	b.n	800b9e8 <__gethex+0x124>
 800bbc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1f3      	bne.n	800bbb0 <__gethex+0x2ec>
 800bbc8:	e7d9      	b.n	800bb7e <__gethex+0x2ba>
 800bbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1d6      	bne.n	800bb7e <__gethex+0x2ba>
 800bbd0:	e7ee      	b.n	800bbb0 <__gethex+0x2ec>
 800bbd2:	1e6f      	subs	r7, r5, #1
 800bbd4:	f1ba 0f00 	cmp.w	sl, #0
 800bbd8:	d132      	bne.n	800bc40 <__gethex+0x37c>
 800bbda:	b127      	cbz	r7, 800bbe6 <__gethex+0x322>
 800bbdc:	4639      	mov	r1, r7
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 fe31 	bl	800c846 <__any_on>
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	117b      	asrs	r3, r7, #5
 800bbea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bbee:	f007 071f 	and.w	r7, r7, #31
 800bbf2:	fa01 f707 	lsl.w	r7, r1, r7
 800bbf6:	421f      	tst	r7, r3
 800bbf8:	f04f 0702 	mov.w	r7, #2
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	4620      	mov	r0, r4
 800bc00:	bf18      	it	ne
 800bc02:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc06:	1b76      	subs	r6, r6, r5
 800bc08:	f7ff fdf4 	bl	800b7f4 <rshift>
 800bc0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc10:	f1ba 0f00 	cmp.w	sl, #0
 800bc14:	d048      	beq.n	800bca8 <__gethex+0x3e4>
 800bc16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d015      	beq.n	800bc4a <__gethex+0x386>
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d017      	beq.n	800bc52 <__gethex+0x38e>
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d109      	bne.n	800bc3a <__gethex+0x376>
 800bc26:	f01a 0f02 	tst.w	sl, #2
 800bc2a:	d006      	beq.n	800bc3a <__gethex+0x376>
 800bc2c:	f8d9 0000 	ldr.w	r0, [r9]
 800bc30:	ea4a 0a00 	orr.w	sl, sl, r0
 800bc34:	f01a 0f01 	tst.w	sl, #1
 800bc38:	d10e      	bne.n	800bc58 <__gethex+0x394>
 800bc3a:	f047 0710 	orr.w	r7, r7, #16
 800bc3e:	e033      	b.n	800bca8 <__gethex+0x3e4>
 800bc40:	f04f 0a01 	mov.w	sl, #1
 800bc44:	e7cf      	b.n	800bbe6 <__gethex+0x322>
 800bc46:	2701      	movs	r7, #1
 800bc48:	e7e2      	b.n	800bc10 <__gethex+0x34c>
 800bc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4c:	f1c3 0301 	rsb	r3, r3, #1
 800bc50:	9315      	str	r3, [sp, #84]	; 0x54
 800bc52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0f0      	beq.n	800bc3a <__gethex+0x376>
 800bc58:	f04f 0c00 	mov.w	ip, #0
 800bc5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc60:	f104 0314 	add.w	r3, r4, #20
 800bc64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc72:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc76:	d01c      	beq.n	800bcb2 <__gethex+0x3ee>
 800bc78:	3201      	adds	r2, #1
 800bc7a:	6002      	str	r2, [r0, #0]
 800bc7c:	2f02      	cmp	r7, #2
 800bc7e:	f104 0314 	add.w	r3, r4, #20
 800bc82:	d13d      	bne.n	800bd00 <__gethex+0x43c>
 800bc84:	f8d8 2000 	ldr.w	r2, [r8]
 800bc88:	3a01      	subs	r2, #1
 800bc8a:	42b2      	cmp	r2, r6
 800bc8c:	d10a      	bne.n	800bca4 <__gethex+0x3e0>
 800bc8e:	2201      	movs	r2, #1
 800bc90:	1171      	asrs	r1, r6, #5
 800bc92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc96:	f006 061f 	and.w	r6, r6, #31
 800bc9a:	fa02 f606 	lsl.w	r6, r2, r6
 800bc9e:	421e      	tst	r6, r3
 800bca0:	bf18      	it	ne
 800bca2:	4617      	movne	r7, r2
 800bca4:	f047 0720 	orr.w	r7, r7, #32
 800bca8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcaa:	601c      	str	r4, [r3, #0]
 800bcac:	9b05      	ldr	r3, [sp, #20]
 800bcae:	601d      	str	r5, [r3, #0]
 800bcb0:	e69a      	b.n	800b9e8 <__gethex+0x124>
 800bcb2:	4299      	cmp	r1, r3
 800bcb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcb8:	d8d8      	bhi.n	800bc6c <__gethex+0x3a8>
 800bcba:	68a3      	ldr	r3, [r4, #8]
 800bcbc:	459b      	cmp	fp, r3
 800bcbe:	db17      	blt.n	800bcf0 <__gethex+0x42c>
 800bcc0:	6861      	ldr	r1, [r4, #4]
 800bcc2:	9802      	ldr	r0, [sp, #8]
 800bcc4:	3101      	adds	r1, #1
 800bcc6:	f000 f927 	bl	800bf18 <_Balloc>
 800bcca:	4681      	mov	r9, r0
 800bccc:	b918      	cbnz	r0, 800bcd6 <__gethex+0x412>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	2184      	movs	r1, #132	; 0x84
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <__gethex+0x474>)
 800bcd4:	e6ab      	b.n	800ba2e <__gethex+0x16a>
 800bcd6:	6922      	ldr	r2, [r4, #16]
 800bcd8:	f104 010c 	add.w	r1, r4, #12
 800bcdc:	3202      	adds	r2, #2
 800bcde:	0092      	lsls	r2, r2, #2
 800bce0:	300c      	adds	r0, #12
 800bce2:	f7fd f9cd 	bl	8009080 <memcpy>
 800bce6:	4621      	mov	r1, r4
 800bce8:	9802      	ldr	r0, [sp, #8]
 800bcea:	f000 f955 	bl	800bf98 <_Bfree>
 800bcee:	464c      	mov	r4, r9
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	6122      	str	r2, [r4, #16]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcfc:	615a      	str	r2, [r3, #20]
 800bcfe:	e7bd      	b.n	800bc7c <__gethex+0x3b8>
 800bd00:	6922      	ldr	r2, [r4, #16]
 800bd02:	455a      	cmp	r2, fp
 800bd04:	dd0b      	ble.n	800bd1e <__gethex+0x45a>
 800bd06:	2101      	movs	r1, #1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f7ff fd73 	bl	800b7f4 <rshift>
 800bd0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd12:	3501      	adds	r5, #1
 800bd14:	42ab      	cmp	r3, r5
 800bd16:	f6ff aed4 	blt.w	800bac2 <__gethex+0x1fe>
 800bd1a:	2701      	movs	r7, #1
 800bd1c:	e7c2      	b.n	800bca4 <__gethex+0x3e0>
 800bd1e:	f016 061f 	ands.w	r6, r6, #31
 800bd22:	d0fa      	beq.n	800bd1a <__gethex+0x456>
 800bd24:	4453      	add	r3, sl
 800bd26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd2a:	f000 f9e7 	bl	800c0fc <__hi0bits>
 800bd2e:	f1c6 0620 	rsb	r6, r6, #32
 800bd32:	42b0      	cmp	r0, r6
 800bd34:	dbe7      	blt.n	800bd06 <__gethex+0x442>
 800bd36:	e7f0      	b.n	800bd1a <__gethex+0x456>
 800bd38:	0800ebd0 	.word	0x0800ebd0

0800bd3c <L_shift>:
 800bd3c:	f1c2 0208 	rsb	r2, r2, #8
 800bd40:	0092      	lsls	r2, r2, #2
 800bd42:	b570      	push	{r4, r5, r6, lr}
 800bd44:	f1c2 0620 	rsb	r6, r2, #32
 800bd48:	6843      	ldr	r3, [r0, #4]
 800bd4a:	6804      	ldr	r4, [r0, #0]
 800bd4c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd50:	432c      	orrs	r4, r5
 800bd52:	40d3      	lsrs	r3, r2
 800bd54:	6004      	str	r4, [r0, #0]
 800bd56:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd5a:	4288      	cmp	r0, r1
 800bd5c:	d3f4      	bcc.n	800bd48 <L_shift+0xc>
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}

0800bd60 <__match>:
 800bd60:	b530      	push	{r4, r5, lr}
 800bd62:	6803      	ldr	r3, [r0, #0]
 800bd64:	3301      	adds	r3, #1
 800bd66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd6a:	b914      	cbnz	r4, 800bd72 <__match+0x12>
 800bd6c:	6003      	str	r3, [r0, #0]
 800bd6e:	2001      	movs	r0, #1
 800bd70:	bd30      	pop	{r4, r5, pc}
 800bd72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd7a:	2d19      	cmp	r5, #25
 800bd7c:	bf98      	it	ls
 800bd7e:	3220      	addls	r2, #32
 800bd80:	42a2      	cmp	r2, r4
 800bd82:	d0f0      	beq.n	800bd66 <__match+0x6>
 800bd84:	2000      	movs	r0, #0
 800bd86:	e7f3      	b.n	800bd70 <__match+0x10>

0800bd88 <__hexnan>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	680b      	ldr	r3, [r1, #0]
 800bd90:	4682      	mov	sl, r0
 800bd92:	115e      	asrs	r6, r3, #5
 800bd94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd98:	f013 031f 	ands.w	r3, r3, #31
 800bd9c:	bf18      	it	ne
 800bd9e:	3604      	addne	r6, #4
 800bda0:	1f37      	subs	r7, r6, #4
 800bda2:	46b9      	mov	r9, r7
 800bda4:	463c      	mov	r4, r7
 800bda6:	46ab      	mov	fp, r5
 800bda8:	b087      	sub	sp, #28
 800bdaa:	4690      	mov	r8, r2
 800bdac:	6802      	ldr	r2, [r0, #0]
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdb4:	9502      	str	r5, [sp, #8]
 800bdb6:	7851      	ldrb	r1, [r2, #1]
 800bdb8:	1c53      	adds	r3, r2, #1
 800bdba:	9303      	str	r3, [sp, #12]
 800bdbc:	b341      	cbz	r1, 800be10 <__hexnan+0x88>
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	9205      	str	r2, [sp, #20]
 800bdc2:	9104      	str	r1, [sp, #16]
 800bdc4:	f7ff fd69 	bl	800b89a <__hexdig_fun>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d14f      	bne.n	800be6c <__hexnan+0xe4>
 800bdcc:	9904      	ldr	r1, [sp, #16]
 800bdce:	9a05      	ldr	r2, [sp, #20]
 800bdd0:	2920      	cmp	r1, #32
 800bdd2:	d818      	bhi.n	800be06 <__hexnan+0x7e>
 800bdd4:	9b02      	ldr	r3, [sp, #8]
 800bdd6:	459b      	cmp	fp, r3
 800bdd8:	dd13      	ble.n	800be02 <__hexnan+0x7a>
 800bdda:	454c      	cmp	r4, r9
 800bddc:	d206      	bcs.n	800bdec <__hexnan+0x64>
 800bdde:	2d07      	cmp	r5, #7
 800bde0:	dc04      	bgt.n	800bdec <__hexnan+0x64>
 800bde2:	462a      	mov	r2, r5
 800bde4:	4649      	mov	r1, r9
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff ffa8 	bl	800bd3c <L_shift>
 800bdec:	4544      	cmp	r4, r8
 800bdee:	d950      	bls.n	800be92 <__hexnan+0x10a>
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f1a4 0904 	sub.w	r9, r4, #4
 800bdf6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdfa:	461d      	mov	r5, r3
 800bdfc:	464c      	mov	r4, r9
 800bdfe:	f8cd b008 	str.w	fp, [sp, #8]
 800be02:	9a03      	ldr	r2, [sp, #12]
 800be04:	e7d7      	b.n	800bdb6 <__hexnan+0x2e>
 800be06:	2929      	cmp	r1, #41	; 0x29
 800be08:	d156      	bne.n	800beb8 <__hexnan+0x130>
 800be0a:	3202      	adds	r2, #2
 800be0c:	f8ca 2000 	str.w	r2, [sl]
 800be10:	f1bb 0f00 	cmp.w	fp, #0
 800be14:	d050      	beq.n	800beb8 <__hexnan+0x130>
 800be16:	454c      	cmp	r4, r9
 800be18:	d206      	bcs.n	800be28 <__hexnan+0xa0>
 800be1a:	2d07      	cmp	r5, #7
 800be1c:	dc04      	bgt.n	800be28 <__hexnan+0xa0>
 800be1e:	462a      	mov	r2, r5
 800be20:	4649      	mov	r1, r9
 800be22:	4620      	mov	r0, r4
 800be24:	f7ff ff8a 	bl	800bd3c <L_shift>
 800be28:	4544      	cmp	r4, r8
 800be2a:	d934      	bls.n	800be96 <__hexnan+0x10e>
 800be2c:	4623      	mov	r3, r4
 800be2e:	f1a8 0204 	sub.w	r2, r8, #4
 800be32:	f853 1b04 	ldr.w	r1, [r3], #4
 800be36:	429f      	cmp	r7, r3
 800be38:	f842 1f04 	str.w	r1, [r2, #4]!
 800be3c:	d2f9      	bcs.n	800be32 <__hexnan+0xaa>
 800be3e:	1b3b      	subs	r3, r7, r4
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	3304      	adds	r3, #4
 800be46:	3401      	adds	r4, #1
 800be48:	3e03      	subs	r6, #3
 800be4a:	42b4      	cmp	r4, r6
 800be4c:	bf88      	it	hi
 800be4e:	2304      	movhi	r3, #4
 800be50:	2200      	movs	r2, #0
 800be52:	4443      	add	r3, r8
 800be54:	f843 2b04 	str.w	r2, [r3], #4
 800be58:	429f      	cmp	r7, r3
 800be5a:	d2fb      	bcs.n	800be54 <__hexnan+0xcc>
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	b91b      	cbnz	r3, 800be68 <__hexnan+0xe0>
 800be60:	4547      	cmp	r7, r8
 800be62:	d127      	bne.n	800beb4 <__hexnan+0x12c>
 800be64:	2301      	movs	r3, #1
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	2005      	movs	r0, #5
 800be6a:	e026      	b.n	800beba <__hexnan+0x132>
 800be6c:	3501      	adds	r5, #1
 800be6e:	2d08      	cmp	r5, #8
 800be70:	f10b 0b01 	add.w	fp, fp, #1
 800be74:	dd06      	ble.n	800be84 <__hexnan+0xfc>
 800be76:	4544      	cmp	r4, r8
 800be78:	d9c3      	bls.n	800be02 <__hexnan+0x7a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	2501      	movs	r5, #1
 800be7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800be82:	3c04      	subs	r4, #4
 800be84:	6822      	ldr	r2, [r4, #0]
 800be86:	f000 000f 	and.w	r0, r0, #15
 800be8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be8e:	6022      	str	r2, [r4, #0]
 800be90:	e7b7      	b.n	800be02 <__hexnan+0x7a>
 800be92:	2508      	movs	r5, #8
 800be94:	e7b5      	b.n	800be02 <__hexnan+0x7a>
 800be96:	9b01      	ldr	r3, [sp, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0df      	beq.n	800be5c <__hexnan+0xd4>
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bea0:	f1c3 0320 	rsb	r3, r3, #32
 800bea4:	fa22 f303 	lsr.w	r3, r2, r3
 800bea8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800beac:	401a      	ands	r2, r3
 800beae:	f846 2c04 	str.w	r2, [r6, #-4]
 800beb2:	e7d3      	b.n	800be5c <__hexnan+0xd4>
 800beb4:	3f04      	subs	r7, #4
 800beb6:	e7d1      	b.n	800be5c <__hexnan+0xd4>
 800beb8:	2004      	movs	r0, #4
 800beba:	b007      	add	sp, #28
 800bebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bec0 <_localeconv_r>:
 800bec0:	4800      	ldr	r0, [pc, #0]	; (800bec4 <_localeconv_r+0x4>)
 800bec2:	4770      	bx	lr
 800bec4:	20000174 	.word	0x20000174

0800bec8 <malloc>:
 800bec8:	4b02      	ldr	r3, [pc, #8]	; (800bed4 <malloc+0xc>)
 800beca:	4601      	mov	r1, r0
 800becc:	6818      	ldr	r0, [r3, #0]
 800bece:	f000 bd57 	b.w	800c980 <_malloc_r>
 800bed2:	bf00      	nop
 800bed4:	2000001c 	.word	0x2000001c

0800bed8 <__ascii_mbtowc>:
 800bed8:	b082      	sub	sp, #8
 800beda:	b901      	cbnz	r1, 800bede <__ascii_mbtowc+0x6>
 800bedc:	a901      	add	r1, sp, #4
 800bede:	b142      	cbz	r2, 800bef2 <__ascii_mbtowc+0x1a>
 800bee0:	b14b      	cbz	r3, 800bef6 <__ascii_mbtowc+0x1e>
 800bee2:	7813      	ldrb	r3, [r2, #0]
 800bee4:	600b      	str	r3, [r1, #0]
 800bee6:	7812      	ldrb	r2, [r2, #0]
 800bee8:	1e10      	subs	r0, r2, #0
 800beea:	bf18      	it	ne
 800beec:	2001      	movne	r0, #1
 800beee:	b002      	add	sp, #8
 800bef0:	4770      	bx	lr
 800bef2:	4610      	mov	r0, r2
 800bef4:	e7fb      	b.n	800beee <__ascii_mbtowc+0x16>
 800bef6:	f06f 0001 	mvn.w	r0, #1
 800befa:	e7f8      	b.n	800beee <__ascii_mbtowc+0x16>

0800befc <memchr>:
 800befc:	4603      	mov	r3, r0
 800befe:	b510      	push	{r4, lr}
 800bf00:	b2c9      	uxtb	r1, r1
 800bf02:	4402      	add	r2, r0
 800bf04:	4293      	cmp	r3, r2
 800bf06:	4618      	mov	r0, r3
 800bf08:	d101      	bne.n	800bf0e <memchr+0x12>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e003      	b.n	800bf16 <memchr+0x1a>
 800bf0e:	7804      	ldrb	r4, [r0, #0]
 800bf10:	3301      	adds	r3, #1
 800bf12:	428c      	cmp	r4, r1
 800bf14:	d1f6      	bne.n	800bf04 <memchr+0x8>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <_Balloc>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	b976      	cbnz	r6, 800bf40 <_Balloc+0x28>
 800bf22:	2010      	movs	r0, #16
 800bf24:	f7ff ffd0 	bl	800bec8 <malloc>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf2c:	b920      	cbnz	r0, 800bf38 <_Balloc+0x20>
 800bf2e:	2166      	movs	r1, #102	; 0x66
 800bf30:	4b17      	ldr	r3, [pc, #92]	; (800bf90 <_Balloc+0x78>)
 800bf32:	4818      	ldr	r0, [pc, #96]	; (800bf94 <_Balloc+0x7c>)
 800bf34:	f000 ff2c 	bl	800cd90 <__assert_func>
 800bf38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf3c:	6006      	str	r6, [r0, #0]
 800bf3e:	60c6      	str	r6, [r0, #12]
 800bf40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf42:	68f3      	ldr	r3, [r6, #12]
 800bf44:	b183      	cbz	r3, 800bf68 <_Balloc+0x50>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf4e:	b9b8      	cbnz	r0, 800bf80 <_Balloc+0x68>
 800bf50:	2101      	movs	r1, #1
 800bf52:	fa01 f605 	lsl.w	r6, r1, r5
 800bf56:	1d72      	adds	r2, r6, #5
 800bf58:	4620      	mov	r0, r4
 800bf5a:	0092      	lsls	r2, r2, #2
 800bf5c:	f000 fc94 	bl	800c888 <_calloc_r>
 800bf60:	b160      	cbz	r0, 800bf7c <_Balloc+0x64>
 800bf62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf66:	e00e      	b.n	800bf86 <_Balloc+0x6e>
 800bf68:	2221      	movs	r2, #33	; 0x21
 800bf6a:	2104      	movs	r1, #4
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 fc8b 	bl	800c888 <_calloc_r>
 800bf72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf74:	60f0      	str	r0, [r6, #12]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e4      	bne.n	800bf46 <_Balloc+0x2e>
 800bf7c:	2000      	movs	r0, #0
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	6802      	ldr	r2, [r0, #0]
 800bf82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf86:	2300      	movs	r3, #0
 800bf88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf8c:	e7f7      	b.n	800bf7e <_Balloc+0x66>
 800bf8e:	bf00      	nop
 800bf90:	0800eb5e 	.word	0x0800eb5e
 800bf94:	0800ec5c 	.word	0x0800ec5c

0800bf98 <_Bfree>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	b976      	cbnz	r6, 800bfc0 <_Bfree+0x28>
 800bfa2:	2010      	movs	r0, #16
 800bfa4:	f7ff ff90 	bl	800bec8 <malloc>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	6268      	str	r0, [r5, #36]	; 0x24
 800bfac:	b920      	cbnz	r0, 800bfb8 <_Bfree+0x20>
 800bfae:	218a      	movs	r1, #138	; 0x8a
 800bfb0:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <_Bfree+0x3c>)
 800bfb2:	4809      	ldr	r0, [pc, #36]	; (800bfd8 <_Bfree+0x40>)
 800bfb4:	f000 feec 	bl	800cd90 <__assert_func>
 800bfb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfbc:	6006      	str	r6, [r0, #0]
 800bfbe:	60c6      	str	r6, [r0, #12]
 800bfc0:	b13c      	cbz	r4, 800bfd2 <_Bfree+0x3a>
 800bfc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfc4:	6862      	ldr	r2, [r4, #4]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfcc:	6021      	str	r1, [r4, #0]
 800bfce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	0800eb5e 	.word	0x0800eb5e
 800bfd8:	0800ec5c 	.word	0x0800ec5c

0800bfdc <__multadd>:
 800bfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe0:	4607      	mov	r7, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	461e      	mov	r6, r3
 800bfe6:	2000      	movs	r0, #0
 800bfe8:	690d      	ldr	r5, [r1, #16]
 800bfea:	f101 0c14 	add.w	ip, r1, #20
 800bfee:	f8dc 3000 	ldr.w	r3, [ip]
 800bff2:	3001      	adds	r0, #1
 800bff4:	b299      	uxth	r1, r3
 800bff6:	fb02 6101 	mla	r1, r2, r1, r6
 800bffa:	0c1e      	lsrs	r6, r3, #16
 800bffc:	0c0b      	lsrs	r3, r1, #16
 800bffe:	fb02 3306 	mla	r3, r2, r6, r3
 800c002:	b289      	uxth	r1, r1
 800c004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c008:	4285      	cmp	r5, r0
 800c00a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c00e:	f84c 1b04 	str.w	r1, [ip], #4
 800c012:	dcec      	bgt.n	800bfee <__multadd+0x12>
 800c014:	b30e      	cbz	r6, 800c05a <__multadd+0x7e>
 800c016:	68a3      	ldr	r3, [r4, #8]
 800c018:	42ab      	cmp	r3, r5
 800c01a:	dc19      	bgt.n	800c050 <__multadd+0x74>
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4638      	mov	r0, r7
 800c020:	3101      	adds	r1, #1
 800c022:	f7ff ff79 	bl	800bf18 <_Balloc>
 800c026:	4680      	mov	r8, r0
 800c028:	b928      	cbnz	r0, 800c036 <__multadd+0x5a>
 800c02a:	4602      	mov	r2, r0
 800c02c:	21b5      	movs	r1, #181	; 0xb5
 800c02e:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <__multadd+0x84>)
 800c030:	480c      	ldr	r0, [pc, #48]	; (800c064 <__multadd+0x88>)
 800c032:	f000 fead 	bl	800cd90 <__assert_func>
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	f104 010c 	add.w	r1, r4, #12
 800c03c:	3202      	adds	r2, #2
 800c03e:	0092      	lsls	r2, r2, #2
 800c040:	300c      	adds	r0, #12
 800c042:	f7fd f81d 	bl	8009080 <memcpy>
 800c046:	4621      	mov	r1, r4
 800c048:	4638      	mov	r0, r7
 800c04a:	f7ff ffa5 	bl	800bf98 <_Bfree>
 800c04e:	4644      	mov	r4, r8
 800c050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c054:	3501      	adds	r5, #1
 800c056:	615e      	str	r6, [r3, #20]
 800c058:	6125      	str	r5, [r4, #16]
 800c05a:	4620      	mov	r0, r4
 800c05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c060:	0800ebd0 	.word	0x0800ebd0
 800c064:	0800ec5c 	.word	0x0800ec5c

0800c068 <__s2b>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4615      	mov	r5, r2
 800c06e:	2209      	movs	r2, #9
 800c070:	461f      	mov	r7, r3
 800c072:	3308      	adds	r3, #8
 800c074:	460c      	mov	r4, r1
 800c076:	fb93 f3f2 	sdiv	r3, r3, r2
 800c07a:	4606      	mov	r6, r0
 800c07c:	2201      	movs	r2, #1
 800c07e:	2100      	movs	r1, #0
 800c080:	429a      	cmp	r2, r3
 800c082:	db09      	blt.n	800c098 <__s2b+0x30>
 800c084:	4630      	mov	r0, r6
 800c086:	f7ff ff47 	bl	800bf18 <_Balloc>
 800c08a:	b940      	cbnz	r0, 800c09e <__s2b+0x36>
 800c08c:	4602      	mov	r2, r0
 800c08e:	21ce      	movs	r1, #206	; 0xce
 800c090:	4b18      	ldr	r3, [pc, #96]	; (800c0f4 <__s2b+0x8c>)
 800c092:	4819      	ldr	r0, [pc, #100]	; (800c0f8 <__s2b+0x90>)
 800c094:	f000 fe7c 	bl	800cd90 <__assert_func>
 800c098:	0052      	lsls	r2, r2, #1
 800c09a:	3101      	adds	r1, #1
 800c09c:	e7f0      	b.n	800c080 <__s2b+0x18>
 800c09e:	9b08      	ldr	r3, [sp, #32]
 800c0a0:	2d09      	cmp	r5, #9
 800c0a2:	6143      	str	r3, [r0, #20]
 800c0a4:	f04f 0301 	mov.w	r3, #1
 800c0a8:	6103      	str	r3, [r0, #16]
 800c0aa:	dd16      	ble.n	800c0da <__s2b+0x72>
 800c0ac:	f104 0909 	add.w	r9, r4, #9
 800c0b0:	46c8      	mov	r8, r9
 800c0b2:	442c      	add	r4, r5
 800c0b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c0b8:	4601      	mov	r1, r0
 800c0ba:	220a      	movs	r2, #10
 800c0bc:	4630      	mov	r0, r6
 800c0be:	3b30      	subs	r3, #48	; 0x30
 800c0c0:	f7ff ff8c 	bl	800bfdc <__multadd>
 800c0c4:	45a0      	cmp	r8, r4
 800c0c6:	d1f5      	bne.n	800c0b4 <__s2b+0x4c>
 800c0c8:	f1a5 0408 	sub.w	r4, r5, #8
 800c0cc:	444c      	add	r4, r9
 800c0ce:	1b2d      	subs	r5, r5, r4
 800c0d0:	1963      	adds	r3, r4, r5
 800c0d2:	42bb      	cmp	r3, r7
 800c0d4:	db04      	blt.n	800c0e0 <__s2b+0x78>
 800c0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0da:	2509      	movs	r5, #9
 800c0dc:	340a      	adds	r4, #10
 800c0de:	e7f6      	b.n	800c0ce <__s2b+0x66>
 800c0e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	220a      	movs	r2, #10
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	3b30      	subs	r3, #48	; 0x30
 800c0ec:	f7ff ff76 	bl	800bfdc <__multadd>
 800c0f0:	e7ee      	b.n	800c0d0 <__s2b+0x68>
 800c0f2:	bf00      	nop
 800c0f4:	0800ebd0 	.word	0x0800ebd0
 800c0f8:	0800ec5c 	.word	0x0800ec5c

0800c0fc <__hi0bits>:
 800c0fc:	0c02      	lsrs	r2, r0, #16
 800c0fe:	0412      	lsls	r2, r2, #16
 800c100:	4603      	mov	r3, r0
 800c102:	b9ca      	cbnz	r2, 800c138 <__hi0bits+0x3c>
 800c104:	0403      	lsls	r3, r0, #16
 800c106:	2010      	movs	r0, #16
 800c108:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c10c:	bf04      	itt	eq
 800c10e:	021b      	lsleq	r3, r3, #8
 800c110:	3008      	addeq	r0, #8
 800c112:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c116:	bf04      	itt	eq
 800c118:	011b      	lsleq	r3, r3, #4
 800c11a:	3004      	addeq	r0, #4
 800c11c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c120:	bf04      	itt	eq
 800c122:	009b      	lsleq	r3, r3, #2
 800c124:	3002      	addeq	r0, #2
 800c126:	2b00      	cmp	r3, #0
 800c128:	db05      	blt.n	800c136 <__hi0bits+0x3a>
 800c12a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c12e:	f100 0001 	add.w	r0, r0, #1
 800c132:	bf08      	it	eq
 800c134:	2020      	moveq	r0, #32
 800c136:	4770      	bx	lr
 800c138:	2000      	movs	r0, #0
 800c13a:	e7e5      	b.n	800c108 <__hi0bits+0xc>

0800c13c <__lo0bits>:
 800c13c:	6803      	ldr	r3, [r0, #0]
 800c13e:	4602      	mov	r2, r0
 800c140:	f013 0007 	ands.w	r0, r3, #7
 800c144:	d00b      	beq.n	800c15e <__lo0bits+0x22>
 800c146:	07d9      	lsls	r1, r3, #31
 800c148:	d421      	bmi.n	800c18e <__lo0bits+0x52>
 800c14a:	0798      	lsls	r0, r3, #30
 800c14c:	bf49      	itett	mi
 800c14e:	085b      	lsrmi	r3, r3, #1
 800c150:	089b      	lsrpl	r3, r3, #2
 800c152:	2001      	movmi	r0, #1
 800c154:	6013      	strmi	r3, [r2, #0]
 800c156:	bf5c      	itt	pl
 800c158:	2002      	movpl	r0, #2
 800c15a:	6013      	strpl	r3, [r2, #0]
 800c15c:	4770      	bx	lr
 800c15e:	b299      	uxth	r1, r3
 800c160:	b909      	cbnz	r1, 800c166 <__lo0bits+0x2a>
 800c162:	2010      	movs	r0, #16
 800c164:	0c1b      	lsrs	r3, r3, #16
 800c166:	b2d9      	uxtb	r1, r3
 800c168:	b909      	cbnz	r1, 800c16e <__lo0bits+0x32>
 800c16a:	3008      	adds	r0, #8
 800c16c:	0a1b      	lsrs	r3, r3, #8
 800c16e:	0719      	lsls	r1, r3, #28
 800c170:	bf04      	itt	eq
 800c172:	091b      	lsreq	r3, r3, #4
 800c174:	3004      	addeq	r0, #4
 800c176:	0799      	lsls	r1, r3, #30
 800c178:	bf04      	itt	eq
 800c17a:	089b      	lsreq	r3, r3, #2
 800c17c:	3002      	addeq	r0, #2
 800c17e:	07d9      	lsls	r1, r3, #31
 800c180:	d403      	bmi.n	800c18a <__lo0bits+0x4e>
 800c182:	085b      	lsrs	r3, r3, #1
 800c184:	f100 0001 	add.w	r0, r0, #1
 800c188:	d003      	beq.n	800c192 <__lo0bits+0x56>
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	4770      	bx	lr
 800c18e:	2000      	movs	r0, #0
 800c190:	4770      	bx	lr
 800c192:	2020      	movs	r0, #32
 800c194:	4770      	bx	lr
	...

0800c198 <__i2b>:
 800c198:	b510      	push	{r4, lr}
 800c19a:	460c      	mov	r4, r1
 800c19c:	2101      	movs	r1, #1
 800c19e:	f7ff febb 	bl	800bf18 <_Balloc>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	b928      	cbnz	r0, 800c1b2 <__i2b+0x1a>
 800c1a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1aa:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <__i2b+0x24>)
 800c1ac:	4804      	ldr	r0, [pc, #16]	; (800c1c0 <__i2b+0x28>)
 800c1ae:	f000 fdef 	bl	800cd90 <__assert_func>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	6144      	str	r4, [r0, #20]
 800c1b6:	6103      	str	r3, [r0, #16]
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0800ebd0 	.word	0x0800ebd0
 800c1c0:	0800ec5c 	.word	0x0800ec5c

0800c1c4 <__multiply>:
 800c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c8:	4691      	mov	r9, r2
 800c1ca:	690a      	ldr	r2, [r1, #16]
 800c1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bfbe      	ittt	lt
 800c1d6:	460b      	movlt	r3, r1
 800c1d8:	464c      	movlt	r4, r9
 800c1da:	4699      	movlt	r9, r3
 800c1dc:	6927      	ldr	r7, [r4, #16]
 800c1de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	6861      	ldr	r1, [r4, #4]
 800c1e6:	eb07 060a 	add.w	r6, r7, sl
 800c1ea:	42b3      	cmp	r3, r6
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	bfb8      	it	lt
 800c1f0:	3101      	addlt	r1, #1
 800c1f2:	f7ff fe91 	bl	800bf18 <_Balloc>
 800c1f6:	b930      	cbnz	r0, 800c206 <__multiply+0x42>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	f240 115d 	movw	r1, #349	; 0x15d
 800c1fe:	4b43      	ldr	r3, [pc, #268]	; (800c30c <__multiply+0x148>)
 800c200:	4843      	ldr	r0, [pc, #268]	; (800c310 <__multiply+0x14c>)
 800c202:	f000 fdc5 	bl	800cd90 <__assert_func>
 800c206:	f100 0514 	add.w	r5, r0, #20
 800c20a:	462b      	mov	r3, r5
 800c20c:	2200      	movs	r2, #0
 800c20e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c212:	4543      	cmp	r3, r8
 800c214:	d321      	bcc.n	800c25a <__multiply+0x96>
 800c216:	f104 0314 	add.w	r3, r4, #20
 800c21a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c21e:	f109 0314 	add.w	r3, r9, #20
 800c222:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c226:	9202      	str	r2, [sp, #8]
 800c228:	1b3a      	subs	r2, r7, r4
 800c22a:	3a15      	subs	r2, #21
 800c22c:	f022 0203 	bic.w	r2, r2, #3
 800c230:	3204      	adds	r2, #4
 800c232:	f104 0115 	add.w	r1, r4, #21
 800c236:	428f      	cmp	r7, r1
 800c238:	bf38      	it	cc
 800c23a:	2204      	movcc	r2, #4
 800c23c:	9201      	str	r2, [sp, #4]
 800c23e:	9a02      	ldr	r2, [sp, #8]
 800c240:	9303      	str	r3, [sp, #12]
 800c242:	429a      	cmp	r2, r3
 800c244:	d80c      	bhi.n	800c260 <__multiply+0x9c>
 800c246:	2e00      	cmp	r6, #0
 800c248:	dd03      	ble.n	800c252 <__multiply+0x8e>
 800c24a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d059      	beq.n	800c306 <__multiply+0x142>
 800c252:	6106      	str	r6, [r0, #16]
 800c254:	b005      	add	sp, #20
 800c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25a:	f843 2b04 	str.w	r2, [r3], #4
 800c25e:	e7d8      	b.n	800c212 <__multiply+0x4e>
 800c260:	f8b3 a000 	ldrh.w	sl, [r3]
 800c264:	f1ba 0f00 	cmp.w	sl, #0
 800c268:	d023      	beq.n	800c2b2 <__multiply+0xee>
 800c26a:	46a9      	mov	r9, r5
 800c26c:	f04f 0c00 	mov.w	ip, #0
 800c270:	f104 0e14 	add.w	lr, r4, #20
 800c274:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c278:	f8d9 1000 	ldr.w	r1, [r9]
 800c27c:	fa1f fb82 	uxth.w	fp, r2
 800c280:	b289      	uxth	r1, r1
 800c282:	fb0a 110b 	mla	r1, sl, fp, r1
 800c286:	4461      	add	r1, ip
 800c288:	f8d9 c000 	ldr.w	ip, [r9]
 800c28c:	0c12      	lsrs	r2, r2, #16
 800c28e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c292:	fb0a c202 	mla	r2, sl, r2, ip
 800c296:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c29a:	b289      	uxth	r1, r1
 800c29c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2a0:	4577      	cmp	r7, lr
 800c2a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2a6:	f849 1b04 	str.w	r1, [r9], #4
 800c2aa:	d8e3      	bhi.n	800c274 <__multiply+0xb0>
 800c2ac:	9a01      	ldr	r2, [sp, #4]
 800c2ae:	f845 c002 	str.w	ip, [r5, r2]
 800c2b2:	9a03      	ldr	r2, [sp, #12]
 800c2b4:	3304      	adds	r3, #4
 800c2b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2ba:	f1b9 0f00 	cmp.w	r9, #0
 800c2be:	d020      	beq.n	800c302 <__multiply+0x13e>
 800c2c0:	46ae      	mov	lr, r5
 800c2c2:	f04f 0a00 	mov.w	sl, #0
 800c2c6:	6829      	ldr	r1, [r5, #0]
 800c2c8:	f104 0c14 	add.w	ip, r4, #20
 800c2cc:	f8bc b000 	ldrh.w	fp, [ip]
 800c2d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2d4:	b289      	uxth	r1, r1
 800c2d6:	fb09 220b 	mla	r2, r9, fp, r2
 800c2da:	4492      	add	sl, r2
 800c2dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2e0:	f84e 1b04 	str.w	r1, [lr], #4
 800c2e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2e8:	f8be 1000 	ldrh.w	r1, [lr]
 800c2ec:	0c12      	lsrs	r2, r2, #16
 800c2ee:	fb09 1102 	mla	r1, r9, r2, r1
 800c2f2:	4567      	cmp	r7, ip
 800c2f4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2fc:	d8e6      	bhi.n	800c2cc <__multiply+0x108>
 800c2fe:	9a01      	ldr	r2, [sp, #4]
 800c300:	50a9      	str	r1, [r5, r2]
 800c302:	3504      	adds	r5, #4
 800c304:	e79b      	b.n	800c23e <__multiply+0x7a>
 800c306:	3e01      	subs	r6, #1
 800c308:	e79d      	b.n	800c246 <__multiply+0x82>
 800c30a:	bf00      	nop
 800c30c:	0800ebd0 	.word	0x0800ebd0
 800c310:	0800ec5c 	.word	0x0800ec5c

0800c314 <__pow5mult>:
 800c314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c318:	4615      	mov	r5, r2
 800c31a:	f012 0203 	ands.w	r2, r2, #3
 800c31e:	4606      	mov	r6, r0
 800c320:	460f      	mov	r7, r1
 800c322:	d007      	beq.n	800c334 <__pow5mult+0x20>
 800c324:	4c25      	ldr	r4, [pc, #148]	; (800c3bc <__pow5mult+0xa8>)
 800c326:	3a01      	subs	r2, #1
 800c328:	2300      	movs	r3, #0
 800c32a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c32e:	f7ff fe55 	bl	800bfdc <__multadd>
 800c332:	4607      	mov	r7, r0
 800c334:	10ad      	asrs	r5, r5, #2
 800c336:	d03d      	beq.n	800c3b4 <__pow5mult+0xa0>
 800c338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c33a:	b97c      	cbnz	r4, 800c35c <__pow5mult+0x48>
 800c33c:	2010      	movs	r0, #16
 800c33e:	f7ff fdc3 	bl	800bec8 <malloc>
 800c342:	4602      	mov	r2, r0
 800c344:	6270      	str	r0, [r6, #36]	; 0x24
 800c346:	b928      	cbnz	r0, 800c354 <__pow5mult+0x40>
 800c348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c34c:	4b1c      	ldr	r3, [pc, #112]	; (800c3c0 <__pow5mult+0xac>)
 800c34e:	481d      	ldr	r0, [pc, #116]	; (800c3c4 <__pow5mult+0xb0>)
 800c350:	f000 fd1e 	bl	800cd90 <__assert_func>
 800c354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c358:	6004      	str	r4, [r0, #0]
 800c35a:	60c4      	str	r4, [r0, #12]
 800c35c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c364:	b94c      	cbnz	r4, 800c37a <__pow5mult+0x66>
 800c366:	f240 2171 	movw	r1, #625	; 0x271
 800c36a:	4630      	mov	r0, r6
 800c36c:	f7ff ff14 	bl	800c198 <__i2b>
 800c370:	2300      	movs	r3, #0
 800c372:	4604      	mov	r4, r0
 800c374:	f8c8 0008 	str.w	r0, [r8, #8]
 800c378:	6003      	str	r3, [r0, #0]
 800c37a:	f04f 0900 	mov.w	r9, #0
 800c37e:	07eb      	lsls	r3, r5, #31
 800c380:	d50a      	bpl.n	800c398 <__pow5mult+0x84>
 800c382:	4639      	mov	r1, r7
 800c384:	4622      	mov	r2, r4
 800c386:	4630      	mov	r0, r6
 800c388:	f7ff ff1c 	bl	800c1c4 <__multiply>
 800c38c:	4680      	mov	r8, r0
 800c38e:	4639      	mov	r1, r7
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff fe01 	bl	800bf98 <_Bfree>
 800c396:	4647      	mov	r7, r8
 800c398:	106d      	asrs	r5, r5, #1
 800c39a:	d00b      	beq.n	800c3b4 <__pow5mult+0xa0>
 800c39c:	6820      	ldr	r0, [r4, #0]
 800c39e:	b938      	cbnz	r0, 800c3b0 <__pow5mult+0x9c>
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f7ff ff0d 	bl	800c1c4 <__multiply>
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	f8c0 9000 	str.w	r9, [r0]
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	e7e4      	b.n	800c37e <__pow5mult+0x6a>
 800c3b4:	4638      	mov	r0, r7
 800c3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800eda8 	.word	0x0800eda8
 800c3c0:	0800eb5e 	.word	0x0800eb5e
 800c3c4:	0800ec5c 	.word	0x0800ec5c

0800c3c8 <__lshift>:
 800c3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	4607      	mov	r7, r0
 800c3d0:	4691      	mov	r9, r2
 800c3d2:	6923      	ldr	r3, [r4, #16]
 800c3d4:	6849      	ldr	r1, [r1, #4]
 800c3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3da:	68a3      	ldr	r3, [r4, #8]
 800c3dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3e0:	f108 0601 	add.w	r6, r8, #1
 800c3e4:	42b3      	cmp	r3, r6
 800c3e6:	db0b      	blt.n	800c400 <__lshift+0x38>
 800c3e8:	4638      	mov	r0, r7
 800c3ea:	f7ff fd95 	bl	800bf18 <_Balloc>
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	b948      	cbnz	r0, 800c406 <__lshift+0x3e>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3f8:	4b29      	ldr	r3, [pc, #164]	; (800c4a0 <__lshift+0xd8>)
 800c3fa:	482a      	ldr	r0, [pc, #168]	; (800c4a4 <__lshift+0xdc>)
 800c3fc:	f000 fcc8 	bl	800cd90 <__assert_func>
 800c400:	3101      	adds	r1, #1
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	e7ee      	b.n	800c3e4 <__lshift+0x1c>
 800c406:	2300      	movs	r3, #0
 800c408:	f100 0114 	add.w	r1, r0, #20
 800c40c:	f100 0210 	add.w	r2, r0, #16
 800c410:	4618      	mov	r0, r3
 800c412:	4553      	cmp	r3, sl
 800c414:	db37      	blt.n	800c486 <__lshift+0xbe>
 800c416:	6920      	ldr	r0, [r4, #16]
 800c418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c41c:	f104 0314 	add.w	r3, r4, #20
 800c420:	f019 091f 	ands.w	r9, r9, #31
 800c424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c428:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c42c:	d02f      	beq.n	800c48e <__lshift+0xc6>
 800c42e:	468a      	mov	sl, r1
 800c430:	f04f 0c00 	mov.w	ip, #0
 800c434:	f1c9 0e20 	rsb	lr, r9, #32
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	fa02 f209 	lsl.w	r2, r2, r9
 800c43e:	ea42 020c 	orr.w	r2, r2, ip
 800c442:	f84a 2b04 	str.w	r2, [sl], #4
 800c446:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44a:	4298      	cmp	r0, r3
 800c44c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c450:	d8f2      	bhi.n	800c438 <__lshift+0x70>
 800c452:	1b03      	subs	r3, r0, r4
 800c454:	3b15      	subs	r3, #21
 800c456:	f023 0303 	bic.w	r3, r3, #3
 800c45a:	3304      	adds	r3, #4
 800c45c:	f104 0215 	add.w	r2, r4, #21
 800c460:	4290      	cmp	r0, r2
 800c462:	bf38      	it	cc
 800c464:	2304      	movcc	r3, #4
 800c466:	f841 c003 	str.w	ip, [r1, r3]
 800c46a:	f1bc 0f00 	cmp.w	ip, #0
 800c46e:	d001      	beq.n	800c474 <__lshift+0xac>
 800c470:	f108 0602 	add.w	r6, r8, #2
 800c474:	3e01      	subs	r6, #1
 800c476:	4638      	mov	r0, r7
 800c478:	4621      	mov	r1, r4
 800c47a:	612e      	str	r6, [r5, #16]
 800c47c:	f7ff fd8c 	bl	800bf98 <_Bfree>
 800c480:	4628      	mov	r0, r5
 800c482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c486:	f842 0f04 	str.w	r0, [r2, #4]!
 800c48a:	3301      	adds	r3, #1
 800c48c:	e7c1      	b.n	800c412 <__lshift+0x4a>
 800c48e:	3904      	subs	r1, #4
 800c490:	f853 2b04 	ldr.w	r2, [r3], #4
 800c494:	4298      	cmp	r0, r3
 800c496:	f841 2f04 	str.w	r2, [r1, #4]!
 800c49a:	d8f9      	bhi.n	800c490 <__lshift+0xc8>
 800c49c:	e7ea      	b.n	800c474 <__lshift+0xac>
 800c49e:	bf00      	nop
 800c4a0:	0800ebd0 	.word	0x0800ebd0
 800c4a4:	0800ec5c 	.word	0x0800ec5c

0800c4a8 <__mcmp>:
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	690a      	ldr	r2, [r1, #16]
 800c4ac:	6900      	ldr	r0, [r0, #16]
 800c4ae:	b530      	push	{r4, r5, lr}
 800c4b0:	1a80      	subs	r0, r0, r2
 800c4b2:	d10d      	bne.n	800c4d0 <__mcmp+0x28>
 800c4b4:	3314      	adds	r3, #20
 800c4b6:	3114      	adds	r1, #20
 800c4b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4c8:	4295      	cmp	r5, r2
 800c4ca:	d002      	beq.n	800c4d2 <__mcmp+0x2a>
 800c4cc:	d304      	bcc.n	800c4d8 <__mcmp+0x30>
 800c4ce:	2001      	movs	r0, #1
 800c4d0:	bd30      	pop	{r4, r5, pc}
 800c4d2:	42a3      	cmp	r3, r4
 800c4d4:	d3f4      	bcc.n	800c4c0 <__mcmp+0x18>
 800c4d6:	e7fb      	b.n	800c4d0 <__mcmp+0x28>
 800c4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4dc:	e7f8      	b.n	800c4d0 <__mcmp+0x28>
	...

0800c4e0 <__mdiff>:
 800c4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	4614      	mov	r4, r2
 800c4ee:	f7ff ffdb 	bl	800c4a8 <__mcmp>
 800c4f2:	1e06      	subs	r6, r0, #0
 800c4f4:	d111      	bne.n	800c51a <__mdiff+0x3a>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff fd0d 	bl	800bf18 <_Balloc>
 800c4fe:	4602      	mov	r2, r0
 800c500:	b928      	cbnz	r0, 800c50e <__mdiff+0x2e>
 800c502:	f240 2132 	movw	r1, #562	; 0x232
 800c506:	4b3a      	ldr	r3, [pc, #232]	; (800c5f0 <__mdiff+0x110>)
 800c508:	483a      	ldr	r0, [pc, #232]	; (800c5f4 <__mdiff+0x114>)
 800c50a:	f000 fc41 	bl	800cd90 <__assert_func>
 800c50e:	2301      	movs	r3, #1
 800c510:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c514:	4610      	mov	r0, r2
 800c516:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51a:	bfa4      	itt	ge
 800c51c:	4623      	movge	r3, r4
 800c51e:	462c      	movge	r4, r5
 800c520:	4638      	mov	r0, r7
 800c522:	6861      	ldr	r1, [r4, #4]
 800c524:	bfa6      	itte	ge
 800c526:	461d      	movge	r5, r3
 800c528:	2600      	movge	r6, #0
 800c52a:	2601      	movlt	r6, #1
 800c52c:	f7ff fcf4 	bl	800bf18 <_Balloc>
 800c530:	4602      	mov	r2, r0
 800c532:	b918      	cbnz	r0, 800c53c <__mdiff+0x5c>
 800c534:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c538:	4b2d      	ldr	r3, [pc, #180]	; (800c5f0 <__mdiff+0x110>)
 800c53a:	e7e5      	b.n	800c508 <__mdiff+0x28>
 800c53c:	f102 0814 	add.w	r8, r2, #20
 800c540:	46c2      	mov	sl, r8
 800c542:	f04f 0c00 	mov.w	ip, #0
 800c546:	6927      	ldr	r7, [r4, #16]
 800c548:	60c6      	str	r6, [r0, #12]
 800c54a:	692e      	ldr	r6, [r5, #16]
 800c54c:	f104 0014 	add.w	r0, r4, #20
 800c550:	f105 0914 	add.w	r9, r5, #20
 800c554:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c55c:	3410      	adds	r4, #16
 800c55e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c562:	f859 3b04 	ldr.w	r3, [r9], #4
 800c566:	fa1f f18b 	uxth.w	r1, fp
 800c56a:	448c      	add	ip, r1
 800c56c:	b299      	uxth	r1, r3
 800c56e:	0c1b      	lsrs	r3, r3, #16
 800c570:	ebac 0101 	sub.w	r1, ip, r1
 800c574:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c578:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c57c:	b289      	uxth	r1, r1
 800c57e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c582:	454e      	cmp	r6, r9
 800c584:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c588:	f84a 3b04 	str.w	r3, [sl], #4
 800c58c:	d8e7      	bhi.n	800c55e <__mdiff+0x7e>
 800c58e:	1b73      	subs	r3, r6, r5
 800c590:	3b15      	subs	r3, #21
 800c592:	f023 0303 	bic.w	r3, r3, #3
 800c596:	3515      	adds	r5, #21
 800c598:	3304      	adds	r3, #4
 800c59a:	42ae      	cmp	r6, r5
 800c59c:	bf38      	it	cc
 800c59e:	2304      	movcc	r3, #4
 800c5a0:	4418      	add	r0, r3
 800c5a2:	4443      	add	r3, r8
 800c5a4:	461e      	mov	r6, r3
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	4575      	cmp	r5, lr
 800c5aa:	d30e      	bcc.n	800c5ca <__mdiff+0xea>
 800c5ac:	f10e 0103 	add.w	r1, lr, #3
 800c5b0:	1a09      	subs	r1, r1, r0
 800c5b2:	f021 0103 	bic.w	r1, r1, #3
 800c5b6:	3803      	subs	r0, #3
 800c5b8:	4586      	cmp	lr, r0
 800c5ba:	bf38      	it	cc
 800c5bc:	2100      	movcc	r1, #0
 800c5be:	4419      	add	r1, r3
 800c5c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c5c4:	b18b      	cbz	r3, 800c5ea <__mdiff+0x10a>
 800c5c6:	6117      	str	r7, [r2, #16]
 800c5c8:	e7a4      	b.n	800c514 <__mdiff+0x34>
 800c5ca:	f855 8b04 	ldr.w	r8, [r5], #4
 800c5ce:	fa1f f188 	uxth.w	r1, r8
 800c5d2:	4461      	add	r1, ip
 800c5d4:	140c      	asrs	r4, r1, #16
 800c5d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5da:	b289      	uxth	r1, r1
 800c5dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c5e0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c5e4:	f846 1b04 	str.w	r1, [r6], #4
 800c5e8:	e7de      	b.n	800c5a8 <__mdiff+0xc8>
 800c5ea:	3f01      	subs	r7, #1
 800c5ec:	e7e8      	b.n	800c5c0 <__mdiff+0xe0>
 800c5ee:	bf00      	nop
 800c5f0:	0800ebd0 	.word	0x0800ebd0
 800c5f4:	0800ec5c 	.word	0x0800ec5c

0800c5f8 <__ulp>:
 800c5f8:	4b11      	ldr	r3, [pc, #68]	; (800c640 <__ulp+0x48>)
 800c5fa:	400b      	ands	r3, r1
 800c5fc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c600:	2b00      	cmp	r3, #0
 800c602:	dd02      	ble.n	800c60a <__ulp+0x12>
 800c604:	2000      	movs	r0, #0
 800c606:	4619      	mov	r1, r3
 800c608:	4770      	bx	lr
 800c60a:	425b      	negs	r3, r3
 800c60c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c610:	f04f 0000 	mov.w	r0, #0
 800c614:	f04f 0100 	mov.w	r1, #0
 800c618:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c61c:	da04      	bge.n	800c628 <__ulp+0x30>
 800c61e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c622:	fa43 f102 	asr.w	r1, r3, r2
 800c626:	4770      	bx	lr
 800c628:	f1a2 0314 	sub.w	r3, r2, #20
 800c62c:	2b1e      	cmp	r3, #30
 800c62e:	bfd6      	itet	le
 800c630:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c634:	2301      	movgt	r3, #1
 800c636:	fa22 f303 	lsrle.w	r3, r2, r3
 800c63a:	4618      	mov	r0, r3
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	7ff00000 	.word	0x7ff00000

0800c644 <__b2d>:
 800c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c648:	6907      	ldr	r7, [r0, #16]
 800c64a:	f100 0914 	add.w	r9, r0, #20
 800c64e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c652:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c656:	f1a7 0804 	sub.w	r8, r7, #4
 800c65a:	4630      	mov	r0, r6
 800c65c:	f7ff fd4e 	bl	800c0fc <__hi0bits>
 800c660:	f1c0 0320 	rsb	r3, r0, #32
 800c664:	280a      	cmp	r0, #10
 800c666:	600b      	str	r3, [r1, #0]
 800c668:	491f      	ldr	r1, [pc, #124]	; (800c6e8 <__b2d+0xa4>)
 800c66a:	dc17      	bgt.n	800c69c <__b2d+0x58>
 800c66c:	45c1      	cmp	r9, r8
 800c66e:	bf28      	it	cs
 800c670:	2200      	movcs	r2, #0
 800c672:	f1c0 0c0b 	rsb	ip, r0, #11
 800c676:	fa26 f30c 	lsr.w	r3, r6, ip
 800c67a:	bf38      	it	cc
 800c67c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c680:	ea43 0501 	orr.w	r5, r3, r1
 800c684:	f100 0315 	add.w	r3, r0, #21
 800c688:	fa06 f303 	lsl.w	r3, r6, r3
 800c68c:	fa22 f20c 	lsr.w	r2, r2, ip
 800c690:	ea43 0402 	orr.w	r4, r3, r2
 800c694:	4620      	mov	r0, r4
 800c696:	4629      	mov	r1, r5
 800c698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69c:	45c1      	cmp	r9, r8
 800c69e:	bf2e      	itee	cs
 800c6a0:	2200      	movcs	r2, #0
 800c6a2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c6a6:	f1a7 0808 	subcc.w	r8, r7, #8
 800c6aa:	f1b0 030b 	subs.w	r3, r0, #11
 800c6ae:	d016      	beq.n	800c6de <__b2d+0x9a>
 800c6b0:	f1c3 0720 	rsb	r7, r3, #32
 800c6b4:	fa22 f107 	lsr.w	r1, r2, r7
 800c6b8:	45c8      	cmp	r8, r9
 800c6ba:	fa06 f603 	lsl.w	r6, r6, r3
 800c6be:	ea46 0601 	orr.w	r6, r6, r1
 800c6c2:	bf94      	ite	ls
 800c6c4:	2100      	movls	r1, #0
 800c6c6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c6ca:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c6ce:	fa02 f003 	lsl.w	r0, r2, r3
 800c6d2:	40f9      	lsrs	r1, r7
 800c6d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c6d8:	ea40 0401 	orr.w	r4, r0, r1
 800c6dc:	e7da      	b.n	800c694 <__b2d+0x50>
 800c6de:	4614      	mov	r4, r2
 800c6e0:	ea46 0501 	orr.w	r5, r6, r1
 800c6e4:	e7d6      	b.n	800c694 <__b2d+0x50>
 800c6e6:	bf00      	nop
 800c6e8:	3ff00000 	.word	0x3ff00000

0800c6ec <__d2b>:
 800c6ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c6f6:	4690      	mov	r8, r2
 800c6f8:	461d      	mov	r5, r3
 800c6fa:	f7ff fc0d 	bl	800bf18 <_Balloc>
 800c6fe:	4604      	mov	r4, r0
 800c700:	b930      	cbnz	r0, 800c710 <__d2b+0x24>
 800c702:	4602      	mov	r2, r0
 800c704:	f240 310a 	movw	r1, #778	; 0x30a
 800c708:	4b24      	ldr	r3, [pc, #144]	; (800c79c <__d2b+0xb0>)
 800c70a:	4825      	ldr	r0, [pc, #148]	; (800c7a0 <__d2b+0xb4>)
 800c70c:	f000 fb40 	bl	800cd90 <__assert_func>
 800c710:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c714:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c718:	bb2d      	cbnz	r5, 800c766 <__d2b+0x7a>
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	f1b8 0300 	subs.w	r3, r8, #0
 800c720:	d026      	beq.n	800c770 <__d2b+0x84>
 800c722:	4668      	mov	r0, sp
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	f7ff fd09 	bl	800c13c <__lo0bits>
 800c72a:	9900      	ldr	r1, [sp, #0]
 800c72c:	b1f0      	cbz	r0, 800c76c <__d2b+0x80>
 800c72e:	9a01      	ldr	r2, [sp, #4]
 800c730:	f1c0 0320 	rsb	r3, r0, #32
 800c734:	fa02 f303 	lsl.w	r3, r2, r3
 800c738:	430b      	orrs	r3, r1
 800c73a:	40c2      	lsrs	r2, r0
 800c73c:	6163      	str	r3, [r4, #20]
 800c73e:	9201      	str	r2, [sp, #4]
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	bf14      	ite	ne
 800c746:	2102      	movne	r1, #2
 800c748:	2101      	moveq	r1, #1
 800c74a:	61a3      	str	r3, [r4, #24]
 800c74c:	6121      	str	r1, [r4, #16]
 800c74e:	b1c5      	cbz	r5, 800c782 <__d2b+0x96>
 800c750:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c754:	4405      	add	r5, r0
 800c756:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c75a:	603d      	str	r5, [r7, #0]
 800c75c:	6030      	str	r0, [r6, #0]
 800c75e:	4620      	mov	r0, r4
 800c760:	b002      	add	sp, #8
 800c762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c76a:	e7d6      	b.n	800c71a <__d2b+0x2e>
 800c76c:	6161      	str	r1, [r4, #20]
 800c76e:	e7e7      	b.n	800c740 <__d2b+0x54>
 800c770:	a801      	add	r0, sp, #4
 800c772:	f7ff fce3 	bl	800c13c <__lo0bits>
 800c776:	2101      	movs	r1, #1
 800c778:	9b01      	ldr	r3, [sp, #4]
 800c77a:	6121      	str	r1, [r4, #16]
 800c77c:	6163      	str	r3, [r4, #20]
 800c77e:	3020      	adds	r0, #32
 800c780:	e7e5      	b.n	800c74e <__d2b+0x62>
 800c782:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c786:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c78a:	6038      	str	r0, [r7, #0]
 800c78c:	6918      	ldr	r0, [r3, #16]
 800c78e:	f7ff fcb5 	bl	800c0fc <__hi0bits>
 800c792:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c796:	6031      	str	r1, [r6, #0]
 800c798:	e7e1      	b.n	800c75e <__d2b+0x72>
 800c79a:	bf00      	nop
 800c79c:	0800ebd0 	.word	0x0800ebd0
 800c7a0:	0800ec5c 	.word	0x0800ec5c

0800c7a4 <__ratio>:
 800c7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a8:	4688      	mov	r8, r1
 800c7aa:	4669      	mov	r1, sp
 800c7ac:	4681      	mov	r9, r0
 800c7ae:	f7ff ff49 	bl	800c644 <__b2d>
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	460d      	mov	r5, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	a901      	add	r1, sp, #4
 800c7bc:	f7ff ff42 	bl	800c644 <__b2d>
 800c7c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7c8:	468b      	mov	fp, r1
 800c7ca:	eba3 0c02 	sub.w	ip, r3, r2
 800c7ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7d2:	1a9b      	subs	r3, r3, r2
 800c7d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	bfd5      	itete	le
 800c7dc:	460a      	movle	r2, r1
 800c7de:	462a      	movgt	r2, r5
 800c7e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7e4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7e8:	bfd8      	it	le
 800c7ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	4639      	mov	r1, r7
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7f3 ffa3 	bl	8000740 <__aeabi_ddiv>
 800c7fa:	b003      	add	sp, #12
 800c7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c800 <__copybits>:
 800c800:	3901      	subs	r1, #1
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	1149      	asrs	r1, r1, #5
 800c806:	6914      	ldr	r4, [r2, #16]
 800c808:	3101      	adds	r1, #1
 800c80a:	f102 0314 	add.w	r3, r2, #20
 800c80e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c812:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c816:	1f05      	subs	r5, r0, #4
 800c818:	42a3      	cmp	r3, r4
 800c81a:	d30c      	bcc.n	800c836 <__copybits+0x36>
 800c81c:	1aa3      	subs	r3, r4, r2
 800c81e:	3b11      	subs	r3, #17
 800c820:	f023 0303 	bic.w	r3, r3, #3
 800c824:	3211      	adds	r2, #17
 800c826:	42a2      	cmp	r2, r4
 800c828:	bf88      	it	hi
 800c82a:	2300      	movhi	r3, #0
 800c82c:	4418      	add	r0, r3
 800c82e:	2300      	movs	r3, #0
 800c830:	4288      	cmp	r0, r1
 800c832:	d305      	bcc.n	800c840 <__copybits+0x40>
 800c834:	bd70      	pop	{r4, r5, r6, pc}
 800c836:	f853 6b04 	ldr.w	r6, [r3], #4
 800c83a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c83e:	e7eb      	b.n	800c818 <__copybits+0x18>
 800c840:	f840 3b04 	str.w	r3, [r0], #4
 800c844:	e7f4      	b.n	800c830 <__copybits+0x30>

0800c846 <__any_on>:
 800c846:	f100 0214 	add.w	r2, r0, #20
 800c84a:	6900      	ldr	r0, [r0, #16]
 800c84c:	114b      	asrs	r3, r1, #5
 800c84e:	4298      	cmp	r0, r3
 800c850:	b510      	push	{r4, lr}
 800c852:	db11      	blt.n	800c878 <__any_on+0x32>
 800c854:	dd0a      	ble.n	800c86c <__any_on+0x26>
 800c856:	f011 011f 	ands.w	r1, r1, #31
 800c85a:	d007      	beq.n	800c86c <__any_on+0x26>
 800c85c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c860:	fa24 f001 	lsr.w	r0, r4, r1
 800c864:	fa00 f101 	lsl.w	r1, r0, r1
 800c868:	428c      	cmp	r4, r1
 800c86a:	d10b      	bne.n	800c884 <__any_on+0x3e>
 800c86c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c870:	4293      	cmp	r3, r2
 800c872:	d803      	bhi.n	800c87c <__any_on+0x36>
 800c874:	2000      	movs	r0, #0
 800c876:	bd10      	pop	{r4, pc}
 800c878:	4603      	mov	r3, r0
 800c87a:	e7f7      	b.n	800c86c <__any_on+0x26>
 800c87c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c880:	2900      	cmp	r1, #0
 800c882:	d0f5      	beq.n	800c870 <__any_on+0x2a>
 800c884:	2001      	movs	r0, #1
 800c886:	e7f6      	b.n	800c876 <__any_on+0x30>

0800c888 <_calloc_r>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	fba1 5402 	umull	r5, r4, r1, r2
 800c88e:	b934      	cbnz	r4, 800c89e <_calloc_r+0x16>
 800c890:	4629      	mov	r1, r5
 800c892:	f000 f875 	bl	800c980 <_malloc_r>
 800c896:	4606      	mov	r6, r0
 800c898:	b928      	cbnz	r0, 800c8a6 <_calloc_r+0x1e>
 800c89a:	4630      	mov	r0, r6
 800c89c:	bd70      	pop	{r4, r5, r6, pc}
 800c89e:	220c      	movs	r2, #12
 800c8a0:	2600      	movs	r6, #0
 800c8a2:	6002      	str	r2, [r0, #0]
 800c8a4:	e7f9      	b.n	800c89a <_calloc_r+0x12>
 800c8a6:	462a      	mov	r2, r5
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	f7fc fbf7 	bl	800909c <memset>
 800c8ae:	e7f4      	b.n	800c89a <_calloc_r+0x12>

0800c8b0 <_free_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d040      	beq.n	800c93a <_free_r+0x8a>
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f0c      	subs	r4, r1, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	18e4      	addlt	r4, r4, r3
 800c8c4:	f000 faae 	bl	800ce24 <__malloc_lock>
 800c8c8:	4a1c      	ldr	r2, [pc, #112]	; (800c93c <_free_r+0x8c>)
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	b933      	cbnz	r3, 800c8dc <_free_r+0x2c>
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	6014      	str	r4, [r2, #0]
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d8:	f000 baaa 	b.w	800ce30 <__malloc_unlock>
 800c8dc:	42a3      	cmp	r3, r4
 800c8de:	d908      	bls.n	800c8f2 <_free_r+0x42>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	1821      	adds	r1, r4, r0
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	bf01      	itttt	eq
 800c8e8:	6819      	ldreq	r1, [r3, #0]
 800c8ea:	685b      	ldreq	r3, [r3, #4]
 800c8ec:	1809      	addeq	r1, r1, r0
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	e7ed      	b.n	800c8ce <_free_r+0x1e>
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	b10b      	cbz	r3, 800c8fc <_free_r+0x4c>
 800c8f8:	42a3      	cmp	r3, r4
 800c8fa:	d9fa      	bls.n	800c8f2 <_free_r+0x42>
 800c8fc:	6811      	ldr	r1, [r2, #0]
 800c8fe:	1850      	adds	r0, r2, r1
 800c900:	42a0      	cmp	r0, r4
 800c902:	d10b      	bne.n	800c91c <_free_r+0x6c>
 800c904:	6820      	ldr	r0, [r4, #0]
 800c906:	4401      	add	r1, r0
 800c908:	1850      	adds	r0, r2, r1
 800c90a:	4283      	cmp	r3, r0
 800c90c:	6011      	str	r1, [r2, #0]
 800c90e:	d1e0      	bne.n	800c8d2 <_free_r+0x22>
 800c910:	6818      	ldr	r0, [r3, #0]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	4401      	add	r1, r0
 800c916:	6011      	str	r1, [r2, #0]
 800c918:	6053      	str	r3, [r2, #4]
 800c91a:	e7da      	b.n	800c8d2 <_free_r+0x22>
 800c91c:	d902      	bls.n	800c924 <_free_r+0x74>
 800c91e:	230c      	movs	r3, #12
 800c920:	602b      	str	r3, [r5, #0]
 800c922:	e7d6      	b.n	800c8d2 <_free_r+0x22>
 800c924:	6820      	ldr	r0, [r4, #0]
 800c926:	1821      	adds	r1, r4, r0
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf01      	itttt	eq
 800c92c:	6819      	ldreq	r1, [r3, #0]
 800c92e:	685b      	ldreq	r3, [r3, #4]
 800c930:	1809      	addeq	r1, r1, r0
 800c932:	6021      	streq	r1, [r4, #0]
 800c934:	6063      	str	r3, [r4, #4]
 800c936:	6054      	str	r4, [r2, #4]
 800c938:	e7cb      	b.n	800c8d2 <_free_r+0x22>
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	20003770 	.word	0x20003770

0800c940 <sbrk_aligned>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	4e0e      	ldr	r6, [pc, #56]	; (800c97c <sbrk_aligned+0x3c>)
 800c944:	460c      	mov	r4, r1
 800c946:	6831      	ldr	r1, [r6, #0]
 800c948:	4605      	mov	r5, r0
 800c94a:	b911      	cbnz	r1, 800c952 <sbrk_aligned+0x12>
 800c94c:	f000 f9ee 	bl	800cd2c <_sbrk_r>
 800c950:	6030      	str	r0, [r6, #0]
 800c952:	4621      	mov	r1, r4
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f9e9 	bl	800cd2c <_sbrk_r>
 800c95a:	1c43      	adds	r3, r0, #1
 800c95c:	d00a      	beq.n	800c974 <sbrk_aligned+0x34>
 800c95e:	1cc4      	adds	r4, r0, #3
 800c960:	f024 0403 	bic.w	r4, r4, #3
 800c964:	42a0      	cmp	r0, r4
 800c966:	d007      	beq.n	800c978 <sbrk_aligned+0x38>
 800c968:	1a21      	subs	r1, r4, r0
 800c96a:	4628      	mov	r0, r5
 800c96c:	f000 f9de 	bl	800cd2c <_sbrk_r>
 800c970:	3001      	adds	r0, #1
 800c972:	d101      	bne.n	800c978 <sbrk_aligned+0x38>
 800c974:	f04f 34ff 	mov.w	r4, #4294967295
 800c978:	4620      	mov	r0, r4
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	20003774 	.word	0x20003774

0800c980 <_malloc_r>:
 800c980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c984:	1ccd      	adds	r5, r1, #3
 800c986:	f025 0503 	bic.w	r5, r5, #3
 800c98a:	3508      	adds	r5, #8
 800c98c:	2d0c      	cmp	r5, #12
 800c98e:	bf38      	it	cc
 800c990:	250c      	movcc	r5, #12
 800c992:	2d00      	cmp	r5, #0
 800c994:	4607      	mov	r7, r0
 800c996:	db01      	blt.n	800c99c <_malloc_r+0x1c>
 800c998:	42a9      	cmp	r1, r5
 800c99a:	d905      	bls.n	800c9a8 <_malloc_r+0x28>
 800c99c:	230c      	movs	r3, #12
 800c99e:	2600      	movs	r6, #0
 800c9a0:	603b      	str	r3, [r7, #0]
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a8:	4e2e      	ldr	r6, [pc, #184]	; (800ca64 <_malloc_r+0xe4>)
 800c9aa:	f000 fa3b 	bl	800ce24 <__malloc_lock>
 800c9ae:	6833      	ldr	r3, [r6, #0]
 800c9b0:	461c      	mov	r4, r3
 800c9b2:	bb34      	cbnz	r4, 800ca02 <_malloc_r+0x82>
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f7ff ffc2 	bl	800c940 <sbrk_aligned>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	4604      	mov	r4, r0
 800c9c0:	d14d      	bne.n	800ca5e <_malloc_r+0xde>
 800c9c2:	6834      	ldr	r4, [r6, #0]
 800c9c4:	4626      	mov	r6, r4
 800c9c6:	2e00      	cmp	r6, #0
 800c9c8:	d140      	bne.n	800ca4c <_malloc_r+0xcc>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4638      	mov	r0, r7
 800c9d0:	eb04 0803 	add.w	r8, r4, r3
 800c9d4:	f000 f9aa 	bl	800cd2c <_sbrk_r>
 800c9d8:	4580      	cmp	r8, r0
 800c9da:	d13a      	bne.n	800ca52 <_malloc_r+0xd2>
 800c9dc:	6821      	ldr	r1, [r4, #0]
 800c9de:	3503      	adds	r5, #3
 800c9e0:	1a6d      	subs	r5, r5, r1
 800c9e2:	f025 0503 	bic.w	r5, r5, #3
 800c9e6:	3508      	adds	r5, #8
 800c9e8:	2d0c      	cmp	r5, #12
 800c9ea:	bf38      	it	cc
 800c9ec:	250c      	movcc	r5, #12
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	f7ff ffa5 	bl	800c940 <sbrk_aligned>
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d02b      	beq.n	800ca52 <_malloc_r+0xd2>
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	442b      	add	r3, r5
 800c9fe:	6023      	str	r3, [r4, #0]
 800ca00:	e00e      	b.n	800ca20 <_malloc_r+0xa0>
 800ca02:	6822      	ldr	r2, [r4, #0]
 800ca04:	1b52      	subs	r2, r2, r5
 800ca06:	d41e      	bmi.n	800ca46 <_malloc_r+0xc6>
 800ca08:	2a0b      	cmp	r2, #11
 800ca0a:	d916      	bls.n	800ca3a <_malloc_r+0xba>
 800ca0c:	1961      	adds	r1, r4, r5
 800ca0e:	42a3      	cmp	r3, r4
 800ca10:	6025      	str	r5, [r4, #0]
 800ca12:	bf18      	it	ne
 800ca14:	6059      	strne	r1, [r3, #4]
 800ca16:	6863      	ldr	r3, [r4, #4]
 800ca18:	bf08      	it	eq
 800ca1a:	6031      	streq	r1, [r6, #0]
 800ca1c:	5162      	str	r2, [r4, r5]
 800ca1e:	604b      	str	r3, [r1, #4]
 800ca20:	4638      	mov	r0, r7
 800ca22:	f104 060b 	add.w	r6, r4, #11
 800ca26:	f000 fa03 	bl	800ce30 <__malloc_unlock>
 800ca2a:	f026 0607 	bic.w	r6, r6, #7
 800ca2e:	1d23      	adds	r3, r4, #4
 800ca30:	1af2      	subs	r2, r6, r3
 800ca32:	d0b6      	beq.n	800c9a2 <_malloc_r+0x22>
 800ca34:	1b9b      	subs	r3, r3, r6
 800ca36:	50a3      	str	r3, [r4, r2]
 800ca38:	e7b3      	b.n	800c9a2 <_malloc_r+0x22>
 800ca3a:	6862      	ldr	r2, [r4, #4]
 800ca3c:	42a3      	cmp	r3, r4
 800ca3e:	bf0c      	ite	eq
 800ca40:	6032      	streq	r2, [r6, #0]
 800ca42:	605a      	strne	r2, [r3, #4]
 800ca44:	e7ec      	b.n	800ca20 <_malloc_r+0xa0>
 800ca46:	4623      	mov	r3, r4
 800ca48:	6864      	ldr	r4, [r4, #4]
 800ca4a:	e7b2      	b.n	800c9b2 <_malloc_r+0x32>
 800ca4c:	4634      	mov	r4, r6
 800ca4e:	6876      	ldr	r6, [r6, #4]
 800ca50:	e7b9      	b.n	800c9c6 <_malloc_r+0x46>
 800ca52:	230c      	movs	r3, #12
 800ca54:	4638      	mov	r0, r7
 800ca56:	603b      	str	r3, [r7, #0]
 800ca58:	f000 f9ea 	bl	800ce30 <__malloc_unlock>
 800ca5c:	e7a1      	b.n	800c9a2 <_malloc_r+0x22>
 800ca5e:	6025      	str	r5, [r4, #0]
 800ca60:	e7de      	b.n	800ca20 <_malloc_r+0xa0>
 800ca62:	bf00      	nop
 800ca64:	20003770 	.word	0x20003770

0800ca68 <__ssputs_r>:
 800ca68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca6c:	688e      	ldr	r6, [r1, #8]
 800ca6e:	4682      	mov	sl, r0
 800ca70:	429e      	cmp	r6, r3
 800ca72:	460c      	mov	r4, r1
 800ca74:	4690      	mov	r8, r2
 800ca76:	461f      	mov	r7, r3
 800ca78:	d838      	bhi.n	800caec <__ssputs_r+0x84>
 800ca7a:	898a      	ldrh	r2, [r1, #12]
 800ca7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca80:	d032      	beq.n	800cae8 <__ssputs_r+0x80>
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	6909      	ldr	r1, [r1, #16]
 800ca86:	3301      	adds	r3, #1
 800ca88:	eba5 0901 	sub.w	r9, r5, r1
 800ca8c:	6965      	ldr	r5, [r4, #20]
 800ca8e:	444b      	add	r3, r9
 800ca90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca98:	106d      	asrs	r5, r5, #1
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	bf38      	it	cc
 800ca9e:	461d      	movcc	r5, r3
 800caa0:	0553      	lsls	r3, r2, #21
 800caa2:	d531      	bpl.n	800cb08 <__ssputs_r+0xa0>
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7ff ff6b 	bl	800c980 <_malloc_r>
 800caaa:	4606      	mov	r6, r0
 800caac:	b950      	cbnz	r0, 800cac4 <__ssputs_r+0x5c>
 800caae:	230c      	movs	r3, #12
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	f8ca 3000 	str.w	r3, [sl]
 800cab8:	89a3      	ldrh	r3, [r4, #12]
 800caba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cabe:	81a3      	strh	r3, [r4, #12]
 800cac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac4:	464a      	mov	r2, r9
 800cac6:	6921      	ldr	r1, [r4, #16]
 800cac8:	f7fc fada 	bl	8009080 <memcpy>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad6:	81a3      	strh	r3, [r4, #12]
 800cad8:	6126      	str	r6, [r4, #16]
 800cada:	444e      	add	r6, r9
 800cadc:	6026      	str	r6, [r4, #0]
 800cade:	463e      	mov	r6, r7
 800cae0:	6165      	str	r5, [r4, #20]
 800cae2:	eba5 0509 	sub.w	r5, r5, r9
 800cae6:	60a5      	str	r5, [r4, #8]
 800cae8:	42be      	cmp	r6, r7
 800caea:	d900      	bls.n	800caee <__ssputs_r+0x86>
 800caec:	463e      	mov	r6, r7
 800caee:	4632      	mov	r2, r6
 800caf0:	4641      	mov	r1, r8
 800caf2:	6820      	ldr	r0, [r4, #0]
 800caf4:	f000 f97c 	bl	800cdf0 <memmove>
 800caf8:	68a3      	ldr	r3, [r4, #8]
 800cafa:	2000      	movs	r0, #0
 800cafc:	1b9b      	subs	r3, r3, r6
 800cafe:	60a3      	str	r3, [r4, #8]
 800cb00:	6823      	ldr	r3, [r4, #0]
 800cb02:	4433      	add	r3, r6
 800cb04:	6023      	str	r3, [r4, #0]
 800cb06:	e7db      	b.n	800cac0 <__ssputs_r+0x58>
 800cb08:	462a      	mov	r2, r5
 800cb0a:	f000 f997 	bl	800ce3c <_realloc_r>
 800cb0e:	4606      	mov	r6, r0
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1e1      	bne.n	800cad8 <__ssputs_r+0x70>
 800cb14:	4650      	mov	r0, sl
 800cb16:	6921      	ldr	r1, [r4, #16]
 800cb18:	f7ff feca 	bl	800c8b0 <_free_r>
 800cb1c:	e7c7      	b.n	800caae <__ssputs_r+0x46>
	...

0800cb20 <_svfiprintf_r>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	4698      	mov	r8, r3
 800cb26:	898b      	ldrh	r3, [r1, #12]
 800cb28:	4607      	mov	r7, r0
 800cb2a:	061b      	lsls	r3, r3, #24
 800cb2c:	460d      	mov	r5, r1
 800cb2e:	4614      	mov	r4, r2
 800cb30:	b09d      	sub	sp, #116	; 0x74
 800cb32:	d50e      	bpl.n	800cb52 <_svfiprintf_r+0x32>
 800cb34:	690b      	ldr	r3, [r1, #16]
 800cb36:	b963      	cbnz	r3, 800cb52 <_svfiprintf_r+0x32>
 800cb38:	2140      	movs	r1, #64	; 0x40
 800cb3a:	f7ff ff21 	bl	800c980 <_malloc_r>
 800cb3e:	6028      	str	r0, [r5, #0]
 800cb40:	6128      	str	r0, [r5, #16]
 800cb42:	b920      	cbnz	r0, 800cb4e <_svfiprintf_r+0x2e>
 800cb44:	230c      	movs	r3, #12
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4c:	e0d1      	b.n	800ccf2 <_svfiprintf_r+0x1d2>
 800cb4e:	2340      	movs	r3, #64	; 0x40
 800cb50:	616b      	str	r3, [r5, #20]
 800cb52:	2300      	movs	r3, #0
 800cb54:	9309      	str	r3, [sp, #36]	; 0x24
 800cb56:	2320      	movs	r3, #32
 800cb58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5c:	2330      	movs	r3, #48	; 0x30
 800cb5e:	f04f 0901 	mov.w	r9, #1
 800cb62:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd0c <_svfiprintf_r+0x1ec>
 800cb6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb6e:	4623      	mov	r3, r4
 800cb70:	469a      	mov	sl, r3
 800cb72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb76:	b10a      	cbz	r2, 800cb7c <_svfiprintf_r+0x5c>
 800cb78:	2a25      	cmp	r2, #37	; 0x25
 800cb7a:	d1f9      	bne.n	800cb70 <_svfiprintf_r+0x50>
 800cb7c:	ebba 0b04 	subs.w	fp, sl, r4
 800cb80:	d00b      	beq.n	800cb9a <_svfiprintf_r+0x7a>
 800cb82:	465b      	mov	r3, fp
 800cb84:	4622      	mov	r2, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f7ff ff6d 	bl	800ca68 <__ssputs_r>
 800cb8e:	3001      	adds	r0, #1
 800cb90:	f000 80aa 	beq.w	800cce8 <_svfiprintf_r+0x1c8>
 800cb94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb96:	445a      	add	r2, fp
 800cb98:	9209      	str	r2, [sp, #36]	; 0x24
 800cb9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80a2 	beq.w	800cce8 <_svfiprintf_r+0x1c8>
 800cba4:	2300      	movs	r3, #0
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbae:	f10a 0a01 	add.w	sl, sl, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	9307      	str	r3, [sp, #28]
 800cbb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbba:	931a      	str	r3, [sp, #104]	; 0x68
 800cbbc:	4654      	mov	r4, sl
 800cbbe:	2205      	movs	r2, #5
 800cbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc4:	4851      	ldr	r0, [pc, #324]	; (800cd0c <_svfiprintf_r+0x1ec>)
 800cbc6:	f7ff f999 	bl	800befc <memchr>
 800cbca:	9a04      	ldr	r2, [sp, #16]
 800cbcc:	b9d8      	cbnz	r0, 800cc06 <_svfiprintf_r+0xe6>
 800cbce:	06d0      	lsls	r0, r2, #27
 800cbd0:	bf44      	itt	mi
 800cbd2:	2320      	movmi	r3, #32
 800cbd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd8:	0711      	lsls	r1, r2, #28
 800cbda:	bf44      	itt	mi
 800cbdc:	232b      	movmi	r3, #43	; 0x2b
 800cbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe8:	d015      	beq.n	800cc16 <_svfiprintf_r+0xf6>
 800cbea:	4654      	mov	r4, sl
 800cbec:	2000      	movs	r0, #0
 800cbee:	f04f 0c0a 	mov.w	ip, #10
 800cbf2:	9a07      	ldr	r2, [sp, #28]
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbfa:	3b30      	subs	r3, #48	; 0x30
 800cbfc:	2b09      	cmp	r3, #9
 800cbfe:	d94e      	bls.n	800cc9e <_svfiprintf_r+0x17e>
 800cc00:	b1b0      	cbz	r0, 800cc30 <_svfiprintf_r+0x110>
 800cc02:	9207      	str	r2, [sp, #28]
 800cc04:	e014      	b.n	800cc30 <_svfiprintf_r+0x110>
 800cc06:	eba0 0308 	sub.w	r3, r0, r8
 800cc0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	46a2      	mov	sl, r4
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	e7d2      	b.n	800cbbc <_svfiprintf_r+0x9c>
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	1d19      	adds	r1, r3, #4
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	9103      	str	r1, [sp, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfbb      	ittet	lt
 800cc22:	425b      	neglt	r3, r3
 800cc24:	f042 0202 	orrlt.w	r2, r2, #2
 800cc28:	9307      	strge	r3, [sp, #28]
 800cc2a:	9307      	strlt	r3, [sp, #28]
 800cc2c:	bfb8      	it	lt
 800cc2e:	9204      	strlt	r2, [sp, #16]
 800cc30:	7823      	ldrb	r3, [r4, #0]
 800cc32:	2b2e      	cmp	r3, #46	; 0x2e
 800cc34:	d10c      	bne.n	800cc50 <_svfiprintf_r+0x130>
 800cc36:	7863      	ldrb	r3, [r4, #1]
 800cc38:	2b2a      	cmp	r3, #42	; 0x2a
 800cc3a:	d135      	bne.n	800cca8 <_svfiprintf_r+0x188>
 800cc3c:	9b03      	ldr	r3, [sp, #12]
 800cc3e:	3402      	adds	r4, #2
 800cc40:	1d1a      	adds	r2, r3, #4
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	9203      	str	r2, [sp, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	bfb8      	it	lt
 800cc4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cd10 <_svfiprintf_r+0x1f0>
 800cc54:	2203      	movs	r2, #3
 800cc56:	4650      	mov	r0, sl
 800cc58:	7821      	ldrb	r1, [r4, #0]
 800cc5a:	f7ff f94f 	bl	800befc <memchr>
 800cc5e:	b140      	cbz	r0, 800cc72 <_svfiprintf_r+0x152>
 800cc60:	2340      	movs	r3, #64	; 0x40
 800cc62:	eba0 000a 	sub.w	r0, r0, sl
 800cc66:	fa03 f000 	lsl.w	r0, r3, r0
 800cc6a:	9b04      	ldr	r3, [sp, #16]
 800cc6c:	3401      	adds	r4, #1
 800cc6e:	4303      	orrs	r3, r0
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc76:	2206      	movs	r2, #6
 800cc78:	4826      	ldr	r0, [pc, #152]	; (800cd14 <_svfiprintf_r+0x1f4>)
 800cc7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc7e:	f7ff f93d 	bl	800befc <memchr>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d038      	beq.n	800ccf8 <_svfiprintf_r+0x1d8>
 800cc86:	4b24      	ldr	r3, [pc, #144]	; (800cd18 <_svfiprintf_r+0x1f8>)
 800cc88:	bb1b      	cbnz	r3, 800ccd2 <_svfiprintf_r+0x1b2>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	3307      	adds	r3, #7
 800cc8e:	f023 0307 	bic.w	r3, r3, #7
 800cc92:	3308      	adds	r3, #8
 800cc94:	9303      	str	r3, [sp, #12]
 800cc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc98:	4433      	add	r3, r6
 800cc9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc9c:	e767      	b.n	800cb6e <_svfiprintf_r+0x4e>
 800cc9e:	460c      	mov	r4, r1
 800cca0:	2001      	movs	r0, #1
 800cca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cca6:	e7a5      	b.n	800cbf4 <_svfiprintf_r+0xd4>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	f04f 0c0a 	mov.w	ip, #10
 800ccae:	4619      	mov	r1, r3
 800ccb0:	3401      	adds	r4, #1
 800ccb2:	9305      	str	r3, [sp, #20]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccba:	3a30      	subs	r2, #48	; 0x30
 800ccbc:	2a09      	cmp	r2, #9
 800ccbe:	d903      	bls.n	800ccc8 <_svfiprintf_r+0x1a8>
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d0c5      	beq.n	800cc50 <_svfiprintf_r+0x130>
 800ccc4:	9105      	str	r1, [sp, #20]
 800ccc6:	e7c3      	b.n	800cc50 <_svfiprintf_r+0x130>
 800ccc8:	4604      	mov	r4, r0
 800ccca:	2301      	movs	r3, #1
 800cccc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd0:	e7f0      	b.n	800ccb4 <_svfiprintf_r+0x194>
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	462a      	mov	r2, r5
 800ccd8:	4638      	mov	r0, r7
 800ccda:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <_svfiprintf_r+0x1fc>)
 800ccdc:	a904      	add	r1, sp, #16
 800ccde:	f7fc fa83 	bl	80091e8 <_printf_float>
 800cce2:	1c42      	adds	r2, r0, #1
 800cce4:	4606      	mov	r6, r0
 800cce6:	d1d6      	bne.n	800cc96 <_svfiprintf_r+0x176>
 800cce8:	89ab      	ldrh	r3, [r5, #12]
 800ccea:	065b      	lsls	r3, r3, #25
 800ccec:	f53f af2c 	bmi.w	800cb48 <_svfiprintf_r+0x28>
 800ccf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf2:	b01d      	add	sp, #116	; 0x74
 800ccf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf8:	ab03      	add	r3, sp, #12
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	462a      	mov	r2, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <_svfiprintf_r+0x1fc>)
 800cd02:	a904      	add	r1, sp, #16
 800cd04:	f7fc fd0c 	bl	8009720 <_printf_i>
 800cd08:	e7eb      	b.n	800cce2 <_svfiprintf_r+0x1c2>
 800cd0a:	bf00      	nop
 800cd0c:	0800edb4 	.word	0x0800edb4
 800cd10:	0800edba 	.word	0x0800edba
 800cd14:	0800edbe 	.word	0x0800edbe
 800cd18:	080091e9 	.word	0x080091e9
 800cd1c:	0800ca69 	.word	0x0800ca69

0800cd20 <nan>:
 800cd20:	2000      	movs	r0, #0
 800cd22:	4901      	ldr	r1, [pc, #4]	; (800cd28 <nan+0x8>)
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	7ff80000 	.word	0x7ff80000

0800cd2c <_sbrk_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4d05      	ldr	r5, [pc, #20]	; (800cd48 <_sbrk_r+0x1c>)
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	602b      	str	r3, [r5, #0]
 800cd38:	f7f6 f88a 	bl	8002e50 <_sbrk>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	d102      	bne.n	800cd46 <_sbrk_r+0x1a>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	b103      	cbz	r3, 800cd46 <_sbrk_r+0x1a>
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	20003778 	.word	0x20003778

0800cd4c <strncmp>:
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	b510      	push	{r4, lr}
 800cd50:	b172      	cbz	r2, 800cd70 <strncmp+0x24>
 800cd52:	3901      	subs	r1, #1
 800cd54:	1884      	adds	r4, r0, r2
 800cd56:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd5e:	4290      	cmp	r0, r2
 800cd60:	d101      	bne.n	800cd66 <strncmp+0x1a>
 800cd62:	42a3      	cmp	r3, r4
 800cd64:	d101      	bne.n	800cd6a <strncmp+0x1e>
 800cd66:	1a80      	subs	r0, r0, r2
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d1f3      	bne.n	800cd56 <strncmp+0xa>
 800cd6e:	e7fa      	b.n	800cd66 <strncmp+0x1a>
 800cd70:	4610      	mov	r0, r2
 800cd72:	e7f9      	b.n	800cd68 <strncmp+0x1c>

0800cd74 <__ascii_wctomb>:
 800cd74:	4603      	mov	r3, r0
 800cd76:	4608      	mov	r0, r1
 800cd78:	b141      	cbz	r1, 800cd8c <__ascii_wctomb+0x18>
 800cd7a:	2aff      	cmp	r2, #255	; 0xff
 800cd7c:	d904      	bls.n	800cd88 <__ascii_wctomb+0x14>
 800cd7e:	228a      	movs	r2, #138	; 0x8a
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	4770      	bx	lr
 800cd88:	2001      	movs	r0, #1
 800cd8a:	700a      	strb	r2, [r1, #0]
 800cd8c:	4770      	bx	lr
	...

0800cd90 <__assert_func>:
 800cd90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd92:	4614      	mov	r4, r2
 800cd94:	461a      	mov	r2, r3
 800cd96:	4b09      	ldr	r3, [pc, #36]	; (800cdbc <__assert_func+0x2c>)
 800cd98:	4605      	mov	r5, r0
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68d8      	ldr	r0, [r3, #12]
 800cd9e:	b14c      	cbz	r4, 800cdb4 <__assert_func+0x24>
 800cda0:	4b07      	ldr	r3, [pc, #28]	; (800cdc0 <__assert_func+0x30>)
 800cda2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cda6:	9100      	str	r1, [sp, #0]
 800cda8:	462b      	mov	r3, r5
 800cdaa:	4906      	ldr	r1, [pc, #24]	; (800cdc4 <__assert_func+0x34>)
 800cdac:	f000 f80e 	bl	800cdcc <fiprintf>
 800cdb0:	f000 fa8a 	bl	800d2c8 <abort>
 800cdb4:	4b04      	ldr	r3, [pc, #16]	; (800cdc8 <__assert_func+0x38>)
 800cdb6:	461c      	mov	r4, r3
 800cdb8:	e7f3      	b.n	800cda2 <__assert_func+0x12>
 800cdba:	bf00      	nop
 800cdbc:	2000001c 	.word	0x2000001c
 800cdc0:	0800edc5 	.word	0x0800edc5
 800cdc4:	0800edd2 	.word	0x0800edd2
 800cdc8:	0800ee00 	.word	0x0800ee00

0800cdcc <fiprintf>:
 800cdcc:	b40e      	push	{r1, r2, r3}
 800cdce:	b503      	push	{r0, r1, lr}
 800cdd0:	4601      	mov	r1, r0
 800cdd2:	ab03      	add	r3, sp, #12
 800cdd4:	4805      	ldr	r0, [pc, #20]	; (800cdec <fiprintf+0x20>)
 800cdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdda:	6800      	ldr	r0, [r0, #0]
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	f000 f883 	bl	800cee8 <_vfiprintf_r>
 800cde2:	b002      	add	sp, #8
 800cde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde8:	b003      	add	sp, #12
 800cdea:	4770      	bx	lr
 800cdec:	2000001c 	.word	0x2000001c

0800cdf0 <memmove>:
 800cdf0:	4288      	cmp	r0, r1
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	eb01 0402 	add.w	r4, r1, r2
 800cdf8:	d902      	bls.n	800ce00 <memmove+0x10>
 800cdfa:	4284      	cmp	r4, r0
 800cdfc:	4623      	mov	r3, r4
 800cdfe:	d807      	bhi.n	800ce10 <memmove+0x20>
 800ce00:	1e43      	subs	r3, r0, #1
 800ce02:	42a1      	cmp	r1, r4
 800ce04:	d008      	beq.n	800ce18 <memmove+0x28>
 800ce06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce0e:	e7f8      	b.n	800ce02 <memmove+0x12>
 800ce10:	4601      	mov	r1, r0
 800ce12:	4402      	add	r2, r0
 800ce14:	428a      	cmp	r2, r1
 800ce16:	d100      	bne.n	800ce1a <memmove+0x2a>
 800ce18:	bd10      	pop	{r4, pc}
 800ce1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce22:	e7f7      	b.n	800ce14 <memmove+0x24>

0800ce24 <__malloc_lock>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__malloc_lock+0x8>)
 800ce26:	f000 bc0b 	b.w	800d640 <__retarget_lock_acquire_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	2000377c 	.word	0x2000377c

0800ce30 <__malloc_unlock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__malloc_unlock+0x8>)
 800ce32:	f000 bc06 	b.w	800d642 <__retarget_lock_release_recursive>
 800ce36:	bf00      	nop
 800ce38:	2000377c 	.word	0x2000377c

0800ce3c <_realloc_r>:
 800ce3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce40:	4680      	mov	r8, r0
 800ce42:	4614      	mov	r4, r2
 800ce44:	460e      	mov	r6, r1
 800ce46:	b921      	cbnz	r1, 800ce52 <_realloc_r+0x16>
 800ce48:	4611      	mov	r1, r2
 800ce4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4e:	f7ff bd97 	b.w	800c980 <_malloc_r>
 800ce52:	b92a      	cbnz	r2, 800ce60 <_realloc_r+0x24>
 800ce54:	f7ff fd2c 	bl	800c8b0 <_free_r>
 800ce58:	4625      	mov	r5, r4
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce60:	f000 fc56 	bl	800d710 <_malloc_usable_size_r>
 800ce64:	4284      	cmp	r4, r0
 800ce66:	4607      	mov	r7, r0
 800ce68:	d802      	bhi.n	800ce70 <_realloc_r+0x34>
 800ce6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce6e:	d812      	bhi.n	800ce96 <_realloc_r+0x5a>
 800ce70:	4621      	mov	r1, r4
 800ce72:	4640      	mov	r0, r8
 800ce74:	f7ff fd84 	bl	800c980 <_malloc_r>
 800ce78:	4605      	mov	r5, r0
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d0ed      	beq.n	800ce5a <_realloc_r+0x1e>
 800ce7e:	42bc      	cmp	r4, r7
 800ce80:	4622      	mov	r2, r4
 800ce82:	4631      	mov	r1, r6
 800ce84:	bf28      	it	cs
 800ce86:	463a      	movcs	r2, r7
 800ce88:	f7fc f8fa 	bl	8009080 <memcpy>
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4640      	mov	r0, r8
 800ce90:	f7ff fd0e 	bl	800c8b0 <_free_r>
 800ce94:	e7e1      	b.n	800ce5a <_realloc_r+0x1e>
 800ce96:	4635      	mov	r5, r6
 800ce98:	e7df      	b.n	800ce5a <_realloc_r+0x1e>

0800ce9a <__sfputc_r>:
 800ce9a:	6893      	ldr	r3, [r2, #8]
 800ce9c:	b410      	push	{r4}
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	6093      	str	r3, [r2, #8]
 800cea4:	da07      	bge.n	800ceb6 <__sfputc_r+0x1c>
 800cea6:	6994      	ldr	r4, [r2, #24]
 800cea8:	42a3      	cmp	r3, r4
 800ceaa:	db01      	blt.n	800ceb0 <__sfputc_r+0x16>
 800ceac:	290a      	cmp	r1, #10
 800ceae:	d102      	bne.n	800ceb6 <__sfputc_r+0x1c>
 800ceb0:	bc10      	pop	{r4}
 800ceb2:	f000 b949 	b.w	800d148 <__swbuf_r>
 800ceb6:	6813      	ldr	r3, [r2, #0]
 800ceb8:	1c58      	adds	r0, r3, #1
 800ceba:	6010      	str	r0, [r2, #0]
 800cebc:	7019      	strb	r1, [r3, #0]
 800cebe:	4608      	mov	r0, r1
 800cec0:	bc10      	pop	{r4}
 800cec2:	4770      	bx	lr

0800cec4 <__sfputs_r>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	4606      	mov	r6, r0
 800cec8:	460f      	mov	r7, r1
 800ceca:	4614      	mov	r4, r2
 800cecc:	18d5      	adds	r5, r2, r3
 800cece:	42ac      	cmp	r4, r5
 800ced0:	d101      	bne.n	800ced6 <__sfputs_r+0x12>
 800ced2:	2000      	movs	r0, #0
 800ced4:	e007      	b.n	800cee6 <__sfputs_r+0x22>
 800ced6:	463a      	mov	r2, r7
 800ced8:	4630      	mov	r0, r6
 800ceda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cede:	f7ff ffdc 	bl	800ce9a <__sfputc_r>
 800cee2:	1c43      	adds	r3, r0, #1
 800cee4:	d1f3      	bne.n	800cece <__sfputs_r+0xa>
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cee8 <_vfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	460d      	mov	r5, r1
 800ceee:	4614      	mov	r4, r2
 800cef0:	4698      	mov	r8, r3
 800cef2:	4606      	mov	r6, r0
 800cef4:	b09d      	sub	sp, #116	; 0x74
 800cef6:	b118      	cbz	r0, 800cf00 <_vfiprintf_r+0x18>
 800cef8:	6983      	ldr	r3, [r0, #24]
 800cefa:	b90b      	cbnz	r3, 800cf00 <_vfiprintf_r+0x18>
 800cefc:	f000 fb02 	bl	800d504 <__sinit>
 800cf00:	4b89      	ldr	r3, [pc, #548]	; (800d128 <_vfiprintf_r+0x240>)
 800cf02:	429d      	cmp	r5, r3
 800cf04:	d11b      	bne.n	800cf3e <_vfiprintf_r+0x56>
 800cf06:	6875      	ldr	r5, [r6, #4]
 800cf08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf0a:	07d9      	lsls	r1, r3, #31
 800cf0c:	d405      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	059a      	lsls	r2, r3, #22
 800cf12:	d402      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf16:	f000 fb93 	bl	800d640 <__retarget_lock_acquire_recursive>
 800cf1a:	89ab      	ldrh	r3, [r5, #12]
 800cf1c:	071b      	lsls	r3, r3, #28
 800cf1e:	d501      	bpl.n	800cf24 <_vfiprintf_r+0x3c>
 800cf20:	692b      	ldr	r3, [r5, #16]
 800cf22:	b9eb      	cbnz	r3, 800cf60 <_vfiprintf_r+0x78>
 800cf24:	4629      	mov	r1, r5
 800cf26:	4630      	mov	r0, r6
 800cf28:	f000 f960 	bl	800d1ec <__swsetup_r>
 800cf2c:	b1c0      	cbz	r0, 800cf60 <_vfiprintf_r+0x78>
 800cf2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf30:	07dc      	lsls	r4, r3, #31
 800cf32:	d50e      	bpl.n	800cf52 <_vfiprintf_r+0x6a>
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	b01d      	add	sp, #116	; 0x74
 800cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	4b7b      	ldr	r3, [pc, #492]	; (800d12c <_vfiprintf_r+0x244>)
 800cf40:	429d      	cmp	r5, r3
 800cf42:	d101      	bne.n	800cf48 <_vfiprintf_r+0x60>
 800cf44:	68b5      	ldr	r5, [r6, #8]
 800cf46:	e7df      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf48:	4b79      	ldr	r3, [pc, #484]	; (800d130 <_vfiprintf_r+0x248>)
 800cf4a:	429d      	cmp	r5, r3
 800cf4c:	bf08      	it	eq
 800cf4e:	68f5      	ldreq	r5, [r6, #12]
 800cf50:	e7da      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	0598      	lsls	r0, r3, #22
 800cf56:	d4ed      	bmi.n	800cf34 <_vfiprintf_r+0x4c>
 800cf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf5a:	f000 fb72 	bl	800d642 <__retarget_lock_release_recursive>
 800cf5e:	e7e9      	b.n	800cf34 <_vfiprintf_r+0x4c>
 800cf60:	2300      	movs	r3, #0
 800cf62:	9309      	str	r3, [sp, #36]	; 0x24
 800cf64:	2320      	movs	r3, #32
 800cf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf6a:	2330      	movs	r3, #48	; 0x30
 800cf6c:	f04f 0901 	mov.w	r9, #1
 800cf70:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf74:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d134 <_vfiprintf_r+0x24c>
 800cf78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	469a      	mov	sl, r3
 800cf80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf84:	b10a      	cbz	r2, 800cf8a <_vfiprintf_r+0xa2>
 800cf86:	2a25      	cmp	r2, #37	; 0x25
 800cf88:	d1f9      	bne.n	800cf7e <_vfiprintf_r+0x96>
 800cf8a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf8e:	d00b      	beq.n	800cfa8 <_vfiprintf_r+0xc0>
 800cf90:	465b      	mov	r3, fp
 800cf92:	4622      	mov	r2, r4
 800cf94:	4629      	mov	r1, r5
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ff94 	bl	800cec4 <__sfputs_r>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f000 80aa 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa4:	445a      	add	r2, fp
 800cfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 80a2 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfbc:	f10a 0a01 	add.w	sl, sl, #1
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	9307      	str	r3, [sp, #28]
 800cfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfca:	4654      	mov	r4, sl
 800cfcc:	2205      	movs	r2, #5
 800cfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd2:	4858      	ldr	r0, [pc, #352]	; (800d134 <_vfiprintf_r+0x24c>)
 800cfd4:	f7fe ff92 	bl	800befc <memchr>
 800cfd8:	9a04      	ldr	r2, [sp, #16]
 800cfda:	b9d8      	cbnz	r0, 800d014 <_vfiprintf_r+0x12c>
 800cfdc:	06d1      	lsls	r1, r2, #27
 800cfde:	bf44      	itt	mi
 800cfe0:	2320      	movmi	r3, #32
 800cfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe6:	0713      	lsls	r3, r2, #28
 800cfe8:	bf44      	itt	mi
 800cfea:	232b      	movmi	r3, #43	; 0x2b
 800cfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff0:	f89a 3000 	ldrb.w	r3, [sl]
 800cff4:	2b2a      	cmp	r3, #42	; 0x2a
 800cff6:	d015      	beq.n	800d024 <_vfiprintf_r+0x13c>
 800cff8:	4654      	mov	r4, sl
 800cffa:	2000      	movs	r0, #0
 800cffc:	f04f 0c0a 	mov.w	ip, #10
 800d000:	9a07      	ldr	r2, [sp, #28]
 800d002:	4621      	mov	r1, r4
 800d004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d008:	3b30      	subs	r3, #48	; 0x30
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d94e      	bls.n	800d0ac <_vfiprintf_r+0x1c4>
 800d00e:	b1b0      	cbz	r0, 800d03e <_vfiprintf_r+0x156>
 800d010:	9207      	str	r2, [sp, #28]
 800d012:	e014      	b.n	800d03e <_vfiprintf_r+0x156>
 800d014:	eba0 0308 	sub.w	r3, r0, r8
 800d018:	fa09 f303 	lsl.w	r3, r9, r3
 800d01c:	4313      	orrs	r3, r2
 800d01e:	46a2      	mov	sl, r4
 800d020:	9304      	str	r3, [sp, #16]
 800d022:	e7d2      	b.n	800cfca <_vfiprintf_r+0xe2>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	1d19      	adds	r1, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	9103      	str	r1, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfbb      	ittet	lt
 800d030:	425b      	neglt	r3, r3
 800d032:	f042 0202 	orrlt.w	r2, r2, #2
 800d036:	9307      	strge	r3, [sp, #28]
 800d038:	9307      	strlt	r3, [sp, #28]
 800d03a:	bfb8      	it	lt
 800d03c:	9204      	strlt	r2, [sp, #16]
 800d03e:	7823      	ldrb	r3, [r4, #0]
 800d040:	2b2e      	cmp	r3, #46	; 0x2e
 800d042:	d10c      	bne.n	800d05e <_vfiprintf_r+0x176>
 800d044:	7863      	ldrb	r3, [r4, #1]
 800d046:	2b2a      	cmp	r3, #42	; 0x2a
 800d048:	d135      	bne.n	800d0b6 <_vfiprintf_r+0x1ce>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	3402      	adds	r4, #2
 800d04e:	1d1a      	adds	r2, r3, #4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	9203      	str	r2, [sp, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	bfb8      	it	lt
 800d058:	f04f 33ff 	movlt.w	r3, #4294967295
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d138 <_vfiprintf_r+0x250>
 800d062:	2203      	movs	r2, #3
 800d064:	4650      	mov	r0, sl
 800d066:	7821      	ldrb	r1, [r4, #0]
 800d068:	f7fe ff48 	bl	800befc <memchr>
 800d06c:	b140      	cbz	r0, 800d080 <_vfiprintf_r+0x198>
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	eba0 000a 	sub.w	r0, r0, sl
 800d074:	fa03 f000 	lsl.w	r0, r3, r0
 800d078:	9b04      	ldr	r3, [sp, #16]
 800d07a:	3401      	adds	r4, #1
 800d07c:	4303      	orrs	r3, r0
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d084:	2206      	movs	r2, #6
 800d086:	482d      	ldr	r0, [pc, #180]	; (800d13c <_vfiprintf_r+0x254>)
 800d088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d08c:	f7fe ff36 	bl	800befc <memchr>
 800d090:	2800      	cmp	r0, #0
 800d092:	d03f      	beq.n	800d114 <_vfiprintf_r+0x22c>
 800d094:	4b2a      	ldr	r3, [pc, #168]	; (800d140 <_vfiprintf_r+0x258>)
 800d096:	bb1b      	cbnz	r3, 800d0e0 <_vfiprintf_r+0x1f8>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	3307      	adds	r3, #7
 800d09c:	f023 0307 	bic.w	r3, r3, #7
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	443b      	add	r3, r7
 800d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0aa:	e767      	b.n	800cf7c <_vfiprintf_r+0x94>
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	2001      	movs	r0, #1
 800d0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0b4:	e7a5      	b.n	800d002 <_vfiprintf_r+0x11a>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f04f 0c0a 	mov.w	ip, #10
 800d0bc:	4619      	mov	r1, r3
 800d0be:	3401      	adds	r4, #1
 800d0c0:	9305      	str	r3, [sp, #20]
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c8:	3a30      	subs	r2, #48	; 0x30
 800d0ca:	2a09      	cmp	r2, #9
 800d0cc:	d903      	bls.n	800d0d6 <_vfiprintf_r+0x1ee>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0c5      	beq.n	800d05e <_vfiprintf_r+0x176>
 800d0d2:	9105      	str	r1, [sp, #20]
 800d0d4:	e7c3      	b.n	800d05e <_vfiprintf_r+0x176>
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	2301      	movs	r3, #1
 800d0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0de:	e7f0      	b.n	800d0c2 <_vfiprintf_r+0x1da>
 800d0e0:	ab03      	add	r3, sp, #12
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4b16      	ldr	r3, [pc, #88]	; (800d144 <_vfiprintf_r+0x25c>)
 800d0ea:	a904      	add	r1, sp, #16
 800d0ec:	f7fc f87c 	bl	80091e8 <_printf_float>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	1c78      	adds	r0, r7, #1
 800d0f4:	d1d6      	bne.n	800d0a4 <_vfiprintf_r+0x1bc>
 800d0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0f8:	07d9      	lsls	r1, r3, #31
 800d0fa:	d405      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d0fc:	89ab      	ldrh	r3, [r5, #12]
 800d0fe:	059a      	lsls	r2, r3, #22
 800d100:	d402      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d104:	f000 fa9d 	bl	800d642 <__retarget_lock_release_recursive>
 800d108:	89ab      	ldrh	r3, [r5, #12]
 800d10a:	065b      	lsls	r3, r3, #25
 800d10c:	f53f af12 	bmi.w	800cf34 <_vfiprintf_r+0x4c>
 800d110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d112:	e711      	b.n	800cf38 <_vfiprintf_r+0x50>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4630      	mov	r0, r6
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <_vfiprintf_r+0x25c>)
 800d11e:	a904      	add	r1, sp, #16
 800d120:	f7fc fafe 	bl	8009720 <_printf_i>
 800d124:	e7e4      	b.n	800d0f0 <_vfiprintf_r+0x208>
 800d126:	bf00      	nop
 800d128:	0800ee24 	.word	0x0800ee24
 800d12c:	0800ee44 	.word	0x0800ee44
 800d130:	0800ee04 	.word	0x0800ee04
 800d134:	0800edb4 	.word	0x0800edb4
 800d138:	0800edba 	.word	0x0800edba
 800d13c:	0800edbe 	.word	0x0800edbe
 800d140:	080091e9 	.word	0x080091e9
 800d144:	0800cec5 	.word	0x0800cec5

0800d148 <__swbuf_r>:
 800d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14a:	460e      	mov	r6, r1
 800d14c:	4614      	mov	r4, r2
 800d14e:	4605      	mov	r5, r0
 800d150:	b118      	cbz	r0, 800d15a <__swbuf_r+0x12>
 800d152:	6983      	ldr	r3, [r0, #24]
 800d154:	b90b      	cbnz	r3, 800d15a <__swbuf_r+0x12>
 800d156:	f000 f9d5 	bl	800d504 <__sinit>
 800d15a:	4b21      	ldr	r3, [pc, #132]	; (800d1e0 <__swbuf_r+0x98>)
 800d15c:	429c      	cmp	r4, r3
 800d15e:	d12b      	bne.n	800d1b8 <__swbuf_r+0x70>
 800d160:	686c      	ldr	r4, [r5, #4]
 800d162:	69a3      	ldr	r3, [r4, #24]
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	071a      	lsls	r2, r3, #28
 800d16a:	d52f      	bpl.n	800d1cc <__swbuf_r+0x84>
 800d16c:	6923      	ldr	r3, [r4, #16]
 800d16e:	b36b      	cbz	r3, 800d1cc <__swbuf_r+0x84>
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	6820      	ldr	r0, [r4, #0]
 800d174:	b2f6      	uxtb	r6, r6
 800d176:	1ac0      	subs	r0, r0, r3
 800d178:	6963      	ldr	r3, [r4, #20]
 800d17a:	4637      	mov	r7, r6
 800d17c:	4283      	cmp	r3, r0
 800d17e:	dc04      	bgt.n	800d18a <__swbuf_r+0x42>
 800d180:	4621      	mov	r1, r4
 800d182:	4628      	mov	r0, r5
 800d184:	f000 f92a 	bl	800d3dc <_fflush_r>
 800d188:	bb30      	cbnz	r0, 800d1d8 <__swbuf_r+0x90>
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	3001      	adds	r0, #1
 800d18e:	3b01      	subs	r3, #1
 800d190:	60a3      	str	r3, [r4, #8]
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	1c5a      	adds	r2, r3, #1
 800d196:	6022      	str	r2, [r4, #0]
 800d198:	701e      	strb	r6, [r3, #0]
 800d19a:	6963      	ldr	r3, [r4, #20]
 800d19c:	4283      	cmp	r3, r0
 800d19e:	d004      	beq.n	800d1aa <__swbuf_r+0x62>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	07db      	lsls	r3, r3, #31
 800d1a4:	d506      	bpl.n	800d1b4 <__swbuf_r+0x6c>
 800d1a6:	2e0a      	cmp	r6, #10
 800d1a8:	d104      	bne.n	800d1b4 <__swbuf_r+0x6c>
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 f915 	bl	800d3dc <_fflush_r>
 800d1b2:	b988      	cbnz	r0, 800d1d8 <__swbuf_r+0x90>
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <__swbuf_r+0x9c>)
 800d1ba:	429c      	cmp	r4, r3
 800d1bc:	d101      	bne.n	800d1c2 <__swbuf_r+0x7a>
 800d1be:	68ac      	ldr	r4, [r5, #8]
 800d1c0:	e7cf      	b.n	800d162 <__swbuf_r+0x1a>
 800d1c2:	4b09      	ldr	r3, [pc, #36]	; (800d1e8 <__swbuf_r+0xa0>)
 800d1c4:	429c      	cmp	r4, r3
 800d1c6:	bf08      	it	eq
 800d1c8:	68ec      	ldreq	r4, [r5, #12]
 800d1ca:	e7ca      	b.n	800d162 <__swbuf_r+0x1a>
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	f000 f80c 	bl	800d1ec <__swsetup_r>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d0cb      	beq.n	800d170 <__swbuf_r+0x28>
 800d1d8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1dc:	e7ea      	b.n	800d1b4 <__swbuf_r+0x6c>
 800d1de:	bf00      	nop
 800d1e0:	0800ee24 	.word	0x0800ee24
 800d1e4:	0800ee44 	.word	0x0800ee44
 800d1e8:	0800ee04 	.word	0x0800ee04

0800d1ec <__swsetup_r>:
 800d1ec:	4b32      	ldr	r3, [pc, #200]	; (800d2b8 <__swsetup_r+0xcc>)
 800d1ee:	b570      	push	{r4, r5, r6, lr}
 800d1f0:	681d      	ldr	r5, [r3, #0]
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	b125      	cbz	r5, 800d202 <__swsetup_r+0x16>
 800d1f8:	69ab      	ldr	r3, [r5, #24]
 800d1fa:	b913      	cbnz	r3, 800d202 <__swsetup_r+0x16>
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f000 f981 	bl	800d504 <__sinit>
 800d202:	4b2e      	ldr	r3, [pc, #184]	; (800d2bc <__swsetup_r+0xd0>)
 800d204:	429c      	cmp	r4, r3
 800d206:	d10f      	bne.n	800d228 <__swsetup_r+0x3c>
 800d208:	686c      	ldr	r4, [r5, #4]
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d210:	0719      	lsls	r1, r3, #28
 800d212:	d42c      	bmi.n	800d26e <__swsetup_r+0x82>
 800d214:	06dd      	lsls	r5, r3, #27
 800d216:	d411      	bmi.n	800d23c <__swsetup_r+0x50>
 800d218:	2309      	movs	r3, #9
 800d21a:	6033      	str	r3, [r6, #0]
 800d21c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	e03e      	b.n	800d2a6 <__swsetup_r+0xba>
 800d228:	4b25      	ldr	r3, [pc, #148]	; (800d2c0 <__swsetup_r+0xd4>)
 800d22a:	429c      	cmp	r4, r3
 800d22c:	d101      	bne.n	800d232 <__swsetup_r+0x46>
 800d22e:	68ac      	ldr	r4, [r5, #8]
 800d230:	e7eb      	b.n	800d20a <__swsetup_r+0x1e>
 800d232:	4b24      	ldr	r3, [pc, #144]	; (800d2c4 <__swsetup_r+0xd8>)
 800d234:	429c      	cmp	r4, r3
 800d236:	bf08      	it	eq
 800d238:	68ec      	ldreq	r4, [r5, #12]
 800d23a:	e7e6      	b.n	800d20a <__swsetup_r+0x1e>
 800d23c:	0758      	lsls	r0, r3, #29
 800d23e:	d512      	bpl.n	800d266 <__swsetup_r+0x7a>
 800d240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d242:	b141      	cbz	r1, 800d256 <__swsetup_r+0x6a>
 800d244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d248:	4299      	cmp	r1, r3
 800d24a:	d002      	beq.n	800d252 <__swsetup_r+0x66>
 800d24c:	4630      	mov	r0, r6
 800d24e:	f7ff fb2f 	bl	800c8b0 <_free_r>
 800d252:	2300      	movs	r3, #0
 800d254:	6363      	str	r3, [r4, #52]	; 0x34
 800d256:	89a3      	ldrh	r3, [r4, #12]
 800d258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d25c:	81a3      	strh	r3, [r4, #12]
 800d25e:	2300      	movs	r3, #0
 800d260:	6063      	str	r3, [r4, #4]
 800d262:	6923      	ldr	r3, [r4, #16]
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	89a3      	ldrh	r3, [r4, #12]
 800d268:	f043 0308 	orr.w	r3, r3, #8
 800d26c:	81a3      	strh	r3, [r4, #12]
 800d26e:	6923      	ldr	r3, [r4, #16]
 800d270:	b94b      	cbnz	r3, 800d286 <__swsetup_r+0x9a>
 800d272:	89a3      	ldrh	r3, [r4, #12]
 800d274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d27c:	d003      	beq.n	800d286 <__swsetup_r+0x9a>
 800d27e:	4621      	mov	r1, r4
 800d280:	4630      	mov	r0, r6
 800d282:	f000 fa05 	bl	800d690 <__smakebuf_r>
 800d286:	89a0      	ldrh	r0, [r4, #12]
 800d288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d28c:	f010 0301 	ands.w	r3, r0, #1
 800d290:	d00a      	beq.n	800d2a8 <__swsetup_r+0xbc>
 800d292:	2300      	movs	r3, #0
 800d294:	60a3      	str	r3, [r4, #8]
 800d296:	6963      	ldr	r3, [r4, #20]
 800d298:	425b      	negs	r3, r3
 800d29a:	61a3      	str	r3, [r4, #24]
 800d29c:	6923      	ldr	r3, [r4, #16]
 800d29e:	b943      	cbnz	r3, 800d2b2 <__swsetup_r+0xc6>
 800d2a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2a4:	d1ba      	bne.n	800d21c <__swsetup_r+0x30>
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	0781      	lsls	r1, r0, #30
 800d2aa:	bf58      	it	pl
 800d2ac:	6963      	ldrpl	r3, [r4, #20]
 800d2ae:	60a3      	str	r3, [r4, #8]
 800d2b0:	e7f4      	b.n	800d29c <__swsetup_r+0xb0>
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	e7f7      	b.n	800d2a6 <__swsetup_r+0xba>
 800d2b6:	bf00      	nop
 800d2b8:	2000001c 	.word	0x2000001c
 800d2bc:	0800ee24 	.word	0x0800ee24
 800d2c0:	0800ee44 	.word	0x0800ee44
 800d2c4:	0800ee04 	.word	0x0800ee04

0800d2c8 <abort>:
 800d2c8:	2006      	movs	r0, #6
 800d2ca:	b508      	push	{r3, lr}
 800d2cc:	f000 fa50 	bl	800d770 <raise>
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	f7f5 fd4a 	bl	8002d6a <_exit>
	...

0800d2d8 <__sflush_r>:
 800d2d8:	898a      	ldrh	r2, [r1, #12]
 800d2da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2dc:	4605      	mov	r5, r0
 800d2de:	0710      	lsls	r0, r2, #28
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	d457      	bmi.n	800d394 <__sflush_r+0xbc>
 800d2e4:	684b      	ldr	r3, [r1, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	dc04      	bgt.n	800d2f4 <__sflush_r+0x1c>
 800d2ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	dc01      	bgt.n	800d2f4 <__sflush_r+0x1c>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2f6:	2e00      	cmp	r6, #0
 800d2f8:	d0fa      	beq.n	800d2f0 <__sflush_r+0x18>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d300:	682f      	ldr	r7, [r5, #0]
 800d302:	602b      	str	r3, [r5, #0]
 800d304:	d032      	beq.n	800d36c <__sflush_r+0x94>
 800d306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	075a      	lsls	r2, r3, #29
 800d30c:	d505      	bpl.n	800d31a <__sflush_r+0x42>
 800d30e:	6863      	ldr	r3, [r4, #4]
 800d310:	1ac0      	subs	r0, r0, r3
 800d312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d314:	b10b      	cbz	r3, 800d31a <__sflush_r+0x42>
 800d316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d318:	1ac0      	subs	r0, r0, r3
 800d31a:	2300      	movs	r3, #0
 800d31c:	4602      	mov	r2, r0
 800d31e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d320:	4628      	mov	r0, r5
 800d322:	6a21      	ldr	r1, [r4, #32]
 800d324:	47b0      	blx	r6
 800d326:	1c43      	adds	r3, r0, #1
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	d106      	bne.n	800d33a <__sflush_r+0x62>
 800d32c:	6829      	ldr	r1, [r5, #0]
 800d32e:	291d      	cmp	r1, #29
 800d330:	d82c      	bhi.n	800d38c <__sflush_r+0xb4>
 800d332:	4a29      	ldr	r2, [pc, #164]	; (800d3d8 <__sflush_r+0x100>)
 800d334:	40ca      	lsrs	r2, r1
 800d336:	07d6      	lsls	r6, r2, #31
 800d338:	d528      	bpl.n	800d38c <__sflush_r+0xb4>
 800d33a:	2200      	movs	r2, #0
 800d33c:	6062      	str	r2, [r4, #4]
 800d33e:	6922      	ldr	r2, [r4, #16]
 800d340:	04d9      	lsls	r1, r3, #19
 800d342:	6022      	str	r2, [r4, #0]
 800d344:	d504      	bpl.n	800d350 <__sflush_r+0x78>
 800d346:	1c42      	adds	r2, r0, #1
 800d348:	d101      	bne.n	800d34e <__sflush_r+0x76>
 800d34a:	682b      	ldr	r3, [r5, #0]
 800d34c:	b903      	cbnz	r3, 800d350 <__sflush_r+0x78>
 800d34e:	6560      	str	r0, [r4, #84]	; 0x54
 800d350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d352:	602f      	str	r7, [r5, #0]
 800d354:	2900      	cmp	r1, #0
 800d356:	d0cb      	beq.n	800d2f0 <__sflush_r+0x18>
 800d358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d35c:	4299      	cmp	r1, r3
 800d35e:	d002      	beq.n	800d366 <__sflush_r+0x8e>
 800d360:	4628      	mov	r0, r5
 800d362:	f7ff faa5 	bl	800c8b0 <_free_r>
 800d366:	2000      	movs	r0, #0
 800d368:	6360      	str	r0, [r4, #52]	; 0x34
 800d36a:	e7c2      	b.n	800d2f2 <__sflush_r+0x1a>
 800d36c:	6a21      	ldr	r1, [r4, #32]
 800d36e:	2301      	movs	r3, #1
 800d370:	4628      	mov	r0, r5
 800d372:	47b0      	blx	r6
 800d374:	1c41      	adds	r1, r0, #1
 800d376:	d1c7      	bne.n	800d308 <__sflush_r+0x30>
 800d378:	682b      	ldr	r3, [r5, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0c4      	beq.n	800d308 <__sflush_r+0x30>
 800d37e:	2b1d      	cmp	r3, #29
 800d380:	d001      	beq.n	800d386 <__sflush_r+0xae>
 800d382:	2b16      	cmp	r3, #22
 800d384:	d101      	bne.n	800d38a <__sflush_r+0xb2>
 800d386:	602f      	str	r7, [r5, #0]
 800d388:	e7b2      	b.n	800d2f0 <__sflush_r+0x18>
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d390:	81a3      	strh	r3, [r4, #12]
 800d392:	e7ae      	b.n	800d2f2 <__sflush_r+0x1a>
 800d394:	690f      	ldr	r7, [r1, #16]
 800d396:	2f00      	cmp	r7, #0
 800d398:	d0aa      	beq.n	800d2f0 <__sflush_r+0x18>
 800d39a:	0793      	lsls	r3, r2, #30
 800d39c:	bf18      	it	ne
 800d39e:	2300      	movne	r3, #0
 800d3a0:	680e      	ldr	r6, [r1, #0]
 800d3a2:	bf08      	it	eq
 800d3a4:	694b      	ldreq	r3, [r1, #20]
 800d3a6:	1bf6      	subs	r6, r6, r7
 800d3a8:	600f      	str	r7, [r1, #0]
 800d3aa:	608b      	str	r3, [r1, #8]
 800d3ac:	2e00      	cmp	r6, #0
 800d3ae:	dd9f      	ble.n	800d2f0 <__sflush_r+0x18>
 800d3b0:	4633      	mov	r3, r6
 800d3b2:	463a      	mov	r2, r7
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	6a21      	ldr	r1, [r4, #32]
 800d3b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d3bc:	47e0      	blx	ip
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	dc06      	bgt.n	800d3d0 <__sflush_r+0xf8>
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	e790      	b.n	800d2f2 <__sflush_r+0x1a>
 800d3d0:	4407      	add	r7, r0
 800d3d2:	1a36      	subs	r6, r6, r0
 800d3d4:	e7ea      	b.n	800d3ac <__sflush_r+0xd4>
 800d3d6:	bf00      	nop
 800d3d8:	20400001 	.word	0x20400001

0800d3dc <_fflush_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	690b      	ldr	r3, [r1, #16]
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	b913      	cbnz	r3, 800d3ec <_fflush_r+0x10>
 800d3e6:	2500      	movs	r5, #0
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	b118      	cbz	r0, 800d3f6 <_fflush_r+0x1a>
 800d3ee:	6983      	ldr	r3, [r0, #24]
 800d3f0:	b90b      	cbnz	r3, 800d3f6 <_fflush_r+0x1a>
 800d3f2:	f000 f887 	bl	800d504 <__sinit>
 800d3f6:	4b14      	ldr	r3, [pc, #80]	; (800d448 <_fflush_r+0x6c>)
 800d3f8:	429c      	cmp	r4, r3
 800d3fa:	d11b      	bne.n	800d434 <_fflush_r+0x58>
 800d3fc:	686c      	ldr	r4, [r5, #4]
 800d3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0ef      	beq.n	800d3e6 <_fflush_r+0xa>
 800d406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d408:	07d0      	lsls	r0, r2, #31
 800d40a:	d404      	bmi.n	800d416 <_fflush_r+0x3a>
 800d40c:	0599      	lsls	r1, r3, #22
 800d40e:	d402      	bmi.n	800d416 <_fflush_r+0x3a>
 800d410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d412:	f000 f915 	bl	800d640 <__retarget_lock_acquire_recursive>
 800d416:	4628      	mov	r0, r5
 800d418:	4621      	mov	r1, r4
 800d41a:	f7ff ff5d 	bl	800d2d8 <__sflush_r>
 800d41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d420:	4605      	mov	r5, r0
 800d422:	07da      	lsls	r2, r3, #31
 800d424:	d4e0      	bmi.n	800d3e8 <_fflush_r+0xc>
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	059b      	lsls	r3, r3, #22
 800d42a:	d4dd      	bmi.n	800d3e8 <_fflush_r+0xc>
 800d42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d42e:	f000 f908 	bl	800d642 <__retarget_lock_release_recursive>
 800d432:	e7d9      	b.n	800d3e8 <_fflush_r+0xc>
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <_fflush_r+0x70>)
 800d436:	429c      	cmp	r4, r3
 800d438:	d101      	bne.n	800d43e <_fflush_r+0x62>
 800d43a:	68ac      	ldr	r4, [r5, #8]
 800d43c:	e7df      	b.n	800d3fe <_fflush_r+0x22>
 800d43e:	4b04      	ldr	r3, [pc, #16]	; (800d450 <_fflush_r+0x74>)
 800d440:	429c      	cmp	r4, r3
 800d442:	bf08      	it	eq
 800d444:	68ec      	ldreq	r4, [r5, #12]
 800d446:	e7da      	b.n	800d3fe <_fflush_r+0x22>
 800d448:	0800ee24 	.word	0x0800ee24
 800d44c:	0800ee44 	.word	0x0800ee44
 800d450:	0800ee04 	.word	0x0800ee04

0800d454 <std>:
 800d454:	2300      	movs	r3, #0
 800d456:	b510      	push	{r4, lr}
 800d458:	4604      	mov	r4, r0
 800d45a:	e9c0 3300 	strd	r3, r3, [r0]
 800d45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d462:	6083      	str	r3, [r0, #8]
 800d464:	8181      	strh	r1, [r0, #12]
 800d466:	6643      	str	r3, [r0, #100]	; 0x64
 800d468:	81c2      	strh	r2, [r0, #14]
 800d46a:	6183      	str	r3, [r0, #24]
 800d46c:	4619      	mov	r1, r3
 800d46e:	2208      	movs	r2, #8
 800d470:	305c      	adds	r0, #92	; 0x5c
 800d472:	f7fb fe13 	bl	800909c <memset>
 800d476:	4b05      	ldr	r3, [pc, #20]	; (800d48c <std+0x38>)
 800d478:	6224      	str	r4, [r4, #32]
 800d47a:	6263      	str	r3, [r4, #36]	; 0x24
 800d47c:	4b04      	ldr	r3, [pc, #16]	; (800d490 <std+0x3c>)
 800d47e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d480:	4b04      	ldr	r3, [pc, #16]	; (800d494 <std+0x40>)
 800d482:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d484:	4b04      	ldr	r3, [pc, #16]	; (800d498 <std+0x44>)
 800d486:	6323      	str	r3, [r4, #48]	; 0x30
 800d488:	bd10      	pop	{r4, pc}
 800d48a:	bf00      	nop
 800d48c:	0800d7a9 	.word	0x0800d7a9
 800d490:	0800d7cb 	.word	0x0800d7cb
 800d494:	0800d803 	.word	0x0800d803
 800d498:	0800d827 	.word	0x0800d827

0800d49c <_cleanup_r>:
 800d49c:	4901      	ldr	r1, [pc, #4]	; (800d4a4 <_cleanup_r+0x8>)
 800d49e:	f000 b8af 	b.w	800d600 <_fwalk_reent>
 800d4a2:	bf00      	nop
 800d4a4:	0800d3dd 	.word	0x0800d3dd

0800d4a8 <__sfmoreglue>:
 800d4a8:	2268      	movs	r2, #104	; 0x68
 800d4aa:	b570      	push	{r4, r5, r6, lr}
 800d4ac:	1e4d      	subs	r5, r1, #1
 800d4ae:	4355      	muls	r5, r2
 800d4b0:	460e      	mov	r6, r1
 800d4b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4b6:	f7ff fa63 	bl	800c980 <_malloc_r>
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	b140      	cbz	r0, 800d4d0 <__sfmoreglue+0x28>
 800d4be:	2100      	movs	r1, #0
 800d4c0:	e9c0 1600 	strd	r1, r6, [r0]
 800d4c4:	300c      	adds	r0, #12
 800d4c6:	60a0      	str	r0, [r4, #8]
 800d4c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4cc:	f7fb fde6 	bl	800909c <memset>
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	bd70      	pop	{r4, r5, r6, pc}

0800d4d4 <__sfp_lock_acquire>:
 800d4d4:	4801      	ldr	r0, [pc, #4]	; (800d4dc <__sfp_lock_acquire+0x8>)
 800d4d6:	f000 b8b3 	b.w	800d640 <__retarget_lock_acquire_recursive>
 800d4da:	bf00      	nop
 800d4dc:	2000377d 	.word	0x2000377d

0800d4e0 <__sfp_lock_release>:
 800d4e0:	4801      	ldr	r0, [pc, #4]	; (800d4e8 <__sfp_lock_release+0x8>)
 800d4e2:	f000 b8ae 	b.w	800d642 <__retarget_lock_release_recursive>
 800d4e6:	bf00      	nop
 800d4e8:	2000377d 	.word	0x2000377d

0800d4ec <__sinit_lock_acquire>:
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <__sinit_lock_acquire+0x8>)
 800d4ee:	f000 b8a7 	b.w	800d640 <__retarget_lock_acquire_recursive>
 800d4f2:	bf00      	nop
 800d4f4:	2000377e 	.word	0x2000377e

0800d4f8 <__sinit_lock_release>:
 800d4f8:	4801      	ldr	r0, [pc, #4]	; (800d500 <__sinit_lock_release+0x8>)
 800d4fa:	f000 b8a2 	b.w	800d642 <__retarget_lock_release_recursive>
 800d4fe:	bf00      	nop
 800d500:	2000377e 	.word	0x2000377e

0800d504 <__sinit>:
 800d504:	b510      	push	{r4, lr}
 800d506:	4604      	mov	r4, r0
 800d508:	f7ff fff0 	bl	800d4ec <__sinit_lock_acquire>
 800d50c:	69a3      	ldr	r3, [r4, #24]
 800d50e:	b11b      	cbz	r3, 800d518 <__sinit+0x14>
 800d510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d514:	f7ff bff0 	b.w	800d4f8 <__sinit_lock_release>
 800d518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d51c:	6523      	str	r3, [r4, #80]	; 0x50
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <__sinit+0x68>)
 800d520:	4a13      	ldr	r2, [pc, #76]	; (800d570 <__sinit+0x6c>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	62a2      	str	r2, [r4, #40]	; 0x28
 800d526:	42a3      	cmp	r3, r4
 800d528:	bf08      	it	eq
 800d52a:	2301      	moveq	r3, #1
 800d52c:	4620      	mov	r0, r4
 800d52e:	bf08      	it	eq
 800d530:	61a3      	streq	r3, [r4, #24]
 800d532:	f000 f81f 	bl	800d574 <__sfp>
 800d536:	6060      	str	r0, [r4, #4]
 800d538:	4620      	mov	r0, r4
 800d53a:	f000 f81b 	bl	800d574 <__sfp>
 800d53e:	60a0      	str	r0, [r4, #8]
 800d540:	4620      	mov	r0, r4
 800d542:	f000 f817 	bl	800d574 <__sfp>
 800d546:	2200      	movs	r2, #0
 800d548:	2104      	movs	r1, #4
 800d54a:	60e0      	str	r0, [r4, #12]
 800d54c:	6860      	ldr	r0, [r4, #4]
 800d54e:	f7ff ff81 	bl	800d454 <std>
 800d552:	2201      	movs	r2, #1
 800d554:	2109      	movs	r1, #9
 800d556:	68a0      	ldr	r0, [r4, #8]
 800d558:	f7ff ff7c 	bl	800d454 <std>
 800d55c:	2202      	movs	r2, #2
 800d55e:	2112      	movs	r1, #18
 800d560:	68e0      	ldr	r0, [r4, #12]
 800d562:	f7ff ff77 	bl	800d454 <std>
 800d566:	2301      	movs	r3, #1
 800d568:	61a3      	str	r3, [r4, #24]
 800d56a:	e7d1      	b.n	800d510 <__sinit+0xc>
 800d56c:	0800e9bc 	.word	0x0800e9bc
 800d570:	0800d49d 	.word	0x0800d49d

0800d574 <__sfp>:
 800d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d576:	4607      	mov	r7, r0
 800d578:	f7ff ffac 	bl	800d4d4 <__sfp_lock_acquire>
 800d57c:	4b1e      	ldr	r3, [pc, #120]	; (800d5f8 <__sfp+0x84>)
 800d57e:	681e      	ldr	r6, [r3, #0]
 800d580:	69b3      	ldr	r3, [r6, #24]
 800d582:	b913      	cbnz	r3, 800d58a <__sfp+0x16>
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff ffbd 	bl	800d504 <__sinit>
 800d58a:	3648      	adds	r6, #72	; 0x48
 800d58c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d590:	3b01      	subs	r3, #1
 800d592:	d503      	bpl.n	800d59c <__sfp+0x28>
 800d594:	6833      	ldr	r3, [r6, #0]
 800d596:	b30b      	cbz	r3, 800d5dc <__sfp+0x68>
 800d598:	6836      	ldr	r6, [r6, #0]
 800d59a:	e7f7      	b.n	800d58c <__sfp+0x18>
 800d59c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5a0:	b9d5      	cbnz	r5, 800d5d8 <__sfp+0x64>
 800d5a2:	4b16      	ldr	r3, [pc, #88]	; (800d5fc <__sfp+0x88>)
 800d5a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5a8:	60e3      	str	r3, [r4, #12]
 800d5aa:	6665      	str	r5, [r4, #100]	; 0x64
 800d5ac:	f000 f847 	bl	800d63e <__retarget_lock_init_recursive>
 800d5b0:	f7ff ff96 	bl	800d4e0 <__sfp_lock_release>
 800d5b4:	2208      	movs	r2, #8
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5c0:	6025      	str	r5, [r4, #0]
 800d5c2:	61a5      	str	r5, [r4, #24]
 800d5c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5c8:	f7fb fd68 	bl	800909c <memset>
 800d5cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	3468      	adds	r4, #104	; 0x68
 800d5da:	e7d9      	b.n	800d590 <__sfp+0x1c>
 800d5dc:	2104      	movs	r1, #4
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f7ff ff62 	bl	800d4a8 <__sfmoreglue>
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	6030      	str	r0, [r6, #0]
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1d5      	bne.n	800d598 <__sfp+0x24>
 800d5ec:	f7ff ff78 	bl	800d4e0 <__sfp_lock_release>
 800d5f0:	230c      	movs	r3, #12
 800d5f2:	603b      	str	r3, [r7, #0]
 800d5f4:	e7ee      	b.n	800d5d4 <__sfp+0x60>
 800d5f6:	bf00      	nop
 800d5f8:	0800e9bc 	.word	0x0800e9bc
 800d5fc:	ffff0001 	.word	0xffff0001

0800d600 <_fwalk_reent>:
 800d600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d604:	4606      	mov	r6, r0
 800d606:	4688      	mov	r8, r1
 800d608:	2700      	movs	r7, #0
 800d60a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d60e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d612:	f1b9 0901 	subs.w	r9, r9, #1
 800d616:	d505      	bpl.n	800d624 <_fwalk_reent+0x24>
 800d618:	6824      	ldr	r4, [r4, #0]
 800d61a:	2c00      	cmp	r4, #0
 800d61c:	d1f7      	bne.n	800d60e <_fwalk_reent+0xe>
 800d61e:	4638      	mov	r0, r7
 800d620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d624:	89ab      	ldrh	r3, [r5, #12]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d907      	bls.n	800d63a <_fwalk_reent+0x3a>
 800d62a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d62e:	3301      	adds	r3, #1
 800d630:	d003      	beq.n	800d63a <_fwalk_reent+0x3a>
 800d632:	4629      	mov	r1, r5
 800d634:	4630      	mov	r0, r6
 800d636:	47c0      	blx	r8
 800d638:	4307      	orrs	r7, r0
 800d63a:	3568      	adds	r5, #104	; 0x68
 800d63c:	e7e9      	b.n	800d612 <_fwalk_reent+0x12>

0800d63e <__retarget_lock_init_recursive>:
 800d63e:	4770      	bx	lr

0800d640 <__retarget_lock_acquire_recursive>:
 800d640:	4770      	bx	lr

0800d642 <__retarget_lock_release_recursive>:
 800d642:	4770      	bx	lr

0800d644 <__swhatbuf_r>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	460e      	mov	r6, r1
 800d648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64c:	4614      	mov	r4, r2
 800d64e:	2900      	cmp	r1, #0
 800d650:	461d      	mov	r5, r3
 800d652:	b096      	sub	sp, #88	; 0x58
 800d654:	da08      	bge.n	800d668 <__swhatbuf_r+0x24>
 800d656:	2200      	movs	r2, #0
 800d658:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d65c:	602a      	str	r2, [r5, #0]
 800d65e:	061a      	lsls	r2, r3, #24
 800d660:	d410      	bmi.n	800d684 <__swhatbuf_r+0x40>
 800d662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d666:	e00e      	b.n	800d686 <__swhatbuf_r+0x42>
 800d668:	466a      	mov	r2, sp
 800d66a:	f000 f903 	bl	800d874 <_fstat_r>
 800d66e:	2800      	cmp	r0, #0
 800d670:	dbf1      	blt.n	800d656 <__swhatbuf_r+0x12>
 800d672:	9a01      	ldr	r2, [sp, #4]
 800d674:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d678:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d67c:	425a      	negs	r2, r3
 800d67e:	415a      	adcs	r2, r3
 800d680:	602a      	str	r2, [r5, #0]
 800d682:	e7ee      	b.n	800d662 <__swhatbuf_r+0x1e>
 800d684:	2340      	movs	r3, #64	; 0x40
 800d686:	2000      	movs	r0, #0
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	b016      	add	sp, #88	; 0x58
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d690 <__smakebuf_r>:
 800d690:	898b      	ldrh	r3, [r1, #12]
 800d692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d694:	079d      	lsls	r5, r3, #30
 800d696:	4606      	mov	r6, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	d507      	bpl.n	800d6ac <__smakebuf_r+0x1c>
 800d69c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	6123      	str	r3, [r4, #16]
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	6163      	str	r3, [r4, #20]
 800d6a8:	b002      	add	sp, #8
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	466a      	mov	r2, sp
 800d6ae:	ab01      	add	r3, sp, #4
 800d6b0:	f7ff ffc8 	bl	800d644 <__swhatbuf_r>
 800d6b4:	9900      	ldr	r1, [sp, #0]
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f7ff f961 	bl	800c980 <_malloc_r>
 800d6be:	b948      	cbnz	r0, 800d6d4 <__smakebuf_r+0x44>
 800d6c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c4:	059a      	lsls	r2, r3, #22
 800d6c6:	d4ef      	bmi.n	800d6a8 <__smakebuf_r+0x18>
 800d6c8:	f023 0303 	bic.w	r3, r3, #3
 800d6cc:	f043 0302 	orr.w	r3, r3, #2
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	e7e3      	b.n	800d69c <__smakebuf_r+0xc>
 800d6d4:	4b0d      	ldr	r3, [pc, #52]	; (800d70c <__smakebuf_r+0x7c>)
 800d6d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	6020      	str	r0, [r4, #0]
 800d6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	9b00      	ldr	r3, [sp, #0]
 800d6e4:	6120      	str	r0, [r4, #16]
 800d6e6:	6163      	str	r3, [r4, #20]
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	b15b      	cbz	r3, 800d704 <__smakebuf_r+0x74>
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f2:	f000 f8d1 	bl	800d898 <_isatty_r>
 800d6f6:	b128      	cbz	r0, 800d704 <__smakebuf_r+0x74>
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	f023 0303 	bic.w	r3, r3, #3
 800d6fe:	f043 0301 	orr.w	r3, r3, #1
 800d702:	81a3      	strh	r3, [r4, #12]
 800d704:	89a0      	ldrh	r0, [r4, #12]
 800d706:	4305      	orrs	r5, r0
 800d708:	81a5      	strh	r5, [r4, #12]
 800d70a:	e7cd      	b.n	800d6a8 <__smakebuf_r+0x18>
 800d70c:	0800d49d 	.word	0x0800d49d

0800d710 <_malloc_usable_size_r>:
 800d710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d714:	1f18      	subs	r0, r3, #4
 800d716:	2b00      	cmp	r3, #0
 800d718:	bfbc      	itt	lt
 800d71a:	580b      	ldrlt	r3, [r1, r0]
 800d71c:	18c0      	addlt	r0, r0, r3
 800d71e:	4770      	bx	lr

0800d720 <_raise_r>:
 800d720:	291f      	cmp	r1, #31
 800d722:	b538      	push	{r3, r4, r5, lr}
 800d724:	4604      	mov	r4, r0
 800d726:	460d      	mov	r5, r1
 800d728:	d904      	bls.n	800d734 <_raise_r+0x14>
 800d72a:	2316      	movs	r3, #22
 800d72c:	6003      	str	r3, [r0, #0]
 800d72e:	f04f 30ff 	mov.w	r0, #4294967295
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d736:	b112      	cbz	r2, 800d73e <_raise_r+0x1e>
 800d738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d73c:	b94b      	cbnz	r3, 800d752 <_raise_r+0x32>
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 f830 	bl	800d7a4 <_getpid_r>
 800d744:	462a      	mov	r2, r5
 800d746:	4601      	mov	r1, r0
 800d748:	4620      	mov	r0, r4
 800d74a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d74e:	f000 b817 	b.w	800d780 <_kill_r>
 800d752:	2b01      	cmp	r3, #1
 800d754:	d00a      	beq.n	800d76c <_raise_r+0x4c>
 800d756:	1c59      	adds	r1, r3, #1
 800d758:	d103      	bne.n	800d762 <_raise_r+0x42>
 800d75a:	2316      	movs	r3, #22
 800d75c:	6003      	str	r3, [r0, #0]
 800d75e:	2001      	movs	r0, #1
 800d760:	e7e7      	b.n	800d732 <_raise_r+0x12>
 800d762:	2400      	movs	r4, #0
 800d764:	4628      	mov	r0, r5
 800d766:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d76a:	4798      	blx	r3
 800d76c:	2000      	movs	r0, #0
 800d76e:	e7e0      	b.n	800d732 <_raise_r+0x12>

0800d770 <raise>:
 800d770:	4b02      	ldr	r3, [pc, #8]	; (800d77c <raise+0xc>)
 800d772:	4601      	mov	r1, r0
 800d774:	6818      	ldr	r0, [r3, #0]
 800d776:	f7ff bfd3 	b.w	800d720 <_raise_r>
 800d77a:	bf00      	nop
 800d77c:	2000001c 	.word	0x2000001c

0800d780 <_kill_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	2300      	movs	r3, #0
 800d784:	4d06      	ldr	r5, [pc, #24]	; (800d7a0 <_kill_r+0x20>)
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	4611      	mov	r1, r2
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	f7f5 fadc 	bl	8002d4a <_kill>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d102      	bne.n	800d79c <_kill_r+0x1c>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	b103      	cbz	r3, 800d79c <_kill_r+0x1c>
 800d79a:	6023      	str	r3, [r4, #0]
 800d79c:	bd38      	pop	{r3, r4, r5, pc}
 800d79e:	bf00      	nop
 800d7a0:	20003778 	.word	0x20003778

0800d7a4 <_getpid_r>:
 800d7a4:	f7f5 baca 	b.w	8002d3c <_getpid>

0800d7a8 <__sread>:
 800d7a8:	b510      	push	{r4, lr}
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b0:	f000 f894 	bl	800d8dc <_read_r>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	bfab      	itete	ge
 800d7b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d7bc:	181b      	addge	r3, r3, r0
 800d7be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7c2:	bfac      	ite	ge
 800d7c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7c6:	81a3      	strhlt	r3, [r4, #12]
 800d7c8:	bd10      	pop	{r4, pc}

0800d7ca <__swrite>:
 800d7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ce:	461f      	mov	r7, r3
 800d7d0:	898b      	ldrh	r3, [r1, #12]
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	05db      	lsls	r3, r3, #23
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	4616      	mov	r6, r2
 800d7da:	d505      	bpl.n	800d7e8 <__swrite+0x1e>
 800d7dc:	2302      	movs	r3, #2
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e4:	f000 f868 	bl	800d8b8 <_lseek_r>
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7f0:	81a3      	strh	r3, [r4, #12]
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	463b      	mov	r3, r7
 800d7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fe:	f000 b817 	b.w	800d830 <_write_r>

0800d802 <__sseek>:
 800d802:	b510      	push	{r4, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80a:	f000 f855 	bl	800d8b8 <_lseek_r>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	bf15      	itete	ne
 800d814:	6560      	strne	r0, [r4, #84]	; 0x54
 800d816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d81a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d81e:	81a3      	strheq	r3, [r4, #12]
 800d820:	bf18      	it	ne
 800d822:	81a3      	strhne	r3, [r4, #12]
 800d824:	bd10      	pop	{r4, pc}

0800d826 <__sclose>:
 800d826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82a:	f000 b813 	b.w	800d854 <_close_r>
	...

0800d830 <_write_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	4611      	mov	r1, r2
 800d838:	2200      	movs	r2, #0
 800d83a:	4d05      	ldr	r5, [pc, #20]	; (800d850 <_write_r+0x20>)
 800d83c:	602a      	str	r2, [r5, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f5 faba 	bl	8002db8 <_write>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_write_r+0x1e>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_write_r+0x1e>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	20003778 	.word	0x20003778

0800d854 <_close_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	2300      	movs	r3, #0
 800d858:	4d05      	ldr	r5, [pc, #20]	; (800d870 <_close_r+0x1c>)
 800d85a:	4604      	mov	r4, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	f7f5 fac6 	bl	8002df0 <_close>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_close_r+0x1a>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_close_r+0x1a>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	20003778 	.word	0x20003778

0800d874 <_fstat_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	2300      	movs	r3, #0
 800d878:	4d06      	ldr	r5, [pc, #24]	; (800d894 <_fstat_r+0x20>)
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	4611      	mov	r1, r2
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	f7f5 fac0 	bl	8002e06 <_fstat>
 800d886:	1c43      	adds	r3, r0, #1
 800d888:	d102      	bne.n	800d890 <_fstat_r+0x1c>
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	b103      	cbz	r3, 800d890 <_fstat_r+0x1c>
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	bd38      	pop	{r3, r4, r5, pc}
 800d892:	bf00      	nop
 800d894:	20003778 	.word	0x20003778

0800d898 <_isatty_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	2300      	movs	r3, #0
 800d89c:	4d05      	ldr	r5, [pc, #20]	; (800d8b4 <_isatty_r+0x1c>)
 800d89e:	4604      	mov	r4, r0
 800d8a0:	4608      	mov	r0, r1
 800d8a2:	602b      	str	r3, [r5, #0]
 800d8a4:	f7f5 fabe 	bl	8002e24 <_isatty>
 800d8a8:	1c43      	adds	r3, r0, #1
 800d8aa:	d102      	bne.n	800d8b2 <_isatty_r+0x1a>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	b103      	cbz	r3, 800d8b2 <_isatty_r+0x1a>
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	bd38      	pop	{r3, r4, r5, pc}
 800d8b4:	20003778 	.word	0x20003778

0800d8b8 <_lseek_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4608      	mov	r0, r1
 800d8be:	4611      	mov	r1, r2
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4d05      	ldr	r5, [pc, #20]	; (800d8d8 <_lseek_r+0x20>)
 800d8c4:	602a      	str	r2, [r5, #0]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	f7f5 fab6 	bl	8002e38 <_lseek>
 800d8cc:	1c43      	adds	r3, r0, #1
 800d8ce:	d102      	bne.n	800d8d6 <_lseek_r+0x1e>
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	b103      	cbz	r3, 800d8d6 <_lseek_r+0x1e>
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	bd38      	pop	{r3, r4, r5, pc}
 800d8d8:	20003778 	.word	0x20003778

0800d8dc <_read_r>:
 800d8dc:	b538      	push	{r3, r4, r5, lr}
 800d8de:	4604      	mov	r4, r0
 800d8e0:	4608      	mov	r0, r1
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	4d05      	ldr	r5, [pc, #20]	; (800d8fc <_read_r+0x20>)
 800d8e8:	602a      	str	r2, [r5, #0]
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f7f5 fa47 	bl	8002d7e <_read>
 800d8f0:	1c43      	adds	r3, r0, #1
 800d8f2:	d102      	bne.n	800d8fa <_read_r+0x1e>
 800d8f4:	682b      	ldr	r3, [r5, #0]
 800d8f6:	b103      	cbz	r3, 800d8fa <_read_r+0x1e>
 800d8f8:	6023      	str	r3, [r4, #0]
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	20003778 	.word	0x20003778

0800d900 <_init>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	bf00      	nop
 800d904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d906:	bc08      	pop	{r3}
 800d908:	469e      	mov	lr, r3
 800d90a:	4770      	bx	lr

0800d90c <_fini>:
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90e:	bf00      	nop
 800d910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d912:	bc08      	pop	{r3}
 800d914:	469e      	mov	lr, r3
 800d916:	4770      	bx	lr
