
CubeIDE_Multimetr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000151c  0800d708  0800d708  0001d708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec24  0800ec24  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec24  0800ec24  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec24  0800ec24  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec24  0800ec24  0001ec24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec28  0800ec28  0001ec28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ec2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003538  200001f0  0800ee1c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003728  0800ee1c  00023728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb64  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f14  00000000  00000000  0003ed7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00042c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  000447d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd42  00000000  00000000  00046180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f535  00000000  00000000  00061ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fe8e  00000000  00000000  000813f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a4c  00000000  00000000  001212d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d6f0 	.word	0x0800d6f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800d6f0 	.word	0x0800d6f0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2uiz>:
 8001124:	0042      	lsls	r2, r0, #1
 8001126:	d20e      	bcs.n	8001146 <__aeabi_f2uiz+0x22>
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30b      	bcc.n	8001146 <__aeabi_f2uiz+0x22>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d409      	bmi.n	800114c <__aeabi_f2uiz+0x28>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	4770      	bx	lr
 8001146:	f04f 0000 	mov.w	r0, #0
 800114a:	4770      	bx	lr
 800114c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001150:	d101      	bne.n	8001156 <__aeabi_f2uiz+0x32>
 8001152:	0242      	lsls	r2, r0, #9
 8001154:	d102      	bne.n	800115c <__aeabi_f2uiz+0x38>
 8001156:	f04f 30ff 	mov.w	r0, #4294967295
 800115a:	4770      	bx	lr
 800115c:	f04f 0000 	mov.w	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_d2lz>:
 8001164:	b538      	push	{r3, r4, r5, lr}
 8001166:	4605      	mov	r5, r0
 8001168:	460c      	mov	r4, r1
 800116a:	2200      	movs	r2, #0
 800116c:	2300      	movs	r3, #0
 800116e:	4628      	mov	r0, r5
 8001170:	4621      	mov	r1, r4
 8001172:	f7ff fc2d 	bl	80009d0 <__aeabi_dcmplt>
 8001176:	b928      	cbnz	r0, 8001184 <__aeabi_d2lz+0x20>
 8001178:	4628      	mov	r0, r5
 800117a:	4621      	mov	r1, r4
 800117c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001180:	f000 b80a 	b.w	8001198 <__aeabi_d2ulz>
 8001184:	4628      	mov	r0, r5
 8001186:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800118a:	f000 f805 	bl	8001198 <__aeabi_d2ulz>
 800118e:	4240      	negs	r0, r0
 8001190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop

08001198 <__aeabi_d2ulz>:
 8001198:	b5d0      	push	{r4, r6, r7, lr}
 800119a:	2200      	movs	r2, #0
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <__aeabi_d2ulz+0x34>)
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	f7ff f9a3 	bl	80004ec <__aeabi_dmul>
 80011a6:	f7ff fc79 	bl	8000a9c <__aeabi_d2uiz>
 80011aa:	4604      	mov	r4, r0
 80011ac:	f7ff f924 	bl	80003f8 <__aeabi_ui2d>
 80011b0:	2200      	movs	r2, #0
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <__aeabi_d2ulz+0x38>)
 80011b4:	f7ff f99a 	bl	80004ec <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4630      	mov	r0, r6
 80011be:	4639      	mov	r1, r7
 80011c0:	f7fe ffdc 	bl	800017c <__aeabi_dsub>
 80011c4:	f7ff fc6a 	bl	8000a9c <__aeabi_d2uiz>
 80011c8:	4621      	mov	r1, r4
 80011ca:	bdd0      	pop	{r4, r6, r7, pc}
 80011cc:	3df00000 	.word	0x3df00000
 80011d0:	41f00000 	.word	0x41f00000

080011d4 <ILI9341_Write_Command>:



/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e4:	4810      	ldr	r0, [pc, #64]	; (8001228 <ILI9341_Write_Command+0x54>)
 80011e6:	f002 fb6b 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80011ea:	2200      	movs	r2, #0
 80011ec:	2102      	movs	r1, #2
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <ILI9341_Write_Command+0x54>)
 80011f0:	f002 fb66 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Command;
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <ILI9341_Write_Command+0x58>)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80011fa:	bf00      	nop
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <ILI9341_Write_Command+0x58>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f9      	beq.n	80011fc <ILI9341_Write_Command+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001208:	bf00      	nop
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <ILI9341_Write_Command+0x58>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <ILI9341_Write_Command+0x36>
	DISP_CS_UNSELECT;
 8001216:	2201      	movs	r2, #1
 8001218:	2102      	movs	r1, #2
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <ILI9341_Write_Command+0x54>)
 800121c:	f002 fb50 	bl	80038c0 <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40013000 	.word	0x40013000

08001230 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	DISP_DC_DATA;
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001240:	4810      	ldr	r0, [pc, #64]	; (8001284 <ILI9341_Write_Data+0x54>)
 8001242:	f002 fb3d 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 8001246:	2200      	movs	r2, #0
 8001248:	2102      	movs	r1, #2
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <ILI9341_Write_Data+0x54>)
 800124c:	f002 fb38 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = Data;
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <ILI9341_Write_Data+0x58>)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	60d3      	str	r3, [r2, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001256:	bf00      	nop
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <ILI9341_Write_Data+0x58>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <ILI9341_Write_Data+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001264:	bf00      	nop
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <ILI9341_Write_Data+0x58>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f9      	bne.n	8001266 <ILI9341_Write_Data+0x36>
	DISP_CS_UNSELECT;
 8001272:	2201      	movs	r2, #1
 8001274:	2102      	movs	r1, #2
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <ILI9341_Write_Data+0x54>)
 8001278:	f002 fb22 	bl	80038c0 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40013000 	.word	0x40013000

0800128c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	4608      	mov	r0, r1
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	80fb      	strh	r3, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	80bb      	strh	r3, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	803b      	strh	r3, [r7, #0]
	DISP_DC_CMD;
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	4864      	ldr	r0, [pc, #400]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 80012b2:	f002 fb05 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4862      	ldr	r0, [pc, #392]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 80012bc:	f002 fb00 	bl	80038c0 <HAL_GPIO_WritePin>

	DISP_SPI->DR = 0x2A;
 80012c0:	4b61      	ldr	r3, [pc, #388]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80012c2:	222a      	movs	r2, #42	; 0x2a
 80012c4:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012c6:	bf00      	nop
 80012c8:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <ILI9341_Set_Address+0x3c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80012d4:	bf00      	nop
 80012d6:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <ILI9341_Set_Address+0x4a>

	DISP_DC_DATA;
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012e8:	4856      	ldr	r0, [pc, #344]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 80012ea:	f002 fae9 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(X1 >> 8);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80012f8:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80012fa:	bf00      	nop
 80012fc:	4b52      	ldr	r3, [pc, #328]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f9      	beq.n	80012fc <ILI9341_Set_Address+0x70>
	DISP_SPI->DR = (uint8_t)X1;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 800130e:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001310:	bf00      	nop
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f9      	beq.n	8001312 <ILI9341_Set_Address+0x86>
	DISP_SPI->DR = (uint8_t)(X2 >> 8);
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b48      	ldr	r3, [pc, #288]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001328:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800132a:	bf00      	nop
 800132c:	4b46      	ldr	r3, [pc, #280]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f9      	beq.n	800132c <ILI9341_Set_Address+0xa0>
	DISP_SPI->DR = (uint8_t)X2;
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 800133e:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001340:	bf00      	nop
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f9      	beq.n	8001342 <ILI9341_Set_Address+0xb6>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800134e:	bf00      	nop
 8001350:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <ILI9341_Set_Address+0xc4>

	DISP_DC_CMD;
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001362:	4838      	ldr	r0, [pc, #224]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 8001364:	f002 faac 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2B;
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 800136a:	222b      	movs	r2, #43	; 0x2b
 800136c:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 800136e:	bf00      	nop
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f9      	beq.n	8001370 <ILI9341_Set_Address+0xe4>
	while(DISP_SPI->SR & SPI_SR_BSY);
 800137c:	bf00      	nop
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f9      	bne.n	800137e <ILI9341_Set_Address+0xf2>

	DISP_DC_DATA;
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 8001392:	f002 fa95 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = (uint8_t)(Y1 >> 8);
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013a0:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013a2:	bf00      	nop
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f9      	beq.n	80013a4 <ILI9341_Set_Address+0x118>
	DISP_SPI->DR = (uint8_t)Y1;
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013b6:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013b8:	bf00      	nop
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f9      	beq.n	80013ba <ILI9341_Set_Address+0x12e>
	DISP_SPI->DR = (uint8_t)(Y2 >> 8);
 80013c6:	883b      	ldrh	r3, [r7, #0]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013d0:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013d2:	bf00      	nop
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f9      	beq.n	80013d4 <ILI9341_Set_Address+0x148>
	DISP_SPI->DR = (uint8_t)Y2;
 80013e0:	883b      	ldrh	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013e6:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80013e8:	bf00      	nop
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f9      	beq.n	80013ea <ILI9341_Set_Address+0x15e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80013f6:	bf00      	nop
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <ILI9341_Set_Address+0x16c>

	DISP_DC_CMD;
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 800140c:	f002 fa58 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x2C;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001412:	222c      	movs	r2, #44	; 0x2c
 8001414:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 8001416:	bf00      	nop
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f9      	beq.n	8001418 <ILI9341_Set_Address+0x18c>
	while(DISP_SPI->SR & SPI_SR_BSY);
 8001424:	bf00      	nop
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <ILI9341_Set_Address+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <ILI9341_Set_Address+0x19a>
	DISP_CS_UNSELECT;
 8001432:	2201      	movs	r2, #1
 8001434:	2102      	movs	r1, #2
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <ILI9341_Set_Address+0x1b8>)
 8001438:	f002 fa42 	bl	80038c0 <HAL_GPIO_WritePin>
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40013000 	.word	0x40013000

0800144c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	DISP_RST_RESET;
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <ILI9341_Reset+0x38>)
 8001458:	f002 fa32 	bl	80038c0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800145c:	20c8      	movs	r0, #200	; 0xc8
 800145e:	f001 fc81 	bl	8002d64 <HAL_Delay>
	DISP_CS_SELECT;
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <ILI9341_Reset+0x38>)
 8001468:	f002 fa2a 	bl	80038c0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800146c:	20c8      	movs	r0, #200	; 0xc8
 800146e:	f001 fc79 	bl	8002d64 <HAL_Delay>
	DISP_RST_WORK;
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <ILI9341_Reset+0x38>)
 800147a:	f002 fa21 	bl	80038c0 <HAL_GPIO_WritePin>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010c00 	.word	0x40010c00

08001488 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	DISP_DC_CMD;
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001498:	482e      	ldr	r0, [pc, #184]	; (8001554 <ILI9341_Set_Rotation+0xcc>)
 800149a:	f002 fa11 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	482c      	ldr	r0, [pc, #176]	; (8001554 <ILI9341_Set_Rotation+0xcc>)
 80014a4:	f002 fa0c 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_SPI->DR = 0x36;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <ILI9341_Set_Rotation+0xd0>)
 80014aa:	2236      	movs	r2, #54	; 0x36
 80014ac:	60da      	str	r2, [r3, #12]
	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80014ae:	bf00      	nop
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <ILI9341_Set_Rotation+0xd0>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f9      	beq.n	80014b0 <ILI9341_Set_Rotation+0x28>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80014bc:	bf00      	nop
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <ILI9341_Set_Rotation+0xd0>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <ILI9341_Set_Rotation+0x36>
	DISP_CS_UNSELECT;
 80014ca:	2201      	movs	r2, #1
 80014cc:	2102      	movs	r1, #2
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <ILI9341_Set_Rotation+0xcc>)
 80014d0:	f002 f9f6 	bl	80038c0 <HAL_GPIO_WritePin>

	switch(Rotation)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d836      	bhi.n	8001548 <ILI9341_Set_Rotation+0xc0>
 80014da:	a201      	add	r2, pc, #4	; (adr r2, 80014e0 <ILI9341_Set_Rotation+0x58>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080014f1 	.word	0x080014f1
 80014e4:	08001507 	.word	0x08001507
 80014e8:	0800151d 	.word	0x0800151d
 80014ec:	08001533 	.word	0x08001533
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80014f0:	2048      	movs	r0, #72	; 0x48
 80014f2:	f7ff fe9d 	bl	8001230 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <ILI9341_Set_Rotation+0xd4>)
 80014f8:	22f0      	movs	r2, #240	; 0xf0
 80014fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <ILI9341_Set_Rotation+0xd8>)
 80014fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001502:	801a      	strh	r2, [r3, #0]
			break;
 8001504:	e021      	b.n	800154a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001506:	2028      	movs	r0, #40	; 0x28
 8001508:	f7ff fe92 	bl	8001230 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <ILI9341_Set_Rotation+0xd4>)
 800150e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001512:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <ILI9341_Set_Rotation+0xd8>)
 8001516:	22f0      	movs	r2, #240	; 0xf0
 8001518:	801a      	strh	r2, [r3, #0]
			break;
 800151a:	e016      	b.n	800154a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 800151c:	2088      	movs	r0, #136	; 0x88
 800151e:	f7ff fe87 	bl	8001230 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <ILI9341_Set_Rotation+0xd4>)
 8001524:	22f0      	movs	r2, #240	; 0xf0
 8001526:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <ILI9341_Set_Rotation+0xd8>)
 800152a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800152e:	801a      	strh	r2, [r3, #0]
			break;
 8001530:	e00b      	b.n	800154a <ILI9341_Set_Rotation+0xc2>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001532:	20e8      	movs	r0, #232	; 0xe8
 8001534:	f7ff fe7c 	bl	8001230 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <ILI9341_Set_Rotation+0xd4>)
 800153a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800153e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <ILI9341_Set_Rotation+0xd8>)
 8001542:	22f0      	movs	r2, #240	; 0xf0
 8001544:	801a      	strh	r2, [r3, #0]
			break;
 8001546:	e000      	b.n	800154a <ILI9341_Set_Rotation+0xc2>
		default:
			break;
 8001548:	bf00      	nop
	}
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40013000 	.word	0x40013000
 800155c:	20000002 	.word	0x20000002
 8001560:	20000000 	.word	0x20000000

08001564 <ILI9341_Init>:


/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	DISP_RST_WORK; /*Enable LCD display*/
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156e:	4885      	ldr	r0, [pc, #532]	; (8001784 <ILI9341_Init+0x220>)
 8001570:	f002 f9a6 	bl	80038c0 <HAL_GPIO_WritePin>
	//DISP_CS_SELECT; /* Initialize SPI */
	ILI9341_Reset();
 8001574:	f7ff ff6a 	bl	800144c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fe2b 	bl	80011d4 <ILI9341_Write_Command>
	HAL_Delay(1000);
 800157e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001582:	f001 fbef 	bl	8002d64 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8001586:	20cb      	movs	r0, #203	; 0xcb
 8001588:	f7ff fe24 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 800158c:	2039      	movs	r0, #57	; 0x39
 800158e:	f7ff fe4f 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8001592:	202c      	movs	r0, #44	; 0x2c
 8001594:	f7ff fe4c 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fe49 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 800159e:	2034      	movs	r0, #52	; 0x34
 80015a0:	f7ff fe46 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fe43 	bl	8001230 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 80015aa:	20cf      	movs	r0, #207	; 0xcf
 80015ac:	f7ff fe12 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fe3d 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80015b6:	20c1      	movs	r0, #193	; 0xc1
 80015b8:	f7ff fe3a 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80015bc:	2030      	movs	r0, #48	; 0x30
 80015be:	f7ff fe37 	bl	8001230 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80015c2:	20e8      	movs	r0, #232	; 0xe8
 80015c4:	f7ff fe06 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80015c8:	2085      	movs	r0, #133	; 0x85
 80015ca:	f7ff fe31 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fe2e 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f7ff fe2b 	bl	8001230 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80015da:	20ea      	movs	r0, #234	; 0xea
 80015dc:	f7ff fdfa 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fe25 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fe22 	bl	8001230 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80015ec:	20ed      	movs	r0, #237	; 0xed
 80015ee:	f7ff fdf1 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f7ff fe1c 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f7ff fe19 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80015fe:	2012      	movs	r0, #18
 8001600:	f7ff fe16 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8001604:	2081      	movs	r0, #129	; 0x81
 8001606:	f7ff fe13 	bl	8001230 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 800160a:	20f7      	movs	r0, #247	; 0xf7
 800160c:	f7ff fde2 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8001610:	2020      	movs	r0, #32
 8001612:	f7ff fe0d 	bl	8001230 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8001616:	20c0      	movs	r0, #192	; 0xc0
 8001618:	f7ff fddc 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 800161c:	2023      	movs	r0, #35	; 0x23
 800161e:	f7ff fe07 	bl	8001230 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8001622:	20c1      	movs	r0, #193	; 0xc1
 8001624:	f7ff fdd6 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8001628:	2010      	movs	r0, #16
 800162a:	f7ff fe01 	bl	8001230 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 800162e:	20c5      	movs	r0, #197	; 0xc5
 8001630:	f7ff fdd0 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8001634:	203e      	movs	r0, #62	; 0x3e
 8001636:	f7ff fdfb 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f7ff fdf8 	bl	8001230 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8001640:	20c7      	movs	r0, #199	; 0xc7
 8001642:	f7ff fdc7 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8001646:	2086      	movs	r0, #134	; 0x86
 8001648:	f7ff fdf2 	bl	8001230 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 800164c:	2036      	movs	r0, #54	; 0x36
 800164e:	f7ff fdc1 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8001652:	2048      	movs	r0, #72	; 0x48
 8001654:	f7ff fdec 	bl	8001230 <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8001658:	203a      	movs	r0, #58	; 0x3a
 800165a:	f7ff fdbb 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 800165e:	2055      	movs	r0, #85	; 0x55
 8001660:	f7ff fde6 	bl	8001230 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8001664:	20b1      	movs	r0, #177	; 0xb1
 8001666:	f7ff fdb5 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fde0 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8001670:	2018      	movs	r0, #24
 8001672:	f7ff fddd 	bl	8001230 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8001676:	20b6      	movs	r0, #182	; 0xb6
 8001678:	f7ff fdac 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 800167c:	2008      	movs	r0, #8
 800167e:	f7ff fdd7 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8001682:	2082      	movs	r0, #130	; 0x82
 8001684:	f7ff fdd4 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8001688:	2027      	movs	r0, #39	; 0x27
 800168a:	f7ff fdd1 	bl	8001230 <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 800168e:	20f2      	movs	r0, #242	; 0xf2
 8001690:	f7ff fda0 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fdcb 	bl	8001230 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800169a:	2026      	movs	r0, #38	; 0x26
 800169c:	f7ff fd9a 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fdc5 	bl	8001230 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 80016a6:	20e0      	movs	r0, #224	; 0xe0
 80016a8:	f7ff fd94 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 80016ac:	200f      	movs	r0, #15
 80016ae:	f7ff fdbf 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80016b2:	2031      	movs	r0, #49	; 0x31
 80016b4:	f7ff fdbc 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80016b8:	202b      	movs	r0, #43	; 0x2b
 80016ba:	f7ff fdb9 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80016be:	200c      	movs	r0, #12
 80016c0:	f7ff fdb6 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016c4:	200e      	movs	r0, #14
 80016c6:	f7ff fdb3 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80016ca:	2008      	movs	r0, #8
 80016cc:	f7ff fdb0 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 80016d0:	204e      	movs	r0, #78	; 0x4e
 80016d2:	f7ff fdad 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 80016d6:	20f1      	movs	r0, #241	; 0xf1
 80016d8:	f7ff fdaa 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80016dc:	2037      	movs	r0, #55	; 0x37
 80016de:	f7ff fda7 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80016e2:	2007      	movs	r0, #7
 80016e4:	f7ff fda4 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 80016e8:	2010      	movs	r0, #16
 80016ea:	f7ff fda1 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80016ee:	2003      	movs	r0, #3
 80016f0:	f7ff fd9e 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80016f4:	200e      	movs	r0, #14
 80016f6:	f7ff fd9b 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f7ff fd98 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fd95 	bl	8001230 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8001706:	20e1      	movs	r0, #225	; 0xe1
 8001708:	f7ff fd64 	bl	80011d4 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fd8f 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8001712:	200e      	movs	r0, #14
 8001714:	f7ff fd8c 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8001718:	2014      	movs	r0, #20
 800171a:	f7ff fd89 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 800171e:	2003      	movs	r0, #3
 8001720:	f7ff fd86 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8001724:	2011      	movs	r0, #17
 8001726:	f7ff fd83 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 800172a:	2007      	movs	r0, #7
 800172c:	f7ff fd80 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001730:	2031      	movs	r0, #49	; 0x31
 8001732:	f7ff fd7d 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8001736:	20c1      	movs	r0, #193	; 0xc1
 8001738:	f7ff fd7a 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 800173c:	2048      	movs	r0, #72	; 0x48
 800173e:	f7ff fd77 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8001742:	2008      	movs	r0, #8
 8001744:	f7ff fd74 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001748:	200f      	movs	r0, #15
 800174a:	f7ff fd71 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 800174e:	200c      	movs	r0, #12
 8001750:	f7ff fd6e 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8001754:	2031      	movs	r0, #49	; 0x31
 8001756:	f7ff fd6b 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 800175a:	2036      	movs	r0, #54	; 0x36
 800175c:	f7ff fd68 	bl	8001230 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8001760:	200f      	movs	r0, #15
 8001762:	f7ff fd65 	bl	8001230 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8001766:	2011      	movs	r0, #17
 8001768:	f7ff fd34 	bl	80011d4 <ILI9341_Write_Command>
	HAL_Delay(120);
 800176c:	2078      	movs	r0, #120	; 0x78
 800176e:	f001 faf9 	bl	8002d64 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8001772:	2029      	movs	r0, #41	; 0x29
 8001774:	f7ff fd2e 	bl	80011d4 <ILI9341_Write_Command>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001778:	2003      	movs	r0, #3
 800177a:	f7ff fe85 	bl	8001488 <ILI9341_Set_Rotation>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40010c00 	.word	0x40010c00

08001788 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	80fb      	strh	r3, [r7, #6]
	DISP_DC_DATA;
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179a:	481e      	ldr	r0, [pc, #120]	; (8001814 <ILI9341_Draw_Colour_Burst+0x8c>)
 800179c:	f002 f890 	bl	80038c0 <HAL_GPIO_WritePin>
	DISP_CS_SELECT;
 80017a0:	2200      	movs	r2, #0
 80017a2:	2102      	movs	r1, #2
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <ILI9341_Draw_Colour_Burst+0x8c>)
 80017a6:	f002 f88b 	bl	80038c0 <HAL_GPIO_WritePin>

	while(Size > 0)
 80017aa:	e018      	b.n	80017de <ILI9341_Draw_Colour_Burst+0x56>
	{
		DISP_SPI->DR = (Colour >> 8);
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017b4:	60da      	str	r2, [r3, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 80017b6:	bf00      	nop
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f9      	beq.n	80017b8 <ILI9341_Draw_Colour_Burst+0x30>
		DISP_SPI->DR = Colour;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	60d3      	str	r3, [r2, #12]
		while(!(DISP_SPI->SR & SPI_SR_TXE));
 80017ca:	bf00      	nop
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f9      	beq.n	80017cc <ILI9341_Draw_Colour_Burst+0x44>
		Size--;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
	while(Size > 0)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1e3      	bne.n	80017ac <ILI9341_Draw_Colour_Burst+0x24>
	}

	while(!(DISP_SPI->SR & SPI_SR_TXE));
 80017e4:	bf00      	nop
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f9      	beq.n	80017e6 <ILI9341_Draw_Colour_Burst+0x5e>
	while(DISP_SPI->SR & SPI_SR_BSY);
 80017f2:	bf00      	nop
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <ILI9341_Draw_Colour_Burst+0x90>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <ILI9341_Draw_Colour_Burst+0x6c>
	DISP_CS_UNSELECT;
 8001800:	2201      	movs	r2, #1
 8001802:	2102      	movs	r1, #2
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <ILI9341_Draw_Colour_Burst+0x8c>)
 8001806:	f002 f85b 	bl	80038c0 <HAL_GPIO_WritePin>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40013000 	.word	0x40013000

0800181c <ILI9341_Fill_Screen>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// USER FUNCTION //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <ILI9341_Fill_Screen+0x44>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <ILI9341_Fill_Screen+0x48>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fd29 	bl	800128c <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <ILI9341_Fill_Screen+0x44>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <ILI9341_Fill_Screen+0x48>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	461a      	mov	r2, r3
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff98 	bl	8001788 <ILI9341_Draw_Colour_Burst>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000002 	.word	0x20000002
 8001864:	20000000 	.word	0x20000000

08001868 <ILI9341_WriteChar>:
}


// Вывод символа
static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001868:	b082      	sub	sp, #8
 800186a:	b590      	push	{r4, r7, lr}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	460b      	mov	r3, r1
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_Set_Address(x, y, x + font.width - 1, y + font.height - 1);
 800187e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001882:	b29a      	uxth	r2, r3
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	3b01      	subs	r3, #1
 800188c:	b29c      	uxth	r4, r3
 800188e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001892:	b29a      	uxth	r2, r3
 8001894:	88bb      	ldrh	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	3b01      	subs	r3, #1
 800189c:	b29b      	uxth	r3, r3
 800189e:	88b9      	ldrh	r1, [r7, #4]
 80018a0:	88f8      	ldrh	r0, [r7, #6]
 80018a2:	4622      	mov	r2, r4
 80018a4:	f7ff fcf2 	bl	800128c <ILI9341_Set_Address>

    for(i = 0; i < font.height; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e03d      	b.n	800192a <ILI9341_WriteChar+0xc2>
    {
        b = font.data[(ch - 32) * font.height + i];
 80018ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	3b20      	subs	r3, #32
 80018b4:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4619      	mov	r1, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]

        for(j = 0; j < font.width; j++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e023      	b.n	8001918 <ILI9341_WriteChar+0xb0>
        {
            if((b << j) & 0x8000)
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <ILI9341_WriteChar+0x92>
            {
                ILI9341_Write_Data(color >> 8);
 80018e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fca1 	bl	8001230 <ILI9341_Write_Data>
                ILI9341_Write_Data(color & 0xFF);
 80018ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fc9c 	bl	8001230 <ILI9341_Write_Data>
 80018f8:	e00b      	b.n	8001912 <ILI9341_WriteChar+0xaa>
            }
            else
            {
                ILI9341_Write_Data(bgcolor >> 8);
 80018fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fc94 	bl	8001230 <ILI9341_Write_Data>
                ILI9341_Write_Data(bgcolor & 0xFF);
 8001908:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800190a:	b2db      	uxtb	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc8f 	bl	8001230 <ILI9341_Write_Data>
        for(j = 0; j < font.width; j++)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3301      	adds	r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800191c:	461a      	mov	r2, r3
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4293      	cmp	r3, r2
 8001922:	d3d5      	bcc.n	80018d0 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4293      	cmp	r3, r2
 8001934:	d3bb      	bcc.n	80018ae <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001942:	b002      	add	sp, #8
 8001944:	4770      	bx	lr

08001946 <ILI9341_WriteString>:

// Вывод строки
void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001946:	b082      	sub	sp, #8
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af04      	add	r7, sp, #16
 800194e:	603a      	str	r2, [r7, #0]
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
 8001956:	460b      	mov	r3, r1
 8001958:	80bb      	strh	r3, [r7, #4]
    while(*str)
 800195a:	e02e      	b.n	80019ba <ILI9341_WriteString+0x74>
    {
        if(x + font.width >= ILI9341_SCREEN_WIDTH)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	7d3a      	ldrb	r2, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001966:	db13      	blt.n	8001990 <ILI9341_WriteString+0x4a>
        {
            x = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800196c:	7d7b      	ldrb	r3, [r7, #21]
 800196e:	b29a      	uxth	r2, r3
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	4413      	add	r3, r2
 8001974:	80bb      	strh	r3, [r7, #4]

            if(y + font.height >= ILI9341_SCREEN_HEIGHT)
 8001976:	88bb      	ldrh	r3, [r7, #4]
 8001978:	7d7a      	ldrb	r2, [r7, #21]
 800197a:	4413      	add	r3, r2
 800197c:	2bef      	cmp	r3, #239	; 0xef
 800197e:	dc21      	bgt.n	80019c4 <ILI9341_WriteString+0x7e>
            {
                break;
            }

            if(*str == ' ')
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b20      	cmp	r3, #32
 8001986:	d103      	bne.n	8001990 <ILI9341_WriteString+0x4a>
            {
                str++;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	603b      	str	r3, [r7, #0]
                continue;
 800198e:	e014      	b.n	80019ba <ILI9341_WriteString+0x74>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88f8      	ldrh	r0, [r7, #6]
 8001998:	8c3b      	ldrh	r3, [r7, #32]
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	8bbb      	ldrh	r3, [r7, #28]
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f7ff ff5f 	bl	8001868 <ILI9341_WriteChar>
        x += font.width;
 80019aa:	7d3b      	ldrb	r3, [r7, #20]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4413      	add	r3, r2
 80019b2:	80fb      	strh	r3, [r7, #6]
        str++;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	603b      	str	r3, [r7, #0]
    while(*str)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1cc      	bne.n	800195c <ILI9341_WriteString+0x16>
    }
}
 80019c2:	e000      	b.n	80019c6 <ILI9341_WriteString+0x80>
                break;
 80019c4:	bf00      	nop
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d0:	b002      	add	sp, #8
 80019d2:	4770      	bx	lr

080019d4 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af04      	add	r7, sp, #16
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	f002 f9b6 	bl	8003d6c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001a00:	7b3b      	ldrb	r3, [r7, #12]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	7b7b      	ldrb	r3, [r7, #13]
 8001a08:	b21b      	sxth	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	b29b      	uxth	r3, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af04      	add	r7, sp, #16
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
 8001a24:	4613      	mov	r3, r2
 8001a26:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001a28:	883b      	ldrh	r3, [r7, #0]
 8001a2a:	0a1b      	lsrs	r3, r3, #8
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001a32:	883b      	ldrh	r3, [r7, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	f002 f890 	bl	8003b78 <HAL_I2C_Mem_Write>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffb1 	bl	80019d4 <Read16>
 8001a72:	4603      	mov	r3, r0
 8001a74:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	b29b      	uxth	r3, r3

}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001a90:	2104      	movs	r1, #4
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff9e 	bl	80019d4 <Read16>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001a9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <INA219_ReadCurrent>:
 *          	config settings and current LSB
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @return: 	The current reading convereted to milliamps
 */
float INA219_ReadCurrent(INA219_t *ina219)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	float result = INA219_ReadCurrent_raw(ina219);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe9 	bl	8001a88 <INA219_ReadCurrent_raw>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f919 	bl	8000cf0 <__aeabi_i2f>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	60fb      	str	r3, [r7, #12]

	return (result / ina219_currentDivider_mA );
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <INA219_ReadCurrent+0x30>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fa19 	bl	8000f00 <__aeabi_fdiv>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000210 	.word	0x20000210
 8001adc:	00000000 	.word	0x00000000

08001ae0 <INA219_ReadShuntVolage>:
 * @retval:		Returns voltage level in mili-volts. This value represents the difference
 * 				between the voltage of the power supply and the bus voltage after the shunt
 * 				resistor.
 */
uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff72 	bl	80019d4 <Read16>
 8001af0:	4603      	mov	r3, r0
 8001af2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fc8e 	bl	8000418 <__aeabi_i2d>
 8001afc:	a308      	add	r3, pc, #32	; (adr r3, 8001b20 <INA219_ReadShuntVolage+0x40>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fcf3 	bl	80004ec <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7fe ffc5 	bl	8000a9c <__aeabi_d2uiz>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29b      	uxth	r3, r3
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	47ae147b 	.word	0x47ae147b
 8001b24:	3f847ae1 	.word	0x3f847ae1

08001b28 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
	switch(batteryState)
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d019      	beq.n	8001b70 <INA219_HealthCheck+0x48>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	dc26      	bgt.n	8001b8e <INA219_HealthCheck+0x66>
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <INA219_HealthCheck+0x22>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d004      	beq.n	8001b52 <INA219_HealthCheck+0x2a>
 8001b48:	e021      	b.n	8001b8e <INA219_HealthCheck+0x66>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
			break;
 8001b50:	e021      	b.n	8001b96 <INA219_HealthCheck+0x6e>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff fadb 	bl	8001110 <__aeabi_fcmpgt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <INA219_HealthCheck+0x40>
			{
				batteryState = Battery_OK;
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b66:	e016      	b.n	8001b96 <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
			break;
 8001b6e:	e012      	b.n	8001b96 <INA219_HealthCheck+0x6e>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff facc 	bl	8001110 <__aeabi_fcmpgt>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <INA219_HealthCheck+0x5e>
			{
				batteryState = Battery_OK;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001b84:	e007      	b.n	8001b96 <INA219_HealthCheck+0x6e>
				 batteryState = Battery_LOW;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
			break;
 8001b8c:	e003      	b.n	8001b96 <INA219_HealthCheck+0x6e>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001b8e:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
			break;
 8001b94:	bf00      	nop
	}
	return batteryState;
 8001b96:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <INA219_HealthCheck+0x7c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]

}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000020c 	.word	0x2000020c

08001ba8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001bb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff2e 	bl	8001a18 <Write16>
	HAL_Delay(1);
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f001 f8d1 	bl	8002d64 <HAL_Delay>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2105      	movs	r1, #5
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff1b 	bl	8001a18 <Write16>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff0b 	bl	8001a18 <Write16>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001c14:	f643 139f 	movw	r3, #14751	; 0x399f
 8001c18:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <INA219_setCalibration_32V_2A+0x40>)
 8001c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c20:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <INA219_setCalibration_32V_2A+0x44>)
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <INA219_setCalibration_32V_2A+0x48>)
 8001c26:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <INA219_setCalibration_32V_2A+0x4c>)
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <INA219_setCalibration_32V_2A+0x40>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ffc8 	bl	8001bca <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001c3a:	89fb      	ldrh	r3, [r7, #14]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffd3 	bl	8001bea <INA219_setConfig>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000020e 	.word	0x2000020e
 8001c50:	20000210 	.word	0x20000210
 8001c54:	41200000 	.word	0x41200000
 8001c58:	20000214 	.word	0x20000214

08001c5c <INA219_setCalibration_16V_400mA>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_16V_400mA(INA219_t *ina219)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_16V |
 8001c64:	f240 139f 	movw	r3, #415	; 0x19f
 8001c68:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_1_40MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 6505; 	//было 8192 у автора библтотеки
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <INA219_setCalibration_16V_400mA+0x40>)
 8001c6c:	f641 1269 	movw	r2, #6505	; 0x1969
 8001c70:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 20;    // Current LSB = 50uA per bit (1000/50 = 20)
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <INA219_setCalibration_16V_400mA+0x44>)
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <INA219_setCalibration_16V_400mA+0x48>)
 8001c76:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <INA219_setCalibration_16V_400mA+0x4c>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <INA219_setCalibration_16V_400mA+0x40>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffa0 	bl	8001bca <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001c8a:	89fb      	ldrh	r3, [r7, #14]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffab 	bl	8001bea <INA219_setConfig>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000020e 	.word	0x2000020e
 8001ca0:	20000210 	.word	0x20000210
 8001ca4:	41a00000 	.word	0x41a00000
 8001ca8:	20000214 	.word	0x20000214

08001cac <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <INA219_Init+0x78>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <INA219_Init+0x7c>)
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <INA219_Init+0x80>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f002 faa8 	bl	800423c <HAL_I2C_IsDeviceReady>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d111      	bne.n	8001d1a <INA219_Init+0x6e>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <INA219_Init+0x84>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001cfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff ff0f 	bl	8001b28 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ff4c 	bl	8001ba8 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f7ff ff7b 	bl	8001c0c <INA219_setCalibration_32V_2A>

		return 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <INA219_Init+0x70>
	}

	else
	{
		return 0;
 8001d1a:	2300      	movs	r3, #0
	}
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	2000020d 	.word	0x2000020d
 8001d28:	20000210 	.word	0x20000210
 8001d2c:	20000214 	.word	0x20000214
 8001d30:	2000020c 	.word	0x2000020c

08001d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d38:	f000 ffe2 	bl	8002d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3c:	f000 f88c 	bl	8001e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d40:	f000 f9b2 	bl	80020a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d44:	f000 f8e4 	bl	8001f10 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001d48:	f000 f94e 	bl	8001fe8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001d4c:	f000 f982 	bl	8002054 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d50:	f000 f91c 	bl	8001f8c <MX_I2C1_Init>
//   HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d54:	f004 f8e8 	bl	8005f28 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, sizeof(QUEUE_t), &myQueue01_attributes);
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <main+0xbc>)
 8001d5a:	2128      	movs	r1, #40	; 0x28
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f004 fa21 	bl	80061a4 <osMessageQueueNew>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <main+0xc0>)
 8001d66:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <main+0xc4>)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4823      	ldr	r0, [pc, #140]	; (8001dfc <main+0xc8>)
 8001d6e:	f004 f941 	bl	8005ff4 <osThreadNew>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <main+0xcc>)
 8001d76:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Task */
  ADC_TaskHandle = osThreadNew(StartADC_Task, NULL, &ADC_Task_attributes);
 8001d78:	4a22      	ldr	r2, [pc, #136]	; (8001e04 <main+0xd0>)
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4822      	ldr	r0, [pc, #136]	; (8001e08 <main+0xd4>)
 8001d7e:	f004 f939 	bl	8005ff4 <osThreadNew>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <main+0xd8>)
 8001d86:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUART_Task, NULL, &UART_Task_attributes);
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <main+0xdc>)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4821      	ldr	r0, [pc, #132]	; (8001e14 <main+0xe0>)
 8001d8e:	f004 f931 	bl	8005ff4 <osThreadNew>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <main+0xe4>)
 8001d96:	6013      	str	r3, [r2, #0]

  /* creation of TFT_Task */
  TFT_TaskHandle = osThreadNew(StartTFT_Task, NULL, &TFT_Task_attributes);
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <main+0xe8>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4820      	ldr	r0, [pc, #128]	; (8001e20 <main+0xec>)
 8001d9e:	f004 f929 	bl	8005ff4 <osThreadNew>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <main+0xf0>)
 8001da6:	6013      	str	r3, [r2, #0]

  /* creation of INA219_Current */
  INA219_CurrentHandle = osThreadNew(StartINA219_Current_Task, NULL, &INA219_Current_attributes);
 8001da8:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <main+0xf4>)
 8001daa:	2100      	movs	r1, #0
 8001dac:	481f      	ldr	r0, [pc, #124]	; (8001e2c <main+0xf8>)
 8001dae:	f004 f921 	bl	8005ff4 <osThreadNew>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a1e      	ldr	r2, [pc, #120]	; (8001e30 <main+0xfc>)
 8001db6:	6013      	str	r3, [r2, #0]

  /* creation of InitMyDevice */
  InitMyDeviceHandle = osThreadNew(StartInitMyDevice, NULL, &InitMyDevice_attributes);
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <main+0x100>)
 8001dba:	2100      	movs	r1, #0
 8001dbc:	481e      	ldr	r0, [pc, #120]	; (8001e38 <main+0x104>)
 8001dbe:	f004 f919 	bl	8005ff4 <osThreadNew>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <main+0x108>)
 8001dc6:	6013      	str	r3, [r2, #0]

  /* creation of INA219_vBus */
  INA219_vBusHandle = osThreadNew(INA219_vBus_Task, NULL, &INA219_vBus_attributes);
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <main+0x10c>)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	481d      	ldr	r0, [pc, #116]	; (8001e44 <main+0x110>)
 8001dce:	f004 f911 	bl	8005ff4 <osThreadNew>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <main+0x114>)
 8001dd6:	6013      	str	r3, [r2, #0]

  /* creation of INA219_vShunt */
  INA219_vShuntHandle = osThreadNew(INA219_vShunt_Task, NULL, &INA219_vShunt_attributes);
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <main+0x118>)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <main+0x11c>)
 8001dde:	f004 f909 	bl	8005ff4 <osThreadNew>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <main+0x120>)
 8001de6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001de8:	f004 f8d0 	bl	8005f8c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <main+0xb8>
 8001dee:	bf00      	nop
 8001df0:	0800e73c 	.word	0x0800e73c
 8001df4:	20001b94 	.word	0x20001b94
 8001df8:	0800e61c 	.word	0x0800e61c
 8001dfc:	08002169 	.word	0x08002169
 8001e00:	2000033c 	.word	0x2000033c
 8001e04:	0800e640 	.word	0x0800e640
 8001e08:	08002179 	.word	0x08002179
 8001e0c:	2000059c 	.word	0x2000059c
 8001e10:	0800e664 	.word	0x0800e664
 8001e14:	08002219 	.word	0x08002219
 8001e18:	20000dcc 	.word	0x20000dcc
 8001e1c:	0800e688 	.word	0x0800e688
 8001e20:	080022a1 	.word	0x080022a1
 8001e24:	2000102c 	.word	0x2000102c
 8001e28:	0800e6ac 	.word	0x0800e6ac
 8001e2c:	080023f5 	.word	0x080023f5
 8001e30:	2000128c 	.word	0x2000128c
 8001e34:	0800e6d0 	.word	0x0800e6d0
 8001e38:	0800248d 	.word	0x0800248d
 8001e3c:	2000192c 	.word	0x2000192c
 8001e40:	0800e6f4 	.word	0x0800e6f4
 8001e44:	08002591 	.word	0x08002591
 8001e48:	20001b8c 	.word	0x20001b8c
 8001e4c:	0800e718 	.word	0x0800e718
 8001e50:	0800261d 	.word	0x0800261d
 8001e54:	20001b90 	.word	0x20001b90

08001e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b094      	sub	sp, #80	; 0x50
 8001e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	2228      	movs	r2, #40	; 0x28
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f007 f810 	bl	8008e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e96:	2301      	movs	r3, #1
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ea4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f002 fea6 	bl	8004c00 <HAL_RCC_OscConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eba:	f000 fc0b 	bl	80026d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebe:	230f      	movs	r3, #15
 8001ec0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ece:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f912 	bl	8005104 <HAL_RCC_ClockConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ee6:	f000 fbf5 	bl	80026d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eea:	2302      	movs	r3, #2
 8001eec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fac2 	bl	8005480 <HAL_RCCEx_PeriphCLKConfig>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f02:	f000 fbe7 	bl	80026d4 <Error_Handler>
  }
}
 8001f06:	bf00      	nop
 8001f08:	3750      	adds	r7, #80	; 0x50
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <MX_ADC1_Init+0x78>)
 8001f24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f2c:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f4e:	f000 ff2d 	bl	8002dac <HAL_ADC_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f58:	f000 fbbc 	bl	80026d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_ADC1_Init+0x74>)
 8001f6e:	f001 f8af 	bl	80030d0 <HAL_ADC_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001f78:	f000 fbac 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000218 	.word	0x20000218
 8001f88:	40012400 	.word	0x40012400

08001f8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <MX_I2C1_Init+0x54>)
 8001f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_I2C1_Init+0x58>)
 8001f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_I2C1_Init+0x50>)
 8001fca:	f001 fc91 	bl	80038f0 <HAL_I2C_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fd4:	f000 fb7e 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000248 	.word	0x20000248
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	000186a0 	.word	0x000186a0

08001fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <MX_SPI1_Init+0x64>)
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <MX_SPI1_Init+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <MX_SPI1_Init+0x64>)
 8001ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_SPI1_Init+0x64>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <MX_SPI1_Init+0x64>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_SPI1_Init+0x64>)
 8002014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002018:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_SPI1_Init+0x64>)
 800201c:	2208      	movs	r2, #8
 800201e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <MX_SPI1_Init+0x64>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_SPI1_Init+0x64>)
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <MX_SPI1_Init+0x64>)
 800202e:	2200      	movs	r2, #0
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_SPI1_Init+0x64>)
 8002034:	220a      	movs	r2, #10
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002038:	4804      	ldr	r0, [pc, #16]	; (800204c <MX_SPI1_Init+0x64>)
 800203a:	f003 fad7 	bl	80055ec <HAL_SPI_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002044:	f000 fb46 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000029c 	.word	0x2000029c
 8002050:	40013000 	.word	0x40013000

08002054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_USART1_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800208c:	f003 fd7c 	bl	8005b88 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f000 fb1d 	bl	80026d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002f4 	.word	0x200002f4
 80020a4:	40013800 	.word	0x40013800

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <MX_GPIO_Init+0xb4>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <MX_GPIO_Init+0xb4>)
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <MX_GPIO_Init+0xb4>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_GPIO_Init+0xb4>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <MX_GPIO_Init+0xb4>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_GPIO_Init+0xb4>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_GPIO_Init+0xb4>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <MX_GPIO_Init+0xb4>)
 80020f2:	f043 0308 	orr.w	r3, r3, #8
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_GPIO_Init+0xb4>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_Blink_GPIO_Port, LED1_Blink_Pin, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2110      	movs	r1, #16
 8002108:	4815      	ldr	r0, [pc, #84]	; (8002160 <MX_GPIO_Init+0xb8>)
 800210a:	f001 fbd9 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f640 4103 	movw	r1, #3075	; 0xc03
 8002114:	4813      	ldr	r0, [pc, #76]	; (8002164 <MX_GPIO_Init+0xbc>)
 8002116:	f001 fbd3 	bl	80038c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Blink_Pin */
  GPIO_InitStruct.Pin = LED1_Blink_Pin;
 800211a:	2310      	movs	r3, #16
 800211c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_Blink_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	4619      	mov	r1, r3
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <MX_GPIO_Init+0xb8>)
 8002132:	f001 fa41 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_CS_Pin TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin|TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8002136:	f640 4303 	movw	r3, #3075	; 0xc03
 800213a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2302      	movs	r3, #2
 8002146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_GPIO_Init+0xbc>)
 8002150:	f001 fa32 	bl	80035b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	40010800 	.word	0x40010800
 8002164:	40010c00 	.word	0x40010c00

08002168 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f003 ffe9 	bl	8006148 <osDelay>
 8002176:	e7fb      	b.n	8002170 <StartDefaultTask+0x8>

08002178 <StartADC_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC_Task */
void StartADC_Task(void *argument)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b090      	sub	sp, #64	; 0x40
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC_Task */
   QUEUE_t msg;
   float u_res =0;
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
   char ADC_char_res[6];
  /* Infinite loop */
  for(;;)
  {

	HAL_ADC_Start(&hadc1);
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <StartADC_Task+0x88>)
 8002188:	f000 fee8 	bl	8002f5c <HAL_ADC_Start>
	u_res = HAL_ADC_GetValue(&hadc1)* 3.3f / 4095.0f;
 800218c:	481c      	ldr	r0, [pc, #112]	; (8002200 <StartADC_Task+0x88>)
 800218e:	f000 ff93 	bl	80030b8 <HAL_ADC_GetValue>
 8002192:	4603      	mov	r3, r0
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fda7 	bl	8000ce8 <__aeabi_ui2f>
 800219a:	4603      	mov	r3, r0
 800219c:	4919      	ldr	r1, [pc, #100]	; (8002204 <StartADC_Task+0x8c>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fdfa 	bl	8000d98 <__aeabi_fmul>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4918      	ldr	r1, [pc, #96]	; (8002208 <StartADC_Task+0x90>)
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fea9 	bl	8000f00 <__aeabi_fdiv>
 80021ae:	4603      	mov	r3, r0
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sprintf(ADC_char_res, "%1.3f", u_res);
 80021b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021b4:	f7fe f942 	bl	800043c <__aeabi_f2d>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	f107 000c 	add.w	r0, r7, #12
 80021c0:	4912      	ldr	r1, [pc, #72]	; (800220c <StartADC_Task+0x94>)
 80021c2:	f007 fcdd 	bl	8009b80 <siprintf>
	strcpy(msg.Buf,ADC_char_res);
 80021c6:	f107 020c 	add.w	r2, r7, #12
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f007 fcf5 	bl	8009bc0 <strcpy>
	strcpy(msg.mess,"ADC");
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	331e      	adds	r3, #30
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <StartADC_Task+0x98>)
 80021de:	6810      	ldr	r0, [r2, #0]
 80021e0:	6018      	str	r0, [r3, #0]
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <StartADC_Task+0x9c>)
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	f107 0114 	add.w	r1, r7, #20
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	2200      	movs	r2, #0
 80021f0:	f004 f85e 	bl	80062b0 <osMessageQueuePut>
	osDelay(300);
 80021f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021f8:	f003 ffa6 	bl	8006148 <osDelay>
	HAL_ADC_Start(&hadc1);
 80021fc:	e7c3      	b.n	8002186 <StartADC_Task+0xe>
 80021fe:	bf00      	nop
 8002200:	20000218 	.word	0x20000218
 8002204:	40533333 	.word	0x40533333
 8002208:	457ff000 	.word	0x457ff000
 800220c:	0800d780 	.word	0x0800d780
 8002210:	0800d788 	.word	0x0800d788
 8002214:	20001b94 	.word	0x20001b94

08002218 <StartUART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_Task */
void StartUART_Task(void *argument)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b091      	sub	sp, #68	; 0x44
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_Task */
   QUEUE_t msg;
   char message[] = "Value ADC = ";
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <StartUART_Task+0x78>)
 8002222:	f107 0408 	add.w	r4, r7, #8
 8002226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002228:	c407      	stmia	r4!, {r0, r1, r2}
 800222a:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), osWaitForever);
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4618      	mov	r0, r3
 8002232:	f7fd ff97 	bl	8000164 <strlen>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	f107 0108 	add.w	r1, r7, #8
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	4814      	ldr	r0, [pc, #80]	; (8002294 <StartUART_Task+0x7c>)
 8002244:	f003 fcf0 	bl	8005c28 <HAL_UART_Transmit>
	osMessageQueueGet(myQueue01Handle, &msg,0 ,osWaitForever);
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <StartUART_Task+0x80>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f107 0118 	add.w	r1, r7, #24
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
 8002254:	2200      	movs	r2, #0
 8002256:	f004 f89f 	bl	8006398 <osMessageQueueGet>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg.Buf, strlen(msg.Buf), osWaitForever);
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	4618      	mov	r0, r3
 8002260:	f7fd ff80 	bl	8000164 <strlen>
 8002264:	4603      	mov	r3, r0
 8002266:	b29a      	uxth	r2, r3
 8002268:	f107 0118 	add.w	r1, r7, #24
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <StartUART_Task+0x7c>)
 8002272:	f003 fcd9 	bl	8005c28 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)" \n", 2, osWaitForever);
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	2202      	movs	r2, #2
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <StartUART_Task+0x84>)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <StartUART_Task+0x7c>)
 8002280:	f003 fcd2 	bl	8005c28 <HAL_UART_Transmit>
	osDelay(500);
 8002284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002288:	f003 ff5e 	bl	8006148 <osDelay>
	HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), osWaitForever);
 800228c:	e7ce      	b.n	800222c <StartUART_Task+0x14>
 800228e:	bf00      	nop
 8002290:	0800d790 	.word	0x0800d790
 8002294:	200002f4 	.word	0x200002f4
 8002298:	20001b94 	.word	0x20001b94
 800229c:	0800d78c 	.word	0x0800d78c

080022a0 <StartTFT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTFT_Task */
void StartTFT_Task(void *argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b090      	sub	sp, #64	; 0x40
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTFT_Task */
  QUEUE_t msg;
  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(myQueue01Handle, &msg,0 ,10);
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <StartTFT_Task+0x138>)
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	f107 0108 	add.w	r1, r7, #8
 80022b0:	230a      	movs	r3, #10
 80022b2:	2200      	movs	r2, #0
 80022b4:	f004 f870 	bl	8006398 <osMessageQueueGet>
	if(!strcmp(msg.mess, "ADC")) {
 80022b8:	f107 0308 	add.w	r3, r7, #8
 80022bc:	331e      	adds	r3, #30
 80022be:	4947      	ldr	r1, [pc, #284]	; (80023dc <StartTFT_Task+0x13c>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fd ff45 	bl	8000150 <strcmp>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <StartTFT_Task+0x50>
			ILI9341_WriteString(0, 36, msg.Buf, Font_11x18, WHITE, MYFON);
 80022cc:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <StartTFT_Task+0x140>)
 80022ce:	f107 0108 	add.w	r1, r7, #8
 80022d2:	f642 1265 	movw	r2, #10597	; 0x2965
 80022d6:	9202      	str	r2, [sp, #8]
 80022d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022dc:	9201      	str	r2, [sp, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	9200      	str	r2, [sp, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	460a      	mov	r2, r1
 80022e6:	2124      	movs	r1, #36	; 0x24
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff fb2c 	bl	8001946 <ILI9341_WriteString>
 80022ee:	e06e      	b.n	80023ce <StartTFT_Task+0x12e>
		 }
	else if(!strcmp(msg.mess, "vBus")){
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	331e      	adds	r3, #30
 80022f6:	493b      	ldr	r1, [pc, #236]	; (80023e4 <StartTFT_Task+0x144>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fd ff29 	bl	8000150 <strcmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d111      	bne.n	8002328 <StartTFT_Task+0x88>
			ILI9341_WriteString(0, 54, msg.Buf, Font_11x18, WHITE, MYFON);
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <StartTFT_Task+0x140>)
 8002306:	f107 0108 	add.w	r1, r7, #8
 800230a:	f642 1265 	movw	r2, #10597	; 0x2965
 800230e:	9202      	str	r2, [sp, #8]
 8002310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002314:	9201      	str	r2, [sp, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	9200      	str	r2, [sp, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	460a      	mov	r2, r1
 800231e:	2136      	movs	r1, #54	; 0x36
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff fb10 	bl	8001946 <ILI9341_WriteString>
 8002326:	e052      	b.n	80023ce <StartTFT_Task+0x12e>
		}
	else if(!strcmp(msg.mess, "vShunt")){
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	331e      	adds	r3, #30
 800232e:	492e      	ldr	r1, [pc, #184]	; (80023e8 <StartTFT_Task+0x148>)
 8002330:	4618      	mov	r0, r3
 8002332:	f7fd ff0d 	bl	8000150 <strcmp>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <StartTFT_Task+0xc0>
				ILI9341_WriteString(0, 72, msg.Buf, Font_11x18, WHITE, MYFON);
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <StartTFT_Task+0x140>)
 800233e:	f107 0108 	add.w	r1, r7, #8
 8002342:	f642 1265 	movw	r2, #10597	; 0x2965
 8002346:	9202      	str	r2, [sp, #8]
 8002348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	9200      	str	r2, [sp, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	460a      	mov	r2, r1
 8002356:	2148      	movs	r1, #72	; 0x48
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff faf4 	bl	8001946 <ILI9341_WriteString>
 800235e:	e036      	b.n	80023ce <StartTFT_Task+0x12e>
			}
	else if(!strcmp(msg.mess, "Current")){
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	331e      	adds	r3, #30
 8002366:	4921      	ldr	r1, [pc, #132]	; (80023ec <StartTFT_Task+0x14c>)
 8002368:	4618      	mov	r0, r3
 800236a:	f7fd fef1 	bl	8000150 <strcmp>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <StartTFT_Task+0xf8>
				ILI9341_WriteString(0, 90, msg.Buf, Font_11x18, WHITE, MYFON);
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <StartTFT_Task+0x140>)
 8002376:	f107 0108 	add.w	r1, r7, #8
 800237a:	f642 1265 	movw	r2, #10597	; 0x2965
 800237e:	9202      	str	r2, [sp, #8]
 8002380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002384:	9201      	str	r2, [sp, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	9200      	str	r2, [sp, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	460a      	mov	r2, r1
 800238e:	215a      	movs	r1, #90	; 0x5a
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff fad8 	bl	8001946 <ILI9341_WriteString>
 8002396:	e01a      	b.n	80023ce <StartTFT_Task+0x12e>
			}
	else if(!strcmp(msg.mess,  "Current_correct")){
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	331e      	adds	r3, #30
 800239e:	4914      	ldr	r1, [pc, #80]	; (80023f0 <StartTFT_Task+0x150>)
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fd fed5 	bl	8000150 <strcmp>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d110      	bne.n	80023ce <StartTFT_Task+0x12e>
					ILI9341_WriteString(0, 108, msg.Buf, Font_11x18, WHITE, MYFON);
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <StartTFT_Task+0x140>)
 80023ae:	f107 0108 	add.w	r1, r7, #8
 80023b2:	f642 1265 	movw	r2, #10597	; 0x2965
 80023b6:	9202      	str	r2, [sp, #8]
 80023b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023bc:	9201      	str	r2, [sp, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	9200      	str	r2, [sp, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	460a      	mov	r2, r1
 80023c6:	216c      	movs	r1, #108	; 0x6c
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7ff fabc 	bl	8001946 <ILI9341_WriteString>
				}
    osDelay(100);
 80023ce:	2064      	movs	r0, #100	; 0x64
 80023d0:	f003 feba 	bl	8006148 <osDelay>
	osMessageQueueGet(myQueue01Handle, &msg,0 ,10);
 80023d4:	e768      	b.n	80022a8 <StartTFT_Task+0x8>
 80023d6:	bf00      	nop
 80023d8:	20001b94 	.word	0x20001b94
 80023dc:	0800d788 	.word	0x0800d788
 80023e0:	20000004 	.word	0x20000004
 80023e4:	0800d7a0 	.word	0x0800d7a0
 80023e8:	0800d7a8 	.word	0x0800d7a8
 80023ec:	0800d7b0 	.word	0x0800d7b0
 80023f0:	0800d7b8 	.word	0x0800d7b8

080023f4 <StartINA219_Current_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartINA219_Current_Task */
void StartINA219_Current_Task(void *argument)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0a6      	sub	sp, #152	; 0x98
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  char uart_tx_buff[100];
  uint16_t current;
  /* Infinite loop */
  for(;;)
  {
	current = INA219_ReadCurrent(&ina219);
 80023fc:	481e      	ldr	r0, [pc, #120]	; (8002478 <StartINA219_Current_Task+0x84>)
 80023fe:	f7ff fb53 	bl	8001aa8 <INA219_ReadCurrent>
 8002402:	4603      	mov	r3, r0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fe8d 	bl	8001124 <__aeabi_f2uiz>
 800240a:	4603      	mov	r3, r0
 800240c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	sprintf(uart_tx_buff, "Current: %hu mA\r\n",current);
 8002410:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002414:	f107 0308 	add.w	r3, r7, #8
 8002418:	4918      	ldr	r1, [pc, #96]	; (800247c <StartINA219_Current_Task+0x88>)
 800241a:	4618      	mov	r0, r3
 800241c:	f007 fbb0 	bl	8009b80 <siprintf>
	strcpy(msg.mess,"Current");
 8002420:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002424:	331e      	adds	r3, #30
 8002426:	4916      	ldr	r1, [pc, #88]	; (8002480 <StartINA219_Current_Task+0x8c>)
 8002428:	461a      	mov	r2, r3
 800242a:	460b      	mov	r3, r1
 800242c:	cb03      	ldmia	r3!, {r0, r1}
 800242e:	6010      	str	r0, [r2, #0]
 8002430:	6051      	str	r1, [r2, #4]
	strcpy(msg.Buf,uart_tx_buff);
 8002432:	f107 0208 	add.w	r2, r7, #8
 8002436:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f007 fbbf 	bl	8009bc0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <StartINA219_Current_Task+0x90>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	2200      	movs	r2, #0
 8002450:	f003 ff2e 	bl	80062b0 <osMessageQueuePut>
	HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	4618      	mov	r0, r3
 800245a:	f7fd fe83 	bl	8000164 <strlen>
 800245e:	4603      	mov	r3, r0
 8002460:	b29a      	uxth	r2, r3
 8002462:	f107 0108 	add.w	r1, r7, #8
 8002466:	2364      	movs	r3, #100	; 0x64
 8002468:	4807      	ldr	r0, [pc, #28]	; (8002488 <StartINA219_Current_Task+0x94>)
 800246a:	f003 fbdd 	bl	8005c28 <HAL_UART_Transmit>
    osDelay(300);
 800246e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002472:	f003 fe69 	bl	8006148 <osDelay>
	current = INA219_ReadCurrent(&ina219);
 8002476:	e7c1      	b.n	80023fc <StartINA219_Current_Task+0x8>
 8002478:	20001d78 	.word	0x20001d78
 800247c:	0800d7c8 	.word	0x0800d7c8
 8002480:	0800d7b0 	.word	0x0800d7b0
 8002484:	20001b94 	.word	0x20001b94
 8002488:	200002f4 	.word	0x200002f4

0800248c <StartInitMyDevice>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInitMyDevice */
void StartInitMyDevice(void *argument)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0a0      	sub	sp, #128	; 0x80
 8002490:	af04      	add	r7, sp, #16
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitMyDevice */
	 char uart_tx_buff[100];
  /* Infinite loop */
  for(;;)
  {
	  __HAL_SPI_ENABLE(DISP_SPI_PTR);
 8002494:	4b34      	ldr	r3, [pc, #208]	; (8002568 <StartInitMyDevice+0xdc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <StartInitMyDevice+0xdc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
	   ILI9341_Init();
 80024a4:	f7ff f85e 	bl	8001564 <ILI9341_Init>
	   ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f7fe ffed 	bl	8001488 <ILI9341_Set_Rotation>

	   ILI9341_Fill_Screen(MYFON);
 80024ae:	f642 1065 	movw	r0, #10597	; 0x2965
 80024b2:	f7ff f9b3 	bl	800181c <ILI9341_Fill_Screen>
	   ILI9341_WriteString(0, 0, "<---Pulsar--->", Font_11x18, WHITE, MYFON);
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <StartInitMyDevice+0xe0>)
 80024b8:	f642 1265 	movw	r2, #10597	; 0x2965
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c2:	9201      	str	r2, [sp, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	9200      	str	r2, [sp, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <StartInitMyDevice+0xe4>)
 80024cc:	2100      	movs	r1, #0
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7ff fa39 	bl	8001946 <ILI9341_WriteString>
	   ILI9341_WriteString(0, 18, "The value of the ADC", Font_11x18, WHITE, MYFON);
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <StartInitMyDevice+0xe0>)
 80024d6:	f642 1265 	movw	r2, #10597	; 0x2965
 80024da:	9202      	str	r2, [sp, #8]
 80024dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e0:	9201      	str	r2, [sp, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a22      	ldr	r2, [pc, #136]	; (8002574 <StartInitMyDevice+0xe8>)
 80024ea:	2112      	movs	r1, #18
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff fa2a 	bl	8001946 <ILI9341_WriteString>
	   ILI9341_WriteString(60, 36, "V", Font_11x18, WHITE, MYFON);
 80024f2:	4b1e      	ldr	r3, [pc, #120]	; (800256c <StartInitMyDevice+0xe0>)
 80024f4:	f642 1265 	movw	r2, #10597	; 0x2965
 80024f8:	9202      	str	r2, [sp, #8]
 80024fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <StartInitMyDevice+0xec>)
 8002508:	2124      	movs	r1, #36	; 0x24
 800250a:	203c      	movs	r0, #60	; 0x3c
 800250c:	f7ff fa1b 	bl	8001946 <ILI9341_WriteString>
	   HAL_Delay(100);
 8002510:	2064      	movs	r0, #100	; 0x64
 8002512:	f000 fc27 	bl	8002d64 <HAL_Delay>
	   /* Код для ina219   */
	   while(!INA219_Init(&ina219, &hi2c1, INA219_ADDRESS))
 8002516:	bf00      	nop
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	4918      	ldr	r1, [pc, #96]	; (800257c <StartInitMyDevice+0xf0>)
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <StartInitMyDevice+0xf4>)
 800251e:	f7ff fbc5 	bl	8001cac <INA219_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f7      	beq.n	8002518 <StartInitMyDevice+0x8c>
	        {

	         }
	    sprintf(uart_tx_buff, "**********		Hello INA219 app	 **********\r\n");
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	4915      	ldr	r1, [pc, #84]	; (8002584 <StartInitMyDevice+0xf8>)
 800252e:	4618      	mov	r0, r3
 8002530:	f007 fb26 	bl	8009b80 <siprintf>
	    HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd fe13 	bl	8000164 <strlen>
 800253e:	4603      	mov	r3, r0
 8002540:	b29a      	uxth	r2, r3
 8002542:	f107 010c 	add.w	r1, r7, #12
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	480f      	ldr	r0, [pc, #60]	; (8002588 <StartInitMyDevice+0xfc>)
 800254a:	f003 fb6d 	bl	8005c28 <HAL_UART_Transmit>
	    INA219_setCalibration_16V_400mA(&ina219);
 800254e:	480c      	ldr	r0, [pc, #48]	; (8002580 <StartInitMyDevice+0xf4>)
 8002550:	f7ff fb84 	bl	8001c5c <INA219_setCalibration_16V_400mA>

    osDelay(1);
 8002554:	2001      	movs	r0, #1
 8002556:	f003 fdf7 	bl	8006148 <osDelay>
    vTaskSuspend(InitMyDeviceHandle); //Блокировка задачи
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <StartInitMyDevice+0x100>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f004 ffdc 	bl	800751c <vTaskSuspend>
  {
 8002564:	e796      	b.n	8002494 <StartInitMyDevice+0x8>
 8002566:	bf00      	nop
 8002568:	2000029c 	.word	0x2000029c
 800256c:	20000004 	.word	0x20000004
 8002570:	0800d7dc 	.word	0x0800d7dc
 8002574:	0800d7ec 	.word	0x0800d7ec
 8002578:	0800d804 	.word	0x0800d804
 800257c:	20000248 	.word	0x20000248
 8002580:	20001d78 	.word	0x20001d78
 8002584:	0800d808 	.word	0x0800d808
 8002588:	200002f4 	.word	0x200002f4
 800258c:	2000192c 	.word	0x2000192c

08002590 <INA219_vBus_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INA219_vBus_Task */
void INA219_vBus_Task(void *argument)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0a6      	sub	sp, #152	; 0x98
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  char uart_tx_buff[100];
  uint16_t vbus;
  /* Infinite loop */
  for(;;)
  {
	vbus = INA219_ReadBusVoltage(&ina219);
 8002598:	481b      	ldr	r0, [pc, #108]	; (8002608 <INA219_vBus_Task+0x78>)
 800259a:	f7ff fa62 	bl	8001a62 <INA219_ReadBusVoltage>
 800259e:	4603      	mov	r3, r0
 80025a0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	sprintf(uart_tx_buff, "vbus: %hu mV\r\n",vbus);
 80025a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4917      	ldr	r1, [pc, #92]	; (800260c <INA219_vBus_Task+0x7c>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f007 fae6 	bl	8009b80 <siprintf>
	strcpy(msg.mess,"vBus");
 80025b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025b8:	331e      	adds	r3, #30
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <INA219_vBus_Task+0x80>)
 80025bc:	6810      	ldr	r0, [r2, #0]
 80025be:	6018      	str	r0, [r3, #0]
 80025c0:	7912      	ldrb	r2, [r2, #4]
 80025c2:	711a      	strb	r2, [r3, #4]
	strcpy(msg.Buf,uart_tx_buff);
 80025c4:	f107 0208 	add.w	r2, r7, #8
 80025c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f007 faf6 	bl	8009bc0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <INA219_vBus_Task+0x84>)
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	2200      	movs	r2, #0
 80025e2:	f003 fe65 	bl	80062b0 <osMessageQueuePut>
	HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd fdba 	bl	8000164 <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f107 0108 	add.w	r1, r7, #8
 80025f8:	2364      	movs	r3, #100	; 0x64
 80025fa:	4807      	ldr	r0, [pc, #28]	; (8002618 <INA219_vBus_Task+0x88>)
 80025fc:	f003 fb14 	bl	8005c28 <HAL_UART_Transmit>
    osDelay(70);
 8002600:	2046      	movs	r0, #70	; 0x46
 8002602:	f003 fda1 	bl	8006148 <osDelay>
	vbus = INA219_ReadBusVoltage(&ina219);
 8002606:	e7c7      	b.n	8002598 <INA219_vBus_Task+0x8>
 8002608:	20001d78 	.word	0x20001d78
 800260c:	0800d834 	.word	0x0800d834
 8002610:	0800d7a0 	.word	0x0800d7a0
 8002614:	20001b94 	.word	0x20001b94
 8002618:	200002f4 	.word	0x200002f4

0800261c <INA219_vShunt_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_INA219_vShunt_Task */
void INA219_vShunt_Task(void *argument)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b0a6      	sub	sp, #152	; 0x98
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	 char uart_tx_buff[100];
	 uint16_t vShunt;
  /* Infinite loop */
  for(;;)
  {
	vShunt = INA219_ReadShuntVolage(&ina219);
 8002624:	481d      	ldr	r0, [pc, #116]	; (800269c <INA219_vShunt_Task+0x80>)
 8002626:	f7ff fa5b 	bl	8001ae0 <INA219_ReadShuntVolage>
 800262a:	4603      	mov	r3, r0
 800262c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	sprintf(uart_tx_buff, "vShunt: %hu mV\r\n",vShunt);
 8002630:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	4919      	ldr	r1, [pc, #100]	; (80026a0 <INA219_vShunt_Task+0x84>)
 800263a:	4618      	mov	r0, r3
 800263c:	f007 faa0 	bl	8009b80 <siprintf>
	strcpy(msg.mess,"vShunt");
 8002640:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002644:	331e      	adds	r3, #30
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <INA219_vShunt_Task+0x88>)
 8002648:	6810      	ldr	r0, [r2, #0]
 800264a:	6018      	str	r0, [r3, #0]
 800264c:	8891      	ldrh	r1, [r2, #4]
 800264e:	7992      	ldrb	r2, [r2, #6]
 8002650:	8099      	strh	r1, [r3, #4]
 8002652:	719a      	strb	r2, [r3, #6]
	strcpy(msg.Buf,uart_tx_buff);
 8002654:	f107 0208 	add.w	r2, r7, #8
 8002658:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f007 faae 	bl	8009bc0 <strcpy>
	osMessageQueuePut(myQueue01Handle, &msg, 0, osWaitForever); //Поместили в очередь данные
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <INA219_vShunt_Task+0x8c>)
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	2200      	movs	r2, #0
 8002672:	f003 fe1d 	bl	80062b0 <osMessageQueuePut>
	HAL_UART_Transmit(&huart1, uart_tx_buff, strlen(uart_tx_buff), 100);
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	4618      	mov	r0, r3
 800267c:	f7fd fd72 	bl	8000164 <strlen>
 8002680:	4603      	mov	r3, r0
 8002682:	b29a      	uxth	r2, r3
 8002684:	f107 0108 	add.w	r1, r7, #8
 8002688:	2364      	movs	r3, #100	; 0x64
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <INA219_vShunt_Task+0x90>)
 800268c:	f003 facc 	bl	8005c28 <HAL_UART_Transmit>
	osDelay(300);
 8002690:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002694:	f003 fd58 	bl	8006148 <osDelay>
	vShunt = INA219_ReadShuntVolage(&ina219);
 8002698:	e7c4      	b.n	8002624 <INA219_vShunt_Task+0x8>
 800269a:	bf00      	nop
 800269c:	20001d78 	.word	0x20001d78
 80026a0:	0800d844 	.word	0x0800d844
 80026a4:	0800d7a8 	.word	0x0800d7a8
 80026a8:	20001b94 	.word	0x20001b94
 80026ac:	200002f4 	.word	0x200002f4

080026b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026c2:	f000 fb33 	bl	8002d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40000800 	.word	0x40000800

080026d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d8:	b672      	cpsid	i
}
 80026da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026dc:	e7fe      	b.n	80026dc <Error_Handler+0x8>
	...

080026e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_MspInit+0x68>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_MspInit+0x68>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6193      	str	r3, [r2, #24]
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_MspInit+0x68>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_MspInit+0x68>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_MspInit+0x68>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_MspInit+0x68>)
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	210f      	movs	r1, #15
 800271a:	f06f 0001 	mvn.w	r0, #1
 800271e:	f000 ff20 	bl	8003562 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_MspInit+0x6c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_MspInit+0x6c>)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40010000 	.word	0x40010000

08002750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_ADC_MspInit+0x6c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d121      	bne.n	80027b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 800278e:	f043 0304 	orr.w	r3, r3, #4
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_ADC_MspInit+0x70>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027a0:	2302      	movs	r3, #2
 80027a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a4:	2303      	movs	r3, #3
 80027a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_ADC_MspInit+0x74>)
 80027b0:	f000 ff02 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b4:	bf00      	nop
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012400 	.word	0x40012400
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40010800 	.word	0x40010800

080027c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <HAL_I2C_MspInit+0x70>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d123      	bne.n	8002830 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_I2C_MspInit+0x74>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <HAL_I2C_MspInit+0x74>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_I2C_MspInit+0x74>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002800:	23c0      	movs	r3, #192	; 0xc0
 8002802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002804:	2312      	movs	r3, #18
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002808:	2303      	movs	r3, #3
 800280a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280c:	f107 0310 	add.w	r3, r7, #16
 8002810:	4619      	mov	r1, r3
 8002812:	480b      	ldr	r0, [pc, #44]	; (8002840 <HAL_I2C_MspInit+0x78>)
 8002814:	f000 fed0 	bl	80035b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_I2C_MspInit+0x74>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_I2C_MspInit+0x74>)
 800281e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002822:	61d3      	str	r3, [r2, #28]
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_I2C_MspInit+0x74>)
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002830:	bf00      	nop
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40005400 	.word	0x40005400
 800283c:	40021000 	.word	0x40021000
 8002840:	40010c00 	.word	0x40010c00

08002844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_SPI_MspInit+0x88>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d12f      	bne.n	80028c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 800286a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_SPI_MspInit+0x8c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002894:	23a0      	movs	r3, #160	; 0xa0
 8002896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	4619      	mov	r1, r3
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <HAL_SPI_MspInit+0x90>)
 80028a8:	f000 fe86 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028ac:	2340      	movs	r3, #64	; 0x40
 80028ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4619      	mov	r1, r3
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_SPI_MspInit+0x90>)
 80028c0:	f000 fe7a 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028c4:	bf00      	nop
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40013000 	.word	0x40013000
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40010800 	.word	0x40010800

080028d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_UART_MspInit+0x8c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d131      	bne.n	800295c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_UART_MspInit+0x90>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_UART_MspInit+0x90>)
 80028fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <HAL_UART_MspInit+0x90>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_UART_MspInit+0x90>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4619      	mov	r1, r3
 800293c:	480b      	ldr	r0, [pc, #44]	; (800296c <HAL_UART_MspInit+0x94>)
 800293e:	f000 fe3b 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4619      	mov	r1, r3
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <HAL_UART_MspInit+0x94>)
 8002958:	f000 fe2e 	bl	80035b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40013800 	.word	0x40013800
 8002968:	40021000 	.word	0x40021000
 800296c:	40010800 	.word	0x40010800

08002970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	; 0x38
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_InitTick+0xe8>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a33      	ldr	r2, [pc, #204]	; (8002a58 <HAL_InitTick+0xe8>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_InitTick+0xe8>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800299e:	f107 0210 	add.w	r2, r7, #16
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f002 fd1b 	bl	80053e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029b8:	f002 fcec 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80029bc:	6378      	str	r0, [r7, #52]	; 0x34
 80029be:	e004      	b.n	80029ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029c0:	f002 fce8 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 80029c4:	4603      	mov	r3, r0
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <HAL_InitTick+0xec>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	0c9b      	lsrs	r3, r3, #18
 80029d4:	3b01      	subs	r3, #1
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_InitTick+0xf0>)
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_InitTick+0xf4>)
 80029dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_InitTick+0xf0>)
 80029e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_InitTick+0xf0>)
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80029ec:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <HAL_InitTick+0xf0>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <HAL_InitTick+0xf0>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_InitTick+0xf0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80029fe:	4818      	ldr	r0, [pc, #96]	; (8002a60 <HAL_InitTick+0xf0>)
 8002a00:	f002 fe78 	bl	80056f4 <HAL_TIM_Base_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11b      	bne.n	8002a4a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002a12:	4813      	ldr	r0, [pc, #76]	; (8002a60 <HAL_InitTick+0xf0>)
 8002a14:	f002 fec6 	bl	80057a4 <HAL_TIM_Base_Start_IT>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d111      	bne.n	8002a4a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a26:	201e      	movs	r0, #30
 8002a28:	f000 fdb7 	bl	800359a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d808      	bhi.n	8002a44 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002a32:	2200      	movs	r2, #0
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	201e      	movs	r0, #30
 8002a38:	f000 fd93 	bl	8003562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <HAL_InitTick+0xf8>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e002      	b.n	8002a4a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3738      	adds	r7, #56	; 0x38
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	431bde83 	.word	0x431bde83
 8002a60:	20001d80 	.word	0x20001d80
 8002a64:	40000800 	.word	0x40000800
 8002a68:	20000010 	.word	0x20000010

08002a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	 ILI9341_WriteString(0, 54, " NMI_Handler Exception", Font_11x18, WHITE, MYFON);
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <NMI_Handler+0x28>)
 8002a74:	f642 1265 	movw	r2, #10597	; 0x2965
 8002a78:	9202      	str	r2, [sp, #8]
 8002a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	9200      	str	r2, [sp, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <NMI_Handler+0x2c>)
 8002a88:	2136      	movs	r1, #54	; 0x36
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe ff5b 	bl	8001946 <ILI9341_WriteString>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <NMI_Handler+0x24>
 8002a92:	bf00      	nop
 8002a94:	20000004 	.word	0x20000004
 8002a98:	0800d858 	.word	0x0800d858

08002a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af04      	add	r7, sp, #16

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ILI9341_WriteString(0, 54, "HardFault_Handler Exception", Font_11x18, WHITE, MYFON);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HardFault_Handler+0x28>)
 8002aa4:	f642 1265 	movw	r2, #10597	; 0x2965
 8002aa8:	9202      	str	r2, [sp, #8]
 8002aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aae:	9201      	str	r2, [sp, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HardFault_Handler+0x2c>)
 8002ab8:	2136      	movs	r1, #54	; 0x36
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe ff43 	bl	8001946 <ILI9341_WriteString>
 8002ac0:	e7ef      	b.n	8002aa2 <HardFault_Handler+0x6>
 8002ac2:	bf00      	nop
 8002ac4:	20000004 	.word	0x20000004
 8002ac8:	0800d870 	.word	0x0800d870

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	ILI9341_WriteString(0, 54, "MemManage_Handler Exception", Font_11x18, WHITE, MYFON);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <MemManage_Handler+0x28>)
 8002ad4:	f642 1265 	movw	r2, #10597	; 0x2965
 8002ad8:	9202      	str	r2, [sp, #8]
 8002ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <MemManage_Handler+0x2c>)
 8002ae8:	2136      	movs	r1, #54	; 0x36
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fe ff2b 	bl	8001946 <ILI9341_WriteString>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af0:	e7fe      	b.n	8002af0 <MemManage_Handler+0x24>
 8002af2:	bf00      	nop
 8002af4:	20000004 	.word	0x20000004
 8002af8:	0800d88c 	.word	0x0800d88c

08002afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b00:	e7fe      	b.n	8002b00 <BusFault_Handler+0x4>

08002b02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b06:	e7fe      	b.n	8002b06 <UsageFault_Handler+0x4>

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM4_IRQHandler+0x10>)
 8002b1a:	f002 fe95 	bl	8005848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20001d80 	.word	0x20001d80

08002b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return 1;
 8002b2c:	2301      	movs	r3, #1
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <_kill>:

int _kill(int pid, int sig)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b40:	f006 f96c 	bl	8008e1c <__errno>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2216      	movs	r2, #22
 8002b48:	601a      	str	r2, [r3, #0]
  return -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_exit>:

void _exit (int status)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffe7 	bl	8002b36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b68:	e7fe      	b.n	8002b68 <_exit+0x12>

08002b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e00a      	b.n	8002b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b7c:	f3af 8000 	nop.w
 8002b80:	4601      	mov	r1, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	60ba      	str	r2, [r7, #8]
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf0      	blt.n	8002b7c <_read+0x12>
  }

  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e009      	b.n	8002bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbf1      	blt.n	8002bb6 <_write+0x12>
  }
  return len;
 8002bd2:	687b      	ldr	r3, [r7, #4]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_close>:

int _close(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c02:	605a      	str	r2, [r3, #4]
  return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <_isatty>:

int _isatty(int file)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c18:	2301      	movs	r3, #1
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <_sbrk+0x5c>)
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <_sbrk+0x60>)
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <_sbrk+0x64>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <_sbrk+0x64>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <_sbrk+0x68>)
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d207      	bcs.n	8002c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c6c:	f006 f8d6 	bl	8008e1c <__errno>
 8002c70:	4603      	mov	r3, r0
 8002c72:	220c      	movs	r2, #12
 8002c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7a:	e009      	b.n	8002c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <_sbrk+0x64>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <_sbrk+0x64>)
 8002c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20005000 	.word	0x20005000
 8002c9c:	00000400 	.word	0x00000400
 8002ca0:	20001dc8 	.word	0x20001dc8
 8002ca4:	20003728 	.word	0x20003728

08002ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
;    bl  SystemInit
 8002cb4:	f7ff fff8 	bl	8002ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cba:	490c      	ldr	r1, [pc, #48]	; (8002cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cd0:	4c09      	ldr	r4, [pc, #36]	; (8002cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cde:	f006 f8a3 	bl	8008e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce2:	f7ff f827 	bl	8001d34 <main>
  bx lr
 8002ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002cf0:	0800ec2c 	.word	0x0800ec2c
  ldr r2, =_sbss
 8002cf4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002cf8:	20003728 	.word	0x20003728

08002cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC1_2_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d04:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <HAL_Init+0x28>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <HAL_Init+0x28>)
 8002d0a:	f043 0310 	orr.w	r3, r3, #16
 8002d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d10:	2003      	movs	r0, #3
 8002d12:	f000 fc1b 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d16:	200f      	movs	r0, #15
 8002d18:	f7ff fe2a 	bl	8002970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d1c:	f7ff fce0 	bl	80026e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40022000 	.word	0x40022000

08002d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_IncTick+0x1c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_IncTick+0x20>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a03      	ldr	r2, [pc, #12]	; (8002d4c <HAL_IncTick+0x20>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	20001dcc 	.word	0x20001dcc

08002d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return uwTick;
 8002d54:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <HAL_GetTick+0x10>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20001dcc 	.word	0x20001dcc

08002d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_GetTick>
 8002d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d005      	beq.n	8002d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Delay+0x44>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d8a:	bf00      	nop
 8002d8c:	f7ff ffe0 	bl	8002d50 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d8f7      	bhi.n	8002d8c <HAL_Delay+0x28>
  {
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000014 	.word	0x20000014

08002dac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0be      	b.n	8002f4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff fcb0 	bl	8002750 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fabf 	bl	8003374 <ADC_ConversionStop_Disable>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8099 	bne.w	8002f3a <HAL_ADC_Init+0x18e>
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 8095 	bne.w	8002f3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e18:	f023 0302 	bic.w	r3, r3, #2
 8002e1c:	f043 0202 	orr.w	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7b1b      	ldrb	r3, [r3, #12]
 8002e32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e44:	d003      	beq.n	8002e4e <HAL_ADC_Init+0xa2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <HAL_ADC_Init+0xa8>
 8002e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e52:	e000      	b.n	8002e56 <HAL_ADC_Init+0xaa>
 8002e54:	2300      	movs	r3, #0
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d1b      	ldrb	r3, [r3, #20]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d119      	bne.n	8002e98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7b1b      	ldrb	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	035a      	lsls	r2, r3, #13
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e00b      	b.n	8002e98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	4b28      	ldr	r3, [pc, #160]	; (8002f54 <HAL_ADC_Init+0x1a8>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d003      	beq.n	8002ed2 <HAL_ADC_Init+0x126>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d104      	bne.n	8002edc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	051b      	lsls	r3, r3, #20
 8002eda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_ADC_Init+0x1ac>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d10b      	bne.n	8002f18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f16:	e018      	b.n	8002f4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f023 0312 	bic.w	r3, r3, #18
 8002f20:	f043 0210 	orr.w	r2, r3, #16
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f38:	e007      	b.n	8002f4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	f043 0210 	orr.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	ffe1f7fd 	.word	0xffe1f7fd
 8002f58:	ff1f0efe 	.word	0xff1f0efe

08002f5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_ADC_Start+0x1a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e098      	b.n	80030a8 <HAL_ADC_Start+0x14c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f99e 	bl	80032c0 <ADC_Enable>
 8002f84:	4603      	mov	r3, r0
 8002f86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8087 	bne.w	800309e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_ADC_Start+0x154>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_Start+0x5e>
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_ADC_Start+0x158>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d115      	bne.n	8002fe6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d026      	beq.n	8003022 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fe4:	e01d      	b.n	8003022 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <HAL_ADC_Start+0x158>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_ADC_Start+0xaa>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <HAL_ADC_Start+0x154>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d10d      	bne.n	8003022 <HAL_ADC_Start+0xc6>
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_ADC_Start+0x158>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f023 0206 	bic.w	r2, r3, #6
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	62da      	str	r2, [r3, #44]	; 0x2c
 800303a:	e002      	b.n	8003042 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f06f 0202 	mvn.w	r2, #2
 8003052:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800305e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003062:	d113      	bne.n	800308c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003068:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <HAL_ADC_Start+0x154>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d105      	bne.n	800307a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_ADC_Start+0x158>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e00c      	b.n	80030a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	e003      	b.n	80030a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40012800 	.word	0x40012800
 80030b4:	40012400 	.word	0x40012400

080030b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x20>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e0dc      	b.n	80032aa <HAL_ADC_ConfigChannel+0x1da>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b06      	cmp	r3, #6
 80030fe:	d81c      	bhi.n	800313a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	3b05      	subs	r3, #5
 8003112:	221f      	movs	r2, #31
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	4019      	ands	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	3b05      	subs	r3, #5
 800312c:	fa00 f203 	lsl.w	r2, r0, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	635a      	str	r2, [r3, #52]	; 0x34
 8003138:	e03c      	b.n	80031b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b0c      	cmp	r3, #12
 8003140:	d81c      	bhi.n	800317c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b23      	subs	r3, #35	; 0x23
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	4019      	ands	r1, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b23      	subs	r3, #35	; 0x23
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
 800317a:	e01b      	b.n	80031b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	3b41      	subs	r3, #65	; 0x41
 800318e:	221f      	movs	r2, #31
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3b41      	subs	r3, #65	; 0x41
 80031a8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b09      	cmp	r3, #9
 80031ba:	d91c      	bls.n	80031f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68d9      	ldr	r1, [r3, #12]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	3b1e      	subs	r3, #30
 80031ce:	2207      	movs	r2, #7
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	4019      	ands	r1, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6898      	ldr	r0, [r3, #8]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	3b1e      	subs	r3, #30
 80031e8:	fa00 f203 	lsl.w	r2, r0, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]
 80031f4:	e019      	b.n	800322a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6919      	ldr	r1, [r3, #16]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	2207      	movs	r2, #7
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	4019      	ands	r1, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6898      	ldr	r0, [r3, #8]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	fa00 f203 	lsl.w	r2, r0, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d003      	beq.n	800323a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003236:	2b11      	cmp	r3, #17
 8003238:	d132      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d125      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d126      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b10      	cmp	r3, #16
 8003268:	d11a      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_ADC_ConfigChannel+0x1ec>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	0c9a      	lsrs	r2, r3, #18
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003280:	e002      	b.n	8003288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x1b2>
 800328e:	e007      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40012400 	.word	0x40012400
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	431bde83 	.word	0x431bde83

080032c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d040      	beq.n	8003360 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <ADC_Enable+0xac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <ADC_Enable+0xb0>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9b      	lsrs	r3, r3, #18
 80032fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032fc:	e002      	b.n	8003304 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3b01      	subs	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f9      	bne.n	80032fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800330a:	f7ff fd21 	bl	8002d50 <HAL_GetTick>
 800330e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003310:	e01f      	b.n	8003352 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003312:	f7ff fd1d 	bl	8002d50 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d918      	bls.n	8003352 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d011      	beq.n	8003352 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	f043 0210 	orr.w	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f043 0201 	orr.w	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d1d8      	bne.n	8003312 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	431bde83 	.word	0x431bde83

08003374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d12e      	bne.n	80033ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800339e:	f7ff fcd7 	bl	8002d50 <HAL_GetTick>
 80033a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033a4:	e01b      	b.n	80033de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033a6:	f7ff fcd3 	bl	8002d50 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d914      	bls.n	80033de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c6:	f043 0210 	orr.w	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e007      	b.n	80033ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d0dc      	beq.n	80033a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <__NVIC_EnableIRQ+0x34>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff4f 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff64 	bl	8003440 <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ffb2 	bl	80034e8 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff81 	bl	8003494 <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff57 	bl	800345c <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b08b      	sub	sp, #44	; 0x2c
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035c6:	2300      	movs	r3, #0
 80035c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ca:	e169      	b.n	80038a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035cc:	2201      	movs	r2, #1
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8158 	bne.w	800389a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a9a      	ldr	r2, [pc, #616]	; (8003858 <HAL_GPIO_Init+0x2a0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d05e      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 80035f4:	4a98      	ldr	r2, [pc, #608]	; (8003858 <HAL_GPIO_Init+0x2a0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d875      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 80035fa:	4a98      	ldr	r2, [pc, #608]	; (800385c <HAL_GPIO_Init+0x2a4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d058      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003600:	4a96      	ldr	r2, [pc, #600]	; (800385c <HAL_GPIO_Init+0x2a4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d86f      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003606:	4a96      	ldr	r2, [pc, #600]	; (8003860 <HAL_GPIO_Init+0x2a8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d052      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 800360c:	4a94      	ldr	r2, [pc, #592]	; (8003860 <HAL_GPIO_Init+0x2a8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d869      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003612:	4a94      	ldr	r2, [pc, #592]	; (8003864 <HAL_GPIO_Init+0x2ac>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d04c      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003618:	4a92      	ldr	r2, [pc, #584]	; (8003864 <HAL_GPIO_Init+0x2ac>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d863      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 800361e:	4a92      	ldr	r2, [pc, #584]	; (8003868 <HAL_GPIO_Init+0x2b0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d046      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
 8003624:	4a90      	ldr	r2, [pc, #576]	; (8003868 <HAL_GPIO_Init+0x2b0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d85d      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 800362a:	2b12      	cmp	r3, #18
 800362c:	d82a      	bhi.n	8003684 <HAL_GPIO_Init+0xcc>
 800362e:	2b12      	cmp	r3, #18
 8003630:	d859      	bhi.n	80036e6 <HAL_GPIO_Init+0x12e>
 8003632:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_GPIO_Init+0x80>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	080036b3 	.word	0x080036b3
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800369f 	.word	0x0800369f
 8003644:	080036e1 	.word	0x080036e1
 8003648:	080036e7 	.word	0x080036e7
 800364c:	080036e7 	.word	0x080036e7
 8003650:	080036e7 	.word	0x080036e7
 8003654:	080036e7 	.word	0x080036e7
 8003658:	080036e7 	.word	0x080036e7
 800365c:	080036e7 	.word	0x080036e7
 8003660:	080036e7 	.word	0x080036e7
 8003664:	080036e7 	.word	0x080036e7
 8003668:	080036e7 	.word	0x080036e7
 800366c:	080036e7 	.word	0x080036e7
 8003670:	080036e7 	.word	0x080036e7
 8003674:	080036e7 	.word	0x080036e7
 8003678:	080036e7 	.word	0x080036e7
 800367c:	08003695 	.word	0x08003695
 8003680:	080036a9 	.word	0x080036a9
 8003684:	4a79      	ldr	r2, [pc, #484]	; (800386c <HAL_GPIO_Init+0x2b4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800368a:	e02c      	b.n	80036e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	623b      	str	r3, [r7, #32]
          break;
 8003692:	e029      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	3304      	adds	r3, #4
 800369a:	623b      	str	r3, [r7, #32]
          break;
 800369c:	e024      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	3308      	adds	r3, #8
 80036a4:	623b      	str	r3, [r7, #32]
          break;
 80036a6:	e01f      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	330c      	adds	r3, #12
 80036ae:	623b      	str	r3, [r7, #32]
          break;
 80036b0:	e01a      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ba:	2304      	movs	r3, #4
 80036bc:	623b      	str	r3, [r7, #32]
          break;
 80036be:	e013      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036c8:	2308      	movs	r3, #8
 80036ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	611a      	str	r2, [r3, #16]
          break;
 80036d2:	e009      	b.n	80036e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036d4:	2308      	movs	r3, #8
 80036d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	615a      	str	r2, [r3, #20]
          break;
 80036de:	e003      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
          break;
 80036e4:	e000      	b.n	80036e8 <HAL_GPIO_Init+0x130>
          break;
 80036e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2bff      	cmp	r3, #255	; 0xff
 80036ec:	d801      	bhi.n	80036f2 <HAL_GPIO_Init+0x13a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	e001      	b.n	80036f6 <HAL_GPIO_Init+0x13e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3304      	adds	r3, #4
 80036f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2bff      	cmp	r3, #255	; 0xff
 80036fc:	d802      	bhi.n	8003704 <HAL_GPIO_Init+0x14c>
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	e002      	b.n	800370a <HAL_GPIO_Init+0x152>
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	3b08      	subs	r3, #8
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	210f      	movs	r1, #15
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	431a      	orrs	r2, r3
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80b1 	beq.w	800389a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003738:	4b4d      	ldr	r3, [pc, #308]	; (8003870 <HAL_GPIO_Init+0x2b8>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <HAL_GPIO_Init+0x2b8>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6193      	str	r3, [r2, #24]
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_GPIO_Init+0x2b8>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003750:	4a48      	ldr	r2, [pc, #288]	; (8003874 <HAL_GPIO_Init+0x2bc>)
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	220f      	movs	r2, #15
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <HAL_GPIO_Init+0x2c0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_GPIO_Init+0x1ec>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3f      	ldr	r2, [pc, #252]	; (800387c <HAL_GPIO_Init+0x2c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_GPIO_Init+0x1e8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3e      	ldr	r2, [pc, #248]	; (8003880 <HAL_GPIO_Init+0x2c8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <HAL_GPIO_Init+0x1e4>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3d      	ldr	r2, [pc, #244]	; (8003884 <HAL_GPIO_Init+0x2cc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_GPIO_Init+0x1e0>
 8003794:	2303      	movs	r3, #3
 8003796:	e006      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 8003798:	2304      	movs	r3, #4
 800379a:	e004      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 800379c:	2302      	movs	r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_GPIO_Init+0x1ee>
 80037a4:	2300      	movs	r3, #0
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	f002 0203 	and.w	r2, r2, #3
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	4093      	lsls	r3, r2
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037b6:	492f      	ldr	r1, [pc, #188]	; (8003874 <HAL_GPIO_Init+0x2bc>)
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	089b      	lsrs	r3, r3, #2
 80037bc:	3302      	adds	r3, #2
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	492c      	ldr	r1, [pc, #176]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037de:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	4928      	ldr	r1, [pc, #160]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	4922      	ldr	r1, [pc, #136]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	60cb      	str	r3, [r1, #12]
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	43db      	mvns	r3, r3
 800380e:	491e      	ldr	r1, [pc, #120]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003810:	4013      	ands	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d006      	beq.n	800382e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4918      	ldr	r1, [pc, #96]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	43db      	mvns	r3, r3
 8003836:	4914      	ldr	r1, [pc, #80]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 8003838:	4013      	ands	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d021      	beq.n	800388c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	490e      	ldr	r1, [pc, #56]	; (8003888 <HAL_GPIO_Init+0x2d0>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e021      	b.n	800389a <HAL_GPIO_Init+0x2e2>
 8003856:	bf00      	nop
 8003858:	10320000 	.word	0x10320000
 800385c:	10310000 	.word	0x10310000
 8003860:	10220000 	.word	0x10220000
 8003864:	10210000 	.word	0x10210000
 8003868:	10120000 	.word	0x10120000
 800386c:	10110000 	.word	0x10110000
 8003870:	40021000 	.word	0x40021000
 8003874:	40010000 	.word	0x40010000
 8003878:	40010800 	.word	0x40010800
 800387c:	40010c00 	.word	0x40010c00
 8003880:	40011000 	.word	0x40011000
 8003884:	40011400 	.word	0x40011400
 8003888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_GPIO_Init+0x304>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	43db      	mvns	r3, r3
 8003894:	4909      	ldr	r1, [pc, #36]	; (80038bc <HAL_GPIO_Init+0x304>)
 8003896:	4013      	ands	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	3301      	adds	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f ae8e 	bne.w	80035cc <HAL_GPIO_Init+0x14>
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	372c      	adds	r7, #44	; 0x2c
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40010400 	.word	0x40010400

080038c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	807b      	strh	r3, [r7, #2]
 80038cc:	4613      	mov	r3, r2
 80038ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d0:	787b      	ldrb	r3, [r7, #1]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038dc:	e003      	b.n	80038e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	041a      	lsls	r2, r3, #16
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	611a      	str	r2, [r3, #16]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e12b      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe ff56 	bl	80027c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003954:	f001 fd1e 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8003958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4a81      	ldr	r2, [pc, #516]	; (8003b64 <HAL_I2C_Init+0x274>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d807      	bhi.n	8003974 <HAL_I2C_Init+0x84>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a80      	ldr	r2, [pc, #512]	; (8003b68 <HAL_I2C_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	bf94      	ite	ls
 800396c:	2301      	movls	r3, #1
 800396e:	2300      	movhi	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e006      	b.n	8003982 <HAL_I2C_Init+0x92>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a7d      	ldr	r2, [pc, #500]	; (8003b6c <HAL_I2C_Init+0x27c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0e7      	b.n	8003b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a78      	ldr	r2, [pc, #480]	; (8003b70 <HAL_I2C_Init+0x280>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <HAL_I2C_Init+0x274>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d802      	bhi.n	80039c4 <HAL_I2C_Init+0xd4>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3301      	adds	r3, #1
 80039c2:	e009      	b.n	80039d8 <HAL_I2C_Init+0xe8>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <HAL_I2C_Init+0x284>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	099b      	lsrs	r3, r3, #6
 80039d6:	3301      	adds	r3, #1
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	495c      	ldr	r1, [pc, #368]	; (8003b64 <HAL_I2C_Init+0x274>)
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d819      	bhi.n	8003a2c <HAL_I2C_Init+0x13c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e59      	subs	r1, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_I2C_Init+0x138>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1e59      	subs	r1, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a26:	e051      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	e04f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d111      	bne.n	8003a58 <HAL_I2C_Init+0x168>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1e58      	subs	r0, r3, #1
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	e012      	b.n	8003a7e <HAL_I2C_Init+0x18e>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1e58      	subs	r0, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6859      	ldr	r1, [r3, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	0099      	lsls	r1, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_Init+0x196>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e022      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <HAL_I2C_Init+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e58      	subs	r0, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	440b      	add	r3, r1
 8003a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aaa:	e00f      	b.n	8003acc <HAL_I2C_Init+0x1dc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	0099      	lsls	r1, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	6809      	ldr	r1, [r1, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6911      	ldr	r1, [r2, #16]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6812      	ldr	r2, [r2, #0]
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	000186a0 	.word	0x000186a0
 8003b68:	001e847f 	.word	0x001e847f
 8003b6c:	003d08ff 	.word	0x003d08ff
 8003b70:	431bde83 	.word	0x431bde83
 8003b74:	10624dd3 	.word	0x10624dd3

08003b78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b92:	f7ff f8dd 	bl	8002d50 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	f040 80d9 	bne.w	8003d58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2319      	movs	r3, #25
 8003bac:	2201      	movs	r2, #1
 8003bae:	496d      	ldr	r1, [pc, #436]	; (8003d64 <HAL_I2C_Mem_Write+0x1ec>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fdef 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0cc      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_I2C_Mem_Write+0x56>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0c5      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d007      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	; 0x21
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2240      	movs	r2, #64	; 0x40
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a4d      	ldr	r2, [pc, #308]	; (8003d68 <HAL_I2C_Mem_Write+0x1f0>)
 8003c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c36:	88f8      	ldrh	r0, [r7, #6]
 8003c38:	893a      	ldrh	r2, [r7, #8]
 8003c3a:	8979      	ldrh	r1, [r7, #10]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fc26 	bl	8004498 <I2C_RequestMemoryWrite>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d052      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e081      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 feb4 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d017      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1aa      	bne.n	8003c56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fea7 	bl	8004a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00d      	beq.n	8003d2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d107      	bne.n	8003d28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e016      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	00100002 	.word	0x00100002
 8003d68:	ffff0000 	.word	0xffff0000

08003d6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	; 0x30
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	813b      	strh	r3, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d8a:	f7fe ffe1 	bl	8002d50 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	f040 8244 	bne.w	8004226 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2319      	movs	r3, #25
 8003da4:	2201      	movs	r2, #1
 8003da6:	4982      	ldr	r1, [pc, #520]	; (8003fb0 <HAL_I2C_Mem_Read+0x244>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fcf3 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
 8003db6:	e237      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x5a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e230      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d007      	beq.n	8003dec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2222      	movs	r2, #34	; 0x22
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <HAL_I2C_Mem_Read+0x248>)
 8003e2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e2e:	88f8      	ldrh	r0, [r7, #6]
 8003e30:	893a      	ldrh	r2, [r7, #8]
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fbc0 	bl	80045c4 <I2C_RequestMemoryRead>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1ec      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d113      	bne.n	8003e7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e1c0      	b.n	8004200 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d11e      	bne.n	8003ec4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e96:	b672      	cpsid	i
}
 8003e98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ec0:	b662      	cpsie	i
}
 8003ec2:	e035      	b.n	8003f30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d11e      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003edc:	b672      	cpsid	i
}
 8003ede:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f06:	b662      	cpsie	i
}
 8003f08:	e012      	b.n	8003f30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f30:	e166      	b.n	8004200 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	f200 811f 	bhi.w	800417a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d123      	bne.n	8003f8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fdcd 	bl	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e167      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8a:	e139      	b.n	8004200 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d152      	bne.n	800403a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_I2C_Mem_Read+0x24c>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 fbf8 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e13c      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
 8003fae:	bf00      	nop
 8003fb0:	00100002 	.word	0x00100002
 8003fb4:	ffff0000 	.word	0xffff0000
 8003fb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003fbc:	b672      	cpsid	i
}
 8003fbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004002:	b662      	cpsie	i
}
 8004004:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004038:	e0e2      	b.n	8004200 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	2200      	movs	r2, #0
 8004042:	497b      	ldr	r1, [pc, #492]	; (8004230 <HAL_I2C_Mem_Read+0x4c4>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fba5 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0e9      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004062:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004064:	b672      	cpsid	i
}
 8004066:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691a      	ldr	r2, [r3, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800409a:	4b66      	ldr	r3, [pc, #408]	; (8004234 <HAL_I2C_Mem_Read+0x4c8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	4a65      	ldr	r2, [pc, #404]	; (8004238 <HAL_I2C_Mem_Read+0x4cc>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	0a1a      	lsrs	r2, r3, #8
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	00da      	lsls	r2, r3, #3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d118      	bne.n	80040f2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e09a      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d1d9      	bne.n	80040b4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004142:	b662      	cpsie	i
}
 8004144:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	3b01      	subs	r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004178:	e042      	b.n	8004200 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fcb2 	bl	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e04c      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d118      	bne.n	8004200 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f ae94 	bne.w	8003f32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	00010004 	.word	0x00010004
 8004234:	2000000c 	.word	0x2000000c
 8004238:	14f8b589 	.word	0x14f8b589

0800423c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7fe fd80 	bl	8002d50 <HAL_GetTick>
 8004250:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b20      	cmp	r3, #32
 8004260:	f040 8111 	bne.w	8004486 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2319      	movs	r3, #25
 800426a:	2201      	movs	r2, #1
 800426c:	4988      	ldr	r1, [pc, #544]	; (8004490 <HAL_I2C_IsDeviceReady+0x254>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa90 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	e104      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_I2C_IsDeviceReady+0x50>
 8004288:	2302      	movs	r3, #2
 800428a:	e0fd      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d007      	beq.n	80042b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0201 	orr.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2224      	movs	r2, #36	; 0x24
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a70      	ldr	r2, [pc, #448]	; (8004494 <HAL_I2C_IsDeviceReady+0x258>)
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa4e 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00d      	beq.n	800431a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430c:	d103      	bne.n	8004316 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0b6      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800431a:	897b      	ldrh	r3, [r7, #10]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004328:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800432a:	f7fe fd11 	bl	8002d50 <HAL_GetTick>
 800432e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800435e:	e025      	b.n	80043ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fe fcf6 	bl	8002d50 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <HAL_I2C_IsDeviceReady+0x13a>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	22a0      	movs	r2, #160	; 0xa0
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	bf0c      	ite	eq
 80043a4:	2301      	moveq	r3, #1
 80043a6:	2300      	movne	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2ba0      	cmp	r3, #160	; 0xa0
 80043b6:	d005      	beq.n	80043c4 <HAL_I2C_IsDeviceReady+0x188>
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_I2C_IsDeviceReady+0x188>
 80043be:	7dbb      	ldrb	r3, [r7, #22]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0cd      	beq.n	8004360 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d129      	bne.n	800442e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2319      	movs	r3, #25
 8004406:	2201      	movs	r2, #1
 8004408:	4921      	ldr	r1, [pc, #132]	; (8004490 <HAL_I2C_IsDeviceReady+0x254>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f9c2 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e036      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e02c      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004446:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2319      	movs	r3, #25
 800444e:	2201      	movs	r2, #1
 8004450:	490f      	ldr	r1, [pc, #60]	; (8004490 <HAL_I2C_IsDeviceReady+0x254>)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f99e 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e012      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	3301      	adds	r3, #1
 8004466:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	f4ff af32 	bcc.w	80042d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004486:	2302      	movs	r3, #2
  }
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000

08004498 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f960 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d103      	bne.n	80044f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e05f      	b.n	80045b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	492d      	ldr	r1, [pc, #180]	; (80045c0 <I2C_RequestMemoryWrite+0x128>)
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f9bb 	bl	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e04c      	b.n	80045b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451c:	2300      	movs	r3, #0
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	6a39      	ldr	r1, [r7, #32]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa46 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b04      	cmp	r3, #4
 8004548:	d107      	bne.n	800455a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e02b      	b.n	80045b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]
 800456e:	e021      	b.n	80045b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	6a39      	ldr	r1, [r7, #32]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fa20 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b04      	cmp	r3, #4
 8004594:	d107      	bne.n	80045a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e005      	b.n	80045b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045aa:	893b      	ldrh	r3, [r7, #8]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	00010002 	.word	0x00010002

080045c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	461a      	mov	r2, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	817b      	strh	r3, [r7, #10]
 80045d6:	460b      	mov	r3, r1
 80045d8:	813b      	strh	r3, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2200      	movs	r2, #0
 8004606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8c2 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00d      	beq.n	8004632 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d103      	bne.n	800462e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0aa      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004632:	897b      	ldrh	r3, [r7, #10]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	4952      	ldr	r1, [pc, #328]	; (8004790 <I2C_RequestMemoryRead+0x1cc>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f91d 	bl	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e097      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	6a39      	ldr	r1, [r7, #32]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f9a8 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	2b04      	cmp	r3, #4
 8004684:	d107      	bne.n	8004696 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e076      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d105      	bne.n	80046ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	611a      	str	r2, [r3, #16]
 80046aa:	e021      	b.n	80046f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046ac:	893b      	ldrh	r3, [r7, #8]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f982 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d107      	bne.n	80046e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e050      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e6:	893b      	ldrh	r3, [r7, #8]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	6a39      	ldr	r1, [r7, #32]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f967 	bl	80049c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	2b04      	cmp	r3, #4
 8004706:	d107      	bne.n	8004718 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004716:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e035      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800472a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2200      	movs	r2, #0
 8004734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f82b 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00d      	beq.n	8004760 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004752:	d103      	bne.n	800475c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e013      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	4906      	ldr	r1, [pc, #24]	; (8004790 <I2C_RequestMemoryRead+0x1cc>)
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f886 	bl	8004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a4:	e048      	b.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d044      	beq.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe facf 	bl	8002d50 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d139      	bne.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0c1b      	lsrs	r3, r3, #16
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10d      	bne.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	43da      	mvns	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4013      	ands	r3, r2
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	e00c      	b.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	43da      	mvns	r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	4013      	ands	r3, r2
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	429a      	cmp	r2, r3
 8004808:	d116      	bne.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e023      	b.n	8004880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10d      	bne.n	800485e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	e00c      	b.n	8004878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	43da      	mvns	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d093      	beq.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004896:	e071      	b.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d123      	bne.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e067      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d041      	beq.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fe fa2a 	bl	8002d50 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d136      	bne.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10c      	bne.n	8004932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	43da      	mvns	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4013      	ands	r3, r2
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	bf14      	ite	ne
 800492a:	2301      	movne	r3, #1
 800492c:	2300      	moveq	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e00b      	b.n	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	43da      	mvns	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4013      	ands	r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e021      	b.n	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10c      	bne.n	80049a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	43da      	mvns	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	bf14      	ite	ne
 8004998:	2301      	movne	r3, #1
 800499a:	2300      	moveq	r3, #0
 800499c:	b2db      	uxtb	r3, r3
 800499e:	e00b      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	43da      	mvns	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf14      	ite	ne
 80049b2:	2301      	movne	r3, #1
 80049b4:	2300      	moveq	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f47f af6d 	bne.w	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d4:	e034      	b.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f8e3 	bl	8004ba2 <I2C_IsAcknowledgeFailed>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e034      	b.n	8004a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d028      	beq.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7fe f9af 	bl	8002d50 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11d      	bne.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d016      	beq.n	8004a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d1c3      	bne.n	80049d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a64:	e034      	b.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 f89b 	bl	8004ba2 <I2C_IsAcknowledgeFailed>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e034      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d028      	beq.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7e:	f7fe f967 	bl	8002d50 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d302      	bcc.n	8004a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d11d      	bne.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d016      	beq.n	8004ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e007      	b.n	8004ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d1c3      	bne.n	8004a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af4:	e049      	b.n	8004b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b10      	cmp	r3, #16
 8004b02:	d119      	bne.n	8004b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0210 	mvn.w	r2, #16
 8004b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e030      	b.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b38:	f7fe f90a 	bl	8002d50 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d11d      	bne.n	8004b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d016      	beq.n	8004b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e007      	b.n	8004b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d1ae      	bne.n	8004af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d11b      	bne.n	8004bf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e272      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8087 	beq.w	8004d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c20:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d00c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c2c:	4b8f      	ldr	r3, [pc, #572]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d112      	bne.n	8004c5e <HAL_RCC_OscConfig+0x5e>
 8004c38:	4b8c      	ldr	r3, [pc, #560]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d10b      	bne.n	8004c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c46:	4b89      	ldr	r3, [pc, #548]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d06c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x12c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d168      	bne.n	8004d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e24c      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x76>
 8004c68:	4b80      	ldr	r3, [pc, #512]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7f      	ldr	r2, [pc, #508]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e02e      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd4>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x98>
 8004c7e:	4b7b      	ldr	r3, [pc, #492]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7a      	ldr	r2, [pc, #488]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a77      	ldr	r2, [pc, #476]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e01d      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd4>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0xbc>
 8004ca2:	4b72      	ldr	r3, [pc, #456]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a71      	ldr	r2, [pc, #452]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	4b6f      	ldr	r3, [pc, #444]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a6e      	ldr	r2, [pc, #440]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd4>
 8004cbc:	4b6b      	ldr	r3, [pc, #428]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6a      	ldr	r2, [pc, #424]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b68      	ldr	r3, [pc, #416]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a67      	ldr	r2, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f838 	bl	8002d50 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fe f834 	bl	8002d50 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e200      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe4>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fe f824 	bl	8002d50 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7fe f820 	bl	8002d50 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	; 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e1ec      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x10c>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d063      	beq.n	8004e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d3a:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d46:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d11c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x18c>
 8004d52:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_RCC_OscConfig+0x176>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d001      	beq.n	8004d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e1c0      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d76:	4b3d      	ldr	r3, [pc, #244]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	4939      	ldr	r1, [pc, #228]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	e03a      	b.n	8004e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d94:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <HAL_RCC_OscConfig+0x270>)
 8004d96:	2201      	movs	r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9a:	f7fd ffd9 	bl	8002d50 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da2:	f7fd ffd5 	bl	8002d50 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1a1      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc0:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4927      	ldr	r1, [pc, #156]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
 8004dd4:	e015      	b.n	8004e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dd6:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd ffb8 	bl	8002d50 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de4:	f7fd ffb4 	bl	8002d50 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e180      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d03a      	beq.n	8004e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d019      	beq.n	8004e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1c:	f7fd ff98 	bl	8002d50 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e24:	f7fd ff94 	bl	8002d50 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e160      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCC_OscConfig+0x26c>)
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e42:	2001      	movs	r0, #1
 8004e44:	f000 fafe 	bl	8005444 <RCC_Delay>
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCC_OscConfig+0x274>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e50:	f7fd ff7e 	bl	8002d50 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e56:	e00f      	b.n	8004e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e58:	f7fd ff7a 	bl	8002d50 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d908      	bls.n	8004e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e146      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	42420000 	.word	0x42420000
 8004e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b92      	ldr	r3, [pc, #584]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e9      	bne.n	8004e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80a6 	beq.w	8004fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b8b      	ldr	r3, [pc, #556]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10d      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b88      	ldr	r3, [pc, #544]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	4a87      	ldr	r2, [pc, #540]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	61d3      	str	r3, [r2, #28]
 8004eae:	4b85      	ldr	r3, [pc, #532]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b82      	ldr	r3, [pc, #520]	; (80050c8 <HAL_RCC_OscConfig+0x4c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d118      	bne.n	8004efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eca:	4b7f      	ldr	r3, [pc, #508]	; (80050c8 <HAL_RCC_OscConfig+0x4c8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a7e      	ldr	r2, [pc, #504]	; (80050c8 <HAL_RCC_OscConfig+0x4c8>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd ff3b 	bl	8002d50 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ede:	f7fd ff37 	bl	8002d50 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b64      	cmp	r3, #100	; 0x64
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e103      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	4b75      	ldr	r3, [pc, #468]	; (80050c8 <HAL_RCC_OscConfig+0x4c8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d106      	bne.n	8004f12 <HAL_RCC_OscConfig+0x312>
 8004f04:	4b6f      	ldr	r3, [pc, #444]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	4a6e      	ldr	r2, [pc, #440]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	6213      	str	r3, [r2, #32]
 8004f10:	e02d      	b.n	8004f6e <HAL_RCC_OscConfig+0x36e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x334>
 8004f1a:	4b6a      	ldr	r3, [pc, #424]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4a69      	ldr	r2, [pc, #420]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	6213      	str	r3, [r2, #32]
 8004f26:	4b67      	ldr	r3, [pc, #412]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4a66      	ldr	r2, [pc, #408]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f2c:	f023 0304 	bic.w	r3, r3, #4
 8004f30:	6213      	str	r3, [r2, #32]
 8004f32:	e01c      	b.n	8004f6e <HAL_RCC_OscConfig+0x36e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d10c      	bne.n	8004f56 <HAL_RCC_OscConfig+0x356>
 8004f3c:	4b61      	ldr	r3, [pc, #388]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4a60      	ldr	r2, [pc, #384]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	6213      	str	r3, [r2, #32]
 8004f48:	4b5e      	ldr	r3, [pc, #376]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	4a5d      	ldr	r2, [pc, #372]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	6213      	str	r3, [r2, #32]
 8004f54:	e00b      	b.n	8004f6e <HAL_RCC_OscConfig+0x36e>
 8004f56:	4b5b      	ldr	r3, [pc, #364]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a5a      	ldr	r2, [pc, #360]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	4b58      	ldr	r3, [pc, #352]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4a57      	ldr	r2, [pc, #348]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d015      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f76:	f7fd feeb 	bl	8002d50 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7c:	e00a      	b.n	8004f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fd fee7 	bl	8002d50 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0b1      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	4b4b      	ldr	r3, [pc, #300]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ee      	beq.n	8004f7e <HAL_RCC_OscConfig+0x37e>
 8004fa0:	e014      	b.n	8004fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa2:	f7fd fed5 	bl	8002d50 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa8:	e00a      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004faa:	f7fd fed1 	bl	8002d50 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e09b      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc0:	4b40      	ldr	r3, [pc, #256]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ee      	bne.n	8004faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd2:	4b3c      	ldr	r3, [pc, #240]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4a3b      	ldr	r2, [pc, #236]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8087 	beq.w	80050f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe8:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d061      	beq.n	80050b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d146      	bne.n	800508a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005002:	f7fd fea5 	bl	8002d50 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500a:	f7fd fea1 	bl	8002d50 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e06d      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800501c:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1f0      	bne.n	800500a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d108      	bne.n	8005044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4921      	ldr	r1, [pc, #132]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005044:	4b1f      	ldr	r3, [pc, #124]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a19      	ldr	r1, [r3, #32]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	430b      	orrs	r3, r1
 8005056:	491b      	ldr	r1, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x4cc>)
 800505e:	2201      	movs	r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005062:	f7fd fe75 	bl	8002d50 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506a:	f7fd fe71 	bl	8002d50 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e03d      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x46a>
 8005088:	e035      	b.n	80050f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x4cc>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fd fe5e 	bl	8002d50 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005098:	f7fd fe5a 	bl	8002d50 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e026      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050aa:	4b06      	ldr	r3, [pc, #24]	; (80050c4 <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x498>
 80050b6:	e01e      	b.n	80050f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e019      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40007000 	.word	0x40007000
 80050cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <HAL_RCC_OscConfig+0x500>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d001      	beq.n	80050f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40021000 	.word	0x40021000

08005104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0d0      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005118:	4b6a      	ldr	r3, [pc, #424]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d910      	bls.n	8005148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b67      	ldr	r3, [pc, #412]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 0207 	bic.w	r2, r3, #7
 800512e:	4965      	ldr	r1, [pc, #404]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b8      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4a58      	ldr	r2, [pc, #352]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800516a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 800517e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494d      	ldr	r1, [pc, #308]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d040      	beq.n	8005224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d115      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d107      	bne.n	80051d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e073      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d2:	4b3d      	ldr	r3, [pc, #244]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06b      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4936      	ldr	r1, [pc, #216]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051f4:	f7fd fdac 	bl	8002d50 <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051fc:	f7fd fda8 	bl	8002d50 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	; 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e053      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005212:	4b2d      	ldr	r3, [pc, #180]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 020c 	and.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	429a      	cmp	r2, r3
 8005222:	d1eb      	bne.n	80051fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d210      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 0207 	bic.w	r2, r3, #7
 800523a:	4922      	ldr	r1, [pc, #136]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e032      	b.n	80052ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4916      	ldr	r1, [pc, #88]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	4313      	orrs	r3, r2
 8005270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490e      	ldr	r1, [pc, #56]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f821 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490a      	ldr	r1, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x1c8>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x1cc>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_ClockConfig+0x1d0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fd fb5c 	bl	8002970 <HAL_InitTick>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40021000 	.word	0x40021000
 80052cc:	0800e754 	.word	0x0800e754
 80052d0:	2000000c 	.word	0x2000000c
 80052d4:	20000010 	.word	0x20000010

080052d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	2300      	movs	r3, #0
 80052ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_GetSysClockFreq+0x94>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d002      	beq.n	8005308 <HAL_RCC_GetSysClockFreq+0x30>
 8005302:	2b08      	cmp	r3, #8
 8005304:	d003      	beq.n	800530e <HAL_RCC_GetSysClockFreq+0x36>
 8005306:	e027      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCC_GetSysClockFreq+0x98>)
 800530a:	613b      	str	r3, [r7, #16]
      break;
 800530c:	e027      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	4a17      	ldr	r2, [pc, #92]	; (8005374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d010      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <HAL_RCC_GetSysClockFreq+0x94>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0c5b      	lsrs	r3, r3, #17
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	4a11      	ldr	r2, [pc, #68]	; (8005378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a0d      	ldr	r2, [pc, #52]	; (8005370 <HAL_RCC_GetSysClockFreq+0x98>)
 800533a:	fb03 f202 	mul.w	r2, r3, r2
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e004      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a0c      	ldr	r2, [pc, #48]	; (800537c <HAL_RCC_GetSysClockFreq+0xa4>)
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	613b      	str	r3, [r7, #16]
      break;
 8005356:	e002      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetSysClockFreq+0x98>)
 800535a:	613b      	str	r3, [r7, #16]
      break;
 800535c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535e:	693b      	ldr	r3, [r7, #16]
}
 8005360:	4618      	mov	r0, r3
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	007a1200 	.word	0x007a1200
 8005374:	0800e76c 	.word	0x0800e76c
 8005378:	0800e77c 	.word	0x0800e77c
 800537c:	003d0900 	.word	0x003d0900

08005380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <HAL_RCC_GetHCLKFreq+0x10>)
 8005386:	681b      	ldr	r3, [r3, #0]
}
 8005388:	4618      	mov	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	2000000c 	.word	0x2000000c

08005394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005398:	f7ff fff2 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000
 80053b8:	0800e764 	.word	0x0800e764

080053bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053c0:	f7ff ffde 	bl	8005380 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	0adb      	lsrs	r3, r3, #11
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4903      	ldr	r1, [pc, #12]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800e764 	.word	0x0800e764

080053e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	220f      	movs	r2, #15
 80053f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCC_GetClockConfig+0x58>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0203 	and.w	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <HAL_RCC_GetClockConfig+0x58>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RCC_GetClockConfig+0x58>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <HAL_RCC_GetClockConfig+0x58>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_GetClockConfig+0x5c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0207 	and.w	r2, r3, #7
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	40021000 	.word	0x40021000
 8005440:	40022000 	.word	0x40022000

08005444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <RCC_Delay+0x34>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <RCC_Delay+0x38>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	0a5b      	lsrs	r3, r3, #9
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	fb02 f303 	mul.w	r3, r2, r3
 800545e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005460:	bf00      	nop
  }
  while (Delay --);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1e5a      	subs	r2, r3, #1
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f9      	bne.n	8005460 <RCC_Delay+0x1c>
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	2000000c 	.word	0x2000000c
 800547c:	10624dd3 	.word	0x10624dd3

08005480 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d07d      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800549c:	2300      	movs	r3, #0
 800549e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a0:	4b4f      	ldr	r3, [pc, #316]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ac:	4b4c      	ldr	r3, [pc, #304]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	4a4b      	ldr	r2, [pc, #300]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b6:	61d3      	str	r3, [r2, #28]
 80054b8:	4b49      	ldr	r3, [pc, #292]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d118      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a42      	ldr	r2, [pc, #264]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e0:	f7fd fc36 	bl	8002d50 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e6:	e008      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e8:	f7fd fc32 	bl	8002d50 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	; 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e06d      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005506:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02e      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d027      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005524:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005530:	2201      	movs	r2, #1
 8005532:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005534:	4b2c      	ldr	r3, [pc, #176]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800553a:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d014      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554a:	f7fd fc01 	bl	8002d50 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fd fbfd 	bl	8002d50 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e036      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ee      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4917      	ldr	r1, [pc, #92]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005582:	4313      	orrs	r3, r2
 8005584:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b14      	ldr	r3, [pc, #80]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005596:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a4:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	490b      	ldr	r1, [pc, #44]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c2:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40007000 	.word	0x40007000
 80055e8:	42420440 	.word	0x42420440

080055ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e076      	b.n	80056ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d009      	beq.n	8005624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
 8005616:	e005      	b.n	8005624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fd f900 	bl	8002844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	ea42 0103 	orr.w	r1, r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	0c1a      	lsrs	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 0204 	and.w	r2, r2, #4
 80056ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e041      	b.n	800578a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f839 	bl	8005792 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f000 f9b4 	bl	8005aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	bc80      	pop	{r7}
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d001      	beq.n	80057bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e03a      	b.n	8005832 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a18      	ldr	r2, [pc, #96]	; (800583c <HAL_TIM_Base_Start_IT+0x98>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x58>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e6:	d009      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x58>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <HAL_TIM_Base_Start_IT+0x9c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x58>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <HAL_TIM_Base_Start_IT+0xa0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d111      	bne.n	8005820 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b06      	cmp	r3, #6
 800580c:	d010      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	e007      	b.n	8005830 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800

08005848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b02      	cmp	r3, #2
 800585c:	d122      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d11b      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0202 	mvn.w	r2, #2
 8005874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f8ed 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 8005890:	e005      	b.n	800589e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8e0 	bl	8005a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8ef 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d122      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d11b      	bne.n	80058f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0204 	mvn.w	r2, #4
 80058c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8c3 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 80058e4:	e005      	b.n	80058f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8b6 	bl	8005a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8c5 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d122      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b08      	cmp	r3, #8
 8005912:	d11b      	bne.n	800594c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0208 	mvn.w	r2, #8
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2204      	movs	r2, #4
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f899 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f88c 	bl	8005a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f89b 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2208      	movs	r2, #8
 8005976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f86f 	bl	8005a6a <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f862 	bl	8005a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f871 	bl	8005a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d10e      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fe72 	bl	80026b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d10e      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d107      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f8bf 	bl	8005b76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d10e      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d107      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f835 	bl	8005a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b20      	cmp	r3, #32
 8005a30:	d10e      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d107      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0220 	mvn.w	r2, #32
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f88a 	bl	8005b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr

08005a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a29      	ldr	r2, [pc, #164]	; (8005b58 <TIM_Base_SetConfig+0xb8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x30>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x30>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <TIM_Base_SetConfig+0xbc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x30>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <TIM_Base_SetConfig+0xc0>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <TIM_Base_SetConfig+0xb8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <TIM_Base_SetConfig+0x62>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d007      	beq.n	8005b02 <TIM_Base_SetConfig+0x62>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <TIM_Base_SetConfig+0xbc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_Base_SetConfig+0x62>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <TIM_Base_SetConfig+0xc0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a07      	ldr	r2, [pc, #28]	; (8005b58 <TIM_Base_SetConfig+0xb8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40012c00 	.word	0x40012c00
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800

08005b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e042      	b.n	8005c20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fc fe92 	bl	80028d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f91d 	bl	8005e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005be0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	; 0x28
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d16d      	bne.n	8005d24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_UART_Transmit+0x2c>
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e066      	b.n	8005d26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2221      	movs	r2, #33	; 0x21
 8005c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c66:	f7fd f873 	bl	8002d50 <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d108      	bne.n	8005c94 <HAL_UART_Transmit+0x6c>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	e003      	b.n	8005c9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c9c:	e02a      	b.n	8005cf4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2180      	movs	r1, #128	; 0x80
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f840 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e036      	b.n	8005d26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ccc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e007      	b.n	8005ce6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1cf      	bne.n	8005c9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2200      	movs	r2, #0
 8005d06:	2140      	movs	r1, #64	; 0x40
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f810 	bl	8005d2e <UART_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e006      	b.n	8005d26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b090      	sub	sp, #64	; 0x40
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	60b9      	str	r1, [r7, #8]
 8005d38:	603b      	str	r3, [r7, #0]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3e:	e050      	b.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d04c      	beq.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8005d4e:	f7fc ffff 	bl	8002d50 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d241      	bcs.n	8005de2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d7e:	637a      	str	r2, [r7, #52]	; 0x34
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e5      	bne.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	613b      	str	r3, [r7, #16]
   return(result);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f023 0301 	bic.w	r3, r3, #1
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db2:	623a      	str	r2, [r7, #32]
 8005db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	69f9      	ldr	r1, [r7, #28]
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e00f      	b.n	8005e02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4013      	ands	r3, r2
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	bf0c      	ite	eq
 8005df2:	2301      	moveq	r3, #1
 8005df4:	2300      	movne	r3, #0
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d09f      	beq.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3740      	adds	r7, #64	; 0x40
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e46:	f023 030c 	bic.w	r3, r3, #12
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2c      	ldr	r2, [pc, #176]	; (8005f20 <UART_SetConfig+0x114>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d103      	bne.n	8005e7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e74:	f7ff faa2 	bl	80053bc <HAL_RCC_GetPCLK2Freq>
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	e002      	b.n	8005e82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7ff fa8a 	bl	8005394 <HAL_RCC_GetPCLK1Freq>
 8005e80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009a      	lsls	r2, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <UART_SetConfig+0x118>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	0119      	lsls	r1, r3, #4
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009a      	lsls	r2, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <UART_SetConfig+0x118>)
 8005eba:	fba3 0302 	umull	r0, r3, r3, r2
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	2064      	movs	r0, #100	; 0x64
 8005ec2:	fb00 f303 	mul.w	r3, r0, r3
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	3332      	adds	r3, #50	; 0x32
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <UART_SetConfig+0x118>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed8:	4419      	add	r1, r3
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009a      	lsls	r2, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <UART_SetConfig+0x118>)
 8005ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2064      	movs	r0, #100	; 0x64
 8005efa:	fb00 f303 	mul.w	r3, r0, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	3332      	adds	r3, #50	; 0x32
 8005f04:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <UART_SetConfig+0x118>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f003 020f 	and.w	r2, r3, #15
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	440a      	add	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40013800 	.word	0x40013800
 8005f24:	51eb851f 	.word	0x51eb851f

08005f28 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f2e:	f3ef 8305 	mrs	r3, IPSR
 8005f32:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f3e:	607b      	str	r3, [r7, #4]
  return(result);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d109      	bne.n	8005f5a <osKernelInitialize+0x32>
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <osKernelInitialize+0x60>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d109      	bne.n	8005f62 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f52:	603b      	str	r3, [r7, #0]
  return(result);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f5a:	f06f 0305 	mvn.w	r3, #5
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e00c      	b.n	8005f7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f62:	4b09      	ldr	r3, [pc, #36]	; (8005f88 <osKernelInitialize+0x60>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <osKernelInitialize+0x60>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e002      	b.n	8005f7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	20001dd0 	.word	0x20001dd0

08005f8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f92:	f3ef 8305 	mrs	r3, IPSR
 8005f96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d109      	bne.n	8005fbe <osKernelStart+0x32>
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <osKernelStart+0x64>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d109      	bne.n	8005fc6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005fbe:	f06f 0305 	mvn.w	r3, #5
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00e      	b.n	8005fe4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <osKernelStart+0x64>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <osKernelStart+0x64>)
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005fd4:	f001 fb18 	bl	8007608 <vTaskStartScheduler>
      stat = osOK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e002      	b.n	8005fe4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20001dd0 	.word	0x20001dd0

08005ff4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b092      	sub	sp, #72	; 0x48
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006004:	f3ef 8305 	mrs	r3, IPSR
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8094 	bne.w	800613a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006012:	f3ef 8310 	mrs	r3, PRIMASK
 8006016:	623b      	str	r3, [r7, #32]
  return(result);
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 808d 	bne.w	800613a <osThreadNew+0x146>
 8006020:	4b48      	ldr	r3, [pc, #288]	; (8006144 <osThreadNew+0x150>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b02      	cmp	r3, #2
 8006026:	d106      	bne.n	8006036 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006028:	f3ef 8311 	mrs	r3, BASEPRI
 800602c:	61fb      	str	r3, [r7, #28]
  return(result);
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 8082 	bne.w	800613a <osThreadNew+0x146>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d07e      	beq.n	800613a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006040:	2318      	movs	r3, #24
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006044:	2300      	movs	r3, #0
 8006046:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006048:	f107 031b 	add.w	r3, r7, #27
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800604e:	f04f 33ff 	mov.w	r3, #4294967295
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d045      	beq.n	80060e6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <osThreadNew+0x74>
        name = attr->name;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <osThreadNew+0x9a>
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	2b38      	cmp	r3, #56	; 0x38
 8006080:	d805      	bhi.n	800608e <osThreadNew+0x9a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <osThreadNew+0x9e>
        return (NULL);
 800608e:	2300      	movs	r3, #0
 8006090:	e054      	b.n	800613c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00e      	beq.n	80060c8 <osThreadNew+0xd4>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b5b      	cmp	r3, #91	; 0x5b
 80060b0:	d90a      	bls.n	80060c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <osThreadNew+0xd4>
        mem = 1;
 80060c2:	2301      	movs	r3, #1
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c6:	e010      	b.n	80060ea <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <osThreadNew+0xf6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d108      	bne.n	80060ea <osThreadNew+0xf6>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <osThreadNew+0xf6>
          mem = 0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e4:	e001      	b.n	80060ea <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d110      	bne.n	8006112 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80060f8:	9202      	str	r2, [sp, #8]
 80060fa:	9301      	str	r3, [sp, #4]
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f001 f83c 	bl	8007184 <xTaskCreateStatic>
 800610c:	4603      	mov	r3, r0
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e013      	b.n	800613a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	d110      	bne.n	800613a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	b29a      	uxth	r2, r3
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 f886 	bl	800723c <xTaskCreate>
 8006130:	4603      	mov	r3, r0
 8006132:	2b01      	cmp	r3, #1
 8006134:	d001      	beq.n	800613a <osThreadNew+0x146>
          hTask = NULL;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800613a:	697b      	ldr	r3, [r7, #20]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3738      	adds	r7, #56	; 0x38
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20001dd0 	.word	0x20001dd0

08006148 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006150:	f3ef 8305 	mrs	r3, IPSR
 8006154:	613b      	str	r3, [r7, #16]
  return(result);
 8006156:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615c:	f3ef 8310 	mrs	r3, PRIMASK
 8006160:	60fb      	str	r3, [r7, #12]
  return(result);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <osDelay+0x34>
 8006168:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <osDelay+0x58>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d109      	bne.n	8006184 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	60bb      	str	r3, [r7, #8]
  return(result);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <osDelay+0x3c>
    stat = osErrorISR;
 800617c:	f06f 0305 	mvn.w	r3, #5
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e007      	b.n	8006194 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <osDelay+0x4c>
      vTaskDelay(ticks);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f001 f990 	bl	80074b4 <vTaskDelay>
    }
  }

  return (stat);
 8006194:	697b      	ldr	r3, [r7, #20]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20001dd0 	.word	0x20001dd0

080061a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	; 0x30
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b4:	f3ef 8305 	mrs	r3, IPSR
 80061b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80061ba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d16f      	bne.n	80062a0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	617b      	str	r3, [r7, #20]
  return(result);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d169      	bne.n	80062a0 <osMessageQueueNew+0xfc>
 80061cc:	4b37      	ldr	r3, [pc, #220]	; (80062ac <osMessageQueueNew+0x108>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d105      	bne.n	80061e0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061d4:	f3ef 8311 	mrs	r3, BASEPRI
 80061d8:	613b      	str	r3, [r7, #16]
  return(result);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d15f      	bne.n	80062a0 <osMessageQueueNew+0xfc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d05c      	beq.n	80062a0 <osMessageQueueNew+0xfc>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d059      	beq.n	80062a0 <osMessageQueueNew+0xfc>
    mem = -1;
 80061ec:	f04f 33ff 	mov.w	r3, #4294967295
 80061f0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d029      	beq.n	800624c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <osMessageQueueNew+0x82>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b4f      	cmp	r3, #79	; 0x4f
 8006206:	d90e      	bls.n	8006226 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	429a      	cmp	r2, r3
 800621e:	d302      	bcc.n	8006226 <osMessageQueueNew+0x82>
        mem = 1;
 8006220:	2301      	movs	r3, #1
 8006222:	623b      	str	r3, [r7, #32]
 8006224:	e014      	b.n	8006250 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d110      	bne.n	8006250 <osMessageQueueNew+0xac>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10c      	bne.n	8006250 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800623a:	2b00      	cmp	r3, #0
 800623c:	d108      	bne.n	8006250 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <osMessageQueueNew+0xac>
          mem = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e001      	b.n	8006250 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d10b      	bne.n	800626e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2100      	movs	r1, #0
 8006260:	9100      	str	r1, [sp, #0]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 fa53 	bl	8006710 <xQueueGenericCreateStatic>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24
 800626c:	e008      	b.n	8006280 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006274:	2200      	movs	r2, #0
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fac0 	bl	80067fe <xQueueGenericCreate>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <osMessageQueueNew+0xf0>
        name = attr->name;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	e001      	b.n	8006298 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006298:	69f9      	ldr	r1, [r7, #28]
 800629a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800629c:	f000 ff16 	bl	80070cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3728      	adds	r7, #40	; 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20001dd0 	.word	0x20001dd0

080062b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062c8:	f3ef 8305 	mrs	r3, IPSR
 80062cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80062ce:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10f      	bne.n	80062f4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d4:	f3ef 8310 	mrs	r3, PRIMASK
 80062d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <osMessageQueuePut+0x44>
 80062e0:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <osMessageQueuePut+0xe0>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d12e      	bne.n	8006346 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062e8:	f3ef 8311 	mrs	r3, BASEPRI
 80062ec:	617b      	str	r3, [r7, #20]
  return(result);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d028      	beq.n	8006346 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <osMessageQueuePut+0x56>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <osMessageQueuePut+0x56>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006306:	f06f 0303 	mvn.w	r3, #3
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800630c:	e039      	b.n	8006382 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006312:	f107 0210 	add.w	r2, r7, #16
 8006316:	2300      	movs	r3, #0
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	6a38      	ldr	r0, [r7, #32]
 800631c:	f000 fbce 	bl	8006abc <xQueueGenericSendFromISR>
 8006320:	4603      	mov	r3, r0
 8006322:	2b01      	cmp	r3, #1
 8006324:	d003      	beq.n	800632e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006326:	f06f 0302 	mvn.w	r3, #2
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800632c:	e029      	b.n	8006382 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d026      	beq.n	8006382 <osMessageQueuePut+0xd2>
 8006334:	4b17      	ldr	r3, [pc, #92]	; (8006394 <osMessageQueuePut+0xe4>)
 8006336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006344:	e01d      	b.n	8006382 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <osMessageQueuePut+0xa2>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006352:	f06f 0303 	mvn.w	r3, #3
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
 8006358:	e014      	b.n	8006384 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800635a:	2300      	movs	r3, #0
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	6a38      	ldr	r0, [r7, #32]
 8006362:	f000 faad 	bl	80068c0 <xQueueGenericSend>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d00b      	beq.n	8006384 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d003      	beq.n	800637a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006372:	f06f 0301 	mvn.w	r3, #1
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
 8006378:	e004      	b.n	8006384 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800637a:	f06f 0302 	mvn.w	r3, #2
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
 8006380:	e000      	b.n	8006384 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006382:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006386:	4618      	mov	r0, r3
 8006388:	3728      	adds	r7, #40	; 0x28
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20001dd0 	.word	0x20001dd0
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ae:	f3ef 8305 	mrs	r3, IPSR
 80063b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80063b4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10f      	bne.n	80063da <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ba:	f3ef 8310 	mrs	r3, PRIMASK
 80063be:	61bb      	str	r3, [r7, #24]
  return(result);
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <osMessageQueueGet+0x42>
 80063c6:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <osMessageQueueGet+0xdc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d12e      	bne.n	800642c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ce:	f3ef 8311 	mrs	r3, BASEPRI
 80063d2:	617b      	str	r3, [r7, #20]
  return(result);
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d028      	beq.n	800642c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <osMessageQueueGet+0x54>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <osMessageQueueGet+0x54>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80063ec:	f06f 0303 	mvn.w	r3, #3
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80063f2:	e038      	b.n	8006466 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80063f8:	f107 0310 	add.w	r3, r7, #16
 80063fc:	461a      	mov	r2, r3
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	6a38      	ldr	r0, [r7, #32]
 8006402:	f000 fcd3 	bl	8006dac <xQueueReceiveFromISR>
 8006406:	4603      	mov	r3, r0
 8006408:	2b01      	cmp	r3, #1
 800640a:	d003      	beq.n	8006414 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800640c:	f06f 0302 	mvn.w	r3, #2
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006412:	e028      	b.n	8006466 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d025      	beq.n	8006466 <osMessageQueueGet+0xce>
 800641a:	4b17      	ldr	r3, [pc, #92]	; (8006478 <osMessageQueueGet+0xe0>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800642a:	e01c      	b.n	8006466 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <osMessageQueueGet+0xa0>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006438:	f06f 0303 	mvn.w	r3, #3
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
 800643e:	e013      	b.n	8006468 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	6a38      	ldr	r0, [r7, #32]
 8006446:	f000 fbd1 	bl	8006bec <xQueueReceive>
 800644a:	4603      	mov	r3, r0
 800644c:	2b01      	cmp	r3, #1
 800644e:	d00b      	beq.n	8006468 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006456:	f06f 0301 	mvn.w	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	e004      	b.n	8006468 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800645e:	f06f 0302 	mvn.w	r3, #2
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
 8006464:	e000      	b.n	8006468 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006466:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800646a:	4618      	mov	r0, r3
 800646c:	3728      	adds	r7, #40	; 0x28
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20001dd0 	.word	0x20001dd0
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <vApplicationGetIdleTaskMemory+0x28>)
 800648c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4a05      	ldr	r2, [pc, #20]	; (80064a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8006492:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2280      	movs	r2, #128	; 0x80
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	20001dd4 	.word	0x20001dd4
 80064a8:	20001e30 	.word	0x20001e30

080064ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80064bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4a06      	ldr	r2, [pc, #24]	; (80064dc <vApplicationGetTimerTaskMemory+0x30>)
 80064c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	20002030 	.word	0x20002030
 80064dc:	2000208c 	.word	0x2000208c

080064e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f103 0208 	add.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f103 0208 	add.w	r2, r3, #8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f103 0208 	add.w	r2, r3, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	601a      	str	r2, [r3, #0]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d103      	bne.n	800659c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	e00c      	b.n	80065b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3308      	adds	r3, #8
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e002      	b.n	80065aa <vListInsert+0x2e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d2f6      	bcs.n	80065a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
}
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr

080065ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6892      	ldr	r2, [r2, #8]
 8006602:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6852      	ldr	r2, [r2, #4]
 800660c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	429a      	cmp	r2, r3
 8006616:	d103      	bne.n	8006620 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	1e5a      	subs	r2, r3, #1
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
	...

08006640 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800666a:	f002 f8ff 	bl	800886c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	68f9      	ldr	r1, [r7, #12]
 8006678:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	441a      	add	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669a:	3b01      	subs	r3, #1
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	22ff      	movs	r2, #255	; 0xff
 80066b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d114      	bne.n	80066ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3310      	adds	r3, #16
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 fa25 	bl	8007b1c <xTaskRemoveFromEventList>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d012      	beq.n	80066fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <xQueueGenericReset+0xcc>)
 80066da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	e009      	b.n	80066fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3310      	adds	r3, #16
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fef6 	bl	80064e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3324      	adds	r3, #36	; 0x24
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fef1 	bl	80064e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066fe:	f002 f8e5 	bl	80088cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006702:	2301      	movs	r3, #1
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08e      	sub	sp, #56	; 0x38
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <xQueueGenericCreateStatic+0x52>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <xQueueGenericCreateStatic+0x56>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <xQueueGenericCreateStatic+0x58>
 8006766:	2300      	movs	r3, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	623b      	str	r3, [r7, #32]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <xQueueGenericCreateStatic+0x7e>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <xQueueGenericCreateStatic+0x82>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericCreateStatic+0x84>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	61fb      	str	r3, [r7, #28]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067ae:	2350      	movs	r3, #80	; 0x50
 80067b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d00a      	beq.n	80067ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	61bb      	str	r3, [r7, #24]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00d      	beq.n	80067f4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f843 	bl	800687a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3730      	adds	r7, #48	; 0x30
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08a      	sub	sp, #40	; 0x28
 8006802:	af02      	add	r7, sp, #8
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	4613      	mov	r3, r2
 800680a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	613b      	str	r3, [r7, #16]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	e004      	b.n	800683e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3350      	adds	r3, #80	; 0x50
 8006842:	4618      	mov	r0, r3
 8006844:	f002 f912 	bl	8008a6c <pvPortMalloc>
 8006848:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00f      	beq.n	8006870 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	3350      	adds	r3, #80	; 0x50
 8006854:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800685e:	79fa      	ldrb	r2, [r7, #7]
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f805 	bl	800687a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006870:	69bb      	ldr	r3, [r7, #24]
	}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e002      	b.n	800689c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068a8:	2101      	movs	r1, #1
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f7ff fec8 	bl	8006640 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <xQueueGenericSend+0x32>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ee:	bf00      	nop
 80068f0:	e7fe      	b.n	80068f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <xQueueGenericSend+0x40>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <xQueueGenericSend+0x44>
 8006900:	2301      	movs	r3, #1
 8006902:	e000      	b.n	8006906 <xQueueGenericSend+0x46>
 8006904:	2300      	movs	r3, #0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <xQueueGenericSend+0x60>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d103      	bne.n	800692e <xQueueGenericSend+0x6e>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <xQueueGenericSend+0x72>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <xQueueGenericSend+0x74>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10a      	bne.n	800694e <xQueueGenericSend+0x8e>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	623b      	str	r3, [r7, #32]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800694e:	f001 faa7 	bl	8007ea0 <xTaskGetSchedulerState>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <xQueueGenericSend+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <xQueueGenericSend+0xa2>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <xQueueGenericSend+0xa4>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xQueueGenericSend+0xbe>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	61fb      	str	r3, [r7, #28]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800697e:	f001 ff75 	bl	800886c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <xQueueGenericSend+0xd4>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d129      	bne.n	80069e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800699a:	f000 fa87 	bl	8006eac <prvCopyDataToQueue>
 800699e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 f8b5 	bl	8007b1c <xTaskRemoveFromEventList>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d013      	beq.n	80069e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069b8:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 80069ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	e00a      	b.n	80069e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069d0:	4b39      	ldr	r3, [pc, #228]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 80069d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069e0:	f001 ff74 	bl	80088cc <vPortExitCritical>
				return pdPASS;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e063      	b.n	8006ab0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069ee:	f001 ff6d 	bl	80088cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e05c      	b.n	8006ab0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4618      	mov	r0, r3
 8006a02:	f001 f8ef 	bl	8007be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a0a:	f001 ff5f 	bl	80088cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a0e:	f000 fe61 	bl	80076d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a12:	f001 ff2b 	bl	800886c <vPortEnterCritical>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d103      	bne.n	8006a2c <xQueueGenericSend+0x16c>
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x182>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a42:	f001 ff43 	bl	80088cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a46:	1d3a      	adds	r2, r7, #4
 8006a48:	f107 0314 	add.w	r3, r7, #20
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 f8de 	bl	8007c10 <xTaskCheckForTimeOut>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d124      	bne.n	8006aa4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a5c:	f000 fb1e 	bl	800709c <prvIsQueueFull>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d018      	beq.n	8006a98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	3310      	adds	r3, #16
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f804 	bl	8007a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a76:	f000 faa9 	bl	8006fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a7a:	f000 fe39 	bl	80076f0 <xTaskResumeAll>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f47f af7c 	bne.w	800697e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a86:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <xQueueGenericSend+0x1f8>)
 8006a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	e772      	b.n	800697e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fa97 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a9e:	f000 fe27 	bl	80076f0 <xTaskResumeAll>
 8006aa2:	e76c      	b.n	800697e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa6:	f000 fa91 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aaa:	f000 fe21 	bl	80076f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006aae:	2300      	movs	r3, #0
		}
	}
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3738      	adds	r7, #56	; 0x38
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08e      	sub	sp, #56	; 0x38
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d103      	bne.n	8006af8 <xQueueGenericSendFromISR+0x3c>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <xQueueGenericSendFromISR+0x40>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <xQueueGenericSendFromISR+0x42>
 8006afc:	2300      	movs	r3, #0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10a      	bne.n	8006b18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	623b      	str	r3, [r7, #32]
}
 8006b14:	bf00      	nop
 8006b16:	e7fe      	b.n	8006b16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d103      	bne.n	8006b26 <xQueueGenericSendFromISR+0x6a>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <xQueueGenericSendFromISR+0x6e>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <xQueueGenericSendFromISR+0x70>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	61fb      	str	r3, [r7, #28]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b46:	f001 ff53 	bl	80089f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61ba      	str	r2, [r7, #24]
 8006b60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <xQueueGenericSendFromISR+0xbc>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d12c      	bne.n	8006bd2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b88:	f000 f990 	bl	8006eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d112      	bne.n	8006bbc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d016      	beq.n	8006bcc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	3324      	adds	r3, #36	; 0x24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 ffba 	bl	8007b1c <xTaskRemoveFromEventList>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00e      	beq.n	8006bcc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e007      	b.n	8006bcc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	b25a      	sxtb	r2, r3
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006bd0:	e001      	b.n	8006bd6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006be0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3738      	adds	r7, #56	; 0x38
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08c      	sub	sp, #48	; 0x30
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <xQueueReceive+0x30>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	623b      	str	r3, [r7, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <xQueueReceive+0x3e>
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <xQueueReceive+0x42>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <xQueueReceive+0x44>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xQueueReceive+0x5e>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61fb      	str	r3, [r7, #28]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c4a:	f001 f929 	bl	8007ea0 <xTaskGetSchedulerState>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <xQueueReceive+0x6e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueReceive+0x72>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueReceive+0x74>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueReceive+0x8e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61bb      	str	r3, [r7, #24]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c7a:	f001 fdf7 	bl	800886c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01f      	beq.n	8006cca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8e:	f000 f977 	bl	8006f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	1e5a      	subs	r2, r3, #1
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	3310      	adds	r3, #16
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 ff38 	bl	8007b1c <xTaskRemoveFromEventList>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cb2:	4b3d      	ldr	r3, [pc, #244]	; (8006da8 <xQueueReceive+0x1bc>)
 8006cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cc2:	f001 fe03 	bl	80088cc <vPortExitCritical>
				return pdPASS;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e069      	b.n	8006d9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cd0:	f001 fdfc 	bl	80088cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e062      	b.n	8006d9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cde:	f107 0310 	add.w	r3, r7, #16
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 ff7e 	bl	8007be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cec:	f001 fdee 	bl	80088cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cf0:	f000 fcf0 	bl	80076d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cf4:	f001 fdba 	bl	800886c <vPortEnterCritical>
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d103      	bne.n	8006d0e <xQueueReceive+0x122>
 8006d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1a:	d103      	bne.n	8006d24 <xQueueReceive+0x138>
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d24:	f001 fdd2 	bl	80088cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d28:	1d3a      	adds	r2, r7, #4
 8006d2a:	f107 0310 	add.w	r3, r7, #16
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 ff6d 	bl	8007c10 <xTaskCheckForTimeOut>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d123      	bne.n	8006d84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3e:	f000 f997 	bl	8007070 <prvIsQueueEmpty>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d017      	beq.n	8006d78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fe93 	bl	8007a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d58:	f000 f938 	bl	8006fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d5c:	f000 fcc8 	bl	80076f0 <xTaskResumeAll>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d189      	bne.n	8006c7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <xQueueReceive+0x1bc>)
 8006d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	e780      	b.n	8006c7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7a:	f000 f927 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d7e:	f000 fcb7 	bl	80076f0 <xTaskResumeAll>
 8006d82:	e77a      	b.n	8006c7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f000 f921 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d8a:	f000 fcb1 	bl	80076f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d90:	f000 f96e 	bl	8007070 <prvIsQueueEmpty>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f43f af6f 	beq.w	8006c7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3730      	adds	r7, #48	; 0x30
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	e000ed04 	.word	0xe000ed04

08006dac <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	623b      	str	r3, [r7, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <xQueueReceiveFromISR+0x3a>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <xQueueReceiveFromISR+0x3e>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <xQueueReceiveFromISR+0x40>
 8006dea:	2300      	movs	r3, #0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	61fb      	str	r3, [r7, #28]
}
 8006e02:	bf00      	nop
 8006e04:	e7fe      	b.n	8006e04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e06:	f001 fdf3 	bl	80089f0 <vPortValidateInterruptPriority>
	__asm volatile
 8006e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	61ba      	str	r2, [r7, #24]
 8006e20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d02f      	beq.n	8006e92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e40:	f000 f89e 	bl	8006f80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	1e5a      	subs	r2, r3, #1
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d112      	bne.n	8006e7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d016      	beq.n	8006e8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	3310      	adds	r3, #16
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fe5a 	bl	8007b1c <xTaskRemoveFromEventList>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e007      	b.n	8006e8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e80:	3301      	adds	r3, #1
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	b25a      	sxtb	r2, r3
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	e001      	b.n	8006e96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ea0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3738      	adds	r7, #56	; 0x38
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d14d      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f800 	bl	8007edc <xTaskPriorityDisinherit>
 8006edc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	e043      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d119      	bne.n	8006f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6898      	ldr	r0, [r3, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	f001 ffba 	bl	8008e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d32b      	bcc.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	e026      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68d8      	ldr	r0, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	f001 ffa0 	bl	8008e70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	425b      	negs	r3, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d207      	bcs.n	8006f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	425b      	negs	r3, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d105      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d018      	beq.n	8006fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d303      	bcc.n	8006fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68d9      	ldr	r1, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6838      	ldr	r0, [r7, #0]
 8006fc0:	f001 ff56 	bl	8008e70 <memcpy>
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd4:	f001 fc4a 	bl	800886c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe0:	e011      	b.n	8007006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d012      	beq.n	8007010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fd94 	bl	8007b1c <xTaskRemoveFromEventList>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ffa:	f000 fe6b 	bl	8007cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	3b01      	subs	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dce9      	bgt.n	8006fe2 <prvUnlockQueue+0x16>
 800700e:	e000      	b.n	8007012 <prvUnlockQueue+0x46>
					break;
 8007010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800701a:	f001 fc57 	bl	80088cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800701e:	f001 fc25 	bl	800886c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702a:	e011      	b.n	8007050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d012      	beq.n	800705a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3310      	adds	r3, #16
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fd6f 	bl	8007b1c <xTaskRemoveFromEventList>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007044:	f000 fe46 	bl	8007cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	3b01      	subs	r3, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dce9      	bgt.n	800702c <prvUnlockQueue+0x60>
 8007058:	e000      	b.n	800705c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800705a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22ff      	movs	r2, #255	; 0xff
 8007060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007064:	f001 fc32 	bl	80088cc <vPortExitCritical>
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007078:	f001 fbf8 	bl	800886c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e001      	b.n	800708e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708e:	f001 fc1d 	bl	80088cc <vPortExitCritical>

	return xReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 fbe2 	bl	800886c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d102      	bne.n	80070ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e001      	b.n	80070be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fc05 	bl	80088cc <vPortExitCritical>

	return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e014      	b.n	8007106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070dc:	4a0e      	ldr	r2, [pc, #56]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070e8:	490b      	ldr	r1, [pc, #44]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070f2:	4a09      	ldr	r2, [pc, #36]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070fe:	e006      	b.n	800710e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b07      	cmp	r3, #7
 800710a:	d9e7      	bls.n	80070dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr
 8007118:	2000248c 	.word	0x2000248c

0800711c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800712c:	f001 fb9e 	bl	800886c <vPortEnterCritical>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007136:	b25b      	sxtb	r3, r3
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713c:	d103      	bne.n	8007146 <vQueueWaitForMessageRestricted+0x2a>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800714c:	b25b      	sxtb	r3, r3
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d103      	bne.n	800715c <vQueueWaitForMessageRestricted+0x40>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800715c:	f001 fbb6 	bl	80088cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fca7 	bl	8007ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007176:	6978      	ldr	r0, [r7, #20]
 8007178:	f7ff ff28 	bl	8006fcc <prvUnlockQueue>
	}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	; 0x38
 8007188:	af04      	add	r7, sp, #16
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10a      	bne.n	80071ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	623b      	str	r3, [r7, #32]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xTaskCreateStatic+0x46>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	61fb      	str	r3, [r7, #28]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071ca:	235c      	movs	r3, #92	; 0x5c
 80071cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b5c      	cmp	r3, #92	; 0x5c
 80071d2:	d00a      	beq.n	80071ea <xTaskCreateStatic+0x66>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	61bb      	str	r3, [r7, #24]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01e      	beq.n	800722e <xTaskCreateStatic+0xaa>
 80071f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d01b      	beq.n	800722e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f850 	bl	80072c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007228:	f000 f8d4 	bl	80073d4 <prvAddNewTaskToReadyList>
 800722c:	e001      	b.n	8007232 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007232:	697b      	ldr	r3, [r7, #20]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	3728      	adds	r7, #40	; 0x28
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af04      	add	r7, sp, #16
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4618      	mov	r0, r3
 8007252:	f001 fc0b 	bl	8008a6c <pvPortMalloc>
 8007256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00e      	beq.n	800727c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800725e:	205c      	movs	r0, #92	; 0x5c
 8007260:	f001 fc04 	bl	8008a6c <pvPortMalloc>
 8007264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	631a      	str	r2, [r3, #48]	; 0x30
 8007272:	e005      	b.n	8007280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007274:	6978      	ldr	r0, [r7, #20]
 8007276:	f001 fcbd 	bl	8008bf4 <vPortFree>
 800727a:	e001      	b.n	8007280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d017      	beq.n	80072b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	2300      	movs	r3, #0
 8007292:	9303      	str	r3, [sp, #12]
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f80e 	bl	80072c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072aa:	69f8      	ldr	r0, [r7, #28]
 80072ac:	f000 f892 	bl	80073d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e002      	b.n	80072bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072bc:	69bb      	ldr	r3, [r7, #24]
	}
 80072be:	4618      	mov	r0, r3
 80072c0:	3720      	adds	r7, #32
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	461a      	mov	r2, r3
 80072de:	21a5      	movs	r1, #165	; 0xa5
 80072e0:	f001 fdd4 	bl	8008e8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072ee:	3b01      	subs	r3, #1
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f023 0307 	bic.w	r3, r3, #7
 80072fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	617b      	str	r3, [r7, #20]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	e012      	b.n	800734a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	7819      	ldrb	r1, [r3, #0]
 800732c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	4413      	add	r3, r2
 8007332:	3334      	adds	r3, #52	; 0x34
 8007334:	460a      	mov	r2, r1
 8007336:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d006      	beq.n	8007352 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	3301      	adds	r3, #1
 8007348:	61fb      	str	r3, [r7, #28]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	2b0f      	cmp	r3, #15
 800734e:	d9e9      	bls.n	8007324 <prvInitialiseNewTask+0x5e>
 8007350:	e000      	b.n	8007354 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007352:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2b37      	cmp	r3, #55	; 0x37
 8007360:	d901      	bls.n	8007366 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007362:	2337      	movs	r3, #55	; 0x37
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007370:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	3304      	adds	r3, #4
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f8ce 	bl	800651e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	3318      	adds	r3, #24
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f8c9 	bl	800651e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	2200      	movs	r2, #0
 80073a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	69b8      	ldr	r0, [r7, #24]
 80073b6:	f001 f965 	bl	8008684 <pxPortInitialiseStack>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073cc:	bf00      	nop
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073dc:	f001 fa46 	bl	800886c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073e0:	4b2d      	ldr	r3, [pc, #180]	; (8007498 <prvAddNewTaskToReadyList+0xc4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a2c      	ldr	r2, [pc, #176]	; (8007498 <prvAddNewTaskToReadyList+0xc4>)
 80073e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ea:	4b2c      	ldr	r3, [pc, #176]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d109      	bne.n	8007406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073f2:	4a2a      	ldr	r2, [pc, #168]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073f8:	4b27      	ldr	r3, [pc, #156]	; (8007498 <prvAddNewTaskToReadyList+0xc4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d110      	bne.n	8007422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007400:	f000 fc8c 	bl	8007d1c <prvInitialiseTaskLists>
 8007404:	e00d      	b.n	8007422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <prvAddNewTaskToReadyList+0xcc>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800740e:	4b23      	ldr	r3, [pc, #140]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	429a      	cmp	r2, r3
 800741a:	d802      	bhi.n	8007422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800741c:	4a1f      	ldr	r2, [pc, #124]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007422:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <prvAddNewTaskToReadyList+0xd0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <prvAddNewTaskToReadyList+0xd0>)
 800742a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800742c:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <prvAddNewTaskToReadyList+0xd0>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	4b1b      	ldr	r3, [pc, #108]	; (80074a8 <prvAddNewTaskToReadyList+0xd4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d903      	bls.n	8007448 <prvAddNewTaskToReadyList+0x74>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <prvAddNewTaskToReadyList+0xd4>)
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4a15      	ldr	r2, [pc, #84]	; (80074ac <prvAddNewTaskToReadyList+0xd8>)
 8007456:	441a      	add	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f7ff f869 	bl	8006536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007464:	f001 fa32 	bl	80088cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007468:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <prvAddNewTaskToReadyList+0xcc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <prvAddNewTaskToReadyList+0xc8>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	429a      	cmp	r2, r3
 800747c:	d207      	bcs.n	800748e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800747e:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <prvAddNewTaskToReadyList+0xdc>)
 8007480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200029a0 	.word	0x200029a0
 800749c:	200024cc 	.word	0x200024cc
 80074a0:	200029ac 	.word	0x200029ac
 80074a4:	200029bc 	.word	0x200029bc
 80074a8:	200029a8 	.word	0x200029a8
 80074ac:	200024d0 	.word	0x200024d0
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d017      	beq.n	80074f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074c6:	4b13      	ldr	r3, [pc, #76]	; (8007514 <vTaskDelay+0x60>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00a      	beq.n	80074e4 <vTaskDelay+0x30>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60bb      	str	r3, [r7, #8]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074e4:	f000 f8f6 	bl	80076d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074e8:	2100      	movs	r1, #0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fd64 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074f0:	f000 f8fe 	bl	80076f0 <xTaskResumeAll>
 80074f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074fc:	4b06      	ldr	r3, [pc, #24]	; (8007518 <vTaskDelay+0x64>)
 80074fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	200029c8 	.word	0x200029c8
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007524:	f001 f9a2 	bl	800886c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <vTaskSuspend+0x18>
 800752e:	4b30      	ldr	r3, [pc, #192]	; (80075f0 <vTaskSuspend+0xd4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	e000      	b.n	8007536 <vTaskSuspend+0x1a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3304      	adds	r3, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff f855 	bl	80065ec <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007546:	2b00      	cmp	r3, #0
 8007548:	d004      	beq.n	8007554 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3318      	adds	r3, #24
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff f84c 	bl	80065ec <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4826      	ldr	r0, [pc, #152]	; (80075f4 <vTaskSuspend+0xd8>)
 800755c:	f7fe ffeb 	bl	8006536 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d103      	bne.n	8007574 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007574:	f001 f9aa 	bl	80088cc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007578:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <vTaskSuspend+0xdc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007580:	f001 f974 	bl	800886c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007584:	f000 fc68 	bl	8007e58 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007588:	f001 f9a0 	bl	80088cc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800758c:	4b18      	ldr	r3, [pc, #96]	; (80075f0 <vTaskSuspend+0xd4>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	429a      	cmp	r2, r3
 8007594:	d127      	bne.n	80075e6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8007596:	4b18      	ldr	r3, [pc, #96]	; (80075f8 <vTaskSuspend+0xdc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d017      	beq.n	80075ce <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800759e:	4b17      	ldr	r3, [pc, #92]	; (80075fc <vTaskSuspend+0xe0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <vTaskSuspend+0xa0>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <vTaskSuspend+0xe4>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075cc:	e00b      	b.n	80075e6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <vTaskSuspend+0xd8>)
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <vTaskSuspend+0xe8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d103      	bne.n	80075e2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <vTaskSuspend+0xd4>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
	}
 80075e0:	e001      	b.n	80075e6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80075e2:	f000 f9ef 	bl	80079c4 <vTaskSwitchContext>
	}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200024cc 	.word	0x200024cc
 80075f4:	2000298c 	.word	0x2000298c
 80075f8:	200029ac 	.word	0x200029ac
 80075fc:	200029c8 	.word	0x200029c8
 8007600:	e000ed04 	.word	0xe000ed04
 8007604:	200029a0 	.word	0x200029a0

08007608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007616:	463a      	mov	r2, r7
 8007618:	1d39      	adds	r1, r7, #4
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe ff2c 	bl	800647c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	9202      	str	r2, [sp, #8]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	2300      	movs	r3, #0
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	460a      	mov	r2, r1
 8007636:	4921      	ldr	r1, [pc, #132]	; (80076bc <vTaskStartScheduler+0xb4>)
 8007638:	4821      	ldr	r0, [pc, #132]	; (80076c0 <vTaskStartScheduler+0xb8>)
 800763a:	f7ff fda3 	bl	8007184 <xTaskCreateStatic>
 800763e:	4603      	mov	r3, r0
 8007640:	4a20      	ldr	r2, [pc, #128]	; (80076c4 <vTaskStartScheduler+0xbc>)
 8007642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007644:	4b1f      	ldr	r3, [pc, #124]	; (80076c4 <vTaskStartScheduler+0xbc>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800764c:	2301      	movs	r3, #1
 800764e:	617b      	str	r3, [r7, #20]
 8007650:	e001      	b.n	8007656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d102      	bne.n	8007662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800765c:	f000 fd00 	bl	8008060 <xTimerCreateTimerTask>
 8007660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d116      	bne.n	8007696 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	613b      	str	r3, [r7, #16]
}
 800767a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <vTaskStartScheduler+0xc0>)
 800767e:	f04f 32ff 	mov.w	r2, #4294967295
 8007682:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007684:	4b11      	ldr	r3, [pc, #68]	; (80076cc <vTaskStartScheduler+0xc4>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <vTaskStartScheduler+0xc8>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007690:	f001 f87a 	bl	8008788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007694:	e00e      	b.n	80076b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769c:	d10a      	bne.n	80076b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	60fb      	str	r3, [r7, #12]
}
 80076b0:	bf00      	nop
 80076b2:	e7fe      	b.n	80076b2 <vTaskStartScheduler+0xaa>
}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	0800d8a8 	.word	0x0800d8a8
 80076c0:	08007ced 	.word	0x08007ced
 80076c4:	200029c4 	.word	0x200029c4
 80076c8:	200029c0 	.word	0x200029c0
 80076cc:	200029ac 	.word	0x200029ac
 80076d0:	200029a4 	.word	0x200029a4

080076d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <vTaskSuspendAll+0x18>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3301      	adds	r3, #1
 80076de:	4a03      	ldr	r2, [pc, #12]	; (80076ec <vTaskSuspendAll+0x18>)
 80076e0:	6013      	str	r3, [r2, #0]
}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	200029c8 	.word	0x200029c8

080076f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076fe:	4b42      	ldr	r3, [pc, #264]	; (8007808 <xTaskResumeAll+0x118>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xTaskResumeAll+0x2c>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	603b      	str	r3, [r7, #0]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800771c:	f001 f8a6 	bl	800886c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007720:	4b39      	ldr	r3, [pc, #228]	; (8007808 <xTaskResumeAll+0x118>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3b01      	subs	r3, #1
 8007726:	4a38      	ldr	r2, [pc, #224]	; (8007808 <xTaskResumeAll+0x118>)
 8007728:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772a:	4b37      	ldr	r3, [pc, #220]	; (8007808 <xTaskResumeAll+0x118>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d162      	bne.n	80077f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007732:	4b36      	ldr	r3, [pc, #216]	; (800780c <xTaskResumeAll+0x11c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d05e      	beq.n	80077f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800773a:	e02f      	b.n	800779c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800773c:	4b34      	ldr	r3, [pc, #208]	; (8007810 <xTaskResumeAll+0x120>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3318      	adds	r3, #24
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe ff4f 	bl	80065ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3304      	adds	r3, #4
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe ff4a 	bl	80065ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4b2d      	ldr	r3, [pc, #180]	; (8007814 <xTaskResumeAll+0x124>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <xTaskResumeAll+0x7c>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	4a2a      	ldr	r2, [pc, #168]	; (8007814 <xTaskResumeAll+0x124>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4a27      	ldr	r2, [pc, #156]	; (8007818 <xTaskResumeAll+0x128>)
 800777a:	441a      	add	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7fe fed7 	bl	8006536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778c:	4b23      	ldr	r3, [pc, #140]	; (800781c <xTaskResumeAll+0x12c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007796:	4b22      	ldr	r3, [pc, #136]	; (8007820 <xTaskResumeAll+0x130>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800779c:	4b1c      	ldr	r3, [pc, #112]	; (8007810 <xTaskResumeAll+0x120>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1cb      	bne.n	800773c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077aa:	f000 fb55 	bl	8007e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077ae:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <xTaskResumeAll+0x134>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d010      	beq.n	80077dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077ba:	f000 f845 	bl	8007848 <xTaskIncrementTick>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077c4:	4b16      	ldr	r3, [pc, #88]	; (8007820 <xTaskResumeAll+0x130>)
 80077c6:	2201      	movs	r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f1      	bne.n	80077ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <xTaskResumeAll+0x134>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xTaskResumeAll+0x130>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d009      	beq.n	80077f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077e8:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <xTaskResumeAll+0x138>)
 80077ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077f8:	f001 f868 	bl	80088cc <vPortExitCritical>

	return xAlreadyYielded;
 80077fc:	68bb      	ldr	r3, [r7, #8]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200029c8 	.word	0x200029c8
 800780c:	200029a0 	.word	0x200029a0
 8007810:	20002960 	.word	0x20002960
 8007814:	200029a8 	.word	0x200029a8
 8007818:	200024d0 	.word	0x200024d0
 800781c:	200024cc 	.word	0x200024cc
 8007820:	200029b4 	.word	0x200029b4
 8007824:	200029b0 	.word	0x200029b0
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <xTaskGetTickCount+0x18>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007838:	687b      	ldr	r3, [r7, #4]
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr
 8007844:	200029a4 	.word	0x200029a4

08007848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007852:	4b51      	ldr	r3, [pc, #324]	; (8007998 <xTaskIncrementTick+0x150>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 808e 	bne.w	8007978 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800785c:	4b4f      	ldr	r3, [pc, #316]	; (800799c <xTaskIncrementTick+0x154>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007864:	4a4d      	ldr	r2, [pc, #308]	; (800799c <xTaskIncrementTick+0x154>)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d120      	bne.n	80078b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007870:	4b4b      	ldr	r3, [pc, #300]	; (80079a0 <xTaskIncrementTick+0x158>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <xTaskIncrementTick+0x48>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xTaskIncrementTick+0x46>
 8007890:	4b43      	ldr	r3, [pc, #268]	; (80079a0 <xTaskIncrementTick+0x158>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <xTaskIncrementTick+0x15c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a41      	ldr	r2, [pc, #260]	; (80079a0 <xTaskIncrementTick+0x158>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4a41      	ldr	r2, [pc, #260]	; (80079a4 <xTaskIncrementTick+0x15c>)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b40      	ldr	r3, [pc, #256]	; (80079a8 <xTaskIncrementTick+0x160>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a3f      	ldr	r2, [pc, #252]	; (80079a8 <xTaskIncrementTick+0x160>)
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	f000 fad3 	bl	8007e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078b2:	4b3e      	ldr	r3, [pc, #248]	; (80079ac <xTaskIncrementTick+0x164>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d34e      	bcc.n	800795a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078bc:	4b38      	ldr	r3, [pc, #224]	; (80079a0 <xTaskIncrementTick+0x158>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <xTaskIncrementTick+0x82>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <xTaskIncrementTick+0x84>
 80078ca:	2300      	movs	r3, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	4b36      	ldr	r3, [pc, #216]	; (80079ac <xTaskIncrementTick+0x164>)
 80078d2:	f04f 32ff 	mov.w	r2, #4294967295
 80078d6:	601a      	str	r2, [r3, #0]
					break;
 80078d8:	e03f      	b.n	800795a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xTaskIncrementTick+0x158>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078f2:	4a2e      	ldr	r2, [pc, #184]	; (80079ac <xTaskIncrementTick+0x164>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6013      	str	r3, [r2, #0]
						break;
 80078f8:	e02f      	b.n	800795a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe fe74 	bl	80065ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3318      	adds	r3, #24
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe fe6b 	bl	80065ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <xTaskIncrementTick+0x168>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d903      	bls.n	800792a <xTaskIncrementTick+0xe2>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <xTaskIncrementTick+0x168>)
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <xTaskIncrementTick+0x16c>)
 8007938:	441a      	add	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fe fdf8 	bl	8006536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <xTaskIncrementTick+0x170>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d3b3      	bcc.n	80078bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007958:	e7b0      	b.n	80078bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <xTaskIncrementTick+0x170>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4914      	ldr	r1, [pc, #80]	; (80079b4 <xTaskIncrementTick+0x16c>)
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d907      	bls.n	8007982 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007972:	2301      	movs	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e004      	b.n	8007982 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <xTaskIncrementTick+0x174>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <xTaskIncrementTick+0x174>)
 8007980:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <xTaskIncrementTick+0x178>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800798e:	697b      	ldr	r3, [r7, #20]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200029c8 	.word	0x200029c8
 800799c:	200029a4 	.word	0x200029a4
 80079a0:	20002958 	.word	0x20002958
 80079a4:	2000295c 	.word	0x2000295c
 80079a8:	200029b8 	.word	0x200029b8
 80079ac:	200029c0 	.word	0x200029c0
 80079b0:	200029a8 	.word	0x200029a8
 80079b4:	200024d0 	.word	0x200024d0
 80079b8:	200024cc 	.word	0x200024cc
 80079bc:	200029b0 	.word	0x200029b0
 80079c0:	200029b4 	.word	0x200029b4

080079c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ca:	4b27      	ldr	r3, [pc, #156]	; (8007a68 <vTaskSwitchContext+0xa4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <vTaskSwitchContext+0xa8>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079d8:	e041      	b.n	8007a5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <vTaskSwitchContext+0xa8>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80079e0:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <vTaskSwitchContext+0xac>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e010      	b.n	8007a0a <vTaskSwitchContext+0x46>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <vTaskSwitchContext+0x40>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <vTaskSwitchContext+0x3e>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3b01      	subs	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	491a      	ldr	r1, [pc, #104]	; (8007a74 <vTaskSwitchContext+0xb0>)
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	440b      	add	r3, r1
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0e4      	beq.n	80079e8 <vTaskSwitchContext+0x24>
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4a12      	ldr	r2, [pc, #72]	; (8007a74 <vTaskSwitchContext+0xb0>)
 8007a2a:	4413      	add	r3, r2
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3308      	adds	r3, #8
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d104      	bne.n	8007a4e <vTaskSwitchContext+0x8a>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4a08      	ldr	r2, [pc, #32]	; (8007a78 <vTaskSwitchContext+0xb4>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	4a05      	ldr	r2, [pc, #20]	; (8007a70 <vTaskSwitchContext+0xac>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6013      	str	r3, [r2, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr
 8007a68:	200029c8 	.word	0x200029c8
 8007a6c:	200029b4 	.word	0x200029b4
 8007a70:	200029a8 	.word	0x200029a8
 8007a74:	200024d0 	.word	0x200024d0
 8007a78:	200024cc 	.word	0x200024cc

08007a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60fb      	str	r3, [r7, #12]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aa2:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <vTaskPlaceOnEventList+0x44>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3318      	adds	r3, #24
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fe fd66 	bl	800657c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	6838      	ldr	r0, [r7, #0]
 8007ab4:	f000 fa80 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	200024cc 	.word	0x200024cc

08007ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617b      	str	r3, [r7, #20]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3318      	adds	r3, #24
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7fe fd1e 	bl	8006536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	68b8      	ldr	r0, [r7, #8]
 8007b0a:	f000 fa55 	bl	8007fb8 <prvAddCurrentTaskToDelayedList>
	}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200024cc 	.word	0x200024cc

08007b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fd4d 	bl	80065ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <xTaskRemoveFromEventList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11d      	bne.n	8007b96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd44 	bl	80065ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <xTaskRemoveFromEventList+0xb4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d903      	bls.n	8007b78 <xTaskRemoveFromEventList+0x5c>
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <xTaskRemoveFromEventList+0xb4>)
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <xTaskRemoveFromEventList+0xb8>)
 8007b86:	441a      	add	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fcd1 	bl	8006536 <vListInsertEnd>
 8007b94:	e005      	b.n	8007ba2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3318      	adds	r3, #24
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	480e      	ldr	r0, [pc, #56]	; (8007bd8 <xTaskRemoveFromEventList+0xbc>)
 8007b9e:	f7fe fcca 	bl	8006536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <xTaskRemoveFromEventList+0xc0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d905      	bls.n	8007bbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <xTaskRemoveFromEventList+0xc4>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e001      	b.n	8007bc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bc0:	697b      	ldr	r3, [r7, #20]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	200029c8 	.word	0x200029c8
 8007bd0:	200029a8 	.word	0x200029a8
 8007bd4:	200024d0 	.word	0x200024d0
 8007bd8:	20002960 	.word	0x20002960
 8007bdc:	200024cc 	.word	0x200024cc
 8007be0:	200029b4 	.word	0x200029b4

08007be4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <vTaskInternalSetTimeOutState+0x24>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <vTaskInternalSetTimeOutState+0x28>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	605a      	str	r2, [r3, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	200029b8 	.word	0x200029b8
 8007c0c:	200029a4 	.word	0x200029a4

08007c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60fb      	str	r3, [r7, #12]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c52:	f000 fe0b 	bl	800886c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <xTaskCheckForTimeOut+0xbc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6e:	d102      	bne.n	8007c76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
 8007c74:	e023      	b.n	8007cbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <xTaskCheckForTimeOut+0xc0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d007      	beq.n	8007c92 <xTaskCheckForTimeOut+0x82>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d302      	bcc.n	8007c92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e015      	b.n	8007cbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d20b      	bcs.n	8007cb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	1ad2      	subs	r2, r2, r3
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ff9b 	bl	8007be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e004      	b.n	8007cbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cbe:	f000 fe05 	bl	80088cc <vPortExitCritical>

	return xReturn;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200029a4 	.word	0x200029a4
 8007cd0:	200029b8 	.word	0x200029b8

08007cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <vTaskMissedYield+0x14>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
}
 8007cde:	bf00      	nop
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	200029b4 	.word	0x200029b4

08007cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cf4:	f000 f852 	bl	8007d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <prvIdleTask+0x28>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d9f9      	bls.n	8007cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d00:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <prvIdleTask+0x2c>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d10:	e7f0      	b.n	8007cf4 <prvIdleTask+0x8>
 8007d12:	bf00      	nop
 8007d14:	200024d0 	.word	0x200024d0
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	e00c      	b.n	8007d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4a12      	ldr	r2, [pc, #72]	; (8007d7c <prvInitialiseTaskLists+0x60>)
 8007d34:	4413      	add	r3, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fbd2 	bl	80064e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b37      	cmp	r3, #55	; 0x37
 8007d46:	d9ef      	bls.n	8007d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d48:	480d      	ldr	r0, [pc, #52]	; (8007d80 <prvInitialiseTaskLists+0x64>)
 8007d4a:	f7fe fbc9 	bl	80064e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d4e:	480d      	ldr	r0, [pc, #52]	; (8007d84 <prvInitialiseTaskLists+0x68>)
 8007d50:	f7fe fbc6 	bl	80064e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d54:	480c      	ldr	r0, [pc, #48]	; (8007d88 <prvInitialiseTaskLists+0x6c>)
 8007d56:	f7fe fbc3 	bl	80064e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d5a:	480c      	ldr	r0, [pc, #48]	; (8007d8c <prvInitialiseTaskLists+0x70>)
 8007d5c:	f7fe fbc0 	bl	80064e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d60:	480b      	ldr	r0, [pc, #44]	; (8007d90 <prvInitialiseTaskLists+0x74>)
 8007d62:	f7fe fbbd 	bl	80064e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <prvInitialiseTaskLists+0x78>)
 8007d68:	4a05      	ldr	r2, [pc, #20]	; (8007d80 <prvInitialiseTaskLists+0x64>)
 8007d6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <prvInitialiseTaskLists+0x7c>)
 8007d6e:	4a05      	ldr	r2, [pc, #20]	; (8007d84 <prvInitialiseTaskLists+0x68>)
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200024d0 	.word	0x200024d0
 8007d80:	20002930 	.word	0x20002930
 8007d84:	20002944 	.word	0x20002944
 8007d88:	20002960 	.word	0x20002960
 8007d8c:	20002974 	.word	0x20002974
 8007d90:	2000298c 	.word	0x2000298c
 8007d94:	20002958 	.word	0x20002958
 8007d98:	2000295c 	.word	0x2000295c

08007d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da2:	e019      	b.n	8007dd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007da4:	f000 fd62 	bl	800886c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <prvCheckTasksWaitingTermination+0x50>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fc19 	bl	80065ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <prvCheckTasksWaitingTermination+0x54>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	4a0b      	ldr	r2, [pc, #44]	; (8007df0 <prvCheckTasksWaitingTermination+0x54>)
 8007dc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dce:	f000 fd7d 	bl	80088cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f810 	bl	8007df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <prvCheckTasksWaitingTermination+0x58>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e1      	bne.n	8007da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20002974 	.word	0x20002974
 8007df0:	200029a0 	.word	0x200029a0
 8007df4:	20002988 	.word	0x20002988

08007df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d108      	bne.n	8007e1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fef0 	bl	8008bf4 <vPortFree>
				vPortFree( pxTCB );
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 feed 	bl	8008bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e1a:	e018      	b.n	8007e4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d103      	bne.n	8007e2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fee4 	bl	8008bf4 <vPortFree>
	}
 8007e2c:	e00f      	b.n	8007e4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d00a      	beq.n	8007e4e <prvDeleteTCB+0x56>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	e7fe      	b.n	8007e4c <prvDeleteTCB+0x54>
	}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5e:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <prvResetNextTaskUnblockTime+0x40>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <prvResetNextTaskUnblockTime+0x14>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e000      	b.n	8007e6e <prvResetNextTaskUnblockTime+0x16>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e72:	4b0a      	ldr	r3, [pc, #40]	; (8007e9c <prvResetNextTaskUnblockTime+0x44>)
 8007e74:	f04f 32ff 	mov.w	r2, #4294967295
 8007e78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7a:	e008      	b.n	8007e8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <prvResetNextTaskUnblockTime+0x40>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4a04      	ldr	r2, [pc, #16]	; (8007e9c <prvResetNextTaskUnblockTime+0x44>)
 8007e8c:	6013      	str	r3, [r2, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr
 8007e98:	20002958 	.word	0x20002958
 8007e9c:	200029c0 	.word	0x200029c0

08007ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <xTaskGetSchedulerState+0x34>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	e008      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <xTaskGetSchedulerState+0x38>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e001      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ec6:	687b      	ldr	r3, [r7, #4]
	}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	200029ac 	.word	0x200029ac
 8007ed8:	200029c8 	.word	0x200029c8

08007edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d056      	beq.n	8007fa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <xTaskPriorityDisinherit+0xd0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d00a      	beq.n	8007f12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60bb      	str	r3, [r7, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d02c      	beq.n	8007fa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d128      	bne.n	8007fa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe fb4a 	bl	80065ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <xTaskPriorityDisinherit+0xd4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d903      	bls.n	8007f80 <xTaskPriorityDisinherit+0xa4>
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <xTaskPriorityDisinherit+0xd4>)
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a09      	ldr	r2, [pc, #36]	; (8007fb4 <xTaskPriorityDisinherit+0xd8>)
 8007f8e:	441a      	add	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f7fe facd 	bl	8006536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fa0:	697b      	ldr	r3, [r7, #20]
	}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	200024cc 	.word	0x200024cc
 8007fb0:	200029a8 	.word	0x200029a8
 8007fb4:	200024d0 	.word	0x200024d0

08007fb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fc2:	4b21      	ldr	r3, [pc, #132]	; (8008048 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fc8:	4b20      	ldr	r3, [pc, #128]	; (800804c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fb0c 	bl	80065ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d10a      	bne.n	8007ff2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d007      	beq.n	8007ff2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4819      	ldr	r0, [pc, #100]	; (8008050 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fec:	f7fe faa3 	bl	8006536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ff0:	e026      	b.n	8008040 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ffa:	4b14      	ldr	r3, [pc, #80]	; (800804c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	429a      	cmp	r2, r3
 8008008:	d209      	bcs.n	800801e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800800a:	4b12      	ldr	r3, [pc, #72]	; (8008054 <prvAddCurrentTaskToDelayedList+0x9c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <prvAddCurrentTaskToDelayedList+0x94>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe fab0 	bl	800657c <vListInsert>
}
 800801c:	e010      	b.n	8008040 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b0a      	ldr	r3, [pc, #40]	; (800804c <prvAddCurrentTaskToDelayedList+0x94>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3304      	adds	r3, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f7fe faa6 	bl	800657c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	d202      	bcs.n	8008040 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800803a:	4a08      	ldr	r2, [pc, #32]	; (800805c <prvAddCurrentTaskToDelayedList+0xa4>)
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	6013      	str	r3, [r2, #0]
}
 8008040:	bf00      	nop
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200029a4 	.word	0x200029a4
 800804c:	200024cc 	.word	0x200024cc
 8008050:	2000298c 	.word	0x2000298c
 8008054:	2000295c 	.word	0x2000295c
 8008058:	20002958 	.word	0x20002958
 800805c:	200029c0 	.word	0x200029c0

08008060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	; 0x28
 8008064:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800806a:	f000 facb 	bl	8008604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800806e:	4b1c      	ldr	r3, [pc, #112]	; (80080e0 <xTimerCreateTimerTask+0x80>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d021      	beq.n	80080ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800807e:	1d3a      	adds	r2, r7, #4
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fa0f 	bl	80064ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	9202      	str	r2, [sp, #8]
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	2302      	movs	r3, #2
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2300      	movs	r3, #0
 800809e:	460a      	mov	r2, r1
 80080a0:	4910      	ldr	r1, [pc, #64]	; (80080e4 <xTimerCreateTimerTask+0x84>)
 80080a2:	4811      	ldr	r0, [pc, #68]	; (80080e8 <xTimerCreateTimerTask+0x88>)
 80080a4:	f7ff f86e 	bl	8007184 <xTaskCreateStatic>
 80080a8:	4603      	mov	r3, r0
 80080aa:	4a10      	ldr	r2, [pc, #64]	; (80080ec <xTimerCreateTimerTask+0x8c>)
 80080ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTimerCreateTimerTask+0x8c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080b6:	2301      	movs	r3, #1
 80080b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080d6:	697b      	ldr	r3, [r7, #20]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	200029fc 	.word	0x200029fc
 80080e4:	0800d8b0 	.word	0x0800d8b0
 80080e8:	0800820d 	.word	0x0800820d
 80080ec:	20002a00 	.word	0x20002a00

080080f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08a      	sub	sp, #40	; 0x28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080fe:	2300      	movs	r3, #0
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	623b      	str	r3, [r7, #32]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <xTimerGenericCommand+0x98>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d02a      	beq.n	800817c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b05      	cmp	r3, #5
 8008136:	dc18      	bgt.n	800816a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008138:	f7ff feb2 	bl	8007ea0 <xTaskGetSchedulerState>
 800813c:	4603      	mov	r3, r0
 800813e:	2b02      	cmp	r3, #2
 8008140:	d109      	bne.n	8008156 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008142:	4b11      	ldr	r3, [pc, #68]	; (8008188 <xTimerGenericCommand+0x98>)
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	f107 0110 	add.w	r1, r7, #16
 800814a:	2300      	movs	r3, #0
 800814c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800814e:	f7fe fbb7 	bl	80068c0 <xQueueGenericSend>
 8008152:	6278      	str	r0, [r7, #36]	; 0x24
 8008154:	e012      	b.n	800817c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008156:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <xTimerGenericCommand+0x98>)
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	f107 0110 	add.w	r1, r7, #16
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	f7fe fbad 	bl	80068c0 <xQueueGenericSend>
 8008166:	6278      	str	r0, [r7, #36]	; 0x24
 8008168:	e008      	b.n	800817c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800816a:	4b07      	ldr	r3, [pc, #28]	; (8008188 <xTimerGenericCommand+0x98>)
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	f107 0110 	add.w	r1, r7, #16
 8008172:	2300      	movs	r3, #0
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	f7fe fca1 	bl	8006abc <xQueueGenericSendFromISR>
 800817a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200029fc 	.word	0x200029fc

0800818c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008196:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <prvProcessExpiredTimer+0x7c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	3304      	adds	r3, #4
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fa21 	bl	80065ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d122      	bne.n	80081f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	18d1      	adds	r1, r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	6978      	ldr	r0, [r7, #20]
 80081c0:	f000 f8c8 	bl	8008354 <prvInsertTimerInActiveList>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081ca:	2300      	movs	r3, #0
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	2300      	movs	r3, #0
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	2100      	movs	r1, #0
 80081d4:	6978      	ldr	r0, [r7, #20]
 80081d6:	f7ff ff8b 	bl	80080f0 <xTimerGenericCommand>
 80081da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	60fb      	str	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	e7fe      	b.n	80081f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	6978      	ldr	r0, [r7, #20]
 80081fe:	4798      	blx	r3
}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	200029f4 	.word	0x200029f4

0800820c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	4618      	mov	r0, r3
 800821a:	f000 f857 	bl	80082cc <prvGetNextExpireTime>
 800821e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	4619      	mov	r1, r3
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f803 	bl	8008230 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800822a:	f000 f8d5 	bl	80083d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800822e:	e7f1      	b.n	8008214 <prvTimerTask+0x8>

08008230 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800823a:	f7ff fa4b 	bl	80076d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800823e:	f107 0308 	add.w	r3, r7, #8
 8008242:	4618      	mov	r0, r3
 8008244:	f000 f866 	bl	8008314 <prvSampleTimeNow>
 8008248:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d130      	bne.n	80082b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <prvProcessTimerOrBlockTask+0x3c>
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	429a      	cmp	r2, r3
 800825c:	d806      	bhi.n	800826c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800825e:	f7ff fa47 	bl	80076f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff ff91 	bl	800818c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800826a:	e024      	b.n	80082b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <prvProcessTimerOrBlockTask+0x90>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <prvProcessTimerOrBlockTask+0x94>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4619      	mov	r1, r3
 8008292:	f7fe ff43 	bl	800711c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008296:	f7ff fa2b 	bl	80076f0 <xTaskResumeAll>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <prvProcessTimerOrBlockTask+0x98>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
}
 80082b0:	e001      	b.n	80082b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082b2:	f7ff fa1d 	bl	80076f0 <xTaskResumeAll>
}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	200029f8 	.word	0x200029f8
 80082c4:	200029fc 	.word	0x200029fc
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <prvGetNextExpireTime+0x44>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bf0c      	ite	eq
 80082de:	2301      	moveq	r3, #1
 80082e0:	2300      	movne	r3, #0
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082f2:	4b07      	ldr	r3, [pc, #28]	; (8008310 <prvGetNextExpireTime+0x44>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e001      	b.n	8008302 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008302:	68fb      	ldr	r3, [r7, #12]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	bc80      	pop	{r7}
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200029f4 	.word	0x200029f4

08008314 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800831c:	f7ff fa86 	bl	800782c <xTaskGetTickCount>
 8008320:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008322:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <prvSampleTimeNow+0x3c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	429a      	cmp	r2, r3
 800832a:	d205      	bcs.n	8008338 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800832c:	f000 f908 	bl	8008540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e002      	b.n	800833e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800833e:	4a04      	ldr	r2, [pc, #16]	; (8008350 <prvSampleTimeNow+0x3c>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008344:	68fb      	ldr	r3, [r7, #12]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20002a04 	.word	0x20002a04

08008354 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	429a      	cmp	r2, r3
 8008378:	d812      	bhi.n	80083a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	d302      	bcc.n	800838e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e01b      	b.n	80083c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800838e:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <prvInsertTimerInActiveList+0x7c>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3304      	adds	r3, #4
 8008396:	4619      	mov	r1, r3
 8008398:	4610      	mov	r0, r2
 800839a:	f7fe f8ef 	bl	800657c <vListInsert>
 800839e:	e012      	b.n	80083c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d206      	bcs.n	80083b6 <prvInsertTimerInActiveList+0x62>
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d302      	bcc.n	80083b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e007      	b.n	80083c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083b6:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <prvInsertTimerInActiveList+0x80>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3304      	adds	r3, #4
 80083be:	4619      	mov	r1, r3
 80083c0:	4610      	mov	r0, r2
 80083c2:	f7fe f8db 	bl	800657c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083c6:	697b      	ldr	r3, [r7, #20]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	200029f8 	.word	0x200029f8
 80083d4:	200029f4 	.word	0x200029f4

080083d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08e      	sub	sp, #56	; 0x38
 80083dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083de:	e09d      	b.n	800851c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da18      	bge.n	8008418 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083e6:	1d3b      	adds	r3, r7, #4
 80083e8:	3304      	adds	r3, #4
 80083ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	61fb      	str	r3, [r7, #28]
}
 8008404:	bf00      	nop
 8008406:	e7fe      	b.n	8008406 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800840e:	6850      	ldr	r0, [r2, #4]
 8008410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008412:	6892      	ldr	r2, [r2, #8]
 8008414:	4611      	mov	r1, r2
 8008416:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	db7d      	blt.n	800851a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	3304      	adds	r3, #4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe f8dc 	bl	80065ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008434:	463b      	mov	r3, r7
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff ff6c 	bl	8008314 <prvSampleTimeNow>
 800843c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b09      	cmp	r3, #9
 8008442:	d86b      	bhi.n	800851c <prvProcessReceivedCommands+0x144>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <prvProcessReceivedCommands+0x74>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	08008475 	.word	0x08008475
 8008450:	08008475 	.word	0x08008475
 8008454:	08008475 	.word	0x08008475
 8008458:	0800851d 	.word	0x0800851d
 800845c:	080084d1 	.word	0x080084d1
 8008460:	08008509 	.word	0x08008509
 8008464:	08008475 	.word	0x08008475
 8008468:	08008475 	.word	0x08008475
 800846c:	0800851d 	.word	0x0800851d
 8008470:	080084d1 	.word	0x080084d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	18d1      	adds	r1, r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008482:	f7ff ff67 	bl	8008354 <prvInsertTimerInActiveList>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d047      	beq.n	800851c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008492:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d13f      	bne.n	800851c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	441a      	add	r2, r3
 80084a4:	2300      	movs	r3, #0
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	2100      	movs	r1, #0
 80084ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ae:	f7ff fe1f 	bl	80080f0 <xTimerGenericCommand>
 80084b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d130      	bne.n	800851c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	61bb      	str	r3, [r7, #24]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	617b      	str	r3, [r7, #20]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	699a      	ldr	r2, [r3, #24]
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	18d1      	adds	r1, r2, r3
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008502:	f7ff ff27 	bl	8008354 <prvInsertTimerInActiveList>
					break;
 8008506:	e009      	b.n	800851c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008514:	f000 fb6e 	bl	8008bf4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008518:	e000      	b.n	800851c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800851a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <prvProcessReceivedCommands+0x164>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	1d39      	adds	r1, r7, #4
 8008522:	2200      	movs	r2, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f7fe fb61 	bl	8006bec <xQueueReceive>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	f47f af57 	bne.w	80083e0 <prvProcessReceivedCommands+0x8>
	}
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	3730      	adds	r7, #48	; 0x30
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	200029fc 	.word	0x200029fc

08008540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008546:	e045      	b.n	80085d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008548:	4b2c      	ldr	r3, [pc, #176]	; (80085fc <prvSwitchTimerLists+0xbc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008552:	4b2a      	ldr	r3, [pc, #168]	; (80085fc <prvSwitchTimerLists+0xbc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f843 	bl	80065ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d12e      	bne.n	80085d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	4413      	add	r3, r2
 800857e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	429a      	cmp	r2, r3
 8008586:	d90e      	bls.n	80085a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008594:	4b19      	ldr	r3, [pc, #100]	; (80085fc <prvSwitchTimerLists+0xbc>)
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3304      	adds	r3, #4
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fd ffec 	bl	800657c <vListInsert>
 80085a4:	e016      	b.n	80085d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085a6:	2300      	movs	r3, #0
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	2300      	movs	r3, #0
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	2100      	movs	r1, #0
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fd9d 	bl	80080f0 <xTimerGenericCommand>
 80085b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	603b      	str	r3, [r7, #0]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085d4:	4b09      	ldr	r3, [pc, #36]	; (80085fc <prvSwitchTimerLists+0xbc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1b4      	bne.n	8008548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085de:	4b07      	ldr	r3, [pc, #28]	; (80085fc <prvSwitchTimerLists+0xbc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <prvSwitchTimerLists+0xc0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a04      	ldr	r2, [pc, #16]	; (80085fc <prvSwitchTimerLists+0xbc>)
 80085ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085ec:	4a04      	ldr	r2, [pc, #16]	; (8008600 <prvSwitchTimerLists+0xc0>)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	6013      	str	r3, [r2, #0]
}
 80085f2:	bf00      	nop
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200029f4 	.word	0x200029f4
 8008600:	200029f8 	.word	0x200029f8

08008604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800860a:	f000 f92f 	bl	800886c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800860e:	4b15      	ldr	r3, [pc, #84]	; (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d120      	bne.n	8008658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008616:	4814      	ldr	r0, [pc, #80]	; (8008668 <prvCheckForValidListAndQueue+0x64>)
 8008618:	f7fd ff62 	bl	80064e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800861c:	4813      	ldr	r0, [pc, #76]	; (800866c <prvCheckForValidListAndQueue+0x68>)
 800861e:	f7fd ff5f 	bl	80064e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008622:	4b13      	ldr	r3, [pc, #76]	; (8008670 <prvCheckForValidListAndQueue+0x6c>)
 8008624:	4a10      	ldr	r2, [pc, #64]	; (8008668 <prvCheckForValidListAndQueue+0x64>)
 8008626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008628:	4b12      	ldr	r3, [pc, #72]	; (8008674 <prvCheckForValidListAndQueue+0x70>)
 800862a:	4a10      	ldr	r2, [pc, #64]	; (800866c <prvCheckForValidListAndQueue+0x68>)
 800862c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800862e:	2300      	movs	r3, #0
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <prvCheckForValidListAndQueue+0x74>)
 8008634:	4a11      	ldr	r2, [pc, #68]	; (800867c <prvCheckForValidListAndQueue+0x78>)
 8008636:	2110      	movs	r1, #16
 8008638:	200a      	movs	r0, #10
 800863a:	f7fe f869 	bl	8006710 <xQueueGenericCreateStatic>
 800863e:	4603      	mov	r3, r0
 8008640:	4a08      	ldr	r2, [pc, #32]	; (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <prvCheckForValidListAndQueue+0x60>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d005      	beq.n	8008658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800864c:	4b05      	ldr	r3, [pc, #20]	; (8008664 <prvCheckForValidListAndQueue+0x60>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	490b      	ldr	r1, [pc, #44]	; (8008680 <prvCheckForValidListAndQueue+0x7c>)
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fd3a 	bl	80070cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008658:	f000 f938 	bl	80088cc <vPortExitCritical>
}
 800865c:	bf00      	nop
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200029fc 	.word	0x200029fc
 8008668:	200029cc 	.word	0x200029cc
 800866c:	200029e0 	.word	0x200029e0
 8008670:	200029f4 	.word	0x200029f4
 8008674:	200029f8 	.word	0x200029f8
 8008678:	20002aa8 	.word	0x20002aa8
 800867c:	20002a08 	.word	0x20002a08
 8008680:	0800d8b8 	.word	0x0800d8b8

08008684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3b04      	subs	r3, #4
 8008694:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800869c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b04      	subs	r3, #4
 80086a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0201 	bic.w	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3b04      	subs	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086b4:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <pxPortInitialiseStack+0x54>)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3b14      	subs	r3, #20
 80086be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3b20      	subs	r3, #32
 80086ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086cc:	68fb      	ldr	r3, [r7, #12]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bc80      	pop	{r7}
 80086d6:	4770      	bx	lr
 80086d8:	080086dd 	.word	0x080086dd

080086dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086e6:	4b12      	ldr	r3, [pc, #72]	; (8008730 <prvTaskExitError+0x54>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d00a      	beq.n	8008706 <prvTaskExitError+0x2a>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	60fb      	str	r3, [r7, #12]
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <prvTaskExitError+0x28>
	__asm volatile
 8008706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	60bb      	str	r3, [r7, #8]
}
 8008718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800871a:	bf00      	nop
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0fc      	beq.n	800871c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000018 	.word	0x20000018
	...

08008740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <pxCurrentTCBConst2>)
 8008742:	6819      	ldr	r1, [r3, #0]
 8008744:	6808      	ldr	r0, [r1, #0]
 8008746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800874a:	f380 8809 	msr	PSP, r0
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f04f 0000 	mov.w	r0, #0
 8008756:	f380 8811 	msr	BASEPRI, r0
 800875a:	f04e 0e0d 	orr.w	lr, lr, #13
 800875e:	4770      	bx	lr

08008760 <pxCurrentTCBConst2>:
 8008760:	200024cc 	.word	0x200024cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop

08008768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008768:	4806      	ldr	r0, [pc, #24]	; (8008784 <prvPortStartFirstTask+0x1c>)
 800876a:	6800      	ldr	r0, [r0, #0]
 800876c:	6800      	ldr	r0, [r0, #0]
 800876e:	f380 8808 	msr	MSP, r0
 8008772:	b662      	cpsie	i
 8008774:	b661      	cpsie	f
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	df00      	svc	0
 8008780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008782:	bf00      	nop
 8008784:	e000ed08 	.word	0xe000ed08

08008788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800878e:	4b32      	ldr	r3, [pc, #200]	; (8008858 <xPortStartScheduler+0xd0>)
 8008790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	22ff      	movs	r2, #255	; 0xff
 800879e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	4b2a      	ldr	r3, [pc, #168]	; (800885c <xPortStartScheduler+0xd4>)
 80087b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087b6:	4b2a      	ldr	r3, [pc, #168]	; (8008860 <xPortStartScheduler+0xd8>)
 80087b8:	2207      	movs	r2, #7
 80087ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087bc:	e009      	b.n	80087d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087be:	4b28      	ldr	r3, [pc, #160]	; (8008860 <xPortStartScheduler+0xd8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	3b01      	subs	r3, #1
 80087c4:	4a26      	ldr	r2, [pc, #152]	; (8008860 <xPortStartScheduler+0xd8>)
 80087c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087da:	2b80      	cmp	r3, #128	; 0x80
 80087dc:	d0ef      	beq.n	80087be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087de:	4b20      	ldr	r3, [pc, #128]	; (8008860 <xPortStartScheduler+0xd8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1c3 0307 	rsb	r3, r3, #7
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d00a      	beq.n	8008800 <xPortStartScheduler+0x78>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	60bb      	str	r3, [r7, #8]
}
 80087fc:	bf00      	nop
 80087fe:	e7fe      	b.n	80087fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008800:	4b17      	ldr	r3, [pc, #92]	; (8008860 <xPortStartScheduler+0xd8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	021b      	lsls	r3, r3, #8
 8008806:	4a16      	ldr	r2, [pc, #88]	; (8008860 <xPortStartScheduler+0xd8>)
 8008808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800880a:	4b15      	ldr	r3, [pc, #84]	; (8008860 <xPortStartScheduler+0xd8>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008812:	4a13      	ldr	r2, [pc, #76]	; (8008860 <xPortStartScheduler+0xd8>)
 8008814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	b2da      	uxtb	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800881e:	4b11      	ldr	r3, [pc, #68]	; (8008864 <xPortStartScheduler+0xdc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a10      	ldr	r2, [pc, #64]	; (8008864 <xPortStartScheduler+0xdc>)
 8008824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800882a:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <xPortStartScheduler+0xdc>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a0d      	ldr	r2, [pc, #52]	; (8008864 <xPortStartScheduler+0xdc>)
 8008830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008836:	f000 f8b9 	bl	80089ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800883a:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <xPortStartScheduler+0xe0>)
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008840:	f7ff ff92 	bl	8008768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008844:	f7ff f8be 	bl	80079c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008848:	f7ff ff48 	bl	80086dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	e000e400 	.word	0xe000e400
 800885c:	20002af8 	.word	0x20002af8
 8008860:	20002afc 	.word	0x20002afc
 8008864:	e000ed20 	.word	0xe000ed20
 8008868:	20000018 	.word	0x20000018

0800886c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	607b      	str	r3, [r7, #4]
}
 8008884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <vPortEnterCritical+0x58>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3301      	adds	r3, #1
 800888c:	4a0d      	ldr	r2, [pc, #52]	; (80088c4 <vPortEnterCritical+0x58>)
 800888e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008890:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <vPortEnterCritical+0x58>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10f      	bne.n	80088b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <vPortEnterCritical+0x5c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	603b      	str	r3, [r7, #0]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <vPortEnterCritical+0x4a>
	}
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000018 	.word	0x20000018
 80088c8:	e000ed04 	.word	0xe000ed04

080088cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088d2:	4b11      	ldr	r3, [pc, #68]	; (8008918 <vPortExitCritical+0x4c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <vPortExitCritical+0x24>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	607b      	str	r3, [r7, #4]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088f0:	4b09      	ldr	r3, [pc, #36]	; (8008918 <vPortExitCritical+0x4c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	4a08      	ldr	r2, [pc, #32]	; (8008918 <vPortExitCritical+0x4c>)
 80088f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088fa:	4b07      	ldr	r3, [pc, #28]	; (8008918 <vPortExitCritical+0x4c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d105      	bne.n	800890e <vPortExitCritical+0x42>
 8008902:	2300      	movs	r3, #0
 8008904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f383 8811 	msr	BASEPRI, r3
}
 800890c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	bc80      	pop	{r7}
 8008916:	4770      	bx	lr
 8008918:	20000018 	.word	0x20000018
 800891c:	00000000 	.word	0x00000000

08008920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008920:	f3ef 8009 	mrs	r0, PSP
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <pxCurrentTCBConst>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008930:	6010      	str	r0, [r2, #0]
 8008932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800893a:	f380 8811 	msr	BASEPRI, r0
 800893e:	f7ff f841 	bl	80079c4 <vTaskSwitchContext>
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008956:	f380 8809 	msr	PSP, r0
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	4770      	bx	lr

08008960 <pxCurrentTCBConst>:
 8008960:	200024cc 	.word	0x200024cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
}
 8008980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008982:	f7fe ff61 	bl	8007848 <xTaskIncrementTick>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800898c:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <SysTick_Handler+0x40>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f383 8811 	msr	BASEPRI, r3
}
 800899e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089b0:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x30>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089b6:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <vPortSetupTimerInterrupt+0x34>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <vPortSetupTimerInterrupt+0x38>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <vPortSetupTimerInterrupt+0x3c>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	099b      	lsrs	r3, r3, #6
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <vPortSetupTimerInterrupt+0x40>)
 80089ca:	3b01      	subs	r3, #1
 80089cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ce:	4b03      	ldr	r3, [pc, #12]	; (80089dc <vPortSetupTimerInterrupt+0x30>)
 80089d0:	2207      	movs	r2, #7
 80089d2:	601a      	str	r2, [r3, #0]
}
 80089d4:	bf00      	nop
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bc80      	pop	{r7}
 80089da:	4770      	bx	lr
 80089dc:	e000e010 	.word	0xe000e010
 80089e0:	e000e018 	.word	0xe000e018
 80089e4:	2000000c 	.word	0x2000000c
 80089e8:	10624dd3 	.word	0x10624dd3
 80089ec:	e000e014 	.word	0xe000e014

080089f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089f6:	f3ef 8305 	mrs	r3, IPSR
 80089fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b0f      	cmp	r3, #15
 8008a00:	d914      	bls.n	8008a2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a02:	4a16      	ldr	r2, [pc, #88]	; (8008a5c <vPortValidateInterruptPriority+0x6c>)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a0c:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <vPortValidateInterruptPriority+0x70>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	7afa      	ldrb	r2, [r7, #11]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d20a      	bcs.n	8008a2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	607b      	str	r3, [r7, #4]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <vPortValidateInterruptPriority+0x74>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <vPortValidateInterruptPriority+0x78>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d90a      	bls.n	8008a52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	603b      	str	r3, [r7, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	e7fe      	b.n	8008a50 <vPortValidateInterruptPriority+0x60>
	}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	e000e3f0 	.word	0xe000e3f0
 8008a60:	20002af8 	.word	0x20002af8
 8008a64:	e000ed0c 	.word	0xe000ed0c
 8008a68:	20002afc 	.word	0x20002afc

08008a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	; 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a78:	f7fe fe2c 	bl	80076d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a7c:	4b58      	ldr	r3, [pc, #352]	; (8008be0 <pvPortMalloc+0x174>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a84:	f000 f910 	bl	8008ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a88:	4b56      	ldr	r3, [pc, #344]	; (8008be4 <pvPortMalloc+0x178>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 808e 	bne.w	8008bb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01d      	beq.n	8008ad8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d014      	beq.n	8008ad8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <pvPortMalloc+0x6c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	617b      	str	r3, [r7, #20]
}
 8008ad4:	bf00      	nop
 8008ad6:	e7fe      	b.n	8008ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d069      	beq.n	8008bb2 <pvPortMalloc+0x146>
 8008ade:	4b42      	ldr	r3, [pc, #264]	; (8008be8 <pvPortMalloc+0x17c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d864      	bhi.n	8008bb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ae8:	4b40      	ldr	r3, [pc, #256]	; (8008bec <pvPortMalloc+0x180>)
 8008aea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008aec:	4b3f      	ldr	r3, [pc, #252]	; (8008bec <pvPortMalloc+0x180>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af2:	e004      	b.n	8008afe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d903      	bls.n	8008b10 <pvPortMalloc+0xa4>
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1f1      	bne.n	8008af4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b10:	4b33      	ldr	r3, [pc, #204]	; (8008be0 <pvPortMalloc+0x174>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d04b      	beq.n	8008bb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2208      	movs	r2, #8
 8008b20:	4413      	add	r3, r2
 8008b22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	1ad2      	subs	r2, r2, r3
 8008b34:	2308      	movs	r3, #8
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d91f      	bls.n	8008b7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <pvPortMalloc+0xf8>
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	613b      	str	r3, [r7, #16]
}
 8008b60:	bf00      	nop
 8008b62:	e7fe      	b.n	8008b62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	1ad2      	subs	r2, r2, r3
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b76:	69b8      	ldr	r0, [r7, #24]
 8008b78:	f000 f8f8 	bl	8008d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <pvPortMalloc+0x17c>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	4a18      	ldr	r2, [pc, #96]	; (8008be8 <pvPortMalloc+0x17c>)
 8008b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b8a:	4b17      	ldr	r3, [pc, #92]	; (8008be8 <pvPortMalloc+0x17c>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	4b18      	ldr	r3, [pc, #96]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d203      	bcs.n	8008b9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <pvPortMalloc+0x17c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a15      	ldr	r2, [pc, #84]	; (8008bf0 <pvPortMalloc+0x184>)
 8008b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <pvPortMalloc+0x178>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bb2:	f7fe fd9d 	bl	80076f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <pvPortMalloc+0x16a>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	60fb      	str	r3, [r7, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <pvPortMalloc+0x168>
	return pvReturn;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3728      	adds	r7, #40	; 0x28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20003708 	.word	0x20003708
 8008be4:	20003714 	.word	0x20003714
 8008be8:	2000370c 	.word	0x2000370c
 8008bec:	20003700 	.word	0x20003700
 8008bf0:	20003710 	.word	0x20003710

08008bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d048      	beq.n	8008c98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c06:	2308      	movs	r3, #8
 8008c08:	425b      	negs	r3, r3
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	4b21      	ldr	r3, [pc, #132]	; (8008ca0 <vPortFree+0xac>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <vPortFree+0x44>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60fb      	str	r3, [r7, #12]
}
 8008c34:	bf00      	nop
 8008c36:	e7fe      	b.n	8008c36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <vPortFree+0x62>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60bb      	str	r3, [r7, #8]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <vPortFree+0xac>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d019      	beq.n	8008c98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d115      	bne.n	8008c98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <vPortFree+0xac>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	43db      	mvns	r3, r3
 8008c76:	401a      	ands	r2, r3
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c7c:	f7fe fd2a 	bl	80076d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <vPortFree+0xb0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4413      	add	r3, r2
 8008c8a:	4a06      	ldr	r2, [pc, #24]	; (8008ca4 <vPortFree+0xb0>)
 8008c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c8e:	6938      	ldr	r0, [r7, #16]
 8008c90:	f000 f86c 	bl	8008d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c94:	f7fe fd2c 	bl	80076f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c98:	bf00      	nop
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20003714 	.word	0x20003714
 8008ca4:	2000370c 	.word	0x2000370c

08008ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cb4:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <prvHeapInit+0xac>)
 8008cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0307 	and.w	r3, r3, #7
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00c      	beq.n	8008cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	3307      	adds	r3, #7
 8008cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0307 	bic.w	r3, r3, #7
 8008cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	4a1f      	ldr	r2, [pc, #124]	; (8008d54 <prvHeapInit+0xac>)
 8008cd8:	4413      	add	r3, r2
 8008cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ce0:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <prvHeapInit+0xb0>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ce6:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <prvHeapInit+0xb0>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0307 	bic.w	r3, r3, #7
 8008d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4a15      	ldr	r2, [pc, #84]	; (8008d5c <prvHeapInit+0xb4>)
 8008d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <prvHeapInit+0xb4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <prvHeapInit+0xb4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <prvHeapInit+0xb4>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4a0a      	ldr	r2, [pc, #40]	; (8008d60 <prvHeapInit+0xb8>)
 8008d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <prvHeapInit+0xbc>)
 8008d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <prvHeapInit+0xc0>)
 8008d42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d46:	601a      	str	r2, [r3, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20002b00 	.word	0x20002b00
 8008d58:	20003700 	.word	0x20003700
 8008d5c:	20003708 	.word	0x20003708
 8008d60:	20003710 	.word	0x20003710
 8008d64:	2000370c 	.word	0x2000370c
 8008d68:	20003714 	.word	0x20003714

08008d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d74:	4b27      	ldr	r3, [pc, #156]	; (8008e14 <prvInsertBlockIntoFreeList+0xa8>)
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	e002      	b.n	8008d80 <prvInsertBlockIntoFreeList+0x14>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d8f7      	bhi.n	8008d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d108      	bne.n	8008dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	441a      	add	r2, r3
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d118      	bne.n	8008df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <prvInsertBlockIntoFreeList+0xac>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d00d      	beq.n	8008dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	441a      	add	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	e008      	b.n	8008dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dea:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <prvInsertBlockIntoFreeList+0xac>)
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	e003      	b.n	8008dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d002      	beq.n	8008e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr
 8008e14:	20003700 	.word	0x20003700
 8008e18:	20003708 	.word	0x20003708

08008e1c <__errno>:
 8008e1c:	4b01      	ldr	r3, [pc, #4]	; (8008e24 <__errno+0x8>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000001c 	.word	0x2000001c

08008e28 <__libc_init_array>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	4d0c      	ldr	r5, [pc, #48]	; (8008e60 <__libc_init_array+0x38>)
 8008e2e:	4c0d      	ldr	r4, [pc, #52]	; (8008e64 <__libc_init_array+0x3c>)
 8008e30:	1b64      	subs	r4, r4, r5
 8008e32:	10a4      	asrs	r4, r4, #2
 8008e34:	42a6      	cmp	r6, r4
 8008e36:	d109      	bne.n	8008e4c <__libc_init_array+0x24>
 8008e38:	f004 fc5a 	bl	800d6f0 <_init>
 8008e3c:	2600      	movs	r6, #0
 8008e3e:	4d0a      	ldr	r5, [pc, #40]	; (8008e68 <__libc_init_array+0x40>)
 8008e40:	4c0a      	ldr	r4, [pc, #40]	; (8008e6c <__libc_init_array+0x44>)
 8008e42:	1b64      	subs	r4, r4, r5
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	42a6      	cmp	r6, r4
 8008e48:	d105      	bne.n	8008e56 <__libc_init_array+0x2e>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e50:	4798      	blx	r3
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7ee      	b.n	8008e34 <__libc_init_array+0xc>
 8008e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5a:	4798      	blx	r3
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	e7f2      	b.n	8008e46 <__libc_init_array+0x1e>
 8008e60:	0800ec24 	.word	0x0800ec24
 8008e64:	0800ec24 	.word	0x0800ec24
 8008e68:	0800ec24 	.word	0x0800ec24
 8008e6c:	0800ec28 	.word	0x0800ec28

08008e70 <memcpy>:
 8008e70:	440a      	add	r2, r1
 8008e72:	4291      	cmp	r1, r2
 8008e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e78:	d100      	bne.n	8008e7c <memcpy+0xc>
 8008e7a:	4770      	bx	lr
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e88:	d1f9      	bne.n	8008e7e <memcpy+0xe>
 8008e8a:	bd10      	pop	{r4, pc}

08008e8c <memset>:
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4402      	add	r2, r0
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d100      	bne.n	8008e96 <memset+0xa>
 8008e94:	4770      	bx	lr
 8008e96:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9a:	e7f9      	b.n	8008e90 <memset+0x4>

08008e9c <__cvt>:
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ea2:	461f      	mov	r7, r3
 8008ea4:	bfbb      	ittet	lt
 8008ea6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	461f      	movlt	r7, r3
 8008eac:	2300      	movge	r3, #0
 8008eae:	232d      	movlt	r3, #45	; 0x2d
 8008eb0:	b088      	sub	sp, #32
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008eb6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008eb8:	7013      	strb	r3, [r2, #0]
 8008eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ebc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008ec0:	f023 0820 	bic.w	r8, r3, #32
 8008ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ec8:	d005      	beq.n	8008ed6 <__cvt+0x3a>
 8008eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ece:	d100      	bne.n	8008ed2 <__cvt+0x36>
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e000      	b.n	8008ed8 <__cvt+0x3c>
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	aa07      	add	r2, sp, #28
 8008eda:	9204      	str	r2, [sp, #16]
 8008edc:	aa06      	add	r2, sp, #24
 8008ede:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008ee2:	e9cd 3500 	strd	r3, r5, [sp]
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	463b      	mov	r3, r7
 8008eea:	f001 fd8d 	bl	800aa08 <_dtoa_r>
 8008eee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	d102      	bne.n	8008efc <__cvt+0x60>
 8008ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef8:	07db      	lsls	r3, r3, #31
 8008efa:	d522      	bpl.n	8008f42 <__cvt+0xa6>
 8008efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f00:	eb06 0905 	add.w	r9, r6, r5
 8008f04:	d110      	bne.n	8008f28 <__cvt+0x8c>
 8008f06:	7833      	ldrb	r3, [r6, #0]
 8008f08:	2b30      	cmp	r3, #48	; 0x30
 8008f0a:	d10a      	bne.n	8008f22 <__cvt+0x86>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4620      	mov	r0, r4
 8008f12:	4639      	mov	r1, r7
 8008f14:	f7f7 fd52 	bl	80009bc <__aeabi_dcmpeq>
 8008f18:	b918      	cbnz	r0, 8008f22 <__cvt+0x86>
 8008f1a:	f1c5 0501 	rsb	r5, r5, #1
 8008f1e:	f8ca 5000 	str.w	r5, [sl]
 8008f22:	f8da 3000 	ldr.w	r3, [sl]
 8008f26:	4499      	add	r9, r3
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f7f7 fd44 	bl	80009bc <__aeabi_dcmpeq>
 8008f34:	b108      	cbz	r0, 8008f3a <__cvt+0x9e>
 8008f36:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f3a:	2230      	movs	r2, #48	; 0x30
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	454b      	cmp	r3, r9
 8008f40:	d307      	bcc.n	8008f52 <__cvt+0xb6>
 8008f42:	4630      	mov	r0, r6
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	b008      	add	sp, #32
 8008f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f52:	1c59      	adds	r1, r3, #1
 8008f54:	9107      	str	r1, [sp, #28]
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e7f0      	b.n	8008f3c <__cvt+0xa0>

08008f5a <__exponent>:
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	f803 2b02 	strb.w	r2, [r3], #2
 8008f64:	bfb6      	itet	lt
 8008f66:	222d      	movlt	r2, #45	; 0x2d
 8008f68:	222b      	movge	r2, #43	; 0x2b
 8008f6a:	4249      	neglt	r1, r1
 8008f6c:	2909      	cmp	r1, #9
 8008f6e:	7042      	strb	r2, [r0, #1]
 8008f70:	dd2b      	ble.n	8008fca <__exponent+0x70>
 8008f72:	f10d 0407 	add.w	r4, sp, #7
 8008f76:	46a4      	mov	ip, r4
 8008f78:	270a      	movs	r7, #10
 8008f7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f7e:	460a      	mov	r2, r1
 8008f80:	46a6      	mov	lr, r4
 8008f82:	fb07 1516 	mls	r5, r7, r6, r1
 8008f86:	2a63      	cmp	r2, #99	; 0x63
 8008f88:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f96:	dcf0      	bgt.n	8008f7a <__exponent+0x20>
 8008f98:	3130      	adds	r1, #48	; 0x30
 8008f9a:	f1ae 0502 	sub.w	r5, lr, #2
 8008f9e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	1c44      	adds	r4, r0, #1
 8008fa6:	4561      	cmp	r1, ip
 8008fa8:	d30a      	bcc.n	8008fc0 <__exponent+0x66>
 8008faa:	f10d 0209 	add.w	r2, sp, #9
 8008fae:	eba2 020e 	sub.w	r2, r2, lr
 8008fb2:	4565      	cmp	r5, ip
 8008fb4:	bf88      	it	hi
 8008fb6:	2200      	movhi	r2, #0
 8008fb8:	4413      	add	r3, r2
 8008fba:	1a18      	subs	r0, r3, r0
 8008fbc:	b003      	add	sp, #12
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fc8:	e7ed      	b.n	8008fa6 <__exponent+0x4c>
 8008fca:	2330      	movs	r3, #48	; 0x30
 8008fcc:	3130      	adds	r1, #48	; 0x30
 8008fce:	7083      	strb	r3, [r0, #2]
 8008fd0:	70c1      	strb	r1, [r0, #3]
 8008fd2:	1d03      	adds	r3, r0, #4
 8008fd4:	e7f1      	b.n	8008fba <__exponent+0x60>
	...

08008fd8 <_printf_float>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	b091      	sub	sp, #68	; 0x44
 8008fde:	460c      	mov	r4, r1
 8008fe0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	461f      	mov	r7, r3
 8008fe8:	4605      	mov	r5, r0
 8008fea:	f002 fe61 	bl	800bcb0 <_localeconv_r>
 8008fee:	6803      	ldr	r3, [r0, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff4:	f7f7 f8b6 	bl	8000164 <strlen>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8008ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8009000:	900a      	str	r0, [sp, #40]	; 0x28
 8009002:	3307      	adds	r3, #7
 8009004:	f023 0307 	bic.w	r3, r3, #7
 8009008:	f103 0208 	add.w	r2, r3, #8
 800900c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009010:	f8d4 b000 	ldr.w	fp, [r4]
 8009014:	f8c8 2000 	str.w	r2, [r8]
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009020:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009024:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009028:	930b      	str	r3, [sp, #44]	; 0x2c
 800902a:	f04f 32ff 	mov.w	r2, #4294967295
 800902e:	4640      	mov	r0, r8
 8009030:	4b9c      	ldr	r3, [pc, #624]	; (80092a4 <_printf_float+0x2cc>)
 8009032:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009034:	f7f7 fcf4 	bl	8000a20 <__aeabi_dcmpun>
 8009038:	bb70      	cbnz	r0, 8009098 <_printf_float+0xc0>
 800903a:	f04f 32ff 	mov.w	r2, #4294967295
 800903e:	4640      	mov	r0, r8
 8009040:	4b98      	ldr	r3, [pc, #608]	; (80092a4 <_printf_float+0x2cc>)
 8009042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009044:	f7f7 fcce 	bl	80009e4 <__aeabi_dcmple>
 8009048:	bb30      	cbnz	r0, 8009098 <_printf_float+0xc0>
 800904a:	2200      	movs	r2, #0
 800904c:	2300      	movs	r3, #0
 800904e:	4640      	mov	r0, r8
 8009050:	4651      	mov	r1, sl
 8009052:	f7f7 fcbd 	bl	80009d0 <__aeabi_dcmplt>
 8009056:	b110      	cbz	r0, 800905e <_printf_float+0x86>
 8009058:	232d      	movs	r3, #45	; 0x2d
 800905a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800905e:	4b92      	ldr	r3, [pc, #584]	; (80092a8 <_printf_float+0x2d0>)
 8009060:	4892      	ldr	r0, [pc, #584]	; (80092ac <_printf_float+0x2d4>)
 8009062:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009066:	bf94      	ite	ls
 8009068:	4698      	movls	r8, r3
 800906a:	4680      	movhi	r8, r0
 800906c:	2303      	movs	r3, #3
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	f02b 0304 	bic.w	r3, fp, #4
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	4633      	mov	r3, r6
 800907c:	4621      	mov	r1, r4
 800907e:	4628      	mov	r0, r5
 8009080:	9700      	str	r7, [sp, #0]
 8009082:	aa0f      	add	r2, sp, #60	; 0x3c
 8009084:	f000 f9d4 	bl	8009430 <_printf_common>
 8009088:	3001      	adds	r0, #1
 800908a:	f040 8090 	bne.w	80091ae <_printf_float+0x1d6>
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	b011      	add	sp, #68	; 0x44
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	4642      	mov	r2, r8
 800909a:	4653      	mov	r3, sl
 800909c:	4640      	mov	r0, r8
 800909e:	4651      	mov	r1, sl
 80090a0:	f7f7 fcbe 	bl	8000a20 <__aeabi_dcmpun>
 80090a4:	b148      	cbz	r0, 80090ba <_printf_float+0xe2>
 80090a6:	f1ba 0f00 	cmp.w	sl, #0
 80090aa:	bfb8      	it	lt
 80090ac:	232d      	movlt	r3, #45	; 0x2d
 80090ae:	4880      	ldr	r0, [pc, #512]	; (80092b0 <_printf_float+0x2d8>)
 80090b0:	bfb8      	it	lt
 80090b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090b6:	4b7f      	ldr	r3, [pc, #508]	; (80092b4 <_printf_float+0x2dc>)
 80090b8:	e7d3      	b.n	8009062 <_printf_float+0x8a>
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	d142      	bne.n	800914a <_printf_float+0x172>
 80090c4:	2306      	movs	r3, #6
 80090c6:	6063      	str	r3, [r4, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	9206      	str	r2, [sp, #24]
 80090cc:	aa0e      	add	r2, sp, #56	; 0x38
 80090ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80090d2:	aa0d      	add	r2, sp, #52	; 0x34
 80090d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80090d8:	9203      	str	r2, [sp, #12]
 80090da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80090de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80090e2:	6023      	str	r3, [r4, #0]
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	4642      	mov	r2, r8
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4628      	mov	r0, r5
 80090ec:	4653      	mov	r3, sl
 80090ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80090f0:	f7ff fed4 	bl	8008e9c <__cvt>
 80090f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090f6:	4680      	mov	r8, r0
 80090f8:	2947      	cmp	r1, #71	; 0x47
 80090fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80090fc:	d108      	bne.n	8009110 <_printf_float+0x138>
 80090fe:	1cc8      	adds	r0, r1, #3
 8009100:	db02      	blt.n	8009108 <_printf_float+0x130>
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	4299      	cmp	r1, r3
 8009106:	dd40      	ble.n	800918a <_printf_float+0x1b2>
 8009108:	f1a9 0902 	sub.w	r9, r9, #2
 800910c:	fa5f f989 	uxtb.w	r9, r9
 8009110:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009114:	d81f      	bhi.n	8009156 <_printf_float+0x17e>
 8009116:	464a      	mov	r2, r9
 8009118:	3901      	subs	r1, #1
 800911a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800911e:	910d      	str	r1, [sp, #52]	; 0x34
 8009120:	f7ff ff1b 	bl	8008f5a <__exponent>
 8009124:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009126:	4682      	mov	sl, r0
 8009128:	1813      	adds	r3, r2, r0
 800912a:	2a01      	cmp	r2, #1
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	dc02      	bgt.n	8009136 <_printf_float+0x15e>
 8009130:	6822      	ldr	r2, [r4, #0]
 8009132:	07d2      	lsls	r2, r2, #31
 8009134:	d501      	bpl.n	800913a <_printf_float+0x162>
 8009136:	3301      	adds	r3, #1
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800913e:	2b00      	cmp	r3, #0
 8009140:	d09b      	beq.n	800907a <_printf_float+0xa2>
 8009142:	232d      	movs	r3, #45	; 0x2d
 8009144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009148:	e797      	b.n	800907a <_printf_float+0xa2>
 800914a:	2947      	cmp	r1, #71	; 0x47
 800914c:	d1bc      	bne.n	80090c8 <_printf_float+0xf0>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ba      	bne.n	80090c8 <_printf_float+0xf0>
 8009152:	2301      	movs	r3, #1
 8009154:	e7b7      	b.n	80090c6 <_printf_float+0xee>
 8009156:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800915a:	d118      	bne.n	800918e <_printf_float+0x1b6>
 800915c:	2900      	cmp	r1, #0
 800915e:	6863      	ldr	r3, [r4, #4]
 8009160:	dd0b      	ble.n	800917a <_printf_float+0x1a2>
 8009162:	6121      	str	r1, [r4, #16]
 8009164:	b913      	cbnz	r3, 800916c <_printf_float+0x194>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	07d0      	lsls	r0, r2, #31
 800916a:	d502      	bpl.n	8009172 <_printf_float+0x19a>
 800916c:	3301      	adds	r3, #1
 800916e:	440b      	add	r3, r1
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	f04f 0a00 	mov.w	sl, #0
 8009176:	65a1      	str	r1, [r4, #88]	; 0x58
 8009178:	e7df      	b.n	800913a <_printf_float+0x162>
 800917a:	b913      	cbnz	r3, 8009182 <_printf_float+0x1aa>
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	07d2      	lsls	r2, r2, #31
 8009180:	d501      	bpl.n	8009186 <_printf_float+0x1ae>
 8009182:	3302      	adds	r3, #2
 8009184:	e7f4      	b.n	8009170 <_printf_float+0x198>
 8009186:	2301      	movs	r3, #1
 8009188:	e7f2      	b.n	8009170 <_printf_float+0x198>
 800918a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800918e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009190:	4299      	cmp	r1, r3
 8009192:	db05      	blt.n	80091a0 <_printf_float+0x1c8>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	6121      	str	r1, [r4, #16]
 8009198:	07d8      	lsls	r0, r3, #31
 800919a:	d5ea      	bpl.n	8009172 <_printf_float+0x19a>
 800919c:	1c4b      	adds	r3, r1, #1
 800919e:	e7e7      	b.n	8009170 <_printf_float+0x198>
 80091a0:	2900      	cmp	r1, #0
 80091a2:	bfcc      	ite	gt
 80091a4:	2201      	movgt	r2, #1
 80091a6:	f1c1 0202 	rsble	r2, r1, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	e7e0      	b.n	8009170 <_printf_float+0x198>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	055a      	lsls	r2, r3, #21
 80091b2:	d407      	bmi.n	80091c4 <_printf_float+0x1ec>
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	4642      	mov	r2, r8
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	d12b      	bne.n	800921a <_printf_float+0x242>
 80091c2:	e764      	b.n	800908e <_printf_float+0xb6>
 80091c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80091c8:	f240 80dd 	bls.w	8009386 <_printf_float+0x3ae>
 80091cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	f7f7 fbf2 	bl	80009bc <__aeabi_dcmpeq>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d033      	beq.n	8009244 <_printf_float+0x26c>
 80091dc:	2301      	movs	r3, #1
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	4a35      	ldr	r2, [pc, #212]	; (80092b8 <_printf_float+0x2e0>)
 80091e4:	47b8      	blx	r7
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f af51 	beq.w	800908e <_printf_float+0xb6>
 80091ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80091f0:	429a      	cmp	r2, r3
 80091f2:	db02      	blt.n	80091fa <_printf_float+0x222>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07d8      	lsls	r0, r3, #31
 80091f8:	d50f      	bpl.n	800921a <_printf_float+0x242>
 80091fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091fe:	4631      	mov	r1, r6
 8009200:	4628      	mov	r0, r5
 8009202:	47b8      	blx	r7
 8009204:	3001      	adds	r0, #1
 8009206:	f43f af42 	beq.w	800908e <_printf_float+0xb6>
 800920a:	f04f 0800 	mov.w	r8, #0
 800920e:	f104 091a 	add.w	r9, r4, #26
 8009212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009214:	3b01      	subs	r3, #1
 8009216:	4543      	cmp	r3, r8
 8009218:	dc09      	bgt.n	800922e <_printf_float+0x256>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	079b      	lsls	r3, r3, #30
 800921e:	f100 8102 	bmi.w	8009426 <_printf_float+0x44e>
 8009222:	68e0      	ldr	r0, [r4, #12]
 8009224:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009226:	4298      	cmp	r0, r3
 8009228:	bfb8      	it	lt
 800922a:	4618      	movlt	r0, r3
 800922c:	e731      	b.n	8009092 <_printf_float+0xba>
 800922e:	2301      	movs	r3, #1
 8009230:	464a      	mov	r2, r9
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f af28 	beq.w	800908e <_printf_float+0xb6>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	e7e6      	b.n	8009212 <_printf_float+0x23a>
 8009244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009246:	2b00      	cmp	r3, #0
 8009248:	dc38      	bgt.n	80092bc <_printf_float+0x2e4>
 800924a:	2301      	movs	r3, #1
 800924c:	4631      	mov	r1, r6
 800924e:	4628      	mov	r0, r5
 8009250:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <_printf_float+0x2e0>)
 8009252:	47b8      	blx	r7
 8009254:	3001      	adds	r0, #1
 8009256:	f43f af1a 	beq.w	800908e <_printf_float+0xb6>
 800925a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800925e:	4313      	orrs	r3, r2
 8009260:	d102      	bne.n	8009268 <_printf_float+0x290>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	07d9      	lsls	r1, r3, #31
 8009266:	d5d8      	bpl.n	800921a <_printf_float+0x242>
 8009268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	47b8      	blx	r7
 8009272:	3001      	adds	r0, #1
 8009274:	f43f af0b 	beq.w	800908e <_printf_float+0xb6>
 8009278:	f04f 0900 	mov.w	r9, #0
 800927c:	f104 0a1a 	add.w	sl, r4, #26
 8009280:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009282:	425b      	negs	r3, r3
 8009284:	454b      	cmp	r3, r9
 8009286:	dc01      	bgt.n	800928c <_printf_float+0x2b4>
 8009288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800928a:	e794      	b.n	80091b6 <_printf_float+0x1de>
 800928c:	2301      	movs	r3, #1
 800928e:	4652      	mov	r2, sl
 8009290:	4631      	mov	r1, r6
 8009292:	4628      	mov	r0, r5
 8009294:	47b8      	blx	r7
 8009296:	3001      	adds	r0, #1
 8009298:	f43f aef9 	beq.w	800908e <_printf_float+0xb6>
 800929c:	f109 0901 	add.w	r9, r9, #1
 80092a0:	e7ee      	b.n	8009280 <_printf_float+0x2a8>
 80092a2:	bf00      	nop
 80092a4:	7fefffff 	.word	0x7fefffff
 80092a8:	0800e784 	.word	0x0800e784
 80092ac:	0800e788 	.word	0x0800e788
 80092b0:	0800e790 	.word	0x0800e790
 80092b4:	0800e78c 	.word	0x0800e78c
 80092b8:	0800e794 	.word	0x0800e794
 80092bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092c0:	429a      	cmp	r2, r3
 80092c2:	bfa8      	it	ge
 80092c4:	461a      	movge	r2, r3
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	4691      	mov	r9, r2
 80092ca:	dc37      	bgt.n	800933c <_printf_float+0x364>
 80092cc:	f04f 0b00 	mov.w	fp, #0
 80092d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092d4:	f104 021a 	add.w	r2, r4, #26
 80092d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80092dc:	ebaa 0309 	sub.w	r3, sl, r9
 80092e0:	455b      	cmp	r3, fp
 80092e2:	dc33      	bgt.n	800934c <_printf_float+0x374>
 80092e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092e8:	429a      	cmp	r2, r3
 80092ea:	db3b      	blt.n	8009364 <_printf_float+0x38c>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	07da      	lsls	r2, r3, #31
 80092f0:	d438      	bmi.n	8009364 <_printf_float+0x38c>
 80092f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092f6:	eba3 020a 	sub.w	r2, r3, sl
 80092fa:	eba3 0901 	sub.w	r9, r3, r1
 80092fe:	4591      	cmp	r9, r2
 8009300:	bfa8      	it	ge
 8009302:	4691      	movge	r9, r2
 8009304:	f1b9 0f00 	cmp.w	r9, #0
 8009308:	dc34      	bgt.n	8009374 <_printf_float+0x39c>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009312:	f104 0a1a 	add.w	sl, r4, #26
 8009316:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800931a:	1a9b      	subs	r3, r3, r2
 800931c:	eba3 0309 	sub.w	r3, r3, r9
 8009320:	4543      	cmp	r3, r8
 8009322:	f77f af7a 	ble.w	800921a <_printf_float+0x242>
 8009326:	2301      	movs	r3, #1
 8009328:	4652      	mov	r2, sl
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	f43f aeac 	beq.w	800908e <_printf_float+0xb6>
 8009336:	f108 0801 	add.w	r8, r8, #1
 800933a:	e7ec      	b.n	8009316 <_printf_float+0x33e>
 800933c:	4613      	mov	r3, r2
 800933e:	4631      	mov	r1, r6
 8009340:	4642      	mov	r2, r8
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	d1c0      	bne.n	80092cc <_printf_float+0x2f4>
 800934a:	e6a0      	b.n	800908e <_printf_float+0xb6>
 800934c:	2301      	movs	r3, #1
 800934e:	4631      	mov	r1, r6
 8009350:	4628      	mov	r0, r5
 8009352:	920b      	str	r2, [sp, #44]	; 0x2c
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	f43f ae99 	beq.w	800908e <_printf_float+0xb6>
 800935c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800935e:	f10b 0b01 	add.w	fp, fp, #1
 8009362:	e7b9      	b.n	80092d8 <_printf_float+0x300>
 8009364:	4631      	mov	r1, r6
 8009366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	d1bf      	bne.n	80092f2 <_printf_float+0x31a>
 8009372:	e68c      	b.n	800908e <_printf_float+0xb6>
 8009374:	464b      	mov	r3, r9
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	eb08 020a 	add.w	r2, r8, sl
 800937e:	47b8      	blx	r7
 8009380:	3001      	adds	r0, #1
 8009382:	d1c2      	bne.n	800930a <_printf_float+0x332>
 8009384:	e683      	b.n	800908e <_printf_float+0xb6>
 8009386:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009388:	2a01      	cmp	r2, #1
 800938a:	dc01      	bgt.n	8009390 <_printf_float+0x3b8>
 800938c:	07db      	lsls	r3, r3, #31
 800938e:	d537      	bpl.n	8009400 <_printf_float+0x428>
 8009390:	2301      	movs	r3, #1
 8009392:	4642      	mov	r2, r8
 8009394:	4631      	mov	r1, r6
 8009396:	4628      	mov	r0, r5
 8009398:	47b8      	blx	r7
 800939a:	3001      	adds	r0, #1
 800939c:	f43f ae77 	beq.w	800908e <_printf_float+0xb6>
 80093a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f ae6f 	beq.w	800908e <_printf_float+0xb6>
 80093b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093b4:	2200      	movs	r2, #0
 80093b6:	2300      	movs	r3, #0
 80093b8:	f7f7 fb00 	bl	80009bc <__aeabi_dcmpeq>
 80093bc:	b9d8      	cbnz	r0, 80093f6 <_printf_float+0x41e>
 80093be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c0:	f108 0201 	add.w	r2, r8, #1
 80093c4:	3b01      	subs	r3, #1
 80093c6:	4631      	mov	r1, r6
 80093c8:	4628      	mov	r0, r5
 80093ca:	47b8      	blx	r7
 80093cc:	3001      	adds	r0, #1
 80093ce:	d10e      	bne.n	80093ee <_printf_float+0x416>
 80093d0:	e65d      	b.n	800908e <_printf_float+0xb6>
 80093d2:	2301      	movs	r3, #1
 80093d4:	464a      	mov	r2, r9
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	f43f ae56 	beq.w	800908e <_printf_float+0xb6>
 80093e2:	f108 0801 	add.w	r8, r8, #1
 80093e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4543      	cmp	r3, r8
 80093ec:	dcf1      	bgt.n	80093d2 <_printf_float+0x3fa>
 80093ee:	4653      	mov	r3, sl
 80093f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093f4:	e6e0      	b.n	80091b8 <_printf_float+0x1e0>
 80093f6:	f04f 0800 	mov.w	r8, #0
 80093fa:	f104 091a 	add.w	r9, r4, #26
 80093fe:	e7f2      	b.n	80093e6 <_printf_float+0x40e>
 8009400:	2301      	movs	r3, #1
 8009402:	4642      	mov	r2, r8
 8009404:	e7df      	b.n	80093c6 <_printf_float+0x3ee>
 8009406:	2301      	movs	r3, #1
 8009408:	464a      	mov	r2, r9
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	f43f ae3c 	beq.w	800908e <_printf_float+0xb6>
 8009416:	f108 0801 	add.w	r8, r8, #1
 800941a:	68e3      	ldr	r3, [r4, #12]
 800941c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800941e:	1a5b      	subs	r3, r3, r1
 8009420:	4543      	cmp	r3, r8
 8009422:	dcf0      	bgt.n	8009406 <_printf_float+0x42e>
 8009424:	e6fd      	b.n	8009222 <_printf_float+0x24a>
 8009426:	f04f 0800 	mov.w	r8, #0
 800942a:	f104 0919 	add.w	r9, r4, #25
 800942e:	e7f4      	b.n	800941a <_printf_float+0x442>

08009430 <_printf_common>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	4699      	mov	r9, r3
 8009438:	688a      	ldr	r2, [r1, #8]
 800943a:	690b      	ldr	r3, [r1, #16]
 800943c:	4607      	mov	r7, r0
 800943e:	4293      	cmp	r3, r2
 8009440:	bfb8      	it	lt
 8009442:	4613      	movlt	r3, r2
 8009444:	6033      	str	r3, [r6, #0]
 8009446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944a:	460c      	mov	r4, r1
 800944c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009450:	b10a      	cbz	r2, 8009456 <_printf_common+0x26>
 8009452:	3301      	adds	r3, #1
 8009454:	6033      	str	r3, [r6, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	6833      	ldrmi	r3, [r6, #0]
 800945e:	3302      	addmi	r3, #2
 8009460:	6033      	strmi	r3, [r6, #0]
 8009462:	6825      	ldr	r5, [r4, #0]
 8009464:	f015 0506 	ands.w	r5, r5, #6
 8009468:	d106      	bne.n	8009478 <_printf_common+0x48>
 800946a:	f104 0a19 	add.w	sl, r4, #25
 800946e:	68e3      	ldr	r3, [r4, #12]
 8009470:	6832      	ldr	r2, [r6, #0]
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc28      	bgt.n	80094ca <_printf_common+0x9a>
 8009478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800947c:	1e13      	subs	r3, r2, #0
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	2301      	movne	r3, #1
 8009484:	0692      	lsls	r2, r2, #26
 8009486:	d42d      	bmi.n	80094e4 <_printf_common+0xb4>
 8009488:	4649      	mov	r1, r9
 800948a:	4638      	mov	r0, r7
 800948c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009490:	47c0      	blx	r8
 8009492:	3001      	adds	r0, #1
 8009494:	d020      	beq.n	80094d8 <_printf_common+0xa8>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	68e5      	ldr	r5, [r4, #12]
 800949a:	f003 0306 	and.w	r3, r3, #6
 800949e:	2b04      	cmp	r3, #4
 80094a0:	bf18      	it	ne
 80094a2:	2500      	movne	r5, #0
 80094a4:	6832      	ldr	r2, [r6, #0]
 80094a6:	f04f 0600 	mov.w	r6, #0
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	bf08      	it	eq
 80094ae:	1aad      	subeq	r5, r5, r2
 80094b0:	6922      	ldr	r2, [r4, #16]
 80094b2:	bf08      	it	eq
 80094b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bfc4      	itt	gt
 80094bc:	1a9b      	subgt	r3, r3, r2
 80094be:	18ed      	addgt	r5, r5, r3
 80094c0:	341a      	adds	r4, #26
 80094c2:	42b5      	cmp	r5, r6
 80094c4:	d11a      	bne.n	80094fc <_printf_common+0xcc>
 80094c6:	2000      	movs	r0, #0
 80094c8:	e008      	b.n	80094dc <_printf_common+0xac>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4652      	mov	r2, sl
 80094ce:	4649      	mov	r1, r9
 80094d0:	4638      	mov	r0, r7
 80094d2:	47c0      	blx	r8
 80094d4:	3001      	adds	r0, #1
 80094d6:	d103      	bne.n	80094e0 <_printf_common+0xb0>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	3501      	adds	r5, #1
 80094e2:	e7c4      	b.n	800946e <_printf_common+0x3e>
 80094e4:	2030      	movs	r0, #48	; 0x30
 80094e6:	18e1      	adds	r1, r4, r3
 80094e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f2:	4422      	add	r2, r4
 80094f4:	3302      	adds	r3, #2
 80094f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094fa:	e7c5      	b.n	8009488 <_printf_common+0x58>
 80094fc:	2301      	movs	r3, #1
 80094fe:	4622      	mov	r2, r4
 8009500:	4649      	mov	r1, r9
 8009502:	4638      	mov	r0, r7
 8009504:	47c0      	blx	r8
 8009506:	3001      	adds	r0, #1
 8009508:	d0e6      	beq.n	80094d8 <_printf_common+0xa8>
 800950a:	3601      	adds	r6, #1
 800950c:	e7d9      	b.n	80094c2 <_printf_common+0x92>
	...

08009510 <_printf_i>:
 8009510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	7e0f      	ldrb	r7, [r1, #24]
 8009516:	4691      	mov	r9, r2
 8009518:	2f78      	cmp	r7, #120	; 0x78
 800951a:	4680      	mov	r8, r0
 800951c:	460c      	mov	r4, r1
 800951e:	469a      	mov	sl, r3
 8009520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009526:	d807      	bhi.n	8009538 <_printf_i+0x28>
 8009528:	2f62      	cmp	r7, #98	; 0x62
 800952a:	d80a      	bhi.n	8009542 <_printf_i+0x32>
 800952c:	2f00      	cmp	r7, #0
 800952e:	f000 80d9 	beq.w	80096e4 <_printf_i+0x1d4>
 8009532:	2f58      	cmp	r7, #88	; 0x58
 8009534:	f000 80a4 	beq.w	8009680 <_printf_i+0x170>
 8009538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800953c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009540:	e03a      	b.n	80095b8 <_printf_i+0xa8>
 8009542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009546:	2b15      	cmp	r3, #21
 8009548:	d8f6      	bhi.n	8009538 <_printf_i+0x28>
 800954a:	a101      	add	r1, pc, #4	; (adr r1, 8009550 <_printf_i+0x40>)
 800954c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009550:	080095a9 	.word	0x080095a9
 8009554:	080095bd 	.word	0x080095bd
 8009558:	08009539 	.word	0x08009539
 800955c:	08009539 	.word	0x08009539
 8009560:	08009539 	.word	0x08009539
 8009564:	08009539 	.word	0x08009539
 8009568:	080095bd 	.word	0x080095bd
 800956c:	08009539 	.word	0x08009539
 8009570:	08009539 	.word	0x08009539
 8009574:	08009539 	.word	0x08009539
 8009578:	08009539 	.word	0x08009539
 800957c:	080096cb 	.word	0x080096cb
 8009580:	080095ed 	.word	0x080095ed
 8009584:	080096ad 	.word	0x080096ad
 8009588:	08009539 	.word	0x08009539
 800958c:	08009539 	.word	0x08009539
 8009590:	080096ed 	.word	0x080096ed
 8009594:	08009539 	.word	0x08009539
 8009598:	080095ed 	.word	0x080095ed
 800959c:	08009539 	.word	0x08009539
 80095a0:	08009539 	.word	0x08009539
 80095a4:	080096b5 	.word	0x080096b5
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	602a      	str	r2, [r5, #0]
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b8:	2301      	movs	r3, #1
 80095ba:	e0a4      	b.n	8009706 <_printf_i+0x1f6>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	6829      	ldr	r1, [r5, #0]
 80095c0:	0606      	lsls	r6, r0, #24
 80095c2:	f101 0304 	add.w	r3, r1, #4
 80095c6:	d50a      	bpl.n	80095de <_printf_i+0xce>
 80095c8:	680e      	ldr	r6, [r1, #0]
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	2e00      	cmp	r6, #0
 80095ce:	da03      	bge.n	80095d8 <_printf_i+0xc8>
 80095d0:	232d      	movs	r3, #45	; 0x2d
 80095d2:	4276      	negs	r6, r6
 80095d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095d8:	230a      	movs	r3, #10
 80095da:	485e      	ldr	r0, [pc, #376]	; (8009754 <_printf_i+0x244>)
 80095dc:	e019      	b.n	8009612 <_printf_i+0x102>
 80095de:	680e      	ldr	r6, [r1, #0]
 80095e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	bf18      	it	ne
 80095e8:	b236      	sxthne	r6, r6
 80095ea:	e7ef      	b.n	80095cc <_printf_i+0xbc>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	6820      	ldr	r0, [r4, #0]
 80095f0:	1d19      	adds	r1, r3, #4
 80095f2:	6029      	str	r1, [r5, #0]
 80095f4:	0601      	lsls	r1, r0, #24
 80095f6:	d501      	bpl.n	80095fc <_printf_i+0xec>
 80095f8:	681e      	ldr	r6, [r3, #0]
 80095fa:	e002      	b.n	8009602 <_printf_i+0xf2>
 80095fc:	0646      	lsls	r6, r0, #25
 80095fe:	d5fb      	bpl.n	80095f8 <_printf_i+0xe8>
 8009600:	881e      	ldrh	r6, [r3, #0]
 8009602:	2f6f      	cmp	r7, #111	; 0x6f
 8009604:	bf0c      	ite	eq
 8009606:	2308      	moveq	r3, #8
 8009608:	230a      	movne	r3, #10
 800960a:	4852      	ldr	r0, [pc, #328]	; (8009754 <_printf_i+0x244>)
 800960c:	2100      	movs	r1, #0
 800960e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009612:	6865      	ldr	r5, [r4, #4]
 8009614:	2d00      	cmp	r5, #0
 8009616:	bfa8      	it	ge
 8009618:	6821      	ldrge	r1, [r4, #0]
 800961a:	60a5      	str	r5, [r4, #8]
 800961c:	bfa4      	itt	ge
 800961e:	f021 0104 	bicge.w	r1, r1, #4
 8009622:	6021      	strge	r1, [r4, #0]
 8009624:	b90e      	cbnz	r6, 800962a <_printf_i+0x11a>
 8009626:	2d00      	cmp	r5, #0
 8009628:	d04d      	beq.n	80096c6 <_printf_i+0x1b6>
 800962a:	4615      	mov	r5, r2
 800962c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009630:	fb03 6711 	mls	r7, r3, r1, r6
 8009634:	5dc7      	ldrb	r7, [r0, r7]
 8009636:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800963a:	4637      	mov	r7, r6
 800963c:	42bb      	cmp	r3, r7
 800963e:	460e      	mov	r6, r1
 8009640:	d9f4      	bls.n	800962c <_printf_i+0x11c>
 8009642:	2b08      	cmp	r3, #8
 8009644:	d10b      	bne.n	800965e <_printf_i+0x14e>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	07de      	lsls	r6, r3, #31
 800964a:	d508      	bpl.n	800965e <_printf_i+0x14e>
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	6861      	ldr	r1, [r4, #4]
 8009650:	4299      	cmp	r1, r3
 8009652:	bfde      	ittt	le
 8009654:	2330      	movle	r3, #48	; 0x30
 8009656:	f805 3c01 	strble.w	r3, [r5, #-1]
 800965a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800965e:	1b52      	subs	r2, r2, r5
 8009660:	6122      	str	r2, [r4, #16]
 8009662:	464b      	mov	r3, r9
 8009664:	4621      	mov	r1, r4
 8009666:	4640      	mov	r0, r8
 8009668:	f8cd a000 	str.w	sl, [sp]
 800966c:	aa03      	add	r2, sp, #12
 800966e:	f7ff fedf 	bl	8009430 <_printf_common>
 8009672:	3001      	adds	r0, #1
 8009674:	d14c      	bne.n	8009710 <_printf_i+0x200>
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	b004      	add	sp, #16
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	4834      	ldr	r0, [pc, #208]	; (8009754 <_printf_i+0x244>)
 8009682:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009686:	6829      	ldr	r1, [r5, #0]
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	f851 6b04 	ldr.w	r6, [r1], #4
 800968e:	6029      	str	r1, [r5, #0]
 8009690:	061d      	lsls	r5, r3, #24
 8009692:	d514      	bpl.n	80096be <_printf_i+0x1ae>
 8009694:	07df      	lsls	r7, r3, #31
 8009696:	bf44      	itt	mi
 8009698:	f043 0320 	orrmi.w	r3, r3, #32
 800969c:	6023      	strmi	r3, [r4, #0]
 800969e:	b91e      	cbnz	r6, 80096a8 <_printf_i+0x198>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	f023 0320 	bic.w	r3, r3, #32
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	2310      	movs	r3, #16
 80096aa:	e7af      	b.n	800960c <_printf_i+0xfc>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	f043 0320 	orr.w	r3, r3, #32
 80096b2:	6023      	str	r3, [r4, #0]
 80096b4:	2378      	movs	r3, #120	; 0x78
 80096b6:	4828      	ldr	r0, [pc, #160]	; (8009758 <_printf_i+0x248>)
 80096b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096bc:	e7e3      	b.n	8009686 <_printf_i+0x176>
 80096be:	0659      	lsls	r1, r3, #25
 80096c0:	bf48      	it	mi
 80096c2:	b2b6      	uxthmi	r6, r6
 80096c4:	e7e6      	b.n	8009694 <_printf_i+0x184>
 80096c6:	4615      	mov	r5, r2
 80096c8:	e7bb      	b.n	8009642 <_printf_i+0x132>
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	6826      	ldr	r6, [r4, #0]
 80096ce:	1d18      	adds	r0, r3, #4
 80096d0:	6961      	ldr	r1, [r4, #20]
 80096d2:	6028      	str	r0, [r5, #0]
 80096d4:	0635      	lsls	r5, r6, #24
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	d501      	bpl.n	80096de <_printf_i+0x1ce>
 80096da:	6019      	str	r1, [r3, #0]
 80096dc:	e002      	b.n	80096e4 <_printf_i+0x1d4>
 80096de:	0670      	lsls	r0, r6, #25
 80096e0:	d5fb      	bpl.n	80096da <_printf_i+0x1ca>
 80096e2:	8019      	strh	r1, [r3, #0]
 80096e4:	2300      	movs	r3, #0
 80096e6:	4615      	mov	r5, r2
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e7ba      	b.n	8009662 <_printf_i+0x152>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	2100      	movs	r1, #0
 80096f0:	1d1a      	adds	r2, r3, #4
 80096f2:	602a      	str	r2, [r5, #0]
 80096f4:	681d      	ldr	r5, [r3, #0]
 80096f6:	6862      	ldr	r2, [r4, #4]
 80096f8:	4628      	mov	r0, r5
 80096fa:	f002 faf7 	bl	800bcec <memchr>
 80096fe:	b108      	cbz	r0, 8009704 <_printf_i+0x1f4>
 8009700:	1b40      	subs	r0, r0, r5
 8009702:	6060      	str	r0, [r4, #4]
 8009704:	6863      	ldr	r3, [r4, #4]
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	2300      	movs	r3, #0
 800970a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800970e:	e7a8      	b.n	8009662 <_printf_i+0x152>
 8009710:	462a      	mov	r2, r5
 8009712:	4649      	mov	r1, r9
 8009714:	4640      	mov	r0, r8
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	47d0      	blx	sl
 800971a:	3001      	adds	r0, #1
 800971c:	d0ab      	beq.n	8009676 <_printf_i+0x166>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	079b      	lsls	r3, r3, #30
 8009722:	d413      	bmi.n	800974c <_printf_i+0x23c>
 8009724:	68e0      	ldr	r0, [r4, #12]
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	4298      	cmp	r0, r3
 800972a:	bfb8      	it	lt
 800972c:	4618      	movlt	r0, r3
 800972e:	e7a4      	b.n	800967a <_printf_i+0x16a>
 8009730:	2301      	movs	r3, #1
 8009732:	4632      	mov	r2, r6
 8009734:	4649      	mov	r1, r9
 8009736:	4640      	mov	r0, r8
 8009738:	47d0      	blx	sl
 800973a:	3001      	adds	r0, #1
 800973c:	d09b      	beq.n	8009676 <_printf_i+0x166>
 800973e:	3501      	adds	r5, #1
 8009740:	68e3      	ldr	r3, [r4, #12]
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	1a5b      	subs	r3, r3, r1
 8009746:	42ab      	cmp	r3, r5
 8009748:	dcf2      	bgt.n	8009730 <_printf_i+0x220>
 800974a:	e7eb      	b.n	8009724 <_printf_i+0x214>
 800974c:	2500      	movs	r5, #0
 800974e:	f104 0619 	add.w	r6, r4, #25
 8009752:	e7f5      	b.n	8009740 <_printf_i+0x230>
 8009754:	0800e796 	.word	0x0800e796
 8009758:	0800e7a7 	.word	0x0800e7a7

0800975c <_scanf_float>:
 800975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009760:	b087      	sub	sp, #28
 8009762:	9303      	str	r3, [sp, #12]
 8009764:	688b      	ldr	r3, [r1, #8]
 8009766:	4617      	mov	r7, r2
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800976e:	bf85      	ittet	hi
 8009770:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009774:	195b      	addhi	r3, r3, r5
 8009776:	2300      	movls	r3, #0
 8009778:	9302      	strhi	r3, [sp, #8]
 800977a:	bf88      	it	hi
 800977c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009780:	468b      	mov	fp, r1
 8009782:	f04f 0500 	mov.w	r5, #0
 8009786:	bf8c      	ite	hi
 8009788:	608b      	strhi	r3, [r1, #8]
 800978a:	9302      	strls	r3, [sp, #8]
 800978c:	680b      	ldr	r3, [r1, #0]
 800978e:	4680      	mov	r8, r0
 8009790:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009794:	f84b 3b1c 	str.w	r3, [fp], #28
 8009798:	460c      	mov	r4, r1
 800979a:	465e      	mov	r6, fp
 800979c:	46aa      	mov	sl, r5
 800979e:	46a9      	mov	r9, r5
 80097a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80097a4:	9501      	str	r5, [sp, #4]
 80097a6:	68a2      	ldr	r2, [r4, #8]
 80097a8:	b152      	cbz	r2, 80097c0 <_scanf_float+0x64>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b4e      	cmp	r3, #78	; 0x4e
 80097b0:	d864      	bhi.n	800987c <_scanf_float+0x120>
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d83c      	bhi.n	8009830 <_scanf_float+0xd4>
 80097b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80097ba:	b2c8      	uxtb	r0, r1
 80097bc:	280e      	cmp	r0, #14
 80097be:	d93a      	bls.n	8009836 <_scanf_float+0xda>
 80097c0:	f1b9 0f00 	cmp.w	r9, #0
 80097c4:	d003      	beq.n	80097ce <_scanf_float+0x72>
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097d2:	f1ba 0f01 	cmp.w	sl, #1
 80097d6:	f200 8113 	bhi.w	8009a00 <_scanf_float+0x2a4>
 80097da:	455e      	cmp	r6, fp
 80097dc:	f200 8105 	bhi.w	80099ea <_scanf_float+0x28e>
 80097e0:	2501      	movs	r5, #1
 80097e2:	4628      	mov	r0, r5
 80097e4:	b007      	add	sp, #28
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80097ee:	2a0d      	cmp	r2, #13
 80097f0:	d8e6      	bhi.n	80097c0 <_scanf_float+0x64>
 80097f2:	a101      	add	r1, pc, #4	; (adr r1, 80097f8 <_scanf_float+0x9c>)
 80097f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097f8:	08009937 	.word	0x08009937
 80097fc:	080097c1 	.word	0x080097c1
 8009800:	080097c1 	.word	0x080097c1
 8009804:	080097c1 	.word	0x080097c1
 8009808:	08009997 	.word	0x08009997
 800980c:	0800996f 	.word	0x0800996f
 8009810:	080097c1 	.word	0x080097c1
 8009814:	080097c1 	.word	0x080097c1
 8009818:	08009945 	.word	0x08009945
 800981c:	080097c1 	.word	0x080097c1
 8009820:	080097c1 	.word	0x080097c1
 8009824:	080097c1 	.word	0x080097c1
 8009828:	080097c1 	.word	0x080097c1
 800982c:	080098fd 	.word	0x080098fd
 8009830:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009834:	e7db      	b.n	80097ee <_scanf_float+0x92>
 8009836:	290e      	cmp	r1, #14
 8009838:	d8c2      	bhi.n	80097c0 <_scanf_float+0x64>
 800983a:	a001      	add	r0, pc, #4	; (adr r0, 8009840 <_scanf_float+0xe4>)
 800983c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009840:	080098ef 	.word	0x080098ef
 8009844:	080097c1 	.word	0x080097c1
 8009848:	080098ef 	.word	0x080098ef
 800984c:	08009983 	.word	0x08009983
 8009850:	080097c1 	.word	0x080097c1
 8009854:	0800989d 	.word	0x0800989d
 8009858:	080098d9 	.word	0x080098d9
 800985c:	080098d9 	.word	0x080098d9
 8009860:	080098d9 	.word	0x080098d9
 8009864:	080098d9 	.word	0x080098d9
 8009868:	080098d9 	.word	0x080098d9
 800986c:	080098d9 	.word	0x080098d9
 8009870:	080098d9 	.word	0x080098d9
 8009874:	080098d9 	.word	0x080098d9
 8009878:	080098d9 	.word	0x080098d9
 800987c:	2b6e      	cmp	r3, #110	; 0x6e
 800987e:	d809      	bhi.n	8009894 <_scanf_float+0x138>
 8009880:	2b60      	cmp	r3, #96	; 0x60
 8009882:	d8b2      	bhi.n	80097ea <_scanf_float+0x8e>
 8009884:	2b54      	cmp	r3, #84	; 0x54
 8009886:	d077      	beq.n	8009978 <_scanf_float+0x21c>
 8009888:	2b59      	cmp	r3, #89	; 0x59
 800988a:	d199      	bne.n	80097c0 <_scanf_float+0x64>
 800988c:	2d07      	cmp	r5, #7
 800988e:	d197      	bne.n	80097c0 <_scanf_float+0x64>
 8009890:	2508      	movs	r5, #8
 8009892:	e029      	b.n	80098e8 <_scanf_float+0x18c>
 8009894:	2b74      	cmp	r3, #116	; 0x74
 8009896:	d06f      	beq.n	8009978 <_scanf_float+0x21c>
 8009898:	2b79      	cmp	r3, #121	; 0x79
 800989a:	e7f6      	b.n	800988a <_scanf_float+0x12e>
 800989c:	6821      	ldr	r1, [r4, #0]
 800989e:	05c8      	lsls	r0, r1, #23
 80098a0:	d51a      	bpl.n	80098d8 <_scanf_float+0x17c>
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80098a8:	6021      	str	r1, [r4, #0]
 80098aa:	f109 0901 	add.w	r9, r9, #1
 80098ae:	b11b      	cbz	r3, 80098b8 <_scanf_float+0x15c>
 80098b0:	3b01      	subs	r3, #1
 80098b2:	3201      	adds	r2, #1
 80098b4:	9302      	str	r3, [sp, #8]
 80098b6:	60a2      	str	r2, [r4, #8]
 80098b8:	68a3      	ldr	r3, [r4, #8]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	60a3      	str	r3, [r4, #8]
 80098be:	6923      	ldr	r3, [r4, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	6123      	str	r3, [r4, #16]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	607b      	str	r3, [r7, #4]
 80098cc:	f340 8084 	ble.w	80099d8 <_scanf_float+0x27c>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	603b      	str	r3, [r7, #0]
 80098d6:	e766      	b.n	80097a6 <_scanf_float+0x4a>
 80098d8:	eb1a 0f05 	cmn.w	sl, r5
 80098dc:	f47f af70 	bne.w	80097c0 <_scanf_float+0x64>
 80098e0:	6822      	ldr	r2, [r4, #0]
 80098e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80098e6:	6022      	str	r2, [r4, #0]
 80098e8:	f806 3b01 	strb.w	r3, [r6], #1
 80098ec:	e7e4      	b.n	80098b8 <_scanf_float+0x15c>
 80098ee:	6822      	ldr	r2, [r4, #0]
 80098f0:	0610      	lsls	r0, r2, #24
 80098f2:	f57f af65 	bpl.w	80097c0 <_scanf_float+0x64>
 80098f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098fa:	e7f4      	b.n	80098e6 <_scanf_float+0x18a>
 80098fc:	f1ba 0f00 	cmp.w	sl, #0
 8009900:	d10e      	bne.n	8009920 <_scanf_float+0x1c4>
 8009902:	f1b9 0f00 	cmp.w	r9, #0
 8009906:	d10e      	bne.n	8009926 <_scanf_float+0x1ca>
 8009908:	6822      	ldr	r2, [r4, #0]
 800990a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800990e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009912:	d108      	bne.n	8009926 <_scanf_float+0x1ca>
 8009914:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009918:	f04f 0a01 	mov.w	sl, #1
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	e7e3      	b.n	80098e8 <_scanf_float+0x18c>
 8009920:	f1ba 0f02 	cmp.w	sl, #2
 8009924:	d055      	beq.n	80099d2 <_scanf_float+0x276>
 8009926:	2d01      	cmp	r5, #1
 8009928:	d002      	beq.n	8009930 <_scanf_float+0x1d4>
 800992a:	2d04      	cmp	r5, #4
 800992c:	f47f af48 	bne.w	80097c0 <_scanf_float+0x64>
 8009930:	3501      	adds	r5, #1
 8009932:	b2ed      	uxtb	r5, r5
 8009934:	e7d8      	b.n	80098e8 <_scanf_float+0x18c>
 8009936:	f1ba 0f01 	cmp.w	sl, #1
 800993a:	f47f af41 	bne.w	80097c0 <_scanf_float+0x64>
 800993e:	f04f 0a02 	mov.w	sl, #2
 8009942:	e7d1      	b.n	80098e8 <_scanf_float+0x18c>
 8009944:	b97d      	cbnz	r5, 8009966 <_scanf_float+0x20a>
 8009946:	f1b9 0f00 	cmp.w	r9, #0
 800994a:	f47f af3c 	bne.w	80097c6 <_scanf_float+0x6a>
 800994e:	6822      	ldr	r2, [r4, #0]
 8009950:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009954:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009958:	f47f af39 	bne.w	80097ce <_scanf_float+0x72>
 800995c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009960:	2501      	movs	r5, #1
 8009962:	6022      	str	r2, [r4, #0]
 8009964:	e7c0      	b.n	80098e8 <_scanf_float+0x18c>
 8009966:	2d03      	cmp	r5, #3
 8009968:	d0e2      	beq.n	8009930 <_scanf_float+0x1d4>
 800996a:	2d05      	cmp	r5, #5
 800996c:	e7de      	b.n	800992c <_scanf_float+0x1d0>
 800996e:	2d02      	cmp	r5, #2
 8009970:	f47f af26 	bne.w	80097c0 <_scanf_float+0x64>
 8009974:	2503      	movs	r5, #3
 8009976:	e7b7      	b.n	80098e8 <_scanf_float+0x18c>
 8009978:	2d06      	cmp	r5, #6
 800997a:	f47f af21 	bne.w	80097c0 <_scanf_float+0x64>
 800997e:	2507      	movs	r5, #7
 8009980:	e7b2      	b.n	80098e8 <_scanf_float+0x18c>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	0591      	lsls	r1, r2, #22
 8009986:	f57f af1b 	bpl.w	80097c0 <_scanf_float+0x64>
 800998a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800998e:	6022      	str	r2, [r4, #0]
 8009990:	f8cd 9004 	str.w	r9, [sp, #4]
 8009994:	e7a8      	b.n	80098e8 <_scanf_float+0x18c>
 8009996:	6822      	ldr	r2, [r4, #0]
 8009998:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800999c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80099a0:	d006      	beq.n	80099b0 <_scanf_float+0x254>
 80099a2:	0550      	lsls	r0, r2, #21
 80099a4:	f57f af0c 	bpl.w	80097c0 <_scanf_float+0x64>
 80099a8:	f1b9 0f00 	cmp.w	r9, #0
 80099ac:	f43f af0f 	beq.w	80097ce <_scanf_float+0x72>
 80099b0:	0591      	lsls	r1, r2, #22
 80099b2:	bf58      	it	pl
 80099b4:	9901      	ldrpl	r1, [sp, #4]
 80099b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099ba:	bf58      	it	pl
 80099bc:	eba9 0101 	subpl.w	r1, r9, r1
 80099c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80099c4:	f04f 0900 	mov.w	r9, #0
 80099c8:	bf58      	it	pl
 80099ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80099ce:	6022      	str	r2, [r4, #0]
 80099d0:	e78a      	b.n	80098e8 <_scanf_float+0x18c>
 80099d2:	f04f 0a03 	mov.w	sl, #3
 80099d6:	e787      	b.n	80098e8 <_scanf_float+0x18c>
 80099d8:	4639      	mov	r1, r7
 80099da:	4640      	mov	r0, r8
 80099dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099e0:	4798      	blx	r3
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f aedf 	beq.w	80097a6 <_scanf_float+0x4a>
 80099e8:	e6ea      	b.n	80097c0 <_scanf_float+0x64>
 80099ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099ee:	463a      	mov	r2, r7
 80099f0:	4640      	mov	r0, r8
 80099f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099f6:	4798      	blx	r3
 80099f8:	6923      	ldr	r3, [r4, #16]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	6123      	str	r3, [r4, #16]
 80099fe:	e6ec      	b.n	80097da <_scanf_float+0x7e>
 8009a00:	1e6b      	subs	r3, r5, #1
 8009a02:	2b06      	cmp	r3, #6
 8009a04:	d825      	bhi.n	8009a52 <_scanf_float+0x2f6>
 8009a06:	2d02      	cmp	r5, #2
 8009a08:	d836      	bhi.n	8009a78 <_scanf_float+0x31c>
 8009a0a:	455e      	cmp	r6, fp
 8009a0c:	f67f aee8 	bls.w	80097e0 <_scanf_float+0x84>
 8009a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a14:	463a      	mov	r2, r7
 8009a16:	4640      	mov	r0, r8
 8009a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a1c:	4798      	blx	r3
 8009a1e:	6923      	ldr	r3, [r4, #16]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	6123      	str	r3, [r4, #16]
 8009a24:	e7f1      	b.n	8009a0a <_scanf_float+0x2ae>
 8009a26:	9802      	ldr	r0, [sp, #8]
 8009a28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009a30:	463a      	mov	r2, r7
 8009a32:	9002      	str	r0, [sp, #8]
 8009a34:	4640      	mov	r0, r8
 8009a36:	4798      	blx	r3
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6123      	str	r3, [r4, #16]
 8009a3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a42:	fa5f fa8a 	uxtb.w	sl, sl
 8009a46:	f1ba 0f02 	cmp.w	sl, #2
 8009a4a:	d1ec      	bne.n	8009a26 <_scanf_float+0x2ca>
 8009a4c:	3d03      	subs	r5, #3
 8009a4e:	b2ed      	uxtb	r5, r5
 8009a50:	1b76      	subs	r6, r6, r5
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	05da      	lsls	r2, r3, #23
 8009a56:	d52f      	bpl.n	8009ab8 <_scanf_float+0x35c>
 8009a58:	055b      	lsls	r3, r3, #21
 8009a5a:	d510      	bpl.n	8009a7e <_scanf_float+0x322>
 8009a5c:	455e      	cmp	r6, fp
 8009a5e:	f67f aebf 	bls.w	80097e0 <_scanf_float+0x84>
 8009a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a66:	463a      	mov	r2, r7
 8009a68:	4640      	mov	r0, r8
 8009a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a6e:	4798      	blx	r3
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	6123      	str	r3, [r4, #16]
 8009a76:	e7f1      	b.n	8009a5c <_scanf_float+0x300>
 8009a78:	46aa      	mov	sl, r5
 8009a7a:	9602      	str	r6, [sp, #8]
 8009a7c:	e7df      	b.n	8009a3e <_scanf_float+0x2e2>
 8009a7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	2965      	cmp	r1, #101	; 0x65
 8009a86:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a8a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a8e:	6123      	str	r3, [r4, #16]
 8009a90:	d00c      	beq.n	8009aac <_scanf_float+0x350>
 8009a92:	2945      	cmp	r1, #69	; 0x45
 8009a94:	d00a      	beq.n	8009aac <_scanf_float+0x350>
 8009a96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4798      	blx	r3
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	1eb5      	subs	r5, r6, #2
 8009aaa:	6123      	str	r3, [r4, #16]
 8009aac:	463a      	mov	r2, r7
 8009aae:	4640      	mov	r0, r8
 8009ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ab4:	4798      	blx	r3
 8009ab6:	462e      	mov	r6, r5
 8009ab8:	6825      	ldr	r5, [r4, #0]
 8009aba:	f015 0510 	ands.w	r5, r5, #16
 8009abe:	d155      	bne.n	8009b6c <_scanf_float+0x410>
 8009ac0:	7035      	strb	r5, [r6, #0]
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009acc:	d11b      	bne.n	8009b06 <_scanf_float+0x3aa>
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	454b      	cmp	r3, r9
 8009ad2:	eba3 0209 	sub.w	r2, r3, r9
 8009ad6:	d123      	bne.n	8009b20 <_scanf_float+0x3c4>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4659      	mov	r1, fp
 8009adc:	4640      	mov	r0, r8
 8009ade:	f000 fe83 	bl	800a7e8 <_strtod_r>
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	f012 0f02 	tst.w	r2, #2
 8009aea:	4606      	mov	r6, r0
 8009aec:	460f      	mov	r7, r1
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	d021      	beq.n	8009b36 <_scanf_float+0x3da>
 8009af2:	1d1a      	adds	r2, r3, #4
 8009af4:	9903      	ldr	r1, [sp, #12]
 8009af6:	600a      	str	r2, [r1, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	e9c3 6700 	strd	r6, r7, [r3]
 8009afe:	68e3      	ldr	r3, [r4, #12]
 8009b00:	3301      	adds	r3, #1
 8009b02:	60e3      	str	r3, [r4, #12]
 8009b04:	e66d      	b.n	80097e2 <_scanf_float+0x86>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0e5      	beq.n	8009ad8 <_scanf_float+0x37c>
 8009b0c:	9905      	ldr	r1, [sp, #20]
 8009b0e:	230a      	movs	r3, #10
 8009b10:	462a      	mov	r2, r5
 8009b12:	4640      	mov	r0, r8
 8009b14:	3101      	adds	r1, #1
 8009b16:	f000 fee9 	bl	800a8ec <_strtol_r>
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	9e05      	ldr	r6, [sp, #20]
 8009b1e:	1ac2      	subs	r2, r0, r3
 8009b20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b24:	429e      	cmp	r6, r3
 8009b26:	bf28      	it	cs
 8009b28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4910      	ldr	r1, [pc, #64]	; (8009b70 <_scanf_float+0x414>)
 8009b30:	f000 f826 	bl	8009b80 <siprintf>
 8009b34:	e7d0      	b.n	8009ad8 <_scanf_float+0x37c>
 8009b36:	f012 0f04 	tst.w	r2, #4
 8009b3a:	f103 0204 	add.w	r2, r3, #4
 8009b3e:	d1d9      	bne.n	8009af4 <_scanf_float+0x398>
 8009b40:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009b44:	f8cc 2000 	str.w	r2, [ip]
 8009b48:	f8d3 8000 	ldr.w	r8, [r3]
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	f7f6 ff66 	bl	8000a20 <__aeabi_dcmpun>
 8009b54:	b128      	cbz	r0, 8009b62 <_scanf_float+0x406>
 8009b56:	4807      	ldr	r0, [pc, #28]	; (8009b74 <_scanf_float+0x418>)
 8009b58:	f000 f80e 	bl	8009b78 <nanf>
 8009b5c:	f8c8 0000 	str.w	r0, [r8]
 8009b60:	e7cd      	b.n	8009afe <_scanf_float+0x3a2>
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 ffb9 	bl	8000adc <__aeabi_d2f>
 8009b6a:	e7f7      	b.n	8009b5c <_scanf_float+0x400>
 8009b6c:	2500      	movs	r5, #0
 8009b6e:	e638      	b.n	80097e2 <_scanf_float+0x86>
 8009b70:	0800e7b8 	.word	0x0800e7b8
 8009b74:	0800ebc0 	.word	0x0800ebc0

08009b78 <nanf>:
 8009b78:	4800      	ldr	r0, [pc, #0]	; (8009b7c <nanf+0x4>)
 8009b7a:	4770      	bx	lr
 8009b7c:	7fc00000 	.word	0x7fc00000

08009b80 <siprintf>:
 8009b80:	b40e      	push	{r1, r2, r3}
 8009b82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b86:	b500      	push	{lr}
 8009b88:	b09c      	sub	sp, #112	; 0x70
 8009b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b8c:	9002      	str	r0, [sp, #8]
 8009b8e:	9006      	str	r0, [sp, #24]
 8009b90:	9107      	str	r1, [sp, #28]
 8009b92:	9104      	str	r1, [sp, #16]
 8009b94:	4808      	ldr	r0, [pc, #32]	; (8009bb8 <siprintf+0x38>)
 8009b96:	4909      	ldr	r1, [pc, #36]	; (8009bbc <siprintf+0x3c>)
 8009b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9c:	9105      	str	r1, [sp, #20]
 8009b9e:	6800      	ldr	r0, [r0, #0]
 8009ba0:	a902      	add	r1, sp, #8
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f002 feb4 	bl	800c910 <_svfiprintf_r>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	9b02      	ldr	r3, [sp, #8]
 8009bac:	701a      	strb	r2, [r3, #0]
 8009bae:	b01c      	add	sp, #112	; 0x70
 8009bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb4:	b003      	add	sp, #12
 8009bb6:	4770      	bx	lr
 8009bb8:	2000001c 	.word	0x2000001c
 8009bbc:	ffff0208 	.word	0xffff0208

08009bc0 <strcpy>:
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bc6:	f803 2b01 	strb.w	r2, [r3], #1
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	d1f9      	bne.n	8009bc2 <strcpy+0x2>
 8009bce:	4770      	bx	lr

08009bd0 <sulp>:
 8009bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	460f      	mov	r7, r1
 8009bd6:	4690      	mov	r8, r2
 8009bd8:	f002 fc06 	bl	800c3e8 <__ulp>
 8009bdc:	4604      	mov	r4, r0
 8009bde:	460d      	mov	r5, r1
 8009be0:	f1b8 0f00 	cmp.w	r8, #0
 8009be4:	d011      	beq.n	8009c0a <sulp+0x3a>
 8009be6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dd0b      	ble.n	8009c0a <sulp+0x3a>
 8009bf2:	2400      	movs	r4, #0
 8009bf4:	051b      	lsls	r3, r3, #20
 8009bf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009bfa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009bfe:	4622      	mov	r2, r4
 8009c00:	462b      	mov	r3, r5
 8009c02:	f7f6 fc73 	bl	80004ec <__aeabi_dmul>
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c12:	0000      	movs	r0, r0
 8009c14:	0000      	movs	r0, r0
	...

08009c18 <_strtod_l>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	469b      	mov	fp, r3
 8009c1e:	2300      	movs	r3, #0
 8009c20:	b09f      	sub	sp, #124	; 0x7c
 8009c22:	931a      	str	r3, [sp, #104]	; 0x68
 8009c24:	4b9e      	ldr	r3, [pc, #632]	; (8009ea0 <_strtod_l+0x288>)
 8009c26:	4682      	mov	sl, r0
 8009c28:	681f      	ldr	r7, [r3, #0]
 8009c2a:	460e      	mov	r6, r1
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	9215      	str	r2, [sp, #84]	; 0x54
 8009c30:	f7f6 fa98 	bl	8000164 <strlen>
 8009c34:	f04f 0800 	mov.w	r8, #0
 8009c38:	4604      	mov	r4, r0
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	9619      	str	r6, [sp, #100]	; 0x64
 8009c40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	2a2b      	cmp	r2, #43	; 0x2b
 8009c46:	d04c      	beq.n	8009ce2 <_strtod_l+0xca>
 8009c48:	d83a      	bhi.n	8009cc0 <_strtod_l+0xa8>
 8009c4a:	2a0d      	cmp	r2, #13
 8009c4c:	d833      	bhi.n	8009cb6 <_strtod_l+0x9e>
 8009c4e:	2a08      	cmp	r2, #8
 8009c50:	d833      	bhi.n	8009cba <_strtod_l+0xa2>
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	d03d      	beq.n	8009cd2 <_strtod_l+0xba>
 8009c56:	2300      	movs	r3, #0
 8009c58:	930a      	str	r3, [sp, #40]	; 0x28
 8009c5a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8009c5c:	782b      	ldrb	r3, [r5, #0]
 8009c5e:	2b30      	cmp	r3, #48	; 0x30
 8009c60:	f040 80aa 	bne.w	8009db8 <_strtod_l+0x1a0>
 8009c64:	786b      	ldrb	r3, [r5, #1]
 8009c66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c6a:	2b58      	cmp	r3, #88	; 0x58
 8009c6c:	d166      	bne.n	8009d3c <_strtod_l+0x124>
 8009c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c70:	4650      	mov	r0, sl
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	ab1a      	add	r3, sp, #104	; 0x68
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	4a8a      	ldr	r2, [pc, #552]	; (8009ea4 <_strtod_l+0x28c>)
 8009c7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009c7e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009c80:	a919      	add	r1, sp, #100	; 0x64
 8009c82:	f001 fd17 	bl	800b6b4 <__gethex>
 8009c86:	f010 0607 	ands.w	r6, r0, #7
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	d005      	beq.n	8009c9a <_strtod_l+0x82>
 8009c8e:	2e06      	cmp	r6, #6
 8009c90:	d129      	bne.n	8009ce6 <_strtod_l+0xce>
 8009c92:	2300      	movs	r3, #0
 8009c94:	3501      	adds	r5, #1
 8009c96:	9519      	str	r5, [sp, #100]	; 0x64
 8009c98:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 858a 	bne.w	800a7b6 <_strtod_l+0xb9e>
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	b1d3      	cbz	r3, 8009cdc <_strtod_l+0xc4>
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	b01f      	add	sp, #124	; 0x7c
 8009cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb6:	2a20      	cmp	r2, #32
 8009cb8:	d1cd      	bne.n	8009c56 <_strtod_l+0x3e>
 8009cba:	3301      	adds	r3, #1
 8009cbc:	9319      	str	r3, [sp, #100]	; 0x64
 8009cbe:	e7bf      	b.n	8009c40 <_strtod_l+0x28>
 8009cc0:	2a2d      	cmp	r2, #45	; 0x2d
 8009cc2:	d1c8      	bne.n	8009c56 <_strtod_l+0x3e>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	920a      	str	r2, [sp, #40]	; 0x28
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	9219      	str	r2, [sp, #100]	; 0x64
 8009ccc:	785b      	ldrb	r3, [r3, #1]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1c3      	bne.n	8009c5a <_strtod_l+0x42>
 8009cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cd4:	9619      	str	r6, [sp, #100]	; 0x64
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f040 856b 	bne.w	800a7b2 <_strtod_l+0xb9a>
 8009cdc:	4642      	mov	r2, r8
 8009cde:	464b      	mov	r3, r9
 8009ce0:	e7e4      	b.n	8009cac <_strtod_l+0x94>
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	e7ef      	b.n	8009cc6 <_strtod_l+0xae>
 8009ce6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ce8:	b13a      	cbz	r2, 8009cfa <_strtod_l+0xe2>
 8009cea:	2135      	movs	r1, #53	; 0x35
 8009cec:	a81c      	add	r0, sp, #112	; 0x70
 8009cee:	f002 fc7f 	bl	800c5f0 <__copybits>
 8009cf2:	4650      	mov	r0, sl
 8009cf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cf6:	f002 f847 	bl	800bd88 <_Bfree>
 8009cfa:	3e01      	subs	r6, #1
 8009cfc:	2e04      	cmp	r6, #4
 8009cfe:	d806      	bhi.n	8009d0e <_strtod_l+0xf6>
 8009d00:	e8df f006 	tbb	[pc, r6]
 8009d04:	1714030a 	.word	0x1714030a
 8009d08:	0a          	.byte	0x0a
 8009d09:	00          	.byte	0x00
 8009d0a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8009d0e:	0721      	lsls	r1, r4, #28
 8009d10:	d5c3      	bpl.n	8009c9a <_strtod_l+0x82>
 8009d12:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009d16:	e7c0      	b.n	8009c9a <_strtod_l+0x82>
 8009d18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009d1a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009d1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d26:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009d2a:	e7f0      	b.n	8009d0e <_strtod_l+0xf6>
 8009d2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ea8 <_strtod_l+0x290>
 8009d30:	e7ed      	b.n	8009d0e <_strtod_l+0xf6>
 8009d32:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d36:	f04f 38ff 	mov.w	r8, #4294967295
 8009d3a:	e7e8      	b.n	8009d0e <_strtod_l+0xf6>
 8009d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	9219      	str	r2, [sp, #100]	; 0x64
 8009d42:	785b      	ldrb	r3, [r3, #1]
 8009d44:	2b30      	cmp	r3, #48	; 0x30
 8009d46:	d0f9      	beq.n	8009d3c <_strtod_l+0x124>
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0a6      	beq.n	8009c9a <_strtod_l+0x82>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	9307      	str	r3, [sp, #28]
 8009d50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009d52:	220a      	movs	r2, #10
 8009d54:	9308      	str	r3, [sp, #32]
 8009d56:	2300      	movs	r3, #0
 8009d58:	469b      	mov	fp, r3
 8009d5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009d5e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009d60:	7805      	ldrb	r5, [r0, #0]
 8009d62:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009d66:	b2d9      	uxtb	r1, r3
 8009d68:	2909      	cmp	r1, #9
 8009d6a:	d927      	bls.n	8009dbc <_strtod_l+0x1a4>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	4639      	mov	r1, r7
 8009d70:	f002 fee4 	bl	800cb3c <strncmp>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d033      	beq.n	8009de0 <_strtod_l+0x1c8>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	462a      	mov	r2, r5
 8009d7c:	465c      	mov	r4, fp
 8009d7e:	4603      	mov	r3, r0
 8009d80:	9004      	str	r0, [sp, #16]
 8009d82:	2a65      	cmp	r2, #101	; 0x65
 8009d84:	d001      	beq.n	8009d8a <_strtod_l+0x172>
 8009d86:	2a45      	cmp	r2, #69	; 0x45
 8009d88:	d114      	bne.n	8009db4 <_strtod_l+0x19c>
 8009d8a:	b91c      	cbnz	r4, 8009d94 <_strtod_l+0x17c>
 8009d8c:	9a07      	ldr	r2, [sp, #28]
 8009d8e:	4302      	orrs	r2, r0
 8009d90:	d09f      	beq.n	8009cd2 <_strtod_l+0xba>
 8009d92:	2400      	movs	r4, #0
 8009d94:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009d96:	1c72      	adds	r2, r6, #1
 8009d98:	9219      	str	r2, [sp, #100]	; 0x64
 8009d9a:	7872      	ldrb	r2, [r6, #1]
 8009d9c:	2a2b      	cmp	r2, #43	; 0x2b
 8009d9e:	d079      	beq.n	8009e94 <_strtod_l+0x27c>
 8009da0:	2a2d      	cmp	r2, #45	; 0x2d
 8009da2:	f000 8083 	beq.w	8009eac <_strtod_l+0x294>
 8009da6:	2700      	movs	r7, #0
 8009da8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009dac:	2909      	cmp	r1, #9
 8009dae:	f240 8083 	bls.w	8009eb8 <_strtod_l+0x2a0>
 8009db2:	9619      	str	r6, [sp, #100]	; 0x64
 8009db4:	2500      	movs	r5, #0
 8009db6:	e09f      	b.n	8009ef8 <_strtod_l+0x2e0>
 8009db8:	2300      	movs	r3, #0
 8009dba:	e7c8      	b.n	8009d4e <_strtod_l+0x136>
 8009dbc:	f1bb 0f08 	cmp.w	fp, #8
 8009dc0:	bfd5      	itete	le
 8009dc2:	9906      	ldrle	r1, [sp, #24]
 8009dc4:	9905      	ldrgt	r1, [sp, #20]
 8009dc6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009dca:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009dce:	f100 0001 	add.w	r0, r0, #1
 8009dd2:	bfd4      	ite	le
 8009dd4:	9306      	strle	r3, [sp, #24]
 8009dd6:	9305      	strgt	r3, [sp, #20]
 8009dd8:	f10b 0b01 	add.w	fp, fp, #1
 8009ddc:	9019      	str	r0, [sp, #100]	; 0x64
 8009dde:	e7be      	b.n	8009d5e <_strtod_l+0x146>
 8009de0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009de2:	191a      	adds	r2, r3, r4
 8009de4:	9219      	str	r2, [sp, #100]	; 0x64
 8009de6:	5d1a      	ldrb	r2, [r3, r4]
 8009de8:	f1bb 0f00 	cmp.w	fp, #0
 8009dec:	d036      	beq.n	8009e5c <_strtod_l+0x244>
 8009dee:	465c      	mov	r4, fp
 8009df0:	9004      	str	r0, [sp, #16]
 8009df2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009df6:	2b09      	cmp	r3, #9
 8009df8:	d912      	bls.n	8009e20 <_strtod_l+0x208>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7c1      	b.n	8009d82 <_strtod_l+0x16a>
 8009dfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e00:	3001      	adds	r0, #1
 8009e02:	1c5a      	adds	r2, r3, #1
 8009e04:	9219      	str	r2, [sp, #100]	; 0x64
 8009e06:	785a      	ldrb	r2, [r3, #1]
 8009e08:	2a30      	cmp	r2, #48	; 0x30
 8009e0a:	d0f8      	beq.n	8009dfe <_strtod_l+0x1e6>
 8009e0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	f200 84d5 	bhi.w	800a7c0 <_strtod_l+0xba8>
 8009e16:	9004      	str	r0, [sp, #16]
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e1e:	9308      	str	r3, [sp, #32]
 8009e20:	3a30      	subs	r2, #48	; 0x30
 8009e22:	f100 0301 	add.w	r3, r0, #1
 8009e26:	d013      	beq.n	8009e50 <_strtod_l+0x238>
 8009e28:	9904      	ldr	r1, [sp, #16]
 8009e2a:	1905      	adds	r5, r0, r4
 8009e2c:	4419      	add	r1, r3
 8009e2e:	9104      	str	r1, [sp, #16]
 8009e30:	4623      	mov	r3, r4
 8009e32:	210a      	movs	r1, #10
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	d113      	bne.n	8009e60 <_strtod_l+0x248>
 8009e38:	1823      	adds	r3, r4, r0
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	f104 0401 	add.w	r4, r4, #1
 8009e40:	4404      	add	r4, r0
 8009e42:	dc1b      	bgt.n	8009e7c <_strtod_l+0x264>
 8009e44:	230a      	movs	r3, #10
 8009e46:	9906      	ldr	r1, [sp, #24]
 8009e48:	fb03 2301 	mla	r3, r3, r1, r2
 8009e4c:	9306      	str	r3, [sp, #24]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e52:	4618      	mov	r0, r3
 8009e54:	1c51      	adds	r1, r2, #1
 8009e56:	9119      	str	r1, [sp, #100]	; 0x64
 8009e58:	7852      	ldrb	r2, [r2, #1]
 8009e5a:	e7ca      	b.n	8009df2 <_strtod_l+0x1da>
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	e7d3      	b.n	8009e08 <_strtod_l+0x1f0>
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	dc04      	bgt.n	8009e6e <_strtod_l+0x256>
 8009e64:	9f06      	ldr	r7, [sp, #24]
 8009e66:	434f      	muls	r7, r1
 8009e68:	9706      	str	r7, [sp, #24]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	e7e2      	b.n	8009e34 <_strtod_l+0x21c>
 8009e6e:	1c5f      	adds	r7, r3, #1
 8009e70:	2f10      	cmp	r7, #16
 8009e72:	bfde      	ittt	le
 8009e74:	9f05      	ldrle	r7, [sp, #20]
 8009e76:	434f      	mulle	r7, r1
 8009e78:	9705      	strle	r7, [sp, #20]
 8009e7a:	e7f6      	b.n	8009e6a <_strtod_l+0x252>
 8009e7c:	2c10      	cmp	r4, #16
 8009e7e:	bfdf      	itttt	le
 8009e80:	230a      	movle	r3, #10
 8009e82:	9905      	ldrle	r1, [sp, #20]
 8009e84:	fb03 2301 	mlale	r3, r3, r1, r2
 8009e88:	9305      	strle	r3, [sp, #20]
 8009e8a:	e7e0      	b.n	8009e4e <_strtod_l+0x236>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	2301      	movs	r3, #1
 8009e92:	e77b      	b.n	8009d8c <_strtod_l+0x174>
 8009e94:	2700      	movs	r7, #0
 8009e96:	1cb2      	adds	r2, r6, #2
 8009e98:	9219      	str	r2, [sp, #100]	; 0x64
 8009e9a:	78b2      	ldrb	r2, [r6, #2]
 8009e9c:	e784      	b.n	8009da8 <_strtod_l+0x190>
 8009e9e:	bf00      	nop
 8009ea0:	0800ea08 	.word	0x0800ea08
 8009ea4:	0800e7c0 	.word	0x0800e7c0
 8009ea8:	7ff00000 	.word	0x7ff00000
 8009eac:	2701      	movs	r7, #1
 8009eae:	e7f2      	b.n	8009e96 <_strtod_l+0x27e>
 8009eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009eb2:	1c51      	adds	r1, r2, #1
 8009eb4:	9119      	str	r1, [sp, #100]	; 0x64
 8009eb6:	7852      	ldrb	r2, [r2, #1]
 8009eb8:	2a30      	cmp	r2, #48	; 0x30
 8009eba:	d0f9      	beq.n	8009eb0 <_strtod_l+0x298>
 8009ebc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009ec0:	2908      	cmp	r1, #8
 8009ec2:	f63f af77 	bhi.w	8009db4 <_strtod_l+0x19c>
 8009ec6:	f04f 0e0a 	mov.w	lr, #10
 8009eca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009ece:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ed0:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009ed4:	1c51      	adds	r1, r2, #1
 8009ed6:	9119      	str	r1, [sp, #100]	; 0x64
 8009ed8:	7852      	ldrb	r2, [r2, #1]
 8009eda:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009ede:	2d09      	cmp	r5, #9
 8009ee0:	d935      	bls.n	8009f4e <_strtod_l+0x336>
 8009ee2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009ee4:	1b49      	subs	r1, r1, r5
 8009ee6:	2908      	cmp	r1, #8
 8009ee8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009eec:	dc02      	bgt.n	8009ef4 <_strtod_l+0x2dc>
 8009eee:	4565      	cmp	r5, ip
 8009ef0:	bfa8      	it	ge
 8009ef2:	4665      	movge	r5, ip
 8009ef4:	b107      	cbz	r7, 8009ef8 <_strtod_l+0x2e0>
 8009ef6:	426d      	negs	r5, r5
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	d14c      	bne.n	8009f96 <_strtod_l+0x37e>
 8009efc:	9907      	ldr	r1, [sp, #28]
 8009efe:	4301      	orrs	r1, r0
 8009f00:	f47f aecb 	bne.w	8009c9a <_strtod_l+0x82>
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f aee4 	bne.w	8009cd2 <_strtod_l+0xba>
 8009f0a:	2a69      	cmp	r2, #105	; 0x69
 8009f0c:	d026      	beq.n	8009f5c <_strtod_l+0x344>
 8009f0e:	dc23      	bgt.n	8009f58 <_strtod_l+0x340>
 8009f10:	2a49      	cmp	r2, #73	; 0x49
 8009f12:	d023      	beq.n	8009f5c <_strtod_l+0x344>
 8009f14:	2a4e      	cmp	r2, #78	; 0x4e
 8009f16:	f47f aedc 	bne.w	8009cd2 <_strtod_l+0xba>
 8009f1a:	499d      	ldr	r1, [pc, #628]	; (800a190 <_strtod_l+0x578>)
 8009f1c:	a819      	add	r0, sp, #100	; 0x64
 8009f1e:	f001 fe17 	bl	800bb50 <__match>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	f43f aed5 	beq.w	8009cd2 <_strtod_l+0xba>
 8009f28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d12c      	bne.n	8009f8a <_strtod_l+0x372>
 8009f30:	4998      	ldr	r1, [pc, #608]	; (800a194 <_strtod_l+0x57c>)
 8009f32:	aa1c      	add	r2, sp, #112	; 0x70
 8009f34:	a819      	add	r0, sp, #100	; 0x64
 8009f36:	f001 fe1f 	bl	800bb78 <__hexnan>
 8009f3a:	2805      	cmp	r0, #5
 8009f3c:	d125      	bne.n	8009f8a <_strtod_l+0x372>
 8009f3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009f44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009f48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009f4c:	e6a5      	b.n	8009c9a <_strtod_l+0x82>
 8009f4e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8009f52:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009f56:	e7bc      	b.n	8009ed2 <_strtod_l+0x2ba>
 8009f58:	2a6e      	cmp	r2, #110	; 0x6e
 8009f5a:	e7dc      	b.n	8009f16 <_strtod_l+0x2fe>
 8009f5c:	498e      	ldr	r1, [pc, #568]	; (800a198 <_strtod_l+0x580>)
 8009f5e:	a819      	add	r0, sp, #100	; 0x64
 8009f60:	f001 fdf6 	bl	800bb50 <__match>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f aeb4 	beq.w	8009cd2 <_strtod_l+0xba>
 8009f6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f6c:	498b      	ldr	r1, [pc, #556]	; (800a19c <_strtod_l+0x584>)
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	a819      	add	r0, sp, #100	; 0x64
 8009f72:	9319      	str	r3, [sp, #100]	; 0x64
 8009f74:	f001 fdec 	bl	800bb50 <__match>
 8009f78:	b910      	cbnz	r0, 8009f80 <_strtod_l+0x368>
 8009f7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	9319      	str	r3, [sp, #100]	; 0x64
 8009f80:	f04f 0800 	mov.w	r8, #0
 8009f84:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a1a0 <_strtod_l+0x588>
 8009f88:	e687      	b.n	8009c9a <_strtod_l+0x82>
 8009f8a:	4886      	ldr	r0, [pc, #536]	; (800a1a4 <_strtod_l+0x58c>)
 8009f8c:	f002 fdc0 	bl	800cb10 <nan>
 8009f90:	4680      	mov	r8, r0
 8009f92:	4689      	mov	r9, r1
 8009f94:	e681      	b.n	8009c9a <_strtod_l+0x82>
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	f1bb 0f00 	cmp.w	fp, #0
 8009f9c:	bf08      	it	eq
 8009f9e:	46a3      	moveq	fp, r4
 8009fa0:	1aeb      	subs	r3, r5, r3
 8009fa2:	2c10      	cmp	r4, #16
 8009fa4:	9806      	ldr	r0, [sp, #24]
 8009fa6:	4626      	mov	r6, r4
 8009fa8:	9307      	str	r3, [sp, #28]
 8009faa:	bfa8      	it	ge
 8009fac:	2610      	movge	r6, #16
 8009fae:	f7f6 fa23 	bl	80003f8 <__aeabi_ui2d>
 8009fb2:	2c09      	cmp	r4, #9
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4689      	mov	r9, r1
 8009fb8:	dd13      	ble.n	8009fe2 <_strtod_l+0x3ca>
 8009fba:	4b7b      	ldr	r3, [pc, #492]	; (800a1a8 <_strtod_l+0x590>)
 8009fbc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009fc0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009fc4:	f7f6 fa92 	bl	80004ec <__aeabi_dmul>
 8009fc8:	4680      	mov	r8, r0
 8009fca:	9805      	ldr	r0, [sp, #20]
 8009fcc:	4689      	mov	r9, r1
 8009fce:	f7f6 fa13 	bl	80003f8 <__aeabi_ui2d>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 f8d1 	bl	8000180 <__adddf3>
 8009fde:	4680      	mov	r8, r0
 8009fe0:	4689      	mov	r9, r1
 8009fe2:	2c0f      	cmp	r4, #15
 8009fe4:	dc36      	bgt.n	800a054 <_strtod_l+0x43c>
 8009fe6:	9b07      	ldr	r3, [sp, #28]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f43f ae56 	beq.w	8009c9a <_strtod_l+0x82>
 8009fee:	dd22      	ble.n	800a036 <_strtod_l+0x41e>
 8009ff0:	2b16      	cmp	r3, #22
 8009ff2:	dc09      	bgt.n	800a008 <_strtod_l+0x3f0>
 8009ff4:	496c      	ldr	r1, [pc, #432]	; (800a1a8 <_strtod_l+0x590>)
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a002:	f7f6 fa73 	bl	80004ec <__aeabi_dmul>
 800a006:	e7c3      	b.n	8009f90 <_strtod_l+0x378>
 800a008:	9a07      	ldr	r2, [sp, #28]
 800a00a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a00e:	4293      	cmp	r3, r2
 800a010:	db20      	blt.n	800a054 <_strtod_l+0x43c>
 800a012:	4d65      	ldr	r5, [pc, #404]	; (800a1a8 <_strtod_l+0x590>)
 800a014:	f1c4 040f 	rsb	r4, r4, #15
 800a018:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a01c:	4642      	mov	r2, r8
 800a01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a022:	464b      	mov	r3, r9
 800a024:	f7f6 fa62 	bl	80004ec <__aeabi_dmul>
 800a028:	9b07      	ldr	r3, [sp, #28]
 800a02a:	1b1c      	subs	r4, r3, r4
 800a02c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a030:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a034:	e7e5      	b.n	800a002 <_strtod_l+0x3ea>
 800a036:	9b07      	ldr	r3, [sp, #28]
 800a038:	3316      	adds	r3, #22
 800a03a:	db0b      	blt.n	800a054 <_strtod_l+0x43c>
 800a03c:	9b04      	ldr	r3, [sp, #16]
 800a03e:	4640      	mov	r0, r8
 800a040:	1b5d      	subs	r5, r3, r5
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <_strtod_l+0x590>)
 800a044:	4649      	mov	r1, r9
 800a046:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a04a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a04e:	f7f6 fb77 	bl	8000740 <__aeabi_ddiv>
 800a052:	e79d      	b.n	8009f90 <_strtod_l+0x378>
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	1ba6      	subs	r6, r4, r6
 800a058:	441e      	add	r6, r3
 800a05a:	2e00      	cmp	r6, #0
 800a05c:	dd74      	ble.n	800a148 <_strtod_l+0x530>
 800a05e:	f016 030f 	ands.w	r3, r6, #15
 800a062:	d00a      	beq.n	800a07a <_strtod_l+0x462>
 800a064:	4950      	ldr	r1, [pc, #320]	; (800a1a8 <_strtod_l+0x590>)
 800a066:	4642      	mov	r2, r8
 800a068:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a070:	464b      	mov	r3, r9
 800a072:	f7f6 fa3b 	bl	80004ec <__aeabi_dmul>
 800a076:	4680      	mov	r8, r0
 800a078:	4689      	mov	r9, r1
 800a07a:	f036 060f 	bics.w	r6, r6, #15
 800a07e:	d052      	beq.n	800a126 <_strtod_l+0x50e>
 800a080:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a084:	dd27      	ble.n	800a0d6 <_strtod_l+0x4be>
 800a086:	f04f 0b00 	mov.w	fp, #0
 800a08a:	f8cd b010 	str.w	fp, [sp, #16]
 800a08e:	f8cd b020 	str.w	fp, [sp, #32]
 800a092:	f8cd b018 	str.w	fp, [sp, #24]
 800a096:	2322      	movs	r3, #34	; 0x22
 800a098:	f04f 0800 	mov.w	r8, #0
 800a09c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a1a0 <_strtod_l+0x588>
 800a0a0:	f8ca 3000 	str.w	r3, [sl]
 800a0a4:	9b08      	ldr	r3, [sp, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f43f adf7 	beq.w	8009c9a <_strtod_l+0x82>
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a0b0:	f001 fe6a 	bl	800bd88 <_Bfree>
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	9906      	ldr	r1, [sp, #24]
 800a0b8:	f001 fe66 	bl	800bd88 <_Bfree>
 800a0bc:	4650      	mov	r0, sl
 800a0be:	9904      	ldr	r1, [sp, #16]
 800a0c0:	f001 fe62 	bl	800bd88 <_Bfree>
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	9908      	ldr	r1, [sp, #32]
 800a0c8:	f001 fe5e 	bl	800bd88 <_Bfree>
 800a0cc:	4659      	mov	r1, fp
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f001 fe5a 	bl	800bd88 <_Bfree>
 800a0d4:	e5e1      	b.n	8009c9a <_strtod_l+0x82>
 800a0d6:	4b35      	ldr	r3, [pc, #212]	; (800a1ac <_strtod_l+0x594>)
 800a0d8:	4640      	mov	r0, r8
 800a0da:	9305      	str	r3, [sp, #20]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4649      	mov	r1, r9
 800a0e0:	461f      	mov	r7, r3
 800a0e2:	1136      	asrs	r6, r6, #4
 800a0e4:	2e01      	cmp	r6, #1
 800a0e6:	dc21      	bgt.n	800a12c <_strtod_l+0x514>
 800a0e8:	b10b      	cbz	r3, 800a0ee <_strtod_l+0x4d6>
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4689      	mov	r9, r1
 800a0ee:	4b2f      	ldr	r3, [pc, #188]	; (800a1ac <_strtod_l+0x594>)
 800a0f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a0f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a0f8:	4642      	mov	r2, r8
 800a0fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0fe:	464b      	mov	r3, r9
 800a100:	f7f6 f9f4 	bl	80004ec <__aeabi_dmul>
 800a104:	4b26      	ldr	r3, [pc, #152]	; (800a1a0 <_strtod_l+0x588>)
 800a106:	460a      	mov	r2, r1
 800a108:	400b      	ands	r3, r1
 800a10a:	4929      	ldr	r1, [pc, #164]	; (800a1b0 <_strtod_l+0x598>)
 800a10c:	4680      	mov	r8, r0
 800a10e:	428b      	cmp	r3, r1
 800a110:	d8b9      	bhi.n	800a086 <_strtod_l+0x46e>
 800a112:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a116:	428b      	cmp	r3, r1
 800a118:	bf86      	itte	hi
 800a11a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a11e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a1b4 <_strtod_l+0x59c>
 800a122:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a126:	2300      	movs	r3, #0
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	e07f      	b.n	800a22c <_strtod_l+0x614>
 800a12c:	07f2      	lsls	r2, r6, #31
 800a12e:	d505      	bpl.n	800a13c <_strtod_l+0x524>
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f9d9 	bl	80004ec <__aeabi_dmul>
 800a13a:	2301      	movs	r3, #1
 800a13c:	9a05      	ldr	r2, [sp, #20]
 800a13e:	3701      	adds	r7, #1
 800a140:	3208      	adds	r2, #8
 800a142:	1076      	asrs	r6, r6, #1
 800a144:	9205      	str	r2, [sp, #20]
 800a146:	e7cd      	b.n	800a0e4 <_strtod_l+0x4cc>
 800a148:	d0ed      	beq.n	800a126 <_strtod_l+0x50e>
 800a14a:	4276      	negs	r6, r6
 800a14c:	f016 020f 	ands.w	r2, r6, #15
 800a150:	d00a      	beq.n	800a168 <_strtod_l+0x550>
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <_strtod_l+0x590>)
 800a154:	4640      	mov	r0, r8
 800a156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a15a:	4649      	mov	r1, r9
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 faee 	bl	8000740 <__aeabi_ddiv>
 800a164:	4680      	mov	r8, r0
 800a166:	4689      	mov	r9, r1
 800a168:	1136      	asrs	r6, r6, #4
 800a16a:	d0dc      	beq.n	800a126 <_strtod_l+0x50e>
 800a16c:	2e1f      	cmp	r6, #31
 800a16e:	dd23      	ble.n	800a1b8 <_strtod_l+0x5a0>
 800a170:	f04f 0b00 	mov.w	fp, #0
 800a174:	f8cd b010 	str.w	fp, [sp, #16]
 800a178:	f8cd b020 	str.w	fp, [sp, #32]
 800a17c:	f8cd b018 	str.w	fp, [sp, #24]
 800a180:	2322      	movs	r3, #34	; 0x22
 800a182:	f04f 0800 	mov.w	r8, #0
 800a186:	f04f 0900 	mov.w	r9, #0
 800a18a:	f8ca 3000 	str.w	r3, [sl]
 800a18e:	e789      	b.n	800a0a4 <_strtod_l+0x48c>
 800a190:	0800e791 	.word	0x0800e791
 800a194:	0800e7d4 	.word	0x0800e7d4
 800a198:	0800e789 	.word	0x0800e789
 800a19c:	0800e914 	.word	0x0800e914
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	0800ebc0 	.word	0x0800ebc0
 800a1a8:	0800eaa0 	.word	0x0800eaa0
 800a1ac:	0800ea78 	.word	0x0800ea78
 800a1b0:	7ca00000 	.word	0x7ca00000
 800a1b4:	7fefffff 	.word	0x7fefffff
 800a1b8:	f016 0310 	ands.w	r3, r6, #16
 800a1bc:	bf18      	it	ne
 800a1be:	236a      	movne	r3, #106	; 0x6a
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	9305      	str	r3, [sp, #20]
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4fb0      	ldr	r7, [pc, #704]	; (800a48c <_strtod_l+0x874>)
 800a1ca:	07f2      	lsls	r2, r6, #31
 800a1cc:	d504      	bpl.n	800a1d8 <_strtod_l+0x5c0>
 800a1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d2:	f7f6 f98b 	bl	80004ec <__aeabi_dmul>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	1076      	asrs	r6, r6, #1
 800a1da:	f107 0708 	add.w	r7, r7, #8
 800a1de:	d1f4      	bne.n	800a1ca <_strtod_l+0x5b2>
 800a1e0:	b10b      	cbz	r3, 800a1e6 <_strtod_l+0x5ce>
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	4689      	mov	r9, r1
 800a1e6:	9b05      	ldr	r3, [sp, #20]
 800a1e8:	b1c3      	cbz	r3, 800a21c <_strtod_l+0x604>
 800a1ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a1ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	4649      	mov	r1, r9
 800a1f6:	dd11      	ble.n	800a21c <_strtod_l+0x604>
 800a1f8:	2b1f      	cmp	r3, #31
 800a1fa:	f340 8127 	ble.w	800a44c <_strtod_l+0x834>
 800a1fe:	2b34      	cmp	r3, #52	; 0x34
 800a200:	bfd8      	it	le
 800a202:	f04f 33ff 	movle.w	r3, #4294967295
 800a206:	f04f 0800 	mov.w	r8, #0
 800a20a:	bfcf      	iteee	gt
 800a20c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a210:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a214:	fa03 f202 	lslle.w	r2, r3, r2
 800a218:	ea02 0901 	andle.w	r9, r2, r1
 800a21c:	2200      	movs	r2, #0
 800a21e:	2300      	movs	r3, #0
 800a220:	4640      	mov	r0, r8
 800a222:	4649      	mov	r1, r9
 800a224:	f7f6 fbca 	bl	80009bc <__aeabi_dcmpeq>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1a1      	bne.n	800a170 <_strtod_l+0x558>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	465a      	mov	r2, fp
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4650      	mov	r0, sl
 800a234:	4623      	mov	r3, r4
 800a236:	9908      	ldr	r1, [sp, #32]
 800a238:	f001 fe0e 	bl	800be58 <__s2b>
 800a23c:	9008      	str	r0, [sp, #32]
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f af21 	beq.w	800a086 <_strtod_l+0x46e>
 800a244:	9b04      	ldr	r3, [sp, #16]
 800a246:	f04f 0b00 	mov.w	fp, #0
 800a24a:	1b5d      	subs	r5, r3, r5
 800a24c:	9b07      	ldr	r3, [sp, #28]
 800a24e:	f8cd b010 	str.w	fp, [sp, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	bfb4      	ite	lt
 800a256:	462b      	movlt	r3, r5
 800a258:	2300      	movge	r3, #0
 800a25a:	930e      	str	r3, [sp, #56]	; 0x38
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a262:	9314      	str	r3, [sp, #80]	; 0x50
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	4650      	mov	r0, sl
 800a268:	6859      	ldr	r1, [r3, #4]
 800a26a:	f001 fd4d 	bl	800bd08 <_Balloc>
 800a26e:	9006      	str	r0, [sp, #24]
 800a270:	2800      	cmp	r0, #0
 800a272:	f43f af10 	beq.w	800a096 <_strtod_l+0x47e>
 800a276:	9b08      	ldr	r3, [sp, #32]
 800a278:	300c      	adds	r0, #12
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	f103 010c 	add.w	r1, r3, #12
 800a280:	3202      	adds	r2, #2
 800a282:	0092      	lsls	r2, r2, #2
 800a284:	f7fe fdf4 	bl	8008e70 <memcpy>
 800a288:	ab1c      	add	r3, sp, #112	; 0x70
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	4642      	mov	r2, r8
 800a292:	464b      	mov	r3, r9
 800a294:	4650      	mov	r0, sl
 800a296:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a29a:	f002 f91f 	bl	800c4dc <__d2b>
 800a29e:	901a      	str	r0, [sp, #104]	; 0x68
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	f43f aef8 	beq.w	800a096 <_strtod_l+0x47e>
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	f001 fe6d 	bl	800bf88 <__i2b>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	9004      	str	r0, [sp, #16]
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	f43f aeef 	beq.w	800a096 <_strtod_l+0x47e>
 800a2b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a2ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a2bc:	2d00      	cmp	r5, #0
 800a2be:	bfab      	itete	ge
 800a2c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a2c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a2c4:	18ee      	addge	r6, r5, r3
 800a2c6:	1b5c      	sublt	r4, r3, r5
 800a2c8:	9b05      	ldr	r3, [sp, #20]
 800a2ca:	bfa8      	it	ge
 800a2cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a2ce:	eba5 0503 	sub.w	r5, r5, r3
 800a2d2:	4415      	add	r5, r2
 800a2d4:	4b6e      	ldr	r3, [pc, #440]	; (800a490 <_strtod_l+0x878>)
 800a2d6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a2da:	bfb8      	it	lt
 800a2dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a2de:	429d      	cmp	r5, r3
 800a2e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a2e4:	f280 80c4 	bge.w	800a470 <_strtod_l+0x858>
 800a2e8:	1b5b      	subs	r3, r3, r5
 800a2ea:	2b1f      	cmp	r3, #31
 800a2ec:	f04f 0701 	mov.w	r7, #1
 800a2f0:	eba2 0203 	sub.w	r2, r2, r3
 800a2f4:	f300 80b1 	bgt.w	800a45a <_strtod_l+0x842>
 800a2f8:	2500      	movs	r5, #0
 800a2fa:	fa07 f303 	lsl.w	r3, r7, r3
 800a2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a300:	18b7      	adds	r7, r6, r2
 800a302:	9b05      	ldr	r3, [sp, #20]
 800a304:	42be      	cmp	r6, r7
 800a306:	4414      	add	r4, r2
 800a308:	441c      	add	r4, r3
 800a30a:	4633      	mov	r3, r6
 800a30c:	bfa8      	it	ge
 800a30e:	463b      	movge	r3, r7
 800a310:	42a3      	cmp	r3, r4
 800a312:	bfa8      	it	ge
 800a314:	4623      	movge	r3, r4
 800a316:	2b00      	cmp	r3, #0
 800a318:	bfc2      	ittt	gt
 800a31a:	1aff      	subgt	r7, r7, r3
 800a31c:	1ae4      	subgt	r4, r4, r3
 800a31e:	1af6      	subgt	r6, r6, r3
 800a320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a322:	2b00      	cmp	r3, #0
 800a324:	dd17      	ble.n	800a356 <_strtod_l+0x73e>
 800a326:	461a      	mov	r2, r3
 800a328:	4650      	mov	r0, sl
 800a32a:	9904      	ldr	r1, [sp, #16]
 800a32c:	f001 feea 	bl	800c104 <__pow5mult>
 800a330:	9004      	str	r0, [sp, #16]
 800a332:	2800      	cmp	r0, #0
 800a334:	f43f aeaf 	beq.w	800a096 <_strtod_l+0x47e>
 800a338:	4601      	mov	r1, r0
 800a33a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a33c:	4650      	mov	r0, sl
 800a33e:	f001 fe39 	bl	800bfb4 <__multiply>
 800a342:	9009      	str	r0, [sp, #36]	; 0x24
 800a344:	2800      	cmp	r0, #0
 800a346:	f43f aea6 	beq.w	800a096 <_strtod_l+0x47e>
 800a34a:	4650      	mov	r0, sl
 800a34c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a34e:	f001 fd1b 	bl	800bd88 <_Bfree>
 800a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a354:	931a      	str	r3, [sp, #104]	; 0x68
 800a356:	2f00      	cmp	r7, #0
 800a358:	f300 808e 	bgt.w	800a478 <_strtod_l+0x860>
 800a35c:	9b07      	ldr	r3, [sp, #28]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	dd08      	ble.n	800a374 <_strtod_l+0x75c>
 800a362:	4650      	mov	r0, sl
 800a364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a366:	9906      	ldr	r1, [sp, #24]
 800a368:	f001 fecc 	bl	800c104 <__pow5mult>
 800a36c:	9006      	str	r0, [sp, #24]
 800a36e:	2800      	cmp	r0, #0
 800a370:	f43f ae91 	beq.w	800a096 <_strtod_l+0x47e>
 800a374:	2c00      	cmp	r4, #0
 800a376:	dd08      	ble.n	800a38a <_strtod_l+0x772>
 800a378:	4622      	mov	r2, r4
 800a37a:	4650      	mov	r0, sl
 800a37c:	9906      	ldr	r1, [sp, #24]
 800a37e:	f001 ff1b 	bl	800c1b8 <__lshift>
 800a382:	9006      	str	r0, [sp, #24]
 800a384:	2800      	cmp	r0, #0
 800a386:	f43f ae86 	beq.w	800a096 <_strtod_l+0x47e>
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	dd08      	ble.n	800a3a0 <_strtod_l+0x788>
 800a38e:	4632      	mov	r2, r6
 800a390:	4650      	mov	r0, sl
 800a392:	9904      	ldr	r1, [sp, #16]
 800a394:	f001 ff10 	bl	800c1b8 <__lshift>
 800a398:	9004      	str	r0, [sp, #16]
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f43f ae7b 	beq.w	800a096 <_strtod_l+0x47e>
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	9a06      	ldr	r2, [sp, #24]
 800a3a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3a6:	f001 ff93 	bl	800c2d0 <__mdiff>
 800a3aa:	4683      	mov	fp, r0
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f43f ae72 	beq.w	800a096 <_strtod_l+0x47e>
 800a3b2:	2400      	movs	r4, #0
 800a3b4:	68c3      	ldr	r3, [r0, #12]
 800a3b6:	9904      	ldr	r1, [sp, #16]
 800a3b8:	60c4      	str	r4, [r0, #12]
 800a3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3bc:	f001 ff6c 	bl	800c298 <__mcmp>
 800a3c0:	42a0      	cmp	r0, r4
 800a3c2:	da6b      	bge.n	800a49c <_strtod_l+0x884>
 800a3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c6:	ea53 0308 	orrs.w	r3, r3, r8
 800a3ca:	f040 8091 	bne.w	800a4f0 <_strtod_l+0x8d8>
 800a3ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f040 808c 	bne.w	800a4f0 <_strtod_l+0x8d8>
 800a3d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3dc:	0d1b      	lsrs	r3, r3, #20
 800a3de:	051b      	lsls	r3, r3, #20
 800a3e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a3e4:	f240 8084 	bls.w	800a4f0 <_strtod_l+0x8d8>
 800a3e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a3ec:	b91b      	cbnz	r3, 800a3f6 <_strtod_l+0x7de>
 800a3ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	dd7c      	ble.n	800a4f0 <_strtod_l+0x8d8>
 800a3f6:	4659      	mov	r1, fp
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f001 fedc 	bl	800c1b8 <__lshift>
 800a400:	9904      	ldr	r1, [sp, #16]
 800a402:	4683      	mov	fp, r0
 800a404:	f001 ff48 	bl	800c298 <__mcmp>
 800a408:	2800      	cmp	r0, #0
 800a40a:	dd71      	ble.n	800a4f0 <_strtod_l+0x8d8>
 800a40c:	9905      	ldr	r1, [sp, #20]
 800a40e:	464b      	mov	r3, r9
 800a410:	4a20      	ldr	r2, [pc, #128]	; (800a494 <_strtod_l+0x87c>)
 800a412:	2900      	cmp	r1, #0
 800a414:	f000 808c 	beq.w	800a530 <_strtod_l+0x918>
 800a418:	ea02 0109 	and.w	r1, r2, r9
 800a41c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a420:	f300 8086 	bgt.w	800a530 <_strtod_l+0x918>
 800a424:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a428:	f77f aeaa 	ble.w	800a180 <_strtod_l+0x568>
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	4b19      	ldr	r3, [pc, #100]	; (800a498 <_strtod_l+0x880>)
 800a432:	2200      	movs	r2, #0
 800a434:	f7f6 f85a 	bl	80004ec <__aeabi_dmul>
 800a438:	460b      	mov	r3, r1
 800a43a:	4303      	orrs	r3, r0
 800a43c:	bf08      	it	eq
 800a43e:	2322      	moveq	r3, #34	; 0x22
 800a440:	4680      	mov	r8, r0
 800a442:	4689      	mov	r9, r1
 800a444:	bf08      	it	eq
 800a446:	f8ca 3000 	streq.w	r3, [sl]
 800a44a:	e62f      	b.n	800a0ac <_strtod_l+0x494>
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	fa02 f303 	lsl.w	r3, r2, r3
 800a454:	ea03 0808 	and.w	r8, r3, r8
 800a458:	e6e0      	b.n	800a21c <_strtod_l+0x604>
 800a45a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a45e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a462:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a466:	35e2      	adds	r5, #226	; 0xe2
 800a468:	fa07 f505 	lsl.w	r5, r7, r5
 800a46c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a46e:	e747      	b.n	800a300 <_strtod_l+0x6e8>
 800a470:	2301      	movs	r3, #1
 800a472:	2500      	movs	r5, #0
 800a474:	930f      	str	r3, [sp, #60]	; 0x3c
 800a476:	e743      	b.n	800a300 <_strtod_l+0x6e8>
 800a478:	463a      	mov	r2, r7
 800a47a:	4650      	mov	r0, sl
 800a47c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a47e:	f001 fe9b 	bl	800c1b8 <__lshift>
 800a482:	901a      	str	r0, [sp, #104]	; 0x68
 800a484:	2800      	cmp	r0, #0
 800a486:	f47f af69 	bne.w	800a35c <_strtod_l+0x744>
 800a48a:	e604      	b.n	800a096 <_strtod_l+0x47e>
 800a48c:	0800e7e8 	.word	0x0800e7e8
 800a490:	fffffc02 	.word	0xfffffc02
 800a494:	7ff00000 	.word	0x7ff00000
 800a498:	39500000 	.word	0x39500000
 800a49c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a4a0:	d165      	bne.n	800a56e <_strtod_l+0x956>
 800a4a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4a8:	b35a      	cbz	r2, 800a502 <_strtod_l+0x8ea>
 800a4aa:	4a99      	ldr	r2, [pc, #612]	; (800a710 <_strtod_l+0xaf8>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d12b      	bne.n	800a508 <_strtod_l+0x8f0>
 800a4b0:	9b05      	ldr	r3, [sp, #20]
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	b303      	cbz	r3, 800a4f8 <_strtod_l+0x8e0>
 800a4b6:	464a      	mov	r2, r9
 800a4b8:	4b96      	ldr	r3, [pc, #600]	; (800a714 <_strtod_l+0xafc>)
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c4:	d81b      	bhi.n	800a4fe <_strtod_l+0x8e6>
 800a4c6:	0d1b      	lsrs	r3, r3, #20
 800a4c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d119      	bne.n	800a508 <_strtod_l+0x8f0>
 800a4d4:	4b90      	ldr	r3, [pc, #576]	; (800a718 <_strtod_l+0xb00>)
 800a4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d102      	bne.n	800a4e2 <_strtod_l+0x8ca>
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f43f adda 	beq.w	800a096 <_strtod_l+0x47e>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	4b8b      	ldr	r3, [pc, #556]	; (800a714 <_strtod_l+0xafc>)
 800a4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ea:	401a      	ands	r2, r3
 800a4ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a4f0:	9b05      	ldr	r3, [sp, #20]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d19a      	bne.n	800a42c <_strtod_l+0x814>
 800a4f6:	e5d9      	b.n	800a0ac <_strtod_l+0x494>
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	e7e8      	b.n	800a4d0 <_strtod_l+0x8b8>
 800a4fe:	4613      	mov	r3, r2
 800a500:	e7e6      	b.n	800a4d0 <_strtod_l+0x8b8>
 800a502:	ea53 0308 	orrs.w	r3, r3, r8
 800a506:	d081      	beq.n	800a40c <_strtod_l+0x7f4>
 800a508:	b1e5      	cbz	r5, 800a544 <_strtod_l+0x92c>
 800a50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a50c:	421d      	tst	r5, r3
 800a50e:	d0ef      	beq.n	800a4f0 <_strtod_l+0x8d8>
 800a510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a512:	4640      	mov	r0, r8
 800a514:	4649      	mov	r1, r9
 800a516:	9a05      	ldr	r2, [sp, #20]
 800a518:	b1c3      	cbz	r3, 800a54c <_strtod_l+0x934>
 800a51a:	f7ff fb59 	bl	8009bd0 <sulp>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a526:	f7f5 fe2b 	bl	8000180 <__adddf3>
 800a52a:	4680      	mov	r8, r0
 800a52c:	4689      	mov	r9, r1
 800a52e:	e7df      	b.n	800a4f0 <_strtod_l+0x8d8>
 800a530:	4013      	ands	r3, r2
 800a532:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a536:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a53a:	f04f 38ff 	mov.w	r8, #4294967295
 800a53e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a542:	e7d5      	b.n	800a4f0 <_strtod_l+0x8d8>
 800a544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a546:	ea13 0f08 	tst.w	r3, r8
 800a54a:	e7e0      	b.n	800a50e <_strtod_l+0x8f6>
 800a54c:	f7ff fb40 	bl	8009bd0 <sulp>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a558:	f7f5 fe10 	bl	800017c <__aeabi_dsub>
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	4680      	mov	r8, r0
 800a562:	4689      	mov	r9, r1
 800a564:	f7f6 fa2a 	bl	80009bc <__aeabi_dcmpeq>
 800a568:	2800      	cmp	r0, #0
 800a56a:	d0c1      	beq.n	800a4f0 <_strtod_l+0x8d8>
 800a56c:	e608      	b.n	800a180 <_strtod_l+0x568>
 800a56e:	4658      	mov	r0, fp
 800a570:	9904      	ldr	r1, [sp, #16]
 800a572:	f002 f80f 	bl	800c594 <__ratio>
 800a576:	2200      	movs	r2, #0
 800a578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a57c:	4606      	mov	r6, r0
 800a57e:	460f      	mov	r7, r1
 800a580:	f7f6 fa30 	bl	80009e4 <__aeabi_dcmple>
 800a584:	2800      	cmp	r0, #0
 800a586:	d070      	beq.n	800a66a <_strtod_l+0xa52>
 800a588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d042      	beq.n	800a614 <_strtod_l+0x9fc>
 800a58e:	2600      	movs	r6, #0
 800a590:	4f62      	ldr	r7, [pc, #392]	; (800a71c <_strtod_l+0xb04>)
 800a592:	4d62      	ldr	r5, [pc, #392]	; (800a71c <_strtod_l+0xb04>)
 800a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a59a:	0d1b      	lsrs	r3, r3, #20
 800a59c:	051b      	lsls	r3, r3, #20
 800a59e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5a2:	4b5f      	ldr	r3, [pc, #380]	; (800a720 <_strtod_l+0xb08>)
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	f040 80c3 	bne.w	800a730 <_strtod_l+0xb18>
 800a5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	f001 ff18 	bl	800c3e8 <__ulp>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4639      	mov	r1, r7
 800a5c0:	f7f5 ff94 	bl	80004ec <__aeabi_dmul>
 800a5c4:	4642      	mov	r2, r8
 800a5c6:	464b      	mov	r3, r9
 800a5c8:	f7f5 fdda 	bl	8000180 <__adddf3>
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4951      	ldr	r1, [pc, #324]	; (800a714 <_strtod_l+0xafc>)
 800a5d0:	4a54      	ldr	r2, [pc, #336]	; (800a724 <_strtod_l+0xb0c>)
 800a5d2:	4019      	ands	r1, r3
 800a5d4:	4291      	cmp	r1, r2
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	d95d      	bls.n	800a696 <_strtod_l+0xa7e>
 800a5da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5dc:	4b4e      	ldr	r3, [pc, #312]	; (800a718 <_strtod_l+0xb00>)
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d103      	bne.n	800a5ea <_strtod_l+0x9d2>
 800a5e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	f43f ad56 	beq.w	800a096 <_strtod_l+0x47e>
 800a5ea:	f04f 38ff 	mov.w	r8, #4294967295
 800a5ee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a718 <_strtod_l+0xb00>
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5f6:	f001 fbc7 	bl	800bd88 <_Bfree>
 800a5fa:	4650      	mov	r0, sl
 800a5fc:	9906      	ldr	r1, [sp, #24]
 800a5fe:	f001 fbc3 	bl	800bd88 <_Bfree>
 800a602:	4650      	mov	r0, sl
 800a604:	9904      	ldr	r1, [sp, #16]
 800a606:	f001 fbbf 	bl	800bd88 <_Bfree>
 800a60a:	4659      	mov	r1, fp
 800a60c:	4650      	mov	r0, sl
 800a60e:	f001 fbbb 	bl	800bd88 <_Bfree>
 800a612:	e627      	b.n	800a264 <_strtod_l+0x64c>
 800a614:	f1b8 0f00 	cmp.w	r8, #0
 800a618:	d119      	bne.n	800a64e <_strtod_l+0xa36>
 800a61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a620:	b9e3      	cbnz	r3, 800a65c <_strtod_l+0xa44>
 800a622:	2200      	movs	r2, #0
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	4b3c      	ldr	r3, [pc, #240]	; (800a71c <_strtod_l+0xb04>)
 800a62a:	f7f6 f9d1 	bl	80009d0 <__aeabi_dcmplt>
 800a62e:	b9c8      	cbnz	r0, 800a664 <_strtod_l+0xa4c>
 800a630:	2200      	movs	r2, #0
 800a632:	4630      	mov	r0, r6
 800a634:	4639      	mov	r1, r7
 800a636:	4b3c      	ldr	r3, [pc, #240]	; (800a728 <_strtod_l+0xb10>)
 800a638:	f7f5 ff58 	bl	80004ec <__aeabi_dmul>
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a644:	9416      	str	r4, [sp, #88]	; 0x58
 800a646:	9317      	str	r3, [sp, #92]	; 0x5c
 800a648:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a64c:	e7a2      	b.n	800a594 <_strtod_l+0x97c>
 800a64e:	f1b8 0f01 	cmp.w	r8, #1
 800a652:	d103      	bne.n	800a65c <_strtod_l+0xa44>
 800a654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a656:	2b00      	cmp	r3, #0
 800a658:	f43f ad92 	beq.w	800a180 <_strtod_l+0x568>
 800a65c:	2600      	movs	r6, #0
 800a65e:	2400      	movs	r4, #0
 800a660:	4f32      	ldr	r7, [pc, #200]	; (800a72c <_strtod_l+0xb14>)
 800a662:	e796      	b.n	800a592 <_strtod_l+0x97a>
 800a664:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a666:	4d30      	ldr	r5, [pc, #192]	; (800a728 <_strtod_l+0xb10>)
 800a668:	e7ea      	b.n	800a640 <_strtod_l+0xa28>
 800a66a:	4b2f      	ldr	r3, [pc, #188]	; (800a728 <_strtod_l+0xb10>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	4630      	mov	r0, r6
 800a670:	4639      	mov	r1, r7
 800a672:	f7f5 ff3b 	bl	80004ec <__aeabi_dmul>
 800a676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a678:	4604      	mov	r4, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	b933      	cbnz	r3, 800a68c <_strtod_l+0xa74>
 800a67e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a682:	9010      	str	r0, [sp, #64]	; 0x40
 800a684:	9311      	str	r3, [sp, #68]	; 0x44
 800a686:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a68a:	e783      	b.n	800a594 <_strtod_l+0x97c>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a694:	e7f7      	b.n	800a686 <_strtod_l+0xa6e>
 800a696:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a69a:	9b05      	ldr	r3, [sp, #20]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1a8      	bne.n	800a5f2 <_strtod_l+0x9da>
 800a6a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a6a6:	0d1b      	lsrs	r3, r3, #20
 800a6a8:	051b      	lsls	r3, r3, #20
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d1a1      	bne.n	800a5f2 <_strtod_l+0x9da>
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7f6 fd57 	bl	8001164 <__aeabi_d2lz>
 800a6b6:	f7f5 feeb 	bl	8000490 <__aeabi_l2d>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f5 fd5b 	bl	800017c <__aeabi_dsub>
 800a6c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6cc:	ea43 0308 	orr.w	r3, r3, r8
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	460d      	mov	r5, r1
 800a6d6:	d066      	beq.n	800a7a6 <_strtod_l+0xb8e>
 800a6d8:	a309      	add	r3, pc, #36	; (adr r3, 800a700 <_strtod_l+0xae8>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f7f6 f977 	bl	80009d0 <__aeabi_dcmplt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f47f ace2 	bne.w	800a0ac <_strtod_l+0x494>
 800a6e8:	a307      	add	r3, pc, #28	; (adr r3, 800a708 <_strtod_l+0xaf0>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f6 f98b 	bl	8000a0c <__aeabi_dcmpgt>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f43f af7b 	beq.w	800a5f2 <_strtod_l+0x9da>
 800a6fc:	e4d6      	b.n	800a0ac <_strtod_l+0x494>
 800a6fe:	bf00      	nop
 800a700:	94a03595 	.word	0x94a03595
 800a704:	3fdfffff 	.word	0x3fdfffff
 800a708:	35afe535 	.word	0x35afe535
 800a70c:	3fe00000 	.word	0x3fe00000
 800a710:	000fffff 	.word	0x000fffff
 800a714:	7ff00000 	.word	0x7ff00000
 800a718:	7fefffff 	.word	0x7fefffff
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	7fe00000 	.word	0x7fe00000
 800a724:	7c9fffff 	.word	0x7c9fffff
 800a728:	3fe00000 	.word	0x3fe00000
 800a72c:	bff00000 	.word	0xbff00000
 800a730:	9b05      	ldr	r3, [sp, #20]
 800a732:	b313      	cbz	r3, 800a77a <_strtod_l+0xb62>
 800a734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a736:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a73a:	d81e      	bhi.n	800a77a <_strtod_l+0xb62>
 800a73c:	a326      	add	r3, pc, #152	; (adr r3, 800a7d8 <_strtod_l+0xbc0>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f6 f94d 	bl	80009e4 <__aeabi_dcmple>
 800a74a:	b190      	cbz	r0, 800a772 <_strtod_l+0xb5a>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4620      	mov	r0, r4
 800a750:	f7f6 f9a4 	bl	8000a9c <__aeabi_d2uiz>
 800a754:	2801      	cmp	r0, #1
 800a756:	bf38      	it	cc
 800a758:	2001      	movcc	r0, #1
 800a75a:	f7f5 fe4d 	bl	80003f8 <__aeabi_ui2d>
 800a75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a760:	4604      	mov	r4, r0
 800a762:	460d      	mov	r5, r1
 800a764:	b9d3      	cbnz	r3, 800a79c <_strtod_l+0xb84>
 800a766:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a76a:	9012      	str	r0, [sp, #72]	; 0x48
 800a76c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a76e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a772:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a774:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a778:	1a9f      	subs	r7, r3, r2
 800a77a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a77e:	f001 fe33 	bl	800c3e8 <__ulp>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4630      	mov	r0, r6
 800a788:	4639      	mov	r1, r7
 800a78a:	f7f5 feaf 	bl	80004ec <__aeabi_dmul>
 800a78e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a792:	f7f5 fcf5 	bl	8000180 <__adddf3>
 800a796:	4680      	mov	r8, r0
 800a798:	4689      	mov	r9, r1
 800a79a:	e77e      	b.n	800a69a <_strtod_l+0xa82>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a7a4:	e7e3      	b.n	800a76e <_strtod_l+0xb56>
 800a7a6:	a30e      	add	r3, pc, #56	; (adr r3, 800a7e0 <_strtod_l+0xbc8>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f6 f910 	bl	80009d0 <__aeabi_dcmplt>
 800a7b0:	e7a1      	b.n	800a6f6 <_strtod_l+0xade>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	f7ff ba71 	b.w	8009ca2 <_strtod_l+0x8a>
 800a7c0:	2a65      	cmp	r2, #101	; 0x65
 800a7c2:	f43f ab63 	beq.w	8009e8c <_strtod_l+0x274>
 800a7c6:	2a45      	cmp	r2, #69	; 0x45
 800a7c8:	f43f ab60 	beq.w	8009e8c <_strtod_l+0x274>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f7ff bb95 	b.w	8009efc <_strtod_l+0x2e4>
 800a7d2:	bf00      	nop
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	ffc00000 	.word	0xffc00000
 800a7dc:	41dfffff 	.word	0x41dfffff
 800a7e0:	94a03595 	.word	0x94a03595
 800a7e4:	3fcfffff 	.word	0x3fcfffff

0800a7e8 <_strtod_r>:
 800a7e8:	4b01      	ldr	r3, [pc, #4]	; (800a7f0 <_strtod_r+0x8>)
 800a7ea:	f7ff ba15 	b.w	8009c18 <_strtod_l>
 800a7ee:	bf00      	nop
 800a7f0:	20000084 	.word	0x20000084

0800a7f4 <_strtol_l.constprop.0>:
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	d001      	beq.n	800a802 <_strtol_l.constprop.0+0xe>
 800a7fe:	2b24      	cmp	r3, #36	; 0x24
 800a800:	d906      	bls.n	800a810 <_strtol_l.constprop.0+0x1c>
 800a802:	f7fe fb0b 	bl	8008e1c <__errno>
 800a806:	2316      	movs	r3, #22
 800a808:	6003      	str	r3, [r0, #0]
 800a80a:	2000      	movs	r0, #0
 800a80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a810:	460d      	mov	r5, r1
 800a812:	4f35      	ldr	r7, [pc, #212]	; (800a8e8 <_strtol_l.constprop.0+0xf4>)
 800a814:	4628      	mov	r0, r5
 800a816:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a81a:	5de6      	ldrb	r6, [r4, r7]
 800a81c:	f016 0608 	ands.w	r6, r6, #8
 800a820:	d1f8      	bne.n	800a814 <_strtol_l.constprop.0+0x20>
 800a822:	2c2d      	cmp	r4, #45	; 0x2d
 800a824:	d12f      	bne.n	800a886 <_strtol_l.constprop.0+0x92>
 800a826:	2601      	movs	r6, #1
 800a828:	782c      	ldrb	r4, [r5, #0]
 800a82a:	1c85      	adds	r5, r0, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d057      	beq.n	800a8e0 <_strtol_l.constprop.0+0xec>
 800a830:	2b10      	cmp	r3, #16
 800a832:	d109      	bne.n	800a848 <_strtol_l.constprop.0+0x54>
 800a834:	2c30      	cmp	r4, #48	; 0x30
 800a836:	d107      	bne.n	800a848 <_strtol_l.constprop.0+0x54>
 800a838:	7828      	ldrb	r0, [r5, #0]
 800a83a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a83e:	2858      	cmp	r0, #88	; 0x58
 800a840:	d149      	bne.n	800a8d6 <_strtol_l.constprop.0+0xe2>
 800a842:	2310      	movs	r3, #16
 800a844:	786c      	ldrb	r4, [r5, #1]
 800a846:	3502      	adds	r5, #2
 800a848:	2700      	movs	r7, #0
 800a84a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a84e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a852:	fbbe f9f3 	udiv	r9, lr, r3
 800a856:	4638      	mov	r0, r7
 800a858:	fb03 ea19 	mls	sl, r3, r9, lr
 800a85c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a860:	f1bc 0f09 	cmp.w	ip, #9
 800a864:	d814      	bhi.n	800a890 <_strtol_l.constprop.0+0x9c>
 800a866:	4664      	mov	r4, ip
 800a868:	42a3      	cmp	r3, r4
 800a86a:	dd22      	ble.n	800a8b2 <_strtol_l.constprop.0+0xbe>
 800a86c:	2f00      	cmp	r7, #0
 800a86e:	db1d      	blt.n	800a8ac <_strtol_l.constprop.0+0xb8>
 800a870:	4581      	cmp	r9, r0
 800a872:	d31b      	bcc.n	800a8ac <_strtol_l.constprop.0+0xb8>
 800a874:	d101      	bne.n	800a87a <_strtol_l.constprop.0+0x86>
 800a876:	45a2      	cmp	sl, r4
 800a878:	db18      	blt.n	800a8ac <_strtol_l.constprop.0+0xb8>
 800a87a:	2701      	movs	r7, #1
 800a87c:	fb00 4003 	mla	r0, r0, r3, r4
 800a880:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a884:	e7ea      	b.n	800a85c <_strtol_l.constprop.0+0x68>
 800a886:	2c2b      	cmp	r4, #43	; 0x2b
 800a888:	bf04      	itt	eq
 800a88a:	782c      	ldrbeq	r4, [r5, #0]
 800a88c:	1c85      	addeq	r5, r0, #2
 800a88e:	e7cd      	b.n	800a82c <_strtol_l.constprop.0+0x38>
 800a890:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a894:	f1bc 0f19 	cmp.w	ip, #25
 800a898:	d801      	bhi.n	800a89e <_strtol_l.constprop.0+0xaa>
 800a89a:	3c37      	subs	r4, #55	; 0x37
 800a89c:	e7e4      	b.n	800a868 <_strtol_l.constprop.0+0x74>
 800a89e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8a2:	f1bc 0f19 	cmp.w	ip, #25
 800a8a6:	d804      	bhi.n	800a8b2 <_strtol_l.constprop.0+0xbe>
 800a8a8:	3c57      	subs	r4, #87	; 0x57
 800a8aa:	e7dd      	b.n	800a868 <_strtol_l.constprop.0+0x74>
 800a8ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b0:	e7e6      	b.n	800a880 <_strtol_l.constprop.0+0x8c>
 800a8b2:	2f00      	cmp	r7, #0
 800a8b4:	da07      	bge.n	800a8c6 <_strtol_l.constprop.0+0xd2>
 800a8b6:	2322      	movs	r3, #34	; 0x22
 800a8b8:	4670      	mov	r0, lr
 800a8ba:	f8c8 3000 	str.w	r3, [r8]
 800a8be:	2a00      	cmp	r2, #0
 800a8c0:	d0a4      	beq.n	800a80c <_strtol_l.constprop.0+0x18>
 800a8c2:	1e69      	subs	r1, r5, #1
 800a8c4:	e005      	b.n	800a8d2 <_strtol_l.constprop.0+0xde>
 800a8c6:	b106      	cbz	r6, 800a8ca <_strtol_l.constprop.0+0xd6>
 800a8c8:	4240      	negs	r0, r0
 800a8ca:	2a00      	cmp	r2, #0
 800a8cc:	d09e      	beq.n	800a80c <_strtol_l.constprop.0+0x18>
 800a8ce:	2f00      	cmp	r7, #0
 800a8d0:	d1f7      	bne.n	800a8c2 <_strtol_l.constprop.0+0xce>
 800a8d2:	6011      	str	r1, [r2, #0]
 800a8d4:	e79a      	b.n	800a80c <_strtol_l.constprop.0+0x18>
 800a8d6:	2430      	movs	r4, #48	; 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1b5      	bne.n	800a848 <_strtol_l.constprop.0+0x54>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	e7b3      	b.n	800a848 <_strtol_l.constprop.0+0x54>
 800a8e0:	2c30      	cmp	r4, #48	; 0x30
 800a8e2:	d0a9      	beq.n	800a838 <_strtol_l.constprop.0+0x44>
 800a8e4:	230a      	movs	r3, #10
 800a8e6:	e7af      	b.n	800a848 <_strtol_l.constprop.0+0x54>
 800a8e8:	0800e811 	.word	0x0800e811

0800a8ec <_strtol_r>:
 800a8ec:	f7ff bf82 	b.w	800a7f4 <_strtol_l.constprop.0>

0800a8f0 <quorem>:
 800a8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	6903      	ldr	r3, [r0, #16]
 800a8f6:	690c      	ldr	r4, [r1, #16]
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	42a3      	cmp	r3, r4
 800a8fc:	f2c0 8082 	blt.w	800aa04 <quorem+0x114>
 800a900:	3c01      	subs	r4, #1
 800a902:	f100 0514 	add.w	r5, r0, #20
 800a906:	f101 0814 	add.w	r8, r1, #20
 800a90a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a914:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a918:	3301      	adds	r3, #1
 800a91a:	429a      	cmp	r2, r3
 800a91c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a928:	d331      	bcc.n	800a98e <quorem+0x9e>
 800a92a:	f04f 0e00 	mov.w	lr, #0
 800a92e:	4640      	mov	r0, r8
 800a930:	46ac      	mov	ip, r5
 800a932:	46f2      	mov	sl, lr
 800a934:	f850 2b04 	ldr.w	r2, [r0], #4
 800a938:	b293      	uxth	r3, r2
 800a93a:	fb06 e303 	mla	r3, r6, r3, lr
 800a93e:	0c12      	lsrs	r2, r2, #16
 800a940:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a944:	b29b      	uxth	r3, r3
 800a946:	fb06 e202 	mla	r2, r6, r2, lr
 800a94a:	ebaa 0303 	sub.w	r3, sl, r3
 800a94e:	f8dc a000 	ldr.w	sl, [ip]
 800a952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a956:	fa1f fa8a 	uxth.w	sl, sl
 800a95a:	4453      	add	r3, sl
 800a95c:	f8dc a000 	ldr.w	sl, [ip]
 800a960:	b292      	uxth	r2, r2
 800a962:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a966:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a970:	4581      	cmp	r9, r0
 800a972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a976:	f84c 3b04 	str.w	r3, [ip], #4
 800a97a:	d2db      	bcs.n	800a934 <quorem+0x44>
 800a97c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a980:	b92b      	cbnz	r3, 800a98e <quorem+0x9e>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	3b04      	subs	r3, #4
 800a986:	429d      	cmp	r5, r3
 800a988:	461a      	mov	r2, r3
 800a98a:	d32f      	bcc.n	800a9ec <quorem+0xfc>
 800a98c:	613c      	str	r4, [r7, #16]
 800a98e:	4638      	mov	r0, r7
 800a990:	f001 fc82 	bl	800c298 <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	db25      	blt.n	800a9e4 <quorem+0xf4>
 800a998:	4628      	mov	r0, r5
 800a99a:	f04f 0c00 	mov.w	ip, #0
 800a99e:	3601      	adds	r6, #1
 800a9a0:	f858 1b04 	ldr.w	r1, [r8], #4
 800a9a4:	f8d0 e000 	ldr.w	lr, [r0]
 800a9a8:	b28b      	uxth	r3, r1
 800a9aa:	ebac 0303 	sub.w	r3, ip, r3
 800a9ae:	fa1f f28e 	uxth.w	r2, lr
 800a9b2:	4413      	add	r3, r2
 800a9b4:	0c0a      	lsrs	r2, r1, #16
 800a9b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a9ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9c4:	45c1      	cmp	r9, r8
 800a9c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a9ca:	f840 3b04 	str.w	r3, [r0], #4
 800a9ce:	d2e7      	bcs.n	800a9a0 <quorem+0xb0>
 800a9d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9d8:	b922      	cbnz	r2, 800a9e4 <quorem+0xf4>
 800a9da:	3b04      	subs	r3, #4
 800a9dc:	429d      	cmp	r5, r3
 800a9de:	461a      	mov	r2, r3
 800a9e0:	d30a      	bcc.n	800a9f8 <quorem+0x108>
 800a9e2:	613c      	str	r4, [r7, #16]
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	b003      	add	sp, #12
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	3b04      	subs	r3, #4
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d1cb      	bne.n	800a98c <quorem+0x9c>
 800a9f4:	3c01      	subs	r4, #1
 800a9f6:	e7c6      	b.n	800a986 <quorem+0x96>
 800a9f8:	6812      	ldr	r2, [r2, #0]
 800a9fa:	3b04      	subs	r3, #4
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	d1f0      	bne.n	800a9e2 <quorem+0xf2>
 800aa00:	3c01      	subs	r4, #1
 800aa02:	e7eb      	b.n	800a9dc <quorem+0xec>
 800aa04:	2000      	movs	r0, #0
 800aa06:	e7ee      	b.n	800a9e6 <quorem+0xf6>

0800aa08 <_dtoa_r>:
 800aa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0c:	4616      	mov	r6, r2
 800aa0e:	461f      	mov	r7, r3
 800aa10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa12:	b099      	sub	sp, #100	; 0x64
 800aa14:	4605      	mov	r5, r0
 800aa16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aa1a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aa1e:	b974      	cbnz	r4, 800aa3e <_dtoa_r+0x36>
 800aa20:	2010      	movs	r0, #16
 800aa22:	f001 f949 	bl	800bcb8 <malloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6268      	str	r0, [r5, #36]	; 0x24
 800aa2a:	b920      	cbnz	r0, 800aa36 <_dtoa_r+0x2e>
 800aa2c:	21ea      	movs	r1, #234	; 0xea
 800aa2e:	4ba8      	ldr	r3, [pc, #672]	; (800acd0 <_dtoa_r+0x2c8>)
 800aa30:	48a8      	ldr	r0, [pc, #672]	; (800acd4 <_dtoa_r+0x2cc>)
 800aa32:	f002 f8a5 	bl	800cb80 <__assert_func>
 800aa36:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa3a:	6004      	str	r4, [r0, #0]
 800aa3c:	60c4      	str	r4, [r0, #12]
 800aa3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa40:	6819      	ldr	r1, [r3, #0]
 800aa42:	b151      	cbz	r1, 800aa5a <_dtoa_r+0x52>
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	2301      	movs	r3, #1
 800aa48:	4093      	lsls	r3, r2
 800aa4a:	604a      	str	r2, [r1, #4]
 800aa4c:	608b      	str	r3, [r1, #8]
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f001 f99a 	bl	800bd88 <_Bfree>
 800aa54:	2200      	movs	r2, #0
 800aa56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	1e3b      	subs	r3, r7, #0
 800aa5c:	bfaf      	iteee	ge
 800aa5e:	2300      	movge	r3, #0
 800aa60:	2201      	movlt	r2, #1
 800aa62:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aa66:	9305      	strlt	r3, [sp, #20]
 800aa68:	bfa8      	it	ge
 800aa6a:	f8c8 3000 	strge.w	r3, [r8]
 800aa6e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800aa72:	4b99      	ldr	r3, [pc, #612]	; (800acd8 <_dtoa_r+0x2d0>)
 800aa74:	bfb8      	it	lt
 800aa76:	f8c8 2000 	strlt.w	r2, [r8]
 800aa7a:	ea33 0309 	bics.w	r3, r3, r9
 800aa7e:	d119      	bne.n	800aab4 <_dtoa_r+0xac>
 800aa80:	f242 730f 	movw	r3, #9999	; 0x270f
 800aa84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa8c:	4333      	orrs	r3, r6
 800aa8e:	f000 857f 	beq.w	800b590 <_dtoa_r+0xb88>
 800aa92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa94:	b953      	cbnz	r3, 800aaac <_dtoa_r+0xa4>
 800aa96:	4b91      	ldr	r3, [pc, #580]	; (800acdc <_dtoa_r+0x2d4>)
 800aa98:	e022      	b.n	800aae0 <_dtoa_r+0xd8>
 800aa9a:	4b91      	ldr	r3, [pc, #580]	; (800ace0 <_dtoa_r+0x2d8>)
 800aa9c:	9303      	str	r3, [sp, #12]
 800aa9e:	3308      	adds	r3, #8
 800aaa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	9803      	ldr	r0, [sp, #12]
 800aaa6:	b019      	add	sp, #100	; 0x64
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	4b8b      	ldr	r3, [pc, #556]	; (800acdc <_dtoa_r+0x2d4>)
 800aaae:	9303      	str	r3, [sp, #12]
 800aab0:	3303      	adds	r3, #3
 800aab2:	e7f5      	b.n	800aaa0 <_dtoa_r+0x98>
 800aab4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aab8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800aabc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aac0:	2200      	movs	r2, #0
 800aac2:	2300      	movs	r3, #0
 800aac4:	f7f5 ff7a 	bl	80009bc <__aeabi_dcmpeq>
 800aac8:	4680      	mov	r8, r0
 800aaca:	b158      	cbz	r0, 800aae4 <_dtoa_r+0xdc>
 800aacc:	2301      	movs	r3, #1
 800aace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aad0:	6013      	str	r3, [r2, #0]
 800aad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	f000 8558 	beq.w	800b58a <_dtoa_r+0xb82>
 800aada:	4882      	ldr	r0, [pc, #520]	; (800ace4 <_dtoa_r+0x2dc>)
 800aadc:	6018      	str	r0, [r3, #0]
 800aade:	1e43      	subs	r3, r0, #1
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	e7df      	b.n	800aaa4 <_dtoa_r+0x9c>
 800aae4:	ab16      	add	r3, sp, #88	; 0x58
 800aae6:	9301      	str	r3, [sp, #4]
 800aae8:	ab17      	add	r3, sp, #92	; 0x5c
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4628      	mov	r0, r5
 800aaee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aaf2:	f001 fcf3 	bl	800c4dc <__d2b>
 800aaf6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800aafa:	4683      	mov	fp, r0
 800aafc:	2c00      	cmp	r4, #0
 800aafe:	d07f      	beq.n	800ac00 <_dtoa_r+0x1f8>
 800ab00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab06:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ab0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab0e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ab12:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ab16:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4b72      	ldr	r3, [pc, #456]	; (800ace8 <_dtoa_r+0x2e0>)
 800ab1e:	f7f5 fb2d 	bl	800017c <__aeabi_dsub>
 800ab22:	a365      	add	r3, pc, #404	; (adr r3, 800acb8 <_dtoa_r+0x2b0>)
 800ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab28:	f7f5 fce0 	bl	80004ec <__aeabi_dmul>
 800ab2c:	a364      	add	r3, pc, #400	; (adr r3, 800acc0 <_dtoa_r+0x2b8>)
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f7f5 fb25 	bl	8000180 <__adddf3>
 800ab36:	4606      	mov	r6, r0
 800ab38:	4620      	mov	r0, r4
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	f7f5 fc6c 	bl	8000418 <__aeabi_i2d>
 800ab40:	a361      	add	r3, pc, #388	; (adr r3, 800acc8 <_dtoa_r+0x2c0>)
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f7f5 fcd1 	bl	80004ec <__aeabi_dmul>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4630      	mov	r0, r6
 800ab50:	4639      	mov	r1, r7
 800ab52:	f7f5 fb15 	bl	8000180 <__adddf3>
 800ab56:	4606      	mov	r6, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	f7f5 ff77 	bl	8000a4c <__aeabi_d2iz>
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4682      	mov	sl, r0
 800ab62:	2300      	movs	r3, #0
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 ff32 	bl	80009d0 <__aeabi_dcmplt>
 800ab6c:	b148      	cbz	r0, 800ab82 <_dtoa_r+0x17a>
 800ab6e:	4650      	mov	r0, sl
 800ab70:	f7f5 fc52 	bl	8000418 <__aeabi_i2d>
 800ab74:	4632      	mov	r2, r6
 800ab76:	463b      	mov	r3, r7
 800ab78:	f7f5 ff20 	bl	80009bc <__aeabi_dcmpeq>
 800ab7c:	b908      	cbnz	r0, 800ab82 <_dtoa_r+0x17a>
 800ab7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab82:	f1ba 0f16 	cmp.w	sl, #22
 800ab86:	d858      	bhi.n	800ac3a <_dtoa_r+0x232>
 800ab88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ab8c:	4b57      	ldr	r3, [pc, #348]	; (800acec <_dtoa_r+0x2e4>)
 800ab8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 ff1b 	bl	80009d0 <__aeabi_dcmplt>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d04f      	beq.n	800ac3e <_dtoa_r+0x236>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aba4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aba8:	1b1c      	subs	r4, r3, r4
 800abaa:	1e63      	subs	r3, r4, #1
 800abac:	9309      	str	r3, [sp, #36]	; 0x24
 800abae:	bf49      	itett	mi
 800abb0:	f1c4 0301 	rsbmi	r3, r4, #1
 800abb4:	2300      	movpl	r3, #0
 800abb6:	9306      	strmi	r3, [sp, #24]
 800abb8:	2300      	movmi	r3, #0
 800abba:	bf54      	ite	pl
 800abbc:	9306      	strpl	r3, [sp, #24]
 800abbe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800abc0:	f1ba 0f00 	cmp.w	sl, #0
 800abc4:	db3d      	blt.n	800ac42 <_dtoa_r+0x23a>
 800abc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800abcc:	4453      	add	r3, sl
 800abce:	9309      	str	r3, [sp, #36]	; 0x24
 800abd0:	2300      	movs	r3, #0
 800abd2:	930a      	str	r3, [sp, #40]	; 0x28
 800abd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abd6:	2b09      	cmp	r3, #9
 800abd8:	f200 808c 	bhi.w	800acf4 <_dtoa_r+0x2ec>
 800abdc:	2b05      	cmp	r3, #5
 800abde:	bfc4      	itt	gt
 800abe0:	3b04      	subgt	r3, #4
 800abe2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800abe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abe6:	bfc8      	it	gt
 800abe8:	2400      	movgt	r4, #0
 800abea:	f1a3 0302 	sub.w	r3, r3, #2
 800abee:	bfd8      	it	le
 800abf0:	2401      	movle	r4, #1
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	f200 808a 	bhi.w	800ad0c <_dtoa_r+0x304>
 800abf8:	e8df f003 	tbb	[pc, r3]
 800abfc:	5b4d4f2d 	.word	0x5b4d4f2d
 800ac00:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ac04:	441c      	add	r4, r3
 800ac06:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	bfc3      	ittte	gt
 800ac0e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ac12:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ac16:	fa09 f303 	lslgt.w	r3, r9, r3
 800ac1a:	f1c3 0320 	rsble	r3, r3, #32
 800ac1e:	bfc6      	itte	gt
 800ac20:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ac24:	4318      	orrgt	r0, r3
 800ac26:	fa06 f003 	lslle.w	r0, r6, r3
 800ac2a:	f7f5 fbe5 	bl	80003f8 <__aeabi_ui2d>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ac34:	3c01      	subs	r4, #1
 800ac36:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac38:	e76f      	b.n	800ab1a <_dtoa_r+0x112>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e7b2      	b.n	800aba4 <_dtoa_r+0x19c>
 800ac3e:	900f      	str	r0, [sp, #60]	; 0x3c
 800ac40:	e7b1      	b.n	800aba6 <_dtoa_r+0x19e>
 800ac42:	9b06      	ldr	r3, [sp, #24]
 800ac44:	eba3 030a 	sub.w	r3, r3, sl
 800ac48:	9306      	str	r3, [sp, #24]
 800ac4a:	f1ca 0300 	rsb	r3, sl, #0
 800ac4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac50:	2300      	movs	r3, #0
 800ac52:	930e      	str	r3, [sp, #56]	; 0x38
 800ac54:	e7be      	b.n	800abd4 <_dtoa_r+0x1cc>
 800ac56:	2300      	movs	r3, #0
 800ac58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dc58      	bgt.n	800ad12 <_dtoa_r+0x30a>
 800ac60:	f04f 0901 	mov.w	r9, #1
 800ac64:	464b      	mov	r3, r9
 800ac66:	f8cd 9020 	str.w	r9, [sp, #32]
 800ac6a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800ac6e:	2200      	movs	r2, #0
 800ac70:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac72:	6042      	str	r2, [r0, #4]
 800ac74:	2204      	movs	r2, #4
 800ac76:	f102 0614 	add.w	r6, r2, #20
 800ac7a:	429e      	cmp	r6, r3
 800ac7c:	6841      	ldr	r1, [r0, #4]
 800ac7e:	d94e      	bls.n	800ad1e <_dtoa_r+0x316>
 800ac80:	4628      	mov	r0, r5
 800ac82:	f001 f841 	bl	800bd08 <_Balloc>
 800ac86:	9003      	str	r0, [sp, #12]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d14c      	bne.n	800ad26 <_dtoa_r+0x31e>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac92:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <_dtoa_r+0x2e8>)
 800ac94:	e6cc      	b.n	800aa30 <_dtoa_r+0x28>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e7de      	b.n	800ac58 <_dtoa_r+0x250>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aca0:	eb0a 0903 	add.w	r9, sl, r3
 800aca4:	f109 0301 	add.w	r3, r9, #1
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	9308      	str	r3, [sp, #32]
 800acac:	bfb8      	it	lt
 800acae:	2301      	movlt	r3, #1
 800acb0:	e7dd      	b.n	800ac6e <_dtoa_r+0x266>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e7f2      	b.n	800ac9c <_dtoa_r+0x294>
 800acb6:	bf00      	nop
 800acb8:	636f4361 	.word	0x636f4361
 800acbc:	3fd287a7 	.word	0x3fd287a7
 800acc0:	8b60c8b3 	.word	0x8b60c8b3
 800acc4:	3fc68a28 	.word	0x3fc68a28
 800acc8:	509f79fb 	.word	0x509f79fb
 800accc:	3fd34413 	.word	0x3fd34413
 800acd0:	0800e91e 	.word	0x0800e91e
 800acd4:	0800e935 	.word	0x0800e935
 800acd8:	7ff00000 	.word	0x7ff00000
 800acdc:	0800e91a 	.word	0x0800e91a
 800ace0:	0800e911 	.word	0x0800e911
 800ace4:	0800e795 	.word	0x0800e795
 800ace8:	3ff80000 	.word	0x3ff80000
 800acec:	0800eaa0 	.word	0x0800eaa0
 800acf0:	0800e990 	.word	0x0800e990
 800acf4:	2401      	movs	r4, #1
 800acf6:	2300      	movs	r3, #0
 800acf8:	940b      	str	r4, [sp, #44]	; 0x2c
 800acfa:	9322      	str	r3, [sp, #136]	; 0x88
 800acfc:	f04f 39ff 	mov.w	r9, #4294967295
 800ad00:	2200      	movs	r2, #0
 800ad02:	2312      	movs	r3, #18
 800ad04:	f8cd 9020 	str.w	r9, [sp, #32]
 800ad08:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad0a:	e7b0      	b.n	800ac6e <_dtoa_r+0x266>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad10:	e7f4      	b.n	800acfc <_dtoa_r+0x2f4>
 800ad12:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ad16:	464b      	mov	r3, r9
 800ad18:	f8cd 9020 	str.w	r9, [sp, #32]
 800ad1c:	e7a7      	b.n	800ac6e <_dtoa_r+0x266>
 800ad1e:	3101      	adds	r1, #1
 800ad20:	6041      	str	r1, [r0, #4]
 800ad22:	0052      	lsls	r2, r2, #1
 800ad24:	e7a7      	b.n	800ac76 <_dtoa_r+0x26e>
 800ad26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad28:	9a03      	ldr	r2, [sp, #12]
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	9b08      	ldr	r3, [sp, #32]
 800ad2e:	2b0e      	cmp	r3, #14
 800ad30:	f200 80a8 	bhi.w	800ae84 <_dtoa_r+0x47c>
 800ad34:	2c00      	cmp	r4, #0
 800ad36:	f000 80a5 	beq.w	800ae84 <_dtoa_r+0x47c>
 800ad3a:	f1ba 0f00 	cmp.w	sl, #0
 800ad3e:	dd34      	ble.n	800adaa <_dtoa_r+0x3a2>
 800ad40:	4a9a      	ldr	r2, [pc, #616]	; (800afac <_dtoa_r+0x5a4>)
 800ad42:	f00a 030f 	and.w	r3, sl, #15
 800ad46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ad4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ad56:	ea4f 142a 	mov.w	r4, sl, asr #4
 800ad5a:	d016      	beq.n	800ad8a <_dtoa_r+0x382>
 800ad5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad60:	4b93      	ldr	r3, [pc, #588]	; (800afb0 <_dtoa_r+0x5a8>)
 800ad62:	2703      	movs	r7, #3
 800ad64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad68:	f7f5 fcea 	bl	8000740 <__aeabi_ddiv>
 800ad6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad70:	f004 040f 	and.w	r4, r4, #15
 800ad74:	4e8e      	ldr	r6, [pc, #568]	; (800afb0 <_dtoa_r+0x5a8>)
 800ad76:	b954      	cbnz	r4, 800ad8e <_dtoa_r+0x386>
 800ad78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad80:	f7f5 fcde 	bl	8000740 <__aeabi_ddiv>
 800ad84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad88:	e029      	b.n	800adde <_dtoa_r+0x3d6>
 800ad8a:	2702      	movs	r7, #2
 800ad8c:	e7f2      	b.n	800ad74 <_dtoa_r+0x36c>
 800ad8e:	07e1      	lsls	r1, r4, #31
 800ad90:	d508      	bpl.n	800ada4 <_dtoa_r+0x39c>
 800ad92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ad96:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad9a:	f7f5 fba7 	bl	80004ec <__aeabi_dmul>
 800ad9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ada2:	3701      	adds	r7, #1
 800ada4:	1064      	asrs	r4, r4, #1
 800ada6:	3608      	adds	r6, #8
 800ada8:	e7e5      	b.n	800ad76 <_dtoa_r+0x36e>
 800adaa:	f000 80a5 	beq.w	800aef8 <_dtoa_r+0x4f0>
 800adae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adb2:	f1ca 0400 	rsb	r4, sl, #0
 800adb6:	4b7d      	ldr	r3, [pc, #500]	; (800afac <_dtoa_r+0x5a4>)
 800adb8:	f004 020f 	and.w	r2, r4, #15
 800adbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc4:	f7f5 fb92 	bl	80004ec <__aeabi_dmul>
 800adc8:	2702      	movs	r7, #2
 800adca:	2300      	movs	r3, #0
 800adcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800add0:	4e77      	ldr	r6, [pc, #476]	; (800afb0 <_dtoa_r+0x5a8>)
 800add2:	1124      	asrs	r4, r4, #4
 800add4:	2c00      	cmp	r4, #0
 800add6:	f040 8084 	bne.w	800aee2 <_dtoa_r+0x4da>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1d2      	bne.n	800ad84 <_dtoa_r+0x37c>
 800adde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 808b 	beq.w	800aefc <_dtoa_r+0x4f4>
 800ade6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800adea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800adee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adf2:	2200      	movs	r2, #0
 800adf4:	4b6f      	ldr	r3, [pc, #444]	; (800afb4 <_dtoa_r+0x5ac>)
 800adf6:	f7f5 fdeb 	bl	80009d0 <__aeabi_dcmplt>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	d07e      	beq.n	800aefc <_dtoa_r+0x4f4>
 800adfe:	9b08      	ldr	r3, [sp, #32]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d07b      	beq.n	800aefc <_dtoa_r+0x4f4>
 800ae04:	f1b9 0f00 	cmp.w	r9, #0
 800ae08:	dd38      	ble.n	800ae7c <_dtoa_r+0x474>
 800ae0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4b69      	ldr	r3, [pc, #420]	; (800afb8 <_dtoa_r+0x5b0>)
 800ae12:	f7f5 fb6b 	bl	80004ec <__aeabi_dmul>
 800ae16:	464c      	mov	r4, r9
 800ae18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae1c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ae20:	3701      	adds	r7, #1
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7f5 faf8 	bl	8000418 <__aeabi_i2d>
 800ae28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2c:	f7f5 fb5e 	bl	80004ec <__aeabi_dmul>
 800ae30:	2200      	movs	r2, #0
 800ae32:	4b62      	ldr	r3, [pc, #392]	; (800afbc <_dtoa_r+0x5b4>)
 800ae34:	f7f5 f9a4 	bl	8000180 <__adddf3>
 800ae38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ae3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae40:	9611      	str	r6, [sp, #68]	; 0x44
 800ae42:	2c00      	cmp	r4, #0
 800ae44:	d15d      	bne.n	800af02 <_dtoa_r+0x4fa>
 800ae46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	4b5c      	ldr	r3, [pc, #368]	; (800afc0 <_dtoa_r+0x5b8>)
 800ae4e:	f7f5 f995 	bl	800017c <__aeabi_dsub>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae5a:	4633      	mov	r3, r6
 800ae5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae5e:	f7f5 fdd5 	bl	8000a0c <__aeabi_dcmpgt>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	f040 829c 	bne.w	800b3a0 <_dtoa_r+0x998>
 800ae68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae6e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ae72:	f7f5 fdad 	bl	80009d0 <__aeabi_dcmplt>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	f040 8290 	bne.w	800b39c <_dtoa_r+0x994>
 800ae7c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ae80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f2c0 8152 	blt.w	800b130 <_dtoa_r+0x728>
 800ae8c:	f1ba 0f0e 	cmp.w	sl, #14
 800ae90:	f300 814e 	bgt.w	800b130 <_dtoa_r+0x728>
 800ae94:	4b45      	ldr	r3, [pc, #276]	; (800afac <_dtoa_r+0x5a4>)
 800ae96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ae9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae9e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f280 80db 	bge.w	800b060 <_dtoa_r+0x658>
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f300 80d7 	bgt.w	800b060 <_dtoa_r+0x658>
 800aeb2:	f040 8272 	bne.w	800b39a <_dtoa_r+0x992>
 800aeb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeba:	2200      	movs	r2, #0
 800aebc:	4b40      	ldr	r3, [pc, #256]	; (800afc0 <_dtoa_r+0x5b8>)
 800aebe:	f7f5 fb15 	bl	80004ec <__aeabi_dmul>
 800aec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aec6:	f7f5 fd97 	bl	80009f8 <__aeabi_dcmpge>
 800aeca:	9c08      	ldr	r4, [sp, #32]
 800aecc:	4626      	mov	r6, r4
 800aece:	2800      	cmp	r0, #0
 800aed0:	f040 8248 	bne.w	800b364 <_dtoa_r+0x95c>
 800aed4:	2331      	movs	r3, #49	; 0x31
 800aed6:	9f03      	ldr	r7, [sp, #12]
 800aed8:	f10a 0a01 	add.w	sl, sl, #1
 800aedc:	f807 3b01 	strb.w	r3, [r7], #1
 800aee0:	e244      	b.n	800b36c <_dtoa_r+0x964>
 800aee2:	07e2      	lsls	r2, r4, #31
 800aee4:	d505      	bpl.n	800aef2 <_dtoa_r+0x4ea>
 800aee6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aeea:	f7f5 faff 	bl	80004ec <__aeabi_dmul>
 800aeee:	2301      	movs	r3, #1
 800aef0:	3701      	adds	r7, #1
 800aef2:	1064      	asrs	r4, r4, #1
 800aef4:	3608      	adds	r6, #8
 800aef6:	e76d      	b.n	800add4 <_dtoa_r+0x3cc>
 800aef8:	2702      	movs	r7, #2
 800aefa:	e770      	b.n	800adde <_dtoa_r+0x3d6>
 800aefc:	46d0      	mov	r8, sl
 800aefe:	9c08      	ldr	r4, [sp, #32]
 800af00:	e78f      	b.n	800ae22 <_dtoa_r+0x41a>
 800af02:	9903      	ldr	r1, [sp, #12]
 800af04:	4b29      	ldr	r3, [pc, #164]	; (800afac <_dtoa_r+0x5a4>)
 800af06:	4421      	add	r1, r4
 800af08:	9112      	str	r1, [sp, #72]	; 0x48
 800af0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af10:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800af14:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af18:	2900      	cmp	r1, #0
 800af1a:	d055      	beq.n	800afc8 <_dtoa_r+0x5c0>
 800af1c:	2000      	movs	r0, #0
 800af1e:	4929      	ldr	r1, [pc, #164]	; (800afc4 <_dtoa_r+0x5bc>)
 800af20:	f7f5 fc0e 	bl	8000740 <__aeabi_ddiv>
 800af24:	463b      	mov	r3, r7
 800af26:	4632      	mov	r2, r6
 800af28:	f7f5 f928 	bl	800017c <__aeabi_dsub>
 800af2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af30:	9f03      	ldr	r7, [sp, #12]
 800af32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af36:	f7f5 fd89 	bl	8000a4c <__aeabi_d2iz>
 800af3a:	4604      	mov	r4, r0
 800af3c:	f7f5 fa6c 	bl	8000418 <__aeabi_i2d>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af48:	f7f5 f918 	bl	800017c <__aeabi_dsub>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	3430      	adds	r4, #48	; 0x30
 800af52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af5a:	f807 4b01 	strb.w	r4, [r7], #1
 800af5e:	f7f5 fd37 	bl	80009d0 <__aeabi_dcmplt>
 800af62:	2800      	cmp	r0, #0
 800af64:	d174      	bne.n	800b050 <_dtoa_r+0x648>
 800af66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6a:	2000      	movs	r0, #0
 800af6c:	4911      	ldr	r1, [pc, #68]	; (800afb4 <_dtoa_r+0x5ac>)
 800af6e:	f7f5 f905 	bl	800017c <__aeabi_dsub>
 800af72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af76:	f7f5 fd2b 	bl	80009d0 <__aeabi_dcmplt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f040 80b7 	bne.w	800b0ee <_dtoa_r+0x6e6>
 800af80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af82:	429f      	cmp	r7, r3
 800af84:	f43f af7a 	beq.w	800ae7c <_dtoa_r+0x474>
 800af88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af8c:	2200      	movs	r2, #0
 800af8e:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <_dtoa_r+0x5b0>)
 800af90:	f7f5 faac 	bl	80004ec <__aeabi_dmul>
 800af94:	2200      	movs	r2, #0
 800af96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <_dtoa_r+0x5b0>)
 800afa0:	f7f5 faa4 	bl	80004ec <__aeabi_dmul>
 800afa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afa8:	e7c3      	b.n	800af32 <_dtoa_r+0x52a>
 800afaa:	bf00      	nop
 800afac:	0800eaa0 	.word	0x0800eaa0
 800afb0:	0800ea78 	.word	0x0800ea78
 800afb4:	3ff00000 	.word	0x3ff00000
 800afb8:	40240000 	.word	0x40240000
 800afbc:	401c0000 	.word	0x401c0000
 800afc0:	40140000 	.word	0x40140000
 800afc4:	3fe00000 	.word	0x3fe00000
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fa8e 	bl	80004ec <__aeabi_dmul>
 800afd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800afd6:	9c03      	ldr	r4, [sp, #12]
 800afd8:	9314      	str	r3, [sp, #80]	; 0x50
 800afda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afde:	f7f5 fd35 	bl	8000a4c <__aeabi_d2iz>
 800afe2:	9015      	str	r0, [sp, #84]	; 0x54
 800afe4:	f7f5 fa18 	bl	8000418 <__aeabi_i2d>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff0:	f7f5 f8c4 	bl	800017c <__aeabi_dsub>
 800aff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff6:	4606      	mov	r6, r0
 800aff8:	3330      	adds	r3, #48	; 0x30
 800affa:	f804 3b01 	strb.w	r3, [r4], #1
 800affe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b000:	460f      	mov	r7, r1
 800b002:	429c      	cmp	r4, r3
 800b004:	f04f 0200 	mov.w	r2, #0
 800b008:	d124      	bne.n	800b054 <_dtoa_r+0x64c>
 800b00a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b00e:	4bb0      	ldr	r3, [pc, #704]	; (800b2d0 <_dtoa_r+0x8c8>)
 800b010:	f7f5 f8b6 	bl	8000180 <__adddf3>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4630      	mov	r0, r6
 800b01a:	4639      	mov	r1, r7
 800b01c:	f7f5 fcf6 	bl	8000a0c <__aeabi_dcmpgt>
 800b020:	2800      	cmp	r0, #0
 800b022:	d163      	bne.n	800b0ec <_dtoa_r+0x6e4>
 800b024:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b028:	2000      	movs	r0, #0
 800b02a:	49a9      	ldr	r1, [pc, #676]	; (800b2d0 <_dtoa_r+0x8c8>)
 800b02c:	f7f5 f8a6 	bl	800017c <__aeabi_dsub>
 800b030:	4602      	mov	r2, r0
 800b032:	460b      	mov	r3, r1
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fcca 	bl	80009d0 <__aeabi_dcmplt>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	f43f af1d 	beq.w	800ae7c <_dtoa_r+0x474>
 800b042:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b044:	1e7b      	subs	r3, r7, #1
 800b046:	9314      	str	r3, [sp, #80]	; 0x50
 800b048:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b04c:	2b30      	cmp	r3, #48	; 0x30
 800b04e:	d0f8      	beq.n	800b042 <_dtoa_r+0x63a>
 800b050:	46c2      	mov	sl, r8
 800b052:	e03b      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b054:	4b9f      	ldr	r3, [pc, #636]	; (800b2d4 <_dtoa_r+0x8cc>)
 800b056:	f7f5 fa49 	bl	80004ec <__aeabi_dmul>
 800b05a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b05e:	e7bc      	b.n	800afda <_dtoa_r+0x5d2>
 800b060:	9f03      	ldr	r7, [sp, #12]
 800b062:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b06a:	4640      	mov	r0, r8
 800b06c:	4649      	mov	r1, r9
 800b06e:	f7f5 fb67 	bl	8000740 <__aeabi_ddiv>
 800b072:	f7f5 fceb 	bl	8000a4c <__aeabi_d2iz>
 800b076:	4604      	mov	r4, r0
 800b078:	f7f5 f9ce 	bl	8000418 <__aeabi_i2d>
 800b07c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b080:	f7f5 fa34 	bl	80004ec <__aeabi_dmul>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4640      	mov	r0, r8
 800b08a:	4649      	mov	r1, r9
 800b08c:	f7f5 f876 	bl	800017c <__aeabi_dsub>
 800b090:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b094:	f807 6b01 	strb.w	r6, [r7], #1
 800b098:	9e03      	ldr	r6, [sp, #12]
 800b09a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b09e:	1bbe      	subs	r6, r7, r6
 800b0a0:	45b4      	cmp	ip, r6
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	d136      	bne.n	800b116 <_dtoa_r+0x70e>
 800b0a8:	f7f5 f86a 	bl	8000180 <__adddf3>
 800b0ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0b0:	4680      	mov	r8, r0
 800b0b2:	4689      	mov	r9, r1
 800b0b4:	f7f5 fcaa 	bl	8000a0c <__aeabi_dcmpgt>
 800b0b8:	bb58      	cbnz	r0, 800b112 <_dtoa_r+0x70a>
 800b0ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0be:	4640      	mov	r0, r8
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	f7f5 fc7b 	bl	80009bc <__aeabi_dcmpeq>
 800b0c6:	b108      	cbz	r0, 800b0cc <_dtoa_r+0x6c4>
 800b0c8:	07e1      	lsls	r1, r4, #31
 800b0ca:	d422      	bmi.n	800b112 <_dtoa_r+0x70a>
 800b0cc:	4628      	mov	r0, r5
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	f000 fe5a 	bl	800bd88 <_Bfree>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	703b      	strb	r3, [r7, #0]
 800b0d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0da:	f10a 0001 	add.w	r0, sl, #1
 800b0de:	6018      	str	r0, [r3, #0]
 800b0e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f43f acde 	beq.w	800aaa4 <_dtoa_r+0x9c>
 800b0e8:	601f      	str	r7, [r3, #0]
 800b0ea:	e4db      	b.n	800aaa4 <_dtoa_r+0x9c>
 800b0ec:	4627      	mov	r7, r4
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	461f      	mov	r7, r3
 800b0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f6:	2a39      	cmp	r2, #57	; 0x39
 800b0f8:	d107      	bne.n	800b10a <_dtoa_r+0x702>
 800b0fa:	9a03      	ldr	r2, [sp, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d1f7      	bne.n	800b0f0 <_dtoa_r+0x6e8>
 800b100:	2230      	movs	r2, #48	; 0x30
 800b102:	9903      	ldr	r1, [sp, #12]
 800b104:	f108 0801 	add.w	r8, r8, #1
 800b108:	700a      	strb	r2, [r1, #0]
 800b10a:	781a      	ldrb	r2, [r3, #0]
 800b10c:	3201      	adds	r2, #1
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e79e      	b.n	800b050 <_dtoa_r+0x648>
 800b112:	46d0      	mov	r8, sl
 800b114:	e7eb      	b.n	800b0ee <_dtoa_r+0x6e6>
 800b116:	2200      	movs	r2, #0
 800b118:	4b6e      	ldr	r3, [pc, #440]	; (800b2d4 <_dtoa_r+0x8cc>)
 800b11a:	f7f5 f9e7 	bl	80004ec <__aeabi_dmul>
 800b11e:	2200      	movs	r2, #0
 800b120:	2300      	movs	r3, #0
 800b122:	4680      	mov	r8, r0
 800b124:	4689      	mov	r9, r1
 800b126:	f7f5 fc49 	bl	80009bc <__aeabi_dcmpeq>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d09b      	beq.n	800b066 <_dtoa_r+0x65e>
 800b12e:	e7cd      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b132:	2a00      	cmp	r2, #0
 800b134:	f000 80d0 	beq.w	800b2d8 <_dtoa_r+0x8d0>
 800b138:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b13a:	2a01      	cmp	r2, #1
 800b13c:	f300 80ae 	bgt.w	800b29c <_dtoa_r+0x894>
 800b140:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b142:	2a00      	cmp	r2, #0
 800b144:	f000 80a6 	beq.w	800b294 <_dtoa_r+0x88c>
 800b148:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b14c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b14e:	9f06      	ldr	r7, [sp, #24]
 800b150:	9a06      	ldr	r2, [sp, #24]
 800b152:	2101      	movs	r1, #1
 800b154:	441a      	add	r2, r3
 800b156:	9206      	str	r2, [sp, #24]
 800b158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b15a:	4628      	mov	r0, r5
 800b15c:	441a      	add	r2, r3
 800b15e:	9209      	str	r2, [sp, #36]	; 0x24
 800b160:	f000 ff12 	bl	800bf88 <__i2b>
 800b164:	4606      	mov	r6, r0
 800b166:	2f00      	cmp	r7, #0
 800b168:	dd0c      	ble.n	800b184 <_dtoa_r+0x77c>
 800b16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dd09      	ble.n	800b184 <_dtoa_r+0x77c>
 800b170:	42bb      	cmp	r3, r7
 800b172:	bfa8      	it	ge
 800b174:	463b      	movge	r3, r7
 800b176:	9a06      	ldr	r2, [sp, #24]
 800b178:	1aff      	subs	r7, r7, r3
 800b17a:	1ad2      	subs	r2, r2, r3
 800b17c:	9206      	str	r2, [sp, #24]
 800b17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b186:	b1f3      	cbz	r3, 800b1c6 <_dtoa_r+0x7be>
 800b188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80a8 	beq.w	800b2e0 <_dtoa_r+0x8d8>
 800b190:	2c00      	cmp	r4, #0
 800b192:	dd10      	ble.n	800b1b6 <_dtoa_r+0x7ae>
 800b194:	4631      	mov	r1, r6
 800b196:	4622      	mov	r2, r4
 800b198:	4628      	mov	r0, r5
 800b19a:	f000 ffb3 	bl	800c104 <__pow5mult>
 800b19e:	465a      	mov	r2, fp
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 ff05 	bl	800bfb4 <__multiply>
 800b1aa:	4680      	mov	r8, r0
 800b1ac:	4659      	mov	r1, fp
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f000 fdea 	bl	800bd88 <_Bfree>
 800b1b4:	46c3      	mov	fp, r8
 800b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b8:	1b1a      	subs	r2, r3, r4
 800b1ba:	d004      	beq.n	800b1c6 <_dtoa_r+0x7be>
 800b1bc:	4659      	mov	r1, fp
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 ffa0 	bl	800c104 <__pow5mult>
 800b1c4:	4683      	mov	fp, r0
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f000 fedd 	bl	800bf88 <__i2b>
 800b1ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f340 8086 	ble.w	800b2e4 <_dtoa_r+0x8dc>
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4601      	mov	r1, r0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f000 ff91 	bl	800c104 <__pow5mult>
 800b1e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	dd7f      	ble.n	800b2ea <_dtoa_r+0x8e2>
 800b1ea:	f04f 0800 	mov.w	r8, #0
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1f4:	6918      	ldr	r0, [r3, #16]
 800b1f6:	f000 fe79 	bl	800beec <__hi0bits>
 800b1fa:	f1c0 0020 	rsb	r0, r0, #32
 800b1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b200:	4418      	add	r0, r3
 800b202:	f010 001f 	ands.w	r0, r0, #31
 800b206:	f000 8092 	beq.w	800b32e <_dtoa_r+0x926>
 800b20a:	f1c0 0320 	rsb	r3, r0, #32
 800b20e:	2b04      	cmp	r3, #4
 800b210:	f340 808a 	ble.w	800b328 <_dtoa_r+0x920>
 800b214:	f1c0 001c 	rsb	r0, r0, #28
 800b218:	9b06      	ldr	r3, [sp, #24]
 800b21a:	4407      	add	r7, r0
 800b21c:	4403      	add	r3, r0
 800b21e:	9306      	str	r3, [sp, #24]
 800b220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b222:	4403      	add	r3, r0
 800b224:	9309      	str	r3, [sp, #36]	; 0x24
 800b226:	9b06      	ldr	r3, [sp, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dd05      	ble.n	800b238 <_dtoa_r+0x830>
 800b22c:	4659      	mov	r1, fp
 800b22e:	461a      	mov	r2, r3
 800b230:	4628      	mov	r0, r5
 800b232:	f000 ffc1 	bl	800c1b8 <__lshift>
 800b236:	4683      	mov	fp, r0
 800b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	dd05      	ble.n	800b24a <_dtoa_r+0x842>
 800b23e:	4621      	mov	r1, r4
 800b240:	461a      	mov	r2, r3
 800b242:	4628      	mov	r0, r5
 800b244:	f000 ffb8 	bl	800c1b8 <__lshift>
 800b248:	4604      	mov	r4, r0
 800b24a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d070      	beq.n	800b332 <_dtoa_r+0x92a>
 800b250:	4621      	mov	r1, r4
 800b252:	4658      	mov	r0, fp
 800b254:	f001 f820 	bl	800c298 <__mcmp>
 800b258:	2800      	cmp	r0, #0
 800b25a:	da6a      	bge.n	800b332 <_dtoa_r+0x92a>
 800b25c:	2300      	movs	r3, #0
 800b25e:	4659      	mov	r1, fp
 800b260:	220a      	movs	r2, #10
 800b262:	4628      	mov	r0, r5
 800b264:	f000 fdb2 	bl	800bdcc <__multadd>
 800b268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b26a:	4683      	mov	fp, r0
 800b26c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 8194 	beq.w	800b59e <_dtoa_r+0xb96>
 800b276:	4631      	mov	r1, r6
 800b278:	2300      	movs	r3, #0
 800b27a:	220a      	movs	r2, #10
 800b27c:	4628      	mov	r0, r5
 800b27e:	f000 fda5 	bl	800bdcc <__multadd>
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	4606      	mov	r6, r0
 800b288:	f300 8093 	bgt.w	800b3b2 <_dtoa_r+0x9aa>
 800b28c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dc57      	bgt.n	800b342 <_dtoa_r+0x93a>
 800b292:	e08e      	b.n	800b3b2 <_dtoa_r+0x9aa>
 800b294:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b29a:	e757      	b.n	800b14c <_dtoa_r+0x744>
 800b29c:	9b08      	ldr	r3, [sp, #32]
 800b29e:	1e5c      	subs	r4, r3, #1
 800b2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	bfb7      	itett	lt
 800b2a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b2a8:	1b1c      	subge	r4, r3, r4
 800b2aa:	1ae2      	sublt	r2, r4, r3
 800b2ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b2ae:	bfbe      	ittt	lt
 800b2b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b2b2:	189b      	addlt	r3, r3, r2
 800b2b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b2b6:	9b08      	ldr	r3, [sp, #32]
 800b2b8:	bfb8      	it	lt
 800b2ba:	2400      	movlt	r4, #0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfbb      	ittet	lt
 800b2c0:	9b06      	ldrlt	r3, [sp, #24]
 800b2c2:	9a08      	ldrlt	r2, [sp, #32]
 800b2c4:	9f06      	ldrge	r7, [sp, #24]
 800b2c6:	1a9f      	sublt	r7, r3, r2
 800b2c8:	bfac      	ite	ge
 800b2ca:	9b08      	ldrge	r3, [sp, #32]
 800b2cc:	2300      	movlt	r3, #0
 800b2ce:	e73f      	b.n	800b150 <_dtoa_r+0x748>
 800b2d0:	3fe00000 	.word	0x3fe00000
 800b2d4:	40240000 	.word	0x40240000
 800b2d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2da:	9f06      	ldr	r7, [sp, #24]
 800b2dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b2de:	e742      	b.n	800b166 <_dtoa_r+0x75e>
 800b2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e2:	e76b      	b.n	800b1bc <_dtoa_r+0x7b4>
 800b2e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	dc19      	bgt.n	800b31e <_dtoa_r+0x916>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	b9bb      	cbnz	r3, 800b31e <_dtoa_r+0x916>
 800b2ee:	9b05      	ldr	r3, [sp, #20]
 800b2f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f4:	b99b      	cbnz	r3, 800b31e <_dtoa_r+0x916>
 800b2f6:	9b05      	ldr	r3, [sp, #20]
 800b2f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2fc:	0d1b      	lsrs	r3, r3, #20
 800b2fe:	051b      	lsls	r3, r3, #20
 800b300:	b183      	cbz	r3, 800b324 <_dtoa_r+0x91c>
 800b302:	f04f 0801 	mov.w	r8, #1
 800b306:	9b06      	ldr	r3, [sp, #24]
 800b308:	3301      	adds	r3, #1
 800b30a:	9306      	str	r3, [sp, #24]
 800b30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30e:	3301      	adds	r3, #1
 800b310:	9309      	str	r3, [sp, #36]	; 0x24
 800b312:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f af6a 	bne.w	800b1ee <_dtoa_r+0x7e6>
 800b31a:	2001      	movs	r0, #1
 800b31c:	e76f      	b.n	800b1fe <_dtoa_r+0x7f6>
 800b31e:	f04f 0800 	mov.w	r8, #0
 800b322:	e7f6      	b.n	800b312 <_dtoa_r+0x90a>
 800b324:	4698      	mov	r8, r3
 800b326:	e7f4      	b.n	800b312 <_dtoa_r+0x90a>
 800b328:	f43f af7d 	beq.w	800b226 <_dtoa_r+0x81e>
 800b32c:	4618      	mov	r0, r3
 800b32e:	301c      	adds	r0, #28
 800b330:	e772      	b.n	800b218 <_dtoa_r+0x810>
 800b332:	9b08      	ldr	r3, [sp, #32]
 800b334:	2b00      	cmp	r3, #0
 800b336:	dc36      	bgt.n	800b3a6 <_dtoa_r+0x99e>
 800b338:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	dd33      	ble.n	800b3a6 <_dtoa_r+0x99e>
 800b33e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b342:	f1b9 0f00 	cmp.w	r9, #0
 800b346:	d10d      	bne.n	800b364 <_dtoa_r+0x95c>
 800b348:	4621      	mov	r1, r4
 800b34a:	464b      	mov	r3, r9
 800b34c:	2205      	movs	r2, #5
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fd3c 	bl	800bdcc <__multadd>
 800b354:	4601      	mov	r1, r0
 800b356:	4604      	mov	r4, r0
 800b358:	4658      	mov	r0, fp
 800b35a:	f000 ff9d 	bl	800c298 <__mcmp>
 800b35e:	2800      	cmp	r0, #0
 800b360:	f73f adb8 	bgt.w	800aed4 <_dtoa_r+0x4cc>
 800b364:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b366:	9f03      	ldr	r7, [sp, #12]
 800b368:	ea6f 0a03 	mvn.w	sl, r3
 800b36c:	f04f 0800 	mov.w	r8, #0
 800b370:	4621      	mov	r1, r4
 800b372:	4628      	mov	r0, r5
 800b374:	f000 fd08 	bl	800bd88 <_Bfree>
 800b378:	2e00      	cmp	r6, #0
 800b37a:	f43f aea7 	beq.w	800b0cc <_dtoa_r+0x6c4>
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d005      	beq.n	800b390 <_dtoa_r+0x988>
 800b384:	45b0      	cmp	r8, r6
 800b386:	d003      	beq.n	800b390 <_dtoa_r+0x988>
 800b388:	4641      	mov	r1, r8
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 fcfc 	bl	800bd88 <_Bfree>
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	f000 fcf8 	bl	800bd88 <_Bfree>
 800b398:	e698      	b.n	800b0cc <_dtoa_r+0x6c4>
 800b39a:	2400      	movs	r4, #0
 800b39c:	4626      	mov	r6, r4
 800b39e:	e7e1      	b.n	800b364 <_dtoa_r+0x95c>
 800b3a0:	46c2      	mov	sl, r8
 800b3a2:	4626      	mov	r6, r4
 800b3a4:	e596      	b.n	800aed4 <_dtoa_r+0x4cc>
 800b3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f000 80fd 	beq.w	800b5ac <_dtoa_r+0xba4>
 800b3b2:	2f00      	cmp	r7, #0
 800b3b4:	dd05      	ble.n	800b3c2 <_dtoa_r+0x9ba>
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	463a      	mov	r2, r7
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 fefc 	bl	800c1b8 <__lshift>
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	f1b8 0f00 	cmp.w	r8, #0
 800b3c6:	d05c      	beq.n	800b482 <_dtoa_r+0xa7a>
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	6871      	ldr	r1, [r6, #4]
 800b3cc:	f000 fc9c 	bl	800bd08 <_Balloc>
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	b928      	cbnz	r0, 800b3e0 <_dtoa_r+0x9d8>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b3da:	4b7f      	ldr	r3, [pc, #508]	; (800b5d8 <_dtoa_r+0xbd0>)
 800b3dc:	f7ff bb28 	b.w	800aa30 <_dtoa_r+0x28>
 800b3e0:	6932      	ldr	r2, [r6, #16]
 800b3e2:	f106 010c 	add.w	r1, r6, #12
 800b3e6:	3202      	adds	r2, #2
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	300c      	adds	r0, #12
 800b3ec:	f7fd fd40 	bl	8008e70 <memcpy>
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f000 fedf 	bl	800c1b8 <__lshift>
 800b3fa:	46b0      	mov	r8, r6
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	3301      	adds	r3, #1
 800b402:	9308      	str	r3, [sp, #32]
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	444b      	add	r3, r9
 800b408:	930a      	str	r3, [sp, #40]	; 0x28
 800b40a:	9b04      	ldr	r3, [sp, #16]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	9309      	str	r3, [sp, #36]	; 0x24
 800b412:	9b08      	ldr	r3, [sp, #32]
 800b414:	4621      	mov	r1, r4
 800b416:	3b01      	subs	r3, #1
 800b418:	4658      	mov	r0, fp
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	f7ff fa68 	bl	800a8f0 <quorem>
 800b420:	4603      	mov	r3, r0
 800b422:	4641      	mov	r1, r8
 800b424:	3330      	adds	r3, #48	; 0x30
 800b426:	9006      	str	r0, [sp, #24]
 800b428:	4658      	mov	r0, fp
 800b42a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b42c:	f000 ff34 	bl	800c298 <__mcmp>
 800b430:	4632      	mov	r2, r6
 800b432:	4681      	mov	r9, r0
 800b434:	4621      	mov	r1, r4
 800b436:	4628      	mov	r0, r5
 800b438:	f000 ff4a 	bl	800c2d0 <__mdiff>
 800b43c:	68c2      	ldr	r2, [r0, #12]
 800b43e:	4607      	mov	r7, r0
 800b440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b442:	bb02      	cbnz	r2, 800b486 <_dtoa_r+0xa7e>
 800b444:	4601      	mov	r1, r0
 800b446:	4658      	mov	r0, fp
 800b448:	f000 ff26 	bl	800c298 <__mcmp>
 800b44c:	4602      	mov	r2, r0
 800b44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b450:	4639      	mov	r1, r7
 800b452:	4628      	mov	r0, r5
 800b454:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b458:	f000 fc96 	bl	800bd88 <_Bfree>
 800b45c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b45e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b460:	9f08      	ldr	r7, [sp, #32]
 800b462:	ea43 0102 	orr.w	r1, r3, r2
 800b466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b468:	430b      	orrs	r3, r1
 800b46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b46c:	d10d      	bne.n	800b48a <_dtoa_r+0xa82>
 800b46e:	2b39      	cmp	r3, #57	; 0x39
 800b470:	d029      	beq.n	800b4c6 <_dtoa_r+0xabe>
 800b472:	f1b9 0f00 	cmp.w	r9, #0
 800b476:	dd01      	ble.n	800b47c <_dtoa_r+0xa74>
 800b478:	9b06      	ldr	r3, [sp, #24]
 800b47a:	3331      	adds	r3, #49	; 0x31
 800b47c:	9a04      	ldr	r2, [sp, #16]
 800b47e:	7013      	strb	r3, [r2, #0]
 800b480:	e776      	b.n	800b370 <_dtoa_r+0x968>
 800b482:	4630      	mov	r0, r6
 800b484:	e7b9      	b.n	800b3fa <_dtoa_r+0x9f2>
 800b486:	2201      	movs	r2, #1
 800b488:	e7e2      	b.n	800b450 <_dtoa_r+0xa48>
 800b48a:	f1b9 0f00 	cmp.w	r9, #0
 800b48e:	db06      	blt.n	800b49e <_dtoa_r+0xa96>
 800b490:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b492:	ea41 0909 	orr.w	r9, r1, r9
 800b496:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b498:	ea59 0101 	orrs.w	r1, r9, r1
 800b49c:	d120      	bne.n	800b4e0 <_dtoa_r+0xad8>
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	ddec      	ble.n	800b47c <_dtoa_r+0xa74>
 800b4a2:	4659      	mov	r1, fp
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	f000 fe85 	bl	800c1b8 <__lshift>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4683      	mov	fp, r0
 800b4b2:	f000 fef1 	bl	800c298 <__mcmp>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	9b08      	ldr	r3, [sp, #32]
 800b4ba:	dc02      	bgt.n	800b4c2 <_dtoa_r+0xaba>
 800b4bc:	d1de      	bne.n	800b47c <_dtoa_r+0xa74>
 800b4be:	07da      	lsls	r2, r3, #31
 800b4c0:	d5dc      	bpl.n	800b47c <_dtoa_r+0xa74>
 800b4c2:	2b39      	cmp	r3, #57	; 0x39
 800b4c4:	d1d8      	bne.n	800b478 <_dtoa_r+0xa70>
 800b4c6:	2339      	movs	r3, #57	; 0x39
 800b4c8:	9a04      	ldr	r2, [sp, #16]
 800b4ca:	7013      	strb	r3, [r2, #0]
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	461f      	mov	r7, r3
 800b4d0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	2a39      	cmp	r2, #57	; 0x39
 800b4d8:	d050      	beq.n	800b57c <_dtoa_r+0xb74>
 800b4da:	3201      	adds	r2, #1
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	e747      	b.n	800b370 <_dtoa_r+0x968>
 800b4e0:	2a00      	cmp	r2, #0
 800b4e2:	dd03      	ble.n	800b4ec <_dtoa_r+0xae4>
 800b4e4:	2b39      	cmp	r3, #57	; 0x39
 800b4e6:	d0ee      	beq.n	800b4c6 <_dtoa_r+0xabe>
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	e7c7      	b.n	800b47c <_dtoa_r+0xa74>
 800b4ec:	9a08      	ldr	r2, [sp, #32]
 800b4ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4f4:	428a      	cmp	r2, r1
 800b4f6:	d02a      	beq.n	800b54e <_dtoa_r+0xb46>
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	220a      	movs	r2, #10
 800b4fe:	4628      	mov	r0, r5
 800b500:	f000 fc64 	bl	800bdcc <__multadd>
 800b504:	45b0      	cmp	r8, r6
 800b506:	4683      	mov	fp, r0
 800b508:	f04f 0300 	mov.w	r3, #0
 800b50c:	f04f 020a 	mov.w	r2, #10
 800b510:	4641      	mov	r1, r8
 800b512:	4628      	mov	r0, r5
 800b514:	d107      	bne.n	800b526 <_dtoa_r+0xb1e>
 800b516:	f000 fc59 	bl	800bdcc <__multadd>
 800b51a:	4680      	mov	r8, r0
 800b51c:	4606      	mov	r6, r0
 800b51e:	9b08      	ldr	r3, [sp, #32]
 800b520:	3301      	adds	r3, #1
 800b522:	9308      	str	r3, [sp, #32]
 800b524:	e775      	b.n	800b412 <_dtoa_r+0xa0a>
 800b526:	f000 fc51 	bl	800bdcc <__multadd>
 800b52a:	4631      	mov	r1, r6
 800b52c:	4680      	mov	r8, r0
 800b52e:	2300      	movs	r3, #0
 800b530:	220a      	movs	r2, #10
 800b532:	4628      	mov	r0, r5
 800b534:	f000 fc4a 	bl	800bdcc <__multadd>
 800b538:	4606      	mov	r6, r0
 800b53a:	e7f0      	b.n	800b51e <_dtoa_r+0xb16>
 800b53c:	f1b9 0f00 	cmp.w	r9, #0
 800b540:	bfcc      	ite	gt
 800b542:	464f      	movgt	r7, r9
 800b544:	2701      	movle	r7, #1
 800b546:	f04f 0800 	mov.w	r8, #0
 800b54a:	9a03      	ldr	r2, [sp, #12]
 800b54c:	4417      	add	r7, r2
 800b54e:	4659      	mov	r1, fp
 800b550:	2201      	movs	r2, #1
 800b552:	4628      	mov	r0, r5
 800b554:	9308      	str	r3, [sp, #32]
 800b556:	f000 fe2f 	bl	800c1b8 <__lshift>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4683      	mov	fp, r0
 800b55e:	f000 fe9b 	bl	800c298 <__mcmp>
 800b562:	2800      	cmp	r0, #0
 800b564:	dcb2      	bgt.n	800b4cc <_dtoa_r+0xac4>
 800b566:	d102      	bne.n	800b56e <_dtoa_r+0xb66>
 800b568:	9b08      	ldr	r3, [sp, #32]
 800b56a:	07db      	lsls	r3, r3, #31
 800b56c:	d4ae      	bmi.n	800b4cc <_dtoa_r+0xac4>
 800b56e:	463b      	mov	r3, r7
 800b570:	461f      	mov	r7, r3
 800b572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b576:	2a30      	cmp	r2, #48	; 0x30
 800b578:	d0fa      	beq.n	800b570 <_dtoa_r+0xb68>
 800b57a:	e6f9      	b.n	800b370 <_dtoa_r+0x968>
 800b57c:	9a03      	ldr	r2, [sp, #12]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d1a5      	bne.n	800b4ce <_dtoa_r+0xac6>
 800b582:	2331      	movs	r3, #49	; 0x31
 800b584:	f10a 0a01 	add.w	sl, sl, #1
 800b588:	e779      	b.n	800b47e <_dtoa_r+0xa76>
 800b58a:	4b14      	ldr	r3, [pc, #80]	; (800b5dc <_dtoa_r+0xbd4>)
 800b58c:	f7ff baa8 	b.w	800aae0 <_dtoa_r+0xd8>
 800b590:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f aa81 	bne.w	800aa9a <_dtoa_r+0x92>
 800b598:	4b11      	ldr	r3, [pc, #68]	; (800b5e0 <_dtoa_r+0xbd8>)
 800b59a:	f7ff baa1 	b.w	800aae0 <_dtoa_r+0xd8>
 800b59e:	f1b9 0f00 	cmp.w	r9, #0
 800b5a2:	dc03      	bgt.n	800b5ac <_dtoa_r+0xba4>
 800b5a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	f73f aecb 	bgt.w	800b342 <_dtoa_r+0x93a>
 800b5ac:	9f03      	ldr	r7, [sp, #12]
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4658      	mov	r0, fp
 800b5b2:	f7ff f99d 	bl	800a8f0 <quorem>
 800b5b6:	9a03      	ldr	r2, [sp, #12]
 800b5b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b5bc:	f807 3b01 	strb.w	r3, [r7], #1
 800b5c0:	1aba      	subs	r2, r7, r2
 800b5c2:	4591      	cmp	r9, r2
 800b5c4:	ddba      	ble.n	800b53c <_dtoa_r+0xb34>
 800b5c6:	4659      	mov	r1, fp
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	220a      	movs	r2, #10
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 fbfd 	bl	800bdcc <__multadd>
 800b5d2:	4683      	mov	fp, r0
 800b5d4:	e7eb      	b.n	800b5ae <_dtoa_r+0xba6>
 800b5d6:	bf00      	nop
 800b5d8:	0800e990 	.word	0x0800e990
 800b5dc:	0800e794 	.word	0x0800e794
 800b5e0:	0800e911 	.word	0x0800e911

0800b5e4 <rshift>:
 800b5e4:	6903      	ldr	r3, [r0, #16]
 800b5e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b5ee:	f100 0414 	add.w	r4, r0, #20
 800b5f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b5f6:	dd46      	ble.n	800b686 <rshift+0xa2>
 800b5f8:	f011 011f 	ands.w	r1, r1, #31
 800b5fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b600:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b604:	d10c      	bne.n	800b620 <rshift+0x3c>
 800b606:	4629      	mov	r1, r5
 800b608:	f100 0710 	add.w	r7, r0, #16
 800b60c:	42b1      	cmp	r1, r6
 800b60e:	d335      	bcc.n	800b67c <rshift+0x98>
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	1eea      	subs	r2, r5, #3
 800b616:	4296      	cmp	r6, r2
 800b618:	bf38      	it	cc
 800b61a:	2300      	movcc	r3, #0
 800b61c:	4423      	add	r3, r4
 800b61e:	e015      	b.n	800b64c <rshift+0x68>
 800b620:	46a1      	mov	r9, r4
 800b622:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b626:	f1c1 0820 	rsb	r8, r1, #32
 800b62a:	40cf      	lsrs	r7, r1
 800b62c:	f105 0e04 	add.w	lr, r5, #4
 800b630:	4576      	cmp	r6, lr
 800b632:	46f4      	mov	ip, lr
 800b634:	d816      	bhi.n	800b664 <rshift+0x80>
 800b636:	1a9a      	subs	r2, r3, r2
 800b638:	0092      	lsls	r2, r2, #2
 800b63a:	3a04      	subs	r2, #4
 800b63c:	3501      	adds	r5, #1
 800b63e:	42ae      	cmp	r6, r5
 800b640:	bf38      	it	cc
 800b642:	2200      	movcc	r2, #0
 800b644:	18a3      	adds	r3, r4, r2
 800b646:	50a7      	str	r7, [r4, r2]
 800b648:	b107      	cbz	r7, 800b64c <rshift+0x68>
 800b64a:	3304      	adds	r3, #4
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	eba3 0204 	sub.w	r2, r3, r4
 800b652:	bf08      	it	eq
 800b654:	2300      	moveq	r3, #0
 800b656:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b65a:	6102      	str	r2, [r0, #16]
 800b65c:	bf08      	it	eq
 800b65e:	6143      	streq	r3, [r0, #20]
 800b660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b664:	f8dc c000 	ldr.w	ip, [ip]
 800b668:	fa0c fc08 	lsl.w	ip, ip, r8
 800b66c:	ea4c 0707 	orr.w	r7, ip, r7
 800b670:	f849 7b04 	str.w	r7, [r9], #4
 800b674:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b678:	40cf      	lsrs	r7, r1
 800b67a:	e7d9      	b.n	800b630 <rshift+0x4c>
 800b67c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b680:	f847 cf04 	str.w	ip, [r7, #4]!
 800b684:	e7c2      	b.n	800b60c <rshift+0x28>
 800b686:	4623      	mov	r3, r4
 800b688:	e7e0      	b.n	800b64c <rshift+0x68>

0800b68a <__hexdig_fun>:
 800b68a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b68e:	2b09      	cmp	r3, #9
 800b690:	d802      	bhi.n	800b698 <__hexdig_fun+0xe>
 800b692:	3820      	subs	r0, #32
 800b694:	b2c0      	uxtb	r0, r0
 800b696:	4770      	bx	lr
 800b698:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	d801      	bhi.n	800b6a4 <__hexdig_fun+0x1a>
 800b6a0:	3847      	subs	r0, #71	; 0x47
 800b6a2:	e7f7      	b.n	800b694 <__hexdig_fun+0xa>
 800b6a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6a8:	2b05      	cmp	r3, #5
 800b6aa:	d801      	bhi.n	800b6b0 <__hexdig_fun+0x26>
 800b6ac:	3827      	subs	r0, #39	; 0x27
 800b6ae:	e7f1      	b.n	800b694 <__hexdig_fun+0xa>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	4770      	bx	lr

0800b6b4 <__gethex>:
 800b6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b8:	b08b      	sub	sp, #44	; 0x2c
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	4bb2      	ldr	r3, [pc, #712]	; (800b988 <__gethex+0x2d4>)
 800b6be:	9002      	str	r0, [sp, #8]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	468b      	mov	fp, r1
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	4690      	mov	r8, r2
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	f7f4 fd4b 	bl	8000164 <strlen>
 800b6ce:	4682      	mov	sl, r0
 800b6d0:	9b03      	ldr	r3, [sp, #12]
 800b6d2:	f8db 2000 	ldr.w	r2, [fp]
 800b6d6:	4403      	add	r3, r0
 800b6d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b6dc:	9306      	str	r3, [sp, #24]
 800b6de:	1c93      	adds	r3, r2, #2
 800b6e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b6e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b6e8:	32fe      	adds	r2, #254	; 0xfe
 800b6ea:	18d1      	adds	r1, r2, r3
 800b6ec:	461f      	mov	r7, r3
 800b6ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6f2:	9101      	str	r1, [sp, #4]
 800b6f4:	2830      	cmp	r0, #48	; 0x30
 800b6f6:	d0f8      	beq.n	800b6ea <__gethex+0x36>
 800b6f8:	f7ff ffc7 	bl	800b68a <__hexdig_fun>
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d13a      	bne.n	800b778 <__gethex+0xc4>
 800b702:	4652      	mov	r2, sl
 800b704:	4638      	mov	r0, r7
 800b706:	9903      	ldr	r1, [sp, #12]
 800b708:	f001 fa18 	bl	800cb3c <strncmp>
 800b70c:	4605      	mov	r5, r0
 800b70e:	2800      	cmp	r0, #0
 800b710:	d166      	bne.n	800b7e0 <__gethex+0x12c>
 800b712:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b716:	eb07 060a 	add.w	r6, r7, sl
 800b71a:	f7ff ffb6 	bl	800b68a <__hexdig_fun>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d060      	beq.n	800b7e4 <__gethex+0x130>
 800b722:	4633      	mov	r3, r6
 800b724:	7818      	ldrb	r0, [r3, #0]
 800b726:	461f      	mov	r7, r3
 800b728:	2830      	cmp	r0, #48	; 0x30
 800b72a:	f103 0301 	add.w	r3, r3, #1
 800b72e:	d0f9      	beq.n	800b724 <__gethex+0x70>
 800b730:	f7ff ffab 	bl	800b68a <__hexdig_fun>
 800b734:	2301      	movs	r3, #1
 800b736:	fab0 f480 	clz	r4, r0
 800b73a:	4635      	mov	r5, r6
 800b73c:	0964      	lsrs	r4, r4, #5
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	463a      	mov	r2, r7
 800b742:	4616      	mov	r6, r2
 800b744:	7830      	ldrb	r0, [r6, #0]
 800b746:	3201      	adds	r2, #1
 800b748:	f7ff ff9f 	bl	800b68a <__hexdig_fun>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d1f8      	bne.n	800b742 <__gethex+0x8e>
 800b750:	4652      	mov	r2, sl
 800b752:	4630      	mov	r0, r6
 800b754:	9903      	ldr	r1, [sp, #12]
 800b756:	f001 f9f1 	bl	800cb3c <strncmp>
 800b75a:	b980      	cbnz	r0, 800b77e <__gethex+0xca>
 800b75c:	b94d      	cbnz	r5, 800b772 <__gethex+0xbe>
 800b75e:	eb06 050a 	add.w	r5, r6, sl
 800b762:	462a      	mov	r2, r5
 800b764:	4616      	mov	r6, r2
 800b766:	7830      	ldrb	r0, [r6, #0]
 800b768:	3201      	adds	r2, #1
 800b76a:	f7ff ff8e 	bl	800b68a <__hexdig_fun>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d1f8      	bne.n	800b764 <__gethex+0xb0>
 800b772:	1bad      	subs	r5, r5, r6
 800b774:	00ad      	lsls	r5, r5, #2
 800b776:	e004      	b.n	800b782 <__gethex+0xce>
 800b778:	2400      	movs	r4, #0
 800b77a:	4625      	mov	r5, r4
 800b77c:	e7e0      	b.n	800b740 <__gethex+0x8c>
 800b77e:	2d00      	cmp	r5, #0
 800b780:	d1f7      	bne.n	800b772 <__gethex+0xbe>
 800b782:	7833      	ldrb	r3, [r6, #0]
 800b784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b788:	2b50      	cmp	r3, #80	; 0x50
 800b78a:	d139      	bne.n	800b800 <__gethex+0x14c>
 800b78c:	7873      	ldrb	r3, [r6, #1]
 800b78e:	2b2b      	cmp	r3, #43	; 0x2b
 800b790:	d02a      	beq.n	800b7e8 <__gethex+0x134>
 800b792:	2b2d      	cmp	r3, #45	; 0x2d
 800b794:	d02c      	beq.n	800b7f0 <__gethex+0x13c>
 800b796:	f04f 0900 	mov.w	r9, #0
 800b79a:	1c71      	adds	r1, r6, #1
 800b79c:	7808      	ldrb	r0, [r1, #0]
 800b79e:	f7ff ff74 	bl	800b68a <__hexdig_fun>
 800b7a2:	1e43      	subs	r3, r0, #1
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b18      	cmp	r3, #24
 800b7a8:	d82a      	bhi.n	800b800 <__gethex+0x14c>
 800b7aa:	f1a0 0210 	sub.w	r2, r0, #16
 800b7ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7b2:	f7ff ff6a 	bl	800b68a <__hexdig_fun>
 800b7b6:	1e43      	subs	r3, r0, #1
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b18      	cmp	r3, #24
 800b7bc:	d91b      	bls.n	800b7f6 <__gethex+0x142>
 800b7be:	f1b9 0f00 	cmp.w	r9, #0
 800b7c2:	d000      	beq.n	800b7c6 <__gethex+0x112>
 800b7c4:	4252      	negs	r2, r2
 800b7c6:	4415      	add	r5, r2
 800b7c8:	f8cb 1000 	str.w	r1, [fp]
 800b7cc:	b1d4      	cbz	r4, 800b804 <__gethex+0x150>
 800b7ce:	9b01      	ldr	r3, [sp, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	bf14      	ite	ne
 800b7d4:	2700      	movne	r7, #0
 800b7d6:	2706      	moveq	r7, #6
 800b7d8:	4638      	mov	r0, r7
 800b7da:	b00b      	add	sp, #44	; 0x2c
 800b7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e0:	463e      	mov	r6, r7
 800b7e2:	4625      	mov	r5, r4
 800b7e4:	2401      	movs	r4, #1
 800b7e6:	e7cc      	b.n	800b782 <__gethex+0xce>
 800b7e8:	f04f 0900 	mov.w	r9, #0
 800b7ec:	1cb1      	adds	r1, r6, #2
 800b7ee:	e7d5      	b.n	800b79c <__gethex+0xe8>
 800b7f0:	f04f 0901 	mov.w	r9, #1
 800b7f4:	e7fa      	b.n	800b7ec <__gethex+0x138>
 800b7f6:	230a      	movs	r3, #10
 800b7f8:	fb03 0202 	mla	r2, r3, r2, r0
 800b7fc:	3a10      	subs	r2, #16
 800b7fe:	e7d6      	b.n	800b7ae <__gethex+0xfa>
 800b800:	4631      	mov	r1, r6
 800b802:	e7e1      	b.n	800b7c8 <__gethex+0x114>
 800b804:	4621      	mov	r1, r4
 800b806:	1bf3      	subs	r3, r6, r7
 800b808:	3b01      	subs	r3, #1
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	dc0a      	bgt.n	800b824 <__gethex+0x170>
 800b80e:	9802      	ldr	r0, [sp, #8]
 800b810:	f000 fa7a 	bl	800bd08 <_Balloc>
 800b814:	4604      	mov	r4, r0
 800b816:	b940      	cbnz	r0, 800b82a <__gethex+0x176>
 800b818:	4602      	mov	r2, r0
 800b81a:	21de      	movs	r1, #222	; 0xde
 800b81c:	4b5b      	ldr	r3, [pc, #364]	; (800b98c <__gethex+0x2d8>)
 800b81e:	485c      	ldr	r0, [pc, #368]	; (800b990 <__gethex+0x2dc>)
 800b820:	f001 f9ae 	bl	800cb80 <__assert_func>
 800b824:	3101      	adds	r1, #1
 800b826:	105b      	asrs	r3, r3, #1
 800b828:	e7ef      	b.n	800b80a <__gethex+0x156>
 800b82a:	f04f 0b00 	mov.w	fp, #0
 800b82e:	f100 0914 	add.w	r9, r0, #20
 800b832:	f1ca 0301 	rsb	r3, sl, #1
 800b836:	f8cd 9010 	str.w	r9, [sp, #16]
 800b83a:	f8cd b004 	str.w	fp, [sp, #4]
 800b83e:	9308      	str	r3, [sp, #32]
 800b840:	42b7      	cmp	r7, r6
 800b842:	d33f      	bcc.n	800b8c4 <__gethex+0x210>
 800b844:	9f04      	ldr	r7, [sp, #16]
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	f847 3b04 	str.w	r3, [r7], #4
 800b84c:	eba7 0709 	sub.w	r7, r7, r9
 800b850:	10bf      	asrs	r7, r7, #2
 800b852:	6127      	str	r7, [r4, #16]
 800b854:	4618      	mov	r0, r3
 800b856:	f000 fb49 	bl	800beec <__hi0bits>
 800b85a:	017f      	lsls	r7, r7, #5
 800b85c:	f8d8 6000 	ldr.w	r6, [r8]
 800b860:	1a3f      	subs	r7, r7, r0
 800b862:	42b7      	cmp	r7, r6
 800b864:	dd62      	ble.n	800b92c <__gethex+0x278>
 800b866:	1bbf      	subs	r7, r7, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fee3 	bl	800c636 <__any_on>
 800b870:	4682      	mov	sl, r0
 800b872:	b1a8      	cbz	r0, 800b8a0 <__gethex+0x1ec>
 800b874:	f04f 0a01 	mov.w	sl, #1
 800b878:	1e7b      	subs	r3, r7, #1
 800b87a:	1159      	asrs	r1, r3, #5
 800b87c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b880:	f003 021f 	and.w	r2, r3, #31
 800b884:	fa0a f202 	lsl.w	r2, sl, r2
 800b888:	420a      	tst	r2, r1
 800b88a:	d009      	beq.n	800b8a0 <__gethex+0x1ec>
 800b88c:	4553      	cmp	r3, sl
 800b88e:	dd05      	ble.n	800b89c <__gethex+0x1e8>
 800b890:	4620      	mov	r0, r4
 800b892:	1eb9      	subs	r1, r7, #2
 800b894:	f000 fecf 	bl	800c636 <__any_on>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d144      	bne.n	800b926 <__gethex+0x272>
 800b89c:	f04f 0a02 	mov.w	sl, #2
 800b8a0:	4639      	mov	r1, r7
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff fe9e 	bl	800b5e4 <rshift>
 800b8a8:	443d      	add	r5, r7
 800b8aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ae:	42ab      	cmp	r3, r5
 800b8b0:	da4a      	bge.n	800b948 <__gethex+0x294>
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	9802      	ldr	r0, [sp, #8]
 800b8b6:	f000 fa67 	bl	800bd88 <_Bfree>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8be:	27a3      	movs	r7, #163	; 0xa3
 800b8c0:	6013      	str	r3, [r2, #0]
 800b8c2:	e789      	b.n	800b7d8 <__gethex+0x124>
 800b8c4:	1e73      	subs	r3, r6, #1
 800b8c6:	9a06      	ldr	r2, [sp, #24]
 800b8c8:	9307      	str	r3, [sp, #28]
 800b8ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d019      	beq.n	800b906 <__gethex+0x252>
 800b8d2:	f1bb 0f20 	cmp.w	fp, #32
 800b8d6:	d107      	bne.n	800b8e8 <__gethex+0x234>
 800b8d8:	9b04      	ldr	r3, [sp, #16]
 800b8da:	9a01      	ldr	r2, [sp, #4]
 800b8dc:	f843 2b04 	str.w	r2, [r3], #4
 800b8e0:	9304      	str	r3, [sp, #16]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	469b      	mov	fp, r3
 800b8e6:	9301      	str	r3, [sp, #4]
 800b8e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b8ec:	f7ff fecd 	bl	800b68a <__hexdig_fun>
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	f000 000f 	and.w	r0, r0, #15
 800b8f6:	fa00 f00b 	lsl.w	r0, r0, fp
 800b8fa:	4303      	orrs	r3, r0
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	f10b 0b04 	add.w	fp, fp, #4
 800b902:	9b07      	ldr	r3, [sp, #28]
 800b904:	e00d      	b.n	800b922 <__gethex+0x26e>
 800b906:	9a08      	ldr	r2, [sp, #32]
 800b908:	1e73      	subs	r3, r6, #1
 800b90a:	4413      	add	r3, r2
 800b90c:	42bb      	cmp	r3, r7
 800b90e:	d3e0      	bcc.n	800b8d2 <__gethex+0x21e>
 800b910:	4618      	mov	r0, r3
 800b912:	4652      	mov	r2, sl
 800b914:	9903      	ldr	r1, [sp, #12]
 800b916:	9309      	str	r3, [sp, #36]	; 0x24
 800b918:	f001 f910 	bl	800cb3c <strncmp>
 800b91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b91e:	2800      	cmp	r0, #0
 800b920:	d1d7      	bne.n	800b8d2 <__gethex+0x21e>
 800b922:	461e      	mov	r6, r3
 800b924:	e78c      	b.n	800b840 <__gethex+0x18c>
 800b926:	f04f 0a03 	mov.w	sl, #3
 800b92a:	e7b9      	b.n	800b8a0 <__gethex+0x1ec>
 800b92c:	da09      	bge.n	800b942 <__gethex+0x28e>
 800b92e:	1bf7      	subs	r7, r6, r7
 800b930:	4621      	mov	r1, r4
 800b932:	463a      	mov	r2, r7
 800b934:	9802      	ldr	r0, [sp, #8]
 800b936:	f000 fc3f 	bl	800c1b8 <__lshift>
 800b93a:	4604      	mov	r4, r0
 800b93c:	1bed      	subs	r5, r5, r7
 800b93e:	f100 0914 	add.w	r9, r0, #20
 800b942:	f04f 0a00 	mov.w	sl, #0
 800b946:	e7b0      	b.n	800b8aa <__gethex+0x1f6>
 800b948:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b94c:	42a8      	cmp	r0, r5
 800b94e:	dd72      	ble.n	800ba36 <__gethex+0x382>
 800b950:	1b45      	subs	r5, r0, r5
 800b952:	42ae      	cmp	r6, r5
 800b954:	dc35      	bgt.n	800b9c2 <__gethex+0x30e>
 800b956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d029      	beq.n	800b9b2 <__gethex+0x2fe>
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d02b      	beq.n	800b9ba <__gethex+0x306>
 800b962:	2b01      	cmp	r3, #1
 800b964:	d11c      	bne.n	800b9a0 <__gethex+0x2ec>
 800b966:	42ae      	cmp	r6, r5
 800b968:	d11a      	bne.n	800b9a0 <__gethex+0x2ec>
 800b96a:	2e01      	cmp	r6, #1
 800b96c:	d112      	bne.n	800b994 <__gethex+0x2e0>
 800b96e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b972:	9a05      	ldr	r2, [sp, #20]
 800b974:	2762      	movs	r7, #98	; 0x62
 800b976:	6013      	str	r3, [r2, #0]
 800b978:	2301      	movs	r3, #1
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	f8c9 3000 	str.w	r3, [r9]
 800b980:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b982:	601c      	str	r4, [r3, #0]
 800b984:	e728      	b.n	800b7d8 <__gethex+0x124>
 800b986:	bf00      	nop
 800b988:	0800ea08 	.word	0x0800ea08
 800b98c:	0800e990 	.word	0x0800e990
 800b990:	0800e9a1 	.word	0x0800e9a1
 800b994:	4620      	mov	r0, r4
 800b996:	1e71      	subs	r1, r6, #1
 800b998:	f000 fe4d 	bl	800c636 <__any_on>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d1e6      	bne.n	800b96e <__gethex+0x2ba>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	9802      	ldr	r0, [sp, #8]
 800b9a4:	f000 f9f0 	bl	800bd88 <_Bfree>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9ac:	2750      	movs	r7, #80	; 0x50
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	e712      	b.n	800b7d8 <__gethex+0x124>
 800b9b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d1f3      	bne.n	800b9a0 <__gethex+0x2ec>
 800b9b8:	e7d9      	b.n	800b96e <__gethex+0x2ba>
 800b9ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1d6      	bne.n	800b96e <__gethex+0x2ba>
 800b9c0:	e7ee      	b.n	800b9a0 <__gethex+0x2ec>
 800b9c2:	1e6f      	subs	r7, r5, #1
 800b9c4:	f1ba 0f00 	cmp.w	sl, #0
 800b9c8:	d132      	bne.n	800ba30 <__gethex+0x37c>
 800b9ca:	b127      	cbz	r7, 800b9d6 <__gethex+0x322>
 800b9cc:	4639      	mov	r1, r7
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 fe31 	bl	800c636 <__any_on>
 800b9d4:	4682      	mov	sl, r0
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	117b      	asrs	r3, r7, #5
 800b9da:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b9de:	f007 071f 	and.w	r7, r7, #31
 800b9e2:	fa01 f707 	lsl.w	r7, r1, r7
 800b9e6:	421f      	tst	r7, r3
 800b9e8:	f04f 0702 	mov.w	r7, #2
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	bf18      	it	ne
 800b9f2:	f04a 0a02 	orrne.w	sl, sl, #2
 800b9f6:	1b76      	subs	r6, r6, r5
 800b9f8:	f7ff fdf4 	bl	800b5e4 <rshift>
 800b9fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	d048      	beq.n	800ba98 <__gethex+0x3e4>
 800ba06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d015      	beq.n	800ba3a <__gethex+0x386>
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d017      	beq.n	800ba42 <__gethex+0x38e>
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d109      	bne.n	800ba2a <__gethex+0x376>
 800ba16:	f01a 0f02 	tst.w	sl, #2
 800ba1a:	d006      	beq.n	800ba2a <__gethex+0x376>
 800ba1c:	f8d9 0000 	ldr.w	r0, [r9]
 800ba20:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba24:	f01a 0f01 	tst.w	sl, #1
 800ba28:	d10e      	bne.n	800ba48 <__gethex+0x394>
 800ba2a:	f047 0710 	orr.w	r7, r7, #16
 800ba2e:	e033      	b.n	800ba98 <__gethex+0x3e4>
 800ba30:	f04f 0a01 	mov.w	sl, #1
 800ba34:	e7cf      	b.n	800b9d6 <__gethex+0x322>
 800ba36:	2701      	movs	r7, #1
 800ba38:	e7e2      	b.n	800ba00 <__gethex+0x34c>
 800ba3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba3c:	f1c3 0301 	rsb	r3, r3, #1
 800ba40:	9315      	str	r3, [sp, #84]	; 0x54
 800ba42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d0f0      	beq.n	800ba2a <__gethex+0x376>
 800ba48:	f04f 0c00 	mov.w	ip, #0
 800ba4c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba50:	f104 0314 	add.w	r3, r4, #20
 800ba54:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba58:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba62:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba66:	d01c      	beq.n	800baa2 <__gethex+0x3ee>
 800ba68:	3201      	adds	r2, #1
 800ba6a:	6002      	str	r2, [r0, #0]
 800ba6c:	2f02      	cmp	r7, #2
 800ba6e:	f104 0314 	add.w	r3, r4, #20
 800ba72:	d13d      	bne.n	800baf0 <__gethex+0x43c>
 800ba74:	f8d8 2000 	ldr.w	r2, [r8]
 800ba78:	3a01      	subs	r2, #1
 800ba7a:	42b2      	cmp	r2, r6
 800ba7c:	d10a      	bne.n	800ba94 <__gethex+0x3e0>
 800ba7e:	2201      	movs	r2, #1
 800ba80:	1171      	asrs	r1, r6, #5
 800ba82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba86:	f006 061f 	and.w	r6, r6, #31
 800ba8a:	fa02 f606 	lsl.w	r6, r2, r6
 800ba8e:	421e      	tst	r6, r3
 800ba90:	bf18      	it	ne
 800ba92:	4617      	movne	r7, r2
 800ba94:	f047 0720 	orr.w	r7, r7, #32
 800ba98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba9a:	601c      	str	r4, [r3, #0]
 800ba9c:	9b05      	ldr	r3, [sp, #20]
 800ba9e:	601d      	str	r5, [r3, #0]
 800baa0:	e69a      	b.n	800b7d8 <__gethex+0x124>
 800baa2:	4299      	cmp	r1, r3
 800baa4:	f843 cc04 	str.w	ip, [r3, #-4]
 800baa8:	d8d8      	bhi.n	800ba5c <__gethex+0x3a8>
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	459b      	cmp	fp, r3
 800baae:	db17      	blt.n	800bae0 <__gethex+0x42c>
 800bab0:	6861      	ldr	r1, [r4, #4]
 800bab2:	9802      	ldr	r0, [sp, #8]
 800bab4:	3101      	adds	r1, #1
 800bab6:	f000 f927 	bl	800bd08 <_Balloc>
 800baba:	4681      	mov	r9, r0
 800babc:	b918      	cbnz	r0, 800bac6 <__gethex+0x412>
 800babe:	4602      	mov	r2, r0
 800bac0:	2184      	movs	r1, #132	; 0x84
 800bac2:	4b19      	ldr	r3, [pc, #100]	; (800bb28 <__gethex+0x474>)
 800bac4:	e6ab      	b.n	800b81e <__gethex+0x16a>
 800bac6:	6922      	ldr	r2, [r4, #16]
 800bac8:	f104 010c 	add.w	r1, r4, #12
 800bacc:	3202      	adds	r2, #2
 800bace:	0092      	lsls	r2, r2, #2
 800bad0:	300c      	adds	r0, #12
 800bad2:	f7fd f9cd 	bl	8008e70 <memcpy>
 800bad6:	4621      	mov	r1, r4
 800bad8:	9802      	ldr	r0, [sp, #8]
 800bada:	f000 f955 	bl	800bd88 <_Bfree>
 800bade:	464c      	mov	r4, r9
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	6122      	str	r2, [r4, #16]
 800bae6:	2201      	movs	r2, #1
 800bae8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baec:	615a      	str	r2, [r3, #20]
 800baee:	e7bd      	b.n	800ba6c <__gethex+0x3b8>
 800baf0:	6922      	ldr	r2, [r4, #16]
 800baf2:	455a      	cmp	r2, fp
 800baf4:	dd0b      	ble.n	800bb0e <__gethex+0x45a>
 800baf6:	2101      	movs	r1, #1
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7ff fd73 	bl	800b5e4 <rshift>
 800bafe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb02:	3501      	adds	r5, #1
 800bb04:	42ab      	cmp	r3, r5
 800bb06:	f6ff aed4 	blt.w	800b8b2 <__gethex+0x1fe>
 800bb0a:	2701      	movs	r7, #1
 800bb0c:	e7c2      	b.n	800ba94 <__gethex+0x3e0>
 800bb0e:	f016 061f 	ands.w	r6, r6, #31
 800bb12:	d0fa      	beq.n	800bb0a <__gethex+0x456>
 800bb14:	4453      	add	r3, sl
 800bb16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb1a:	f000 f9e7 	bl	800beec <__hi0bits>
 800bb1e:	f1c6 0620 	rsb	r6, r6, #32
 800bb22:	42b0      	cmp	r0, r6
 800bb24:	dbe7      	blt.n	800baf6 <__gethex+0x442>
 800bb26:	e7f0      	b.n	800bb0a <__gethex+0x456>
 800bb28:	0800e990 	.word	0x0800e990

0800bb2c <L_shift>:
 800bb2c:	f1c2 0208 	rsb	r2, r2, #8
 800bb30:	0092      	lsls	r2, r2, #2
 800bb32:	b570      	push	{r4, r5, r6, lr}
 800bb34:	f1c2 0620 	rsb	r6, r2, #32
 800bb38:	6843      	ldr	r3, [r0, #4]
 800bb3a:	6804      	ldr	r4, [r0, #0]
 800bb3c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb40:	432c      	orrs	r4, r5
 800bb42:	40d3      	lsrs	r3, r2
 800bb44:	6004      	str	r4, [r0, #0]
 800bb46:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb4a:	4288      	cmp	r0, r1
 800bb4c:	d3f4      	bcc.n	800bb38 <L_shift+0xc>
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}

0800bb50 <__match>:
 800bb50:	b530      	push	{r4, r5, lr}
 800bb52:	6803      	ldr	r3, [r0, #0]
 800bb54:	3301      	adds	r3, #1
 800bb56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb5a:	b914      	cbnz	r4, 800bb62 <__match+0x12>
 800bb5c:	6003      	str	r3, [r0, #0]
 800bb5e:	2001      	movs	r0, #1
 800bb60:	bd30      	pop	{r4, r5, pc}
 800bb62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bb6a:	2d19      	cmp	r5, #25
 800bb6c:	bf98      	it	ls
 800bb6e:	3220      	addls	r2, #32
 800bb70:	42a2      	cmp	r2, r4
 800bb72:	d0f0      	beq.n	800bb56 <__match+0x6>
 800bb74:	2000      	movs	r0, #0
 800bb76:	e7f3      	b.n	800bb60 <__match+0x10>

0800bb78 <__hexnan>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	2500      	movs	r5, #0
 800bb7e:	680b      	ldr	r3, [r1, #0]
 800bb80:	4682      	mov	sl, r0
 800bb82:	115e      	asrs	r6, r3, #5
 800bb84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb88:	f013 031f 	ands.w	r3, r3, #31
 800bb8c:	bf18      	it	ne
 800bb8e:	3604      	addne	r6, #4
 800bb90:	1f37      	subs	r7, r6, #4
 800bb92:	46b9      	mov	r9, r7
 800bb94:	463c      	mov	r4, r7
 800bb96:	46ab      	mov	fp, r5
 800bb98:	b087      	sub	sp, #28
 800bb9a:	4690      	mov	r8, r2
 800bb9c:	6802      	ldr	r2, [r0, #0]
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	f846 5c04 	str.w	r5, [r6, #-4]
 800bba4:	9502      	str	r5, [sp, #8]
 800bba6:	7851      	ldrb	r1, [r2, #1]
 800bba8:	1c53      	adds	r3, r2, #1
 800bbaa:	9303      	str	r3, [sp, #12]
 800bbac:	b341      	cbz	r1, 800bc00 <__hexnan+0x88>
 800bbae:	4608      	mov	r0, r1
 800bbb0:	9205      	str	r2, [sp, #20]
 800bbb2:	9104      	str	r1, [sp, #16]
 800bbb4:	f7ff fd69 	bl	800b68a <__hexdig_fun>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d14f      	bne.n	800bc5c <__hexnan+0xe4>
 800bbbc:	9904      	ldr	r1, [sp, #16]
 800bbbe:	9a05      	ldr	r2, [sp, #20]
 800bbc0:	2920      	cmp	r1, #32
 800bbc2:	d818      	bhi.n	800bbf6 <__hexnan+0x7e>
 800bbc4:	9b02      	ldr	r3, [sp, #8]
 800bbc6:	459b      	cmp	fp, r3
 800bbc8:	dd13      	ble.n	800bbf2 <__hexnan+0x7a>
 800bbca:	454c      	cmp	r4, r9
 800bbcc:	d206      	bcs.n	800bbdc <__hexnan+0x64>
 800bbce:	2d07      	cmp	r5, #7
 800bbd0:	dc04      	bgt.n	800bbdc <__hexnan+0x64>
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	4649      	mov	r1, r9
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f7ff ffa8 	bl	800bb2c <L_shift>
 800bbdc:	4544      	cmp	r4, r8
 800bbde:	d950      	bls.n	800bc82 <__hexnan+0x10a>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f1a4 0904 	sub.w	r9, r4, #4
 800bbe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbea:	461d      	mov	r5, r3
 800bbec:	464c      	mov	r4, r9
 800bbee:	f8cd b008 	str.w	fp, [sp, #8]
 800bbf2:	9a03      	ldr	r2, [sp, #12]
 800bbf4:	e7d7      	b.n	800bba6 <__hexnan+0x2e>
 800bbf6:	2929      	cmp	r1, #41	; 0x29
 800bbf8:	d156      	bne.n	800bca8 <__hexnan+0x130>
 800bbfa:	3202      	adds	r2, #2
 800bbfc:	f8ca 2000 	str.w	r2, [sl]
 800bc00:	f1bb 0f00 	cmp.w	fp, #0
 800bc04:	d050      	beq.n	800bca8 <__hexnan+0x130>
 800bc06:	454c      	cmp	r4, r9
 800bc08:	d206      	bcs.n	800bc18 <__hexnan+0xa0>
 800bc0a:	2d07      	cmp	r5, #7
 800bc0c:	dc04      	bgt.n	800bc18 <__hexnan+0xa0>
 800bc0e:	462a      	mov	r2, r5
 800bc10:	4649      	mov	r1, r9
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7ff ff8a 	bl	800bb2c <L_shift>
 800bc18:	4544      	cmp	r4, r8
 800bc1a:	d934      	bls.n	800bc86 <__hexnan+0x10e>
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	f1a8 0204 	sub.w	r2, r8, #4
 800bc22:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc26:	429f      	cmp	r7, r3
 800bc28:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc2c:	d2f9      	bcs.n	800bc22 <__hexnan+0xaa>
 800bc2e:	1b3b      	subs	r3, r7, r4
 800bc30:	f023 0303 	bic.w	r3, r3, #3
 800bc34:	3304      	adds	r3, #4
 800bc36:	3401      	adds	r4, #1
 800bc38:	3e03      	subs	r6, #3
 800bc3a:	42b4      	cmp	r4, r6
 800bc3c:	bf88      	it	hi
 800bc3e:	2304      	movhi	r3, #4
 800bc40:	2200      	movs	r2, #0
 800bc42:	4443      	add	r3, r8
 800bc44:	f843 2b04 	str.w	r2, [r3], #4
 800bc48:	429f      	cmp	r7, r3
 800bc4a:	d2fb      	bcs.n	800bc44 <__hexnan+0xcc>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	b91b      	cbnz	r3, 800bc58 <__hexnan+0xe0>
 800bc50:	4547      	cmp	r7, r8
 800bc52:	d127      	bne.n	800bca4 <__hexnan+0x12c>
 800bc54:	2301      	movs	r3, #1
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	2005      	movs	r0, #5
 800bc5a:	e026      	b.n	800bcaa <__hexnan+0x132>
 800bc5c:	3501      	adds	r5, #1
 800bc5e:	2d08      	cmp	r5, #8
 800bc60:	f10b 0b01 	add.w	fp, fp, #1
 800bc64:	dd06      	ble.n	800bc74 <__hexnan+0xfc>
 800bc66:	4544      	cmp	r4, r8
 800bc68:	d9c3      	bls.n	800bbf2 <__hexnan+0x7a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2501      	movs	r5, #1
 800bc6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc72:	3c04      	subs	r4, #4
 800bc74:	6822      	ldr	r2, [r4, #0]
 800bc76:	f000 000f 	and.w	r0, r0, #15
 800bc7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bc7e:	6022      	str	r2, [r4, #0]
 800bc80:	e7b7      	b.n	800bbf2 <__hexnan+0x7a>
 800bc82:	2508      	movs	r5, #8
 800bc84:	e7b5      	b.n	800bbf2 <__hexnan+0x7a>
 800bc86:	9b01      	ldr	r3, [sp, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d0df      	beq.n	800bc4c <__hexnan+0xd4>
 800bc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc90:	f1c3 0320 	rsb	r3, r3, #32
 800bc94:	fa22 f303 	lsr.w	r3, r2, r3
 800bc98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bc9c:	401a      	ands	r2, r3
 800bc9e:	f846 2c04 	str.w	r2, [r6, #-4]
 800bca2:	e7d3      	b.n	800bc4c <__hexnan+0xd4>
 800bca4:	3f04      	subs	r7, #4
 800bca6:	e7d1      	b.n	800bc4c <__hexnan+0xd4>
 800bca8:	2004      	movs	r0, #4
 800bcaa:	b007      	add	sp, #28
 800bcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcb0 <_localeconv_r>:
 800bcb0:	4800      	ldr	r0, [pc, #0]	; (800bcb4 <_localeconv_r+0x4>)
 800bcb2:	4770      	bx	lr
 800bcb4:	20000174 	.word	0x20000174

0800bcb8 <malloc>:
 800bcb8:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <malloc+0xc>)
 800bcba:	4601      	mov	r1, r0
 800bcbc:	6818      	ldr	r0, [r3, #0]
 800bcbe:	f000 bd57 	b.w	800c770 <_malloc_r>
 800bcc2:	bf00      	nop
 800bcc4:	2000001c 	.word	0x2000001c

0800bcc8 <__ascii_mbtowc>:
 800bcc8:	b082      	sub	sp, #8
 800bcca:	b901      	cbnz	r1, 800bcce <__ascii_mbtowc+0x6>
 800bccc:	a901      	add	r1, sp, #4
 800bcce:	b142      	cbz	r2, 800bce2 <__ascii_mbtowc+0x1a>
 800bcd0:	b14b      	cbz	r3, 800bce6 <__ascii_mbtowc+0x1e>
 800bcd2:	7813      	ldrb	r3, [r2, #0]
 800bcd4:	600b      	str	r3, [r1, #0]
 800bcd6:	7812      	ldrb	r2, [r2, #0]
 800bcd8:	1e10      	subs	r0, r2, #0
 800bcda:	bf18      	it	ne
 800bcdc:	2001      	movne	r0, #1
 800bcde:	b002      	add	sp, #8
 800bce0:	4770      	bx	lr
 800bce2:	4610      	mov	r0, r2
 800bce4:	e7fb      	b.n	800bcde <__ascii_mbtowc+0x16>
 800bce6:	f06f 0001 	mvn.w	r0, #1
 800bcea:	e7f8      	b.n	800bcde <__ascii_mbtowc+0x16>

0800bcec <memchr>:
 800bcec:	4603      	mov	r3, r0
 800bcee:	b510      	push	{r4, lr}
 800bcf0:	b2c9      	uxtb	r1, r1
 800bcf2:	4402      	add	r2, r0
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	d101      	bne.n	800bcfe <memchr+0x12>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e003      	b.n	800bd06 <memchr+0x1a>
 800bcfe:	7804      	ldrb	r4, [r0, #0]
 800bd00:	3301      	adds	r3, #1
 800bd02:	428c      	cmp	r4, r1
 800bd04:	d1f6      	bne.n	800bcf4 <memchr+0x8>
 800bd06:	bd10      	pop	{r4, pc}

0800bd08 <_Balloc>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	b976      	cbnz	r6, 800bd30 <_Balloc+0x28>
 800bd12:	2010      	movs	r0, #16
 800bd14:	f7ff ffd0 	bl	800bcb8 <malloc>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	6260      	str	r0, [r4, #36]	; 0x24
 800bd1c:	b920      	cbnz	r0, 800bd28 <_Balloc+0x20>
 800bd1e:	2166      	movs	r1, #102	; 0x66
 800bd20:	4b17      	ldr	r3, [pc, #92]	; (800bd80 <_Balloc+0x78>)
 800bd22:	4818      	ldr	r0, [pc, #96]	; (800bd84 <_Balloc+0x7c>)
 800bd24:	f000 ff2c 	bl	800cb80 <__assert_func>
 800bd28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd2c:	6006      	str	r6, [r0, #0]
 800bd2e:	60c6      	str	r6, [r0, #12]
 800bd30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd32:	68f3      	ldr	r3, [r6, #12]
 800bd34:	b183      	cbz	r3, 800bd58 <_Balloc+0x50>
 800bd36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd3e:	b9b8      	cbnz	r0, 800bd70 <_Balloc+0x68>
 800bd40:	2101      	movs	r1, #1
 800bd42:	fa01 f605 	lsl.w	r6, r1, r5
 800bd46:	1d72      	adds	r2, r6, #5
 800bd48:	4620      	mov	r0, r4
 800bd4a:	0092      	lsls	r2, r2, #2
 800bd4c:	f000 fc94 	bl	800c678 <_calloc_r>
 800bd50:	b160      	cbz	r0, 800bd6c <_Balloc+0x64>
 800bd52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd56:	e00e      	b.n	800bd76 <_Balloc+0x6e>
 800bd58:	2221      	movs	r2, #33	; 0x21
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fc8b 	bl	800c678 <_calloc_r>
 800bd62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd64:	60f0      	str	r0, [r6, #12]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e4      	bne.n	800bd36 <_Balloc+0x2e>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}
 800bd70:	6802      	ldr	r2, [r0, #0]
 800bd72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd76:	2300      	movs	r3, #0
 800bd78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd7c:	e7f7      	b.n	800bd6e <_Balloc+0x66>
 800bd7e:	bf00      	nop
 800bd80:	0800e91e 	.word	0x0800e91e
 800bd84:	0800ea1c 	.word	0x0800ea1c

0800bd88 <_Bfree>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b976      	cbnz	r6, 800bdb0 <_Bfree+0x28>
 800bd92:	2010      	movs	r0, #16
 800bd94:	f7ff ff90 	bl	800bcb8 <malloc>
 800bd98:	4602      	mov	r2, r0
 800bd9a:	6268      	str	r0, [r5, #36]	; 0x24
 800bd9c:	b920      	cbnz	r0, 800bda8 <_Bfree+0x20>
 800bd9e:	218a      	movs	r1, #138	; 0x8a
 800bda0:	4b08      	ldr	r3, [pc, #32]	; (800bdc4 <_Bfree+0x3c>)
 800bda2:	4809      	ldr	r0, [pc, #36]	; (800bdc8 <_Bfree+0x40>)
 800bda4:	f000 feec 	bl	800cb80 <__assert_func>
 800bda8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdac:	6006      	str	r6, [r0, #0]
 800bdae:	60c6      	str	r6, [r0, #12]
 800bdb0:	b13c      	cbz	r4, 800bdc2 <_Bfree+0x3a>
 800bdb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bdb4:	6862      	ldr	r2, [r4, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdbc:	6021      	str	r1, [r4, #0]
 800bdbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	0800e91e 	.word	0x0800e91e
 800bdc8:	0800ea1c 	.word	0x0800ea1c

0800bdcc <__multadd>:
 800bdcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	461e      	mov	r6, r3
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	690d      	ldr	r5, [r1, #16]
 800bdda:	f101 0c14 	add.w	ip, r1, #20
 800bdde:	f8dc 3000 	ldr.w	r3, [ip]
 800bde2:	3001      	adds	r0, #1
 800bde4:	b299      	uxth	r1, r3
 800bde6:	fb02 6101 	mla	r1, r2, r1, r6
 800bdea:	0c1e      	lsrs	r6, r3, #16
 800bdec:	0c0b      	lsrs	r3, r1, #16
 800bdee:	fb02 3306 	mla	r3, r2, r6, r3
 800bdf2:	b289      	uxth	r1, r1
 800bdf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdf8:	4285      	cmp	r5, r0
 800bdfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdfe:	f84c 1b04 	str.w	r1, [ip], #4
 800be02:	dcec      	bgt.n	800bdde <__multadd+0x12>
 800be04:	b30e      	cbz	r6, 800be4a <__multadd+0x7e>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	42ab      	cmp	r3, r5
 800be0a:	dc19      	bgt.n	800be40 <__multadd+0x74>
 800be0c:	6861      	ldr	r1, [r4, #4]
 800be0e:	4638      	mov	r0, r7
 800be10:	3101      	adds	r1, #1
 800be12:	f7ff ff79 	bl	800bd08 <_Balloc>
 800be16:	4680      	mov	r8, r0
 800be18:	b928      	cbnz	r0, 800be26 <__multadd+0x5a>
 800be1a:	4602      	mov	r2, r0
 800be1c:	21b5      	movs	r1, #181	; 0xb5
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <__multadd+0x84>)
 800be20:	480c      	ldr	r0, [pc, #48]	; (800be54 <__multadd+0x88>)
 800be22:	f000 fead 	bl	800cb80 <__assert_func>
 800be26:	6922      	ldr	r2, [r4, #16]
 800be28:	f104 010c 	add.w	r1, r4, #12
 800be2c:	3202      	adds	r2, #2
 800be2e:	0092      	lsls	r2, r2, #2
 800be30:	300c      	adds	r0, #12
 800be32:	f7fd f81d 	bl	8008e70 <memcpy>
 800be36:	4621      	mov	r1, r4
 800be38:	4638      	mov	r0, r7
 800be3a:	f7ff ffa5 	bl	800bd88 <_Bfree>
 800be3e:	4644      	mov	r4, r8
 800be40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be44:	3501      	adds	r5, #1
 800be46:	615e      	str	r6, [r3, #20]
 800be48:	6125      	str	r5, [r4, #16]
 800be4a:	4620      	mov	r0, r4
 800be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be50:	0800e990 	.word	0x0800e990
 800be54:	0800ea1c 	.word	0x0800ea1c

0800be58 <__s2b>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	4615      	mov	r5, r2
 800be5e:	2209      	movs	r2, #9
 800be60:	461f      	mov	r7, r3
 800be62:	3308      	adds	r3, #8
 800be64:	460c      	mov	r4, r1
 800be66:	fb93 f3f2 	sdiv	r3, r3, r2
 800be6a:	4606      	mov	r6, r0
 800be6c:	2201      	movs	r2, #1
 800be6e:	2100      	movs	r1, #0
 800be70:	429a      	cmp	r2, r3
 800be72:	db09      	blt.n	800be88 <__s2b+0x30>
 800be74:	4630      	mov	r0, r6
 800be76:	f7ff ff47 	bl	800bd08 <_Balloc>
 800be7a:	b940      	cbnz	r0, 800be8e <__s2b+0x36>
 800be7c:	4602      	mov	r2, r0
 800be7e:	21ce      	movs	r1, #206	; 0xce
 800be80:	4b18      	ldr	r3, [pc, #96]	; (800bee4 <__s2b+0x8c>)
 800be82:	4819      	ldr	r0, [pc, #100]	; (800bee8 <__s2b+0x90>)
 800be84:	f000 fe7c 	bl	800cb80 <__assert_func>
 800be88:	0052      	lsls	r2, r2, #1
 800be8a:	3101      	adds	r1, #1
 800be8c:	e7f0      	b.n	800be70 <__s2b+0x18>
 800be8e:	9b08      	ldr	r3, [sp, #32]
 800be90:	2d09      	cmp	r5, #9
 800be92:	6143      	str	r3, [r0, #20]
 800be94:	f04f 0301 	mov.w	r3, #1
 800be98:	6103      	str	r3, [r0, #16]
 800be9a:	dd16      	ble.n	800beca <__s2b+0x72>
 800be9c:	f104 0909 	add.w	r9, r4, #9
 800bea0:	46c8      	mov	r8, r9
 800bea2:	442c      	add	r4, r5
 800bea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bea8:	4601      	mov	r1, r0
 800beaa:	220a      	movs	r2, #10
 800beac:	4630      	mov	r0, r6
 800beae:	3b30      	subs	r3, #48	; 0x30
 800beb0:	f7ff ff8c 	bl	800bdcc <__multadd>
 800beb4:	45a0      	cmp	r8, r4
 800beb6:	d1f5      	bne.n	800bea4 <__s2b+0x4c>
 800beb8:	f1a5 0408 	sub.w	r4, r5, #8
 800bebc:	444c      	add	r4, r9
 800bebe:	1b2d      	subs	r5, r5, r4
 800bec0:	1963      	adds	r3, r4, r5
 800bec2:	42bb      	cmp	r3, r7
 800bec4:	db04      	blt.n	800bed0 <__s2b+0x78>
 800bec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beca:	2509      	movs	r5, #9
 800becc:	340a      	adds	r4, #10
 800bece:	e7f6      	b.n	800bebe <__s2b+0x66>
 800bed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bed4:	4601      	mov	r1, r0
 800bed6:	220a      	movs	r2, #10
 800bed8:	4630      	mov	r0, r6
 800beda:	3b30      	subs	r3, #48	; 0x30
 800bedc:	f7ff ff76 	bl	800bdcc <__multadd>
 800bee0:	e7ee      	b.n	800bec0 <__s2b+0x68>
 800bee2:	bf00      	nop
 800bee4:	0800e990 	.word	0x0800e990
 800bee8:	0800ea1c 	.word	0x0800ea1c

0800beec <__hi0bits>:
 800beec:	0c02      	lsrs	r2, r0, #16
 800beee:	0412      	lsls	r2, r2, #16
 800bef0:	4603      	mov	r3, r0
 800bef2:	b9ca      	cbnz	r2, 800bf28 <__hi0bits+0x3c>
 800bef4:	0403      	lsls	r3, r0, #16
 800bef6:	2010      	movs	r0, #16
 800bef8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800befc:	bf04      	itt	eq
 800befe:	021b      	lsleq	r3, r3, #8
 800bf00:	3008      	addeq	r0, #8
 800bf02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf06:	bf04      	itt	eq
 800bf08:	011b      	lsleq	r3, r3, #4
 800bf0a:	3004      	addeq	r0, #4
 800bf0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf10:	bf04      	itt	eq
 800bf12:	009b      	lsleq	r3, r3, #2
 800bf14:	3002      	addeq	r0, #2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	db05      	blt.n	800bf26 <__hi0bits+0x3a>
 800bf1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bf1e:	f100 0001 	add.w	r0, r0, #1
 800bf22:	bf08      	it	eq
 800bf24:	2020      	moveq	r0, #32
 800bf26:	4770      	bx	lr
 800bf28:	2000      	movs	r0, #0
 800bf2a:	e7e5      	b.n	800bef8 <__hi0bits+0xc>

0800bf2c <__lo0bits>:
 800bf2c:	6803      	ldr	r3, [r0, #0]
 800bf2e:	4602      	mov	r2, r0
 800bf30:	f013 0007 	ands.w	r0, r3, #7
 800bf34:	d00b      	beq.n	800bf4e <__lo0bits+0x22>
 800bf36:	07d9      	lsls	r1, r3, #31
 800bf38:	d421      	bmi.n	800bf7e <__lo0bits+0x52>
 800bf3a:	0798      	lsls	r0, r3, #30
 800bf3c:	bf49      	itett	mi
 800bf3e:	085b      	lsrmi	r3, r3, #1
 800bf40:	089b      	lsrpl	r3, r3, #2
 800bf42:	2001      	movmi	r0, #1
 800bf44:	6013      	strmi	r3, [r2, #0]
 800bf46:	bf5c      	itt	pl
 800bf48:	2002      	movpl	r0, #2
 800bf4a:	6013      	strpl	r3, [r2, #0]
 800bf4c:	4770      	bx	lr
 800bf4e:	b299      	uxth	r1, r3
 800bf50:	b909      	cbnz	r1, 800bf56 <__lo0bits+0x2a>
 800bf52:	2010      	movs	r0, #16
 800bf54:	0c1b      	lsrs	r3, r3, #16
 800bf56:	b2d9      	uxtb	r1, r3
 800bf58:	b909      	cbnz	r1, 800bf5e <__lo0bits+0x32>
 800bf5a:	3008      	adds	r0, #8
 800bf5c:	0a1b      	lsrs	r3, r3, #8
 800bf5e:	0719      	lsls	r1, r3, #28
 800bf60:	bf04      	itt	eq
 800bf62:	091b      	lsreq	r3, r3, #4
 800bf64:	3004      	addeq	r0, #4
 800bf66:	0799      	lsls	r1, r3, #30
 800bf68:	bf04      	itt	eq
 800bf6a:	089b      	lsreq	r3, r3, #2
 800bf6c:	3002      	addeq	r0, #2
 800bf6e:	07d9      	lsls	r1, r3, #31
 800bf70:	d403      	bmi.n	800bf7a <__lo0bits+0x4e>
 800bf72:	085b      	lsrs	r3, r3, #1
 800bf74:	f100 0001 	add.w	r0, r0, #1
 800bf78:	d003      	beq.n	800bf82 <__lo0bits+0x56>
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	4770      	bx	lr
 800bf7e:	2000      	movs	r0, #0
 800bf80:	4770      	bx	lr
 800bf82:	2020      	movs	r0, #32
 800bf84:	4770      	bx	lr
	...

0800bf88 <__i2b>:
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	f7ff febb 	bl	800bd08 <_Balloc>
 800bf92:	4602      	mov	r2, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <__i2b+0x1a>
 800bf96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bf9a:	4b04      	ldr	r3, [pc, #16]	; (800bfac <__i2b+0x24>)
 800bf9c:	4804      	ldr	r0, [pc, #16]	; (800bfb0 <__i2b+0x28>)
 800bf9e:	f000 fdef 	bl	800cb80 <__assert_func>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	6144      	str	r4, [r0, #20]
 800bfa6:	6103      	str	r3, [r0, #16]
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	bf00      	nop
 800bfac:	0800e990 	.word	0x0800e990
 800bfb0:	0800ea1c 	.word	0x0800ea1c

0800bfb4 <__multiply>:
 800bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4691      	mov	r9, r2
 800bfba:	690a      	ldr	r2, [r1, #16]
 800bfbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	bfbe      	ittt	lt
 800bfc6:	460b      	movlt	r3, r1
 800bfc8:	464c      	movlt	r4, r9
 800bfca:	4699      	movlt	r9, r3
 800bfcc:	6927      	ldr	r7, [r4, #16]
 800bfce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	6861      	ldr	r1, [r4, #4]
 800bfd6:	eb07 060a 	add.w	r6, r7, sl
 800bfda:	42b3      	cmp	r3, r6
 800bfdc:	b085      	sub	sp, #20
 800bfde:	bfb8      	it	lt
 800bfe0:	3101      	addlt	r1, #1
 800bfe2:	f7ff fe91 	bl	800bd08 <_Balloc>
 800bfe6:	b930      	cbnz	r0, 800bff6 <__multiply+0x42>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	f240 115d 	movw	r1, #349	; 0x15d
 800bfee:	4b43      	ldr	r3, [pc, #268]	; (800c0fc <__multiply+0x148>)
 800bff0:	4843      	ldr	r0, [pc, #268]	; (800c100 <__multiply+0x14c>)
 800bff2:	f000 fdc5 	bl	800cb80 <__assert_func>
 800bff6:	f100 0514 	add.w	r5, r0, #20
 800bffa:	462b      	mov	r3, r5
 800bffc:	2200      	movs	r2, #0
 800bffe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c002:	4543      	cmp	r3, r8
 800c004:	d321      	bcc.n	800c04a <__multiply+0x96>
 800c006:	f104 0314 	add.w	r3, r4, #20
 800c00a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c00e:	f109 0314 	add.w	r3, r9, #20
 800c012:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c016:	9202      	str	r2, [sp, #8]
 800c018:	1b3a      	subs	r2, r7, r4
 800c01a:	3a15      	subs	r2, #21
 800c01c:	f022 0203 	bic.w	r2, r2, #3
 800c020:	3204      	adds	r2, #4
 800c022:	f104 0115 	add.w	r1, r4, #21
 800c026:	428f      	cmp	r7, r1
 800c028:	bf38      	it	cc
 800c02a:	2204      	movcc	r2, #4
 800c02c:	9201      	str	r2, [sp, #4]
 800c02e:	9a02      	ldr	r2, [sp, #8]
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	429a      	cmp	r2, r3
 800c034:	d80c      	bhi.n	800c050 <__multiply+0x9c>
 800c036:	2e00      	cmp	r6, #0
 800c038:	dd03      	ble.n	800c042 <__multiply+0x8e>
 800c03a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d059      	beq.n	800c0f6 <__multiply+0x142>
 800c042:	6106      	str	r6, [r0, #16]
 800c044:	b005      	add	sp, #20
 800c046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	f843 2b04 	str.w	r2, [r3], #4
 800c04e:	e7d8      	b.n	800c002 <__multiply+0x4e>
 800c050:	f8b3 a000 	ldrh.w	sl, [r3]
 800c054:	f1ba 0f00 	cmp.w	sl, #0
 800c058:	d023      	beq.n	800c0a2 <__multiply+0xee>
 800c05a:	46a9      	mov	r9, r5
 800c05c:	f04f 0c00 	mov.w	ip, #0
 800c060:	f104 0e14 	add.w	lr, r4, #20
 800c064:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c068:	f8d9 1000 	ldr.w	r1, [r9]
 800c06c:	fa1f fb82 	uxth.w	fp, r2
 800c070:	b289      	uxth	r1, r1
 800c072:	fb0a 110b 	mla	r1, sl, fp, r1
 800c076:	4461      	add	r1, ip
 800c078:	f8d9 c000 	ldr.w	ip, [r9]
 800c07c:	0c12      	lsrs	r2, r2, #16
 800c07e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c082:	fb0a c202 	mla	r2, sl, r2, ip
 800c086:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c08a:	b289      	uxth	r1, r1
 800c08c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c090:	4577      	cmp	r7, lr
 800c092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c096:	f849 1b04 	str.w	r1, [r9], #4
 800c09a:	d8e3      	bhi.n	800c064 <__multiply+0xb0>
 800c09c:	9a01      	ldr	r2, [sp, #4]
 800c09e:	f845 c002 	str.w	ip, [r5, r2]
 800c0a2:	9a03      	ldr	r2, [sp, #12]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0aa:	f1b9 0f00 	cmp.w	r9, #0
 800c0ae:	d020      	beq.n	800c0f2 <__multiply+0x13e>
 800c0b0:	46ae      	mov	lr, r5
 800c0b2:	f04f 0a00 	mov.w	sl, #0
 800c0b6:	6829      	ldr	r1, [r5, #0]
 800c0b8:	f104 0c14 	add.w	ip, r4, #20
 800c0bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c0c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0c4:	b289      	uxth	r1, r1
 800c0c6:	fb09 220b 	mla	r2, r9, fp, r2
 800c0ca:	4492      	add	sl, r2
 800c0cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c0d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c0d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c0d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c0dc:	0c12      	lsrs	r2, r2, #16
 800c0de:	fb09 1102 	mla	r1, r9, r2, r1
 800c0e2:	4567      	cmp	r7, ip
 800c0e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c0e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0ec:	d8e6      	bhi.n	800c0bc <__multiply+0x108>
 800c0ee:	9a01      	ldr	r2, [sp, #4]
 800c0f0:	50a9      	str	r1, [r5, r2]
 800c0f2:	3504      	adds	r5, #4
 800c0f4:	e79b      	b.n	800c02e <__multiply+0x7a>
 800c0f6:	3e01      	subs	r6, #1
 800c0f8:	e79d      	b.n	800c036 <__multiply+0x82>
 800c0fa:	bf00      	nop
 800c0fc:	0800e990 	.word	0x0800e990
 800c100:	0800ea1c 	.word	0x0800ea1c

0800c104 <__pow5mult>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	4615      	mov	r5, r2
 800c10a:	f012 0203 	ands.w	r2, r2, #3
 800c10e:	4606      	mov	r6, r0
 800c110:	460f      	mov	r7, r1
 800c112:	d007      	beq.n	800c124 <__pow5mult+0x20>
 800c114:	4c25      	ldr	r4, [pc, #148]	; (800c1ac <__pow5mult+0xa8>)
 800c116:	3a01      	subs	r2, #1
 800c118:	2300      	movs	r3, #0
 800c11a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c11e:	f7ff fe55 	bl	800bdcc <__multadd>
 800c122:	4607      	mov	r7, r0
 800c124:	10ad      	asrs	r5, r5, #2
 800c126:	d03d      	beq.n	800c1a4 <__pow5mult+0xa0>
 800c128:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c12a:	b97c      	cbnz	r4, 800c14c <__pow5mult+0x48>
 800c12c:	2010      	movs	r0, #16
 800c12e:	f7ff fdc3 	bl	800bcb8 <malloc>
 800c132:	4602      	mov	r2, r0
 800c134:	6270      	str	r0, [r6, #36]	; 0x24
 800c136:	b928      	cbnz	r0, 800c144 <__pow5mult+0x40>
 800c138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c13c:	4b1c      	ldr	r3, [pc, #112]	; (800c1b0 <__pow5mult+0xac>)
 800c13e:	481d      	ldr	r0, [pc, #116]	; (800c1b4 <__pow5mult+0xb0>)
 800c140:	f000 fd1e 	bl	800cb80 <__assert_func>
 800c144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c148:	6004      	str	r4, [r0, #0]
 800c14a:	60c4      	str	r4, [r0, #12]
 800c14c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c154:	b94c      	cbnz	r4, 800c16a <__pow5mult+0x66>
 800c156:	f240 2171 	movw	r1, #625	; 0x271
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ff14 	bl	800bf88 <__i2b>
 800c160:	2300      	movs	r3, #0
 800c162:	4604      	mov	r4, r0
 800c164:	f8c8 0008 	str.w	r0, [r8, #8]
 800c168:	6003      	str	r3, [r0, #0]
 800c16a:	f04f 0900 	mov.w	r9, #0
 800c16e:	07eb      	lsls	r3, r5, #31
 800c170:	d50a      	bpl.n	800c188 <__pow5mult+0x84>
 800c172:	4639      	mov	r1, r7
 800c174:	4622      	mov	r2, r4
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff ff1c 	bl	800bfb4 <__multiply>
 800c17c:	4680      	mov	r8, r0
 800c17e:	4639      	mov	r1, r7
 800c180:	4630      	mov	r0, r6
 800c182:	f7ff fe01 	bl	800bd88 <_Bfree>
 800c186:	4647      	mov	r7, r8
 800c188:	106d      	asrs	r5, r5, #1
 800c18a:	d00b      	beq.n	800c1a4 <__pow5mult+0xa0>
 800c18c:	6820      	ldr	r0, [r4, #0]
 800c18e:	b938      	cbnz	r0, 800c1a0 <__pow5mult+0x9c>
 800c190:	4622      	mov	r2, r4
 800c192:	4621      	mov	r1, r4
 800c194:	4630      	mov	r0, r6
 800c196:	f7ff ff0d 	bl	800bfb4 <__multiply>
 800c19a:	6020      	str	r0, [r4, #0]
 800c19c:	f8c0 9000 	str.w	r9, [r0]
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	e7e4      	b.n	800c16e <__pow5mult+0x6a>
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0800eb68 	.word	0x0800eb68
 800c1b0:	0800e91e 	.word	0x0800e91e
 800c1b4:	0800ea1c 	.word	0x0800ea1c

0800c1b8 <__lshift>:
 800c1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1bc:	460c      	mov	r4, r1
 800c1be:	4607      	mov	r7, r0
 800c1c0:	4691      	mov	r9, r2
 800c1c2:	6923      	ldr	r3, [r4, #16]
 800c1c4:	6849      	ldr	r1, [r1, #4]
 800c1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1ca:	68a3      	ldr	r3, [r4, #8]
 800c1cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1d0:	f108 0601 	add.w	r6, r8, #1
 800c1d4:	42b3      	cmp	r3, r6
 800c1d6:	db0b      	blt.n	800c1f0 <__lshift+0x38>
 800c1d8:	4638      	mov	r0, r7
 800c1da:	f7ff fd95 	bl	800bd08 <_Balloc>
 800c1de:	4605      	mov	r5, r0
 800c1e0:	b948      	cbnz	r0, 800c1f6 <__lshift+0x3e>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c1e8:	4b29      	ldr	r3, [pc, #164]	; (800c290 <__lshift+0xd8>)
 800c1ea:	482a      	ldr	r0, [pc, #168]	; (800c294 <__lshift+0xdc>)
 800c1ec:	f000 fcc8 	bl	800cb80 <__assert_func>
 800c1f0:	3101      	adds	r1, #1
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	e7ee      	b.n	800c1d4 <__lshift+0x1c>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f100 0114 	add.w	r1, r0, #20
 800c1fc:	f100 0210 	add.w	r2, r0, #16
 800c200:	4618      	mov	r0, r3
 800c202:	4553      	cmp	r3, sl
 800c204:	db37      	blt.n	800c276 <__lshift+0xbe>
 800c206:	6920      	ldr	r0, [r4, #16]
 800c208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c20c:	f104 0314 	add.w	r3, r4, #20
 800c210:	f019 091f 	ands.w	r9, r9, #31
 800c214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c218:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c21c:	d02f      	beq.n	800c27e <__lshift+0xc6>
 800c21e:	468a      	mov	sl, r1
 800c220:	f04f 0c00 	mov.w	ip, #0
 800c224:	f1c9 0e20 	rsb	lr, r9, #32
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	fa02 f209 	lsl.w	r2, r2, r9
 800c22e:	ea42 020c 	orr.w	r2, r2, ip
 800c232:	f84a 2b04 	str.w	r2, [sl], #4
 800c236:	f853 2b04 	ldr.w	r2, [r3], #4
 800c23a:	4298      	cmp	r0, r3
 800c23c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c240:	d8f2      	bhi.n	800c228 <__lshift+0x70>
 800c242:	1b03      	subs	r3, r0, r4
 800c244:	3b15      	subs	r3, #21
 800c246:	f023 0303 	bic.w	r3, r3, #3
 800c24a:	3304      	adds	r3, #4
 800c24c:	f104 0215 	add.w	r2, r4, #21
 800c250:	4290      	cmp	r0, r2
 800c252:	bf38      	it	cc
 800c254:	2304      	movcc	r3, #4
 800c256:	f841 c003 	str.w	ip, [r1, r3]
 800c25a:	f1bc 0f00 	cmp.w	ip, #0
 800c25e:	d001      	beq.n	800c264 <__lshift+0xac>
 800c260:	f108 0602 	add.w	r6, r8, #2
 800c264:	3e01      	subs	r6, #1
 800c266:	4638      	mov	r0, r7
 800c268:	4621      	mov	r1, r4
 800c26a:	612e      	str	r6, [r5, #16]
 800c26c:	f7ff fd8c 	bl	800bd88 <_Bfree>
 800c270:	4628      	mov	r0, r5
 800c272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c276:	f842 0f04 	str.w	r0, [r2, #4]!
 800c27a:	3301      	adds	r3, #1
 800c27c:	e7c1      	b.n	800c202 <__lshift+0x4a>
 800c27e:	3904      	subs	r1, #4
 800c280:	f853 2b04 	ldr.w	r2, [r3], #4
 800c284:	4298      	cmp	r0, r3
 800c286:	f841 2f04 	str.w	r2, [r1, #4]!
 800c28a:	d8f9      	bhi.n	800c280 <__lshift+0xc8>
 800c28c:	e7ea      	b.n	800c264 <__lshift+0xac>
 800c28e:	bf00      	nop
 800c290:	0800e990 	.word	0x0800e990
 800c294:	0800ea1c 	.word	0x0800ea1c

0800c298 <__mcmp>:
 800c298:	4603      	mov	r3, r0
 800c29a:	690a      	ldr	r2, [r1, #16]
 800c29c:	6900      	ldr	r0, [r0, #16]
 800c29e:	b530      	push	{r4, r5, lr}
 800c2a0:	1a80      	subs	r0, r0, r2
 800c2a2:	d10d      	bne.n	800c2c0 <__mcmp+0x28>
 800c2a4:	3314      	adds	r3, #20
 800c2a6:	3114      	adds	r1, #20
 800c2a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2b8:	4295      	cmp	r5, r2
 800c2ba:	d002      	beq.n	800c2c2 <__mcmp+0x2a>
 800c2bc:	d304      	bcc.n	800c2c8 <__mcmp+0x30>
 800c2be:	2001      	movs	r0, #1
 800c2c0:	bd30      	pop	{r4, r5, pc}
 800c2c2:	42a3      	cmp	r3, r4
 800c2c4:	d3f4      	bcc.n	800c2b0 <__mcmp+0x18>
 800c2c6:	e7fb      	b.n	800c2c0 <__mcmp+0x28>
 800c2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2cc:	e7f8      	b.n	800c2c0 <__mcmp+0x28>
	...

0800c2d0 <__mdiff>:
 800c2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d4:	460d      	mov	r5, r1
 800c2d6:	4607      	mov	r7, r0
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4628      	mov	r0, r5
 800c2dc:	4614      	mov	r4, r2
 800c2de:	f7ff ffdb 	bl	800c298 <__mcmp>
 800c2e2:	1e06      	subs	r6, r0, #0
 800c2e4:	d111      	bne.n	800c30a <__mdiff+0x3a>
 800c2e6:	4631      	mov	r1, r6
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff fd0d 	bl	800bd08 <_Balloc>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	b928      	cbnz	r0, 800c2fe <__mdiff+0x2e>
 800c2f2:	f240 2132 	movw	r1, #562	; 0x232
 800c2f6:	4b3a      	ldr	r3, [pc, #232]	; (800c3e0 <__mdiff+0x110>)
 800c2f8:	483a      	ldr	r0, [pc, #232]	; (800c3e4 <__mdiff+0x114>)
 800c2fa:	f000 fc41 	bl	800cb80 <__assert_func>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c304:	4610      	mov	r0, r2
 800c306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30a:	bfa4      	itt	ge
 800c30c:	4623      	movge	r3, r4
 800c30e:	462c      	movge	r4, r5
 800c310:	4638      	mov	r0, r7
 800c312:	6861      	ldr	r1, [r4, #4]
 800c314:	bfa6      	itte	ge
 800c316:	461d      	movge	r5, r3
 800c318:	2600      	movge	r6, #0
 800c31a:	2601      	movlt	r6, #1
 800c31c:	f7ff fcf4 	bl	800bd08 <_Balloc>
 800c320:	4602      	mov	r2, r0
 800c322:	b918      	cbnz	r0, 800c32c <__mdiff+0x5c>
 800c324:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c328:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <__mdiff+0x110>)
 800c32a:	e7e5      	b.n	800c2f8 <__mdiff+0x28>
 800c32c:	f102 0814 	add.w	r8, r2, #20
 800c330:	46c2      	mov	sl, r8
 800c332:	f04f 0c00 	mov.w	ip, #0
 800c336:	6927      	ldr	r7, [r4, #16]
 800c338:	60c6      	str	r6, [r0, #12]
 800c33a:	692e      	ldr	r6, [r5, #16]
 800c33c:	f104 0014 	add.w	r0, r4, #20
 800c340:	f105 0914 	add.w	r9, r5, #20
 800c344:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c34c:	3410      	adds	r4, #16
 800c34e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c352:	f859 3b04 	ldr.w	r3, [r9], #4
 800c356:	fa1f f18b 	uxth.w	r1, fp
 800c35a:	448c      	add	ip, r1
 800c35c:	b299      	uxth	r1, r3
 800c35e:	0c1b      	lsrs	r3, r3, #16
 800c360:	ebac 0101 	sub.w	r1, ip, r1
 800c364:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c368:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c36c:	b289      	uxth	r1, r1
 800c36e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c372:	454e      	cmp	r6, r9
 800c374:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c378:	f84a 3b04 	str.w	r3, [sl], #4
 800c37c:	d8e7      	bhi.n	800c34e <__mdiff+0x7e>
 800c37e:	1b73      	subs	r3, r6, r5
 800c380:	3b15      	subs	r3, #21
 800c382:	f023 0303 	bic.w	r3, r3, #3
 800c386:	3515      	adds	r5, #21
 800c388:	3304      	adds	r3, #4
 800c38a:	42ae      	cmp	r6, r5
 800c38c:	bf38      	it	cc
 800c38e:	2304      	movcc	r3, #4
 800c390:	4418      	add	r0, r3
 800c392:	4443      	add	r3, r8
 800c394:	461e      	mov	r6, r3
 800c396:	4605      	mov	r5, r0
 800c398:	4575      	cmp	r5, lr
 800c39a:	d30e      	bcc.n	800c3ba <__mdiff+0xea>
 800c39c:	f10e 0103 	add.w	r1, lr, #3
 800c3a0:	1a09      	subs	r1, r1, r0
 800c3a2:	f021 0103 	bic.w	r1, r1, #3
 800c3a6:	3803      	subs	r0, #3
 800c3a8:	4586      	cmp	lr, r0
 800c3aa:	bf38      	it	cc
 800c3ac:	2100      	movcc	r1, #0
 800c3ae:	4419      	add	r1, r3
 800c3b0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c3b4:	b18b      	cbz	r3, 800c3da <__mdiff+0x10a>
 800c3b6:	6117      	str	r7, [r2, #16]
 800c3b8:	e7a4      	b.n	800c304 <__mdiff+0x34>
 800c3ba:	f855 8b04 	ldr.w	r8, [r5], #4
 800c3be:	fa1f f188 	uxth.w	r1, r8
 800c3c2:	4461      	add	r1, ip
 800c3c4:	140c      	asrs	r4, r1, #16
 800c3c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3ca:	b289      	uxth	r1, r1
 800c3cc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3d0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c3d4:	f846 1b04 	str.w	r1, [r6], #4
 800c3d8:	e7de      	b.n	800c398 <__mdiff+0xc8>
 800c3da:	3f01      	subs	r7, #1
 800c3dc:	e7e8      	b.n	800c3b0 <__mdiff+0xe0>
 800c3de:	bf00      	nop
 800c3e0:	0800e990 	.word	0x0800e990
 800c3e4:	0800ea1c 	.word	0x0800ea1c

0800c3e8 <__ulp>:
 800c3e8:	4b11      	ldr	r3, [pc, #68]	; (800c430 <__ulp+0x48>)
 800c3ea:	400b      	ands	r3, r1
 800c3ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	dd02      	ble.n	800c3fa <__ulp+0x12>
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	4770      	bx	lr
 800c3fa:	425b      	negs	r3, r3
 800c3fc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c400:	f04f 0000 	mov.w	r0, #0
 800c404:	f04f 0100 	mov.w	r1, #0
 800c408:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c40c:	da04      	bge.n	800c418 <__ulp+0x30>
 800c40e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c412:	fa43 f102 	asr.w	r1, r3, r2
 800c416:	4770      	bx	lr
 800c418:	f1a2 0314 	sub.w	r3, r2, #20
 800c41c:	2b1e      	cmp	r3, #30
 800c41e:	bfd6      	itet	le
 800c420:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c424:	2301      	movgt	r3, #1
 800c426:	fa22 f303 	lsrle.w	r3, r2, r3
 800c42a:	4618      	mov	r0, r3
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	7ff00000 	.word	0x7ff00000

0800c434 <__b2d>:
 800c434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c438:	6907      	ldr	r7, [r0, #16]
 800c43a:	f100 0914 	add.w	r9, r0, #20
 800c43e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c442:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c446:	f1a7 0804 	sub.w	r8, r7, #4
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7ff fd4e 	bl	800beec <__hi0bits>
 800c450:	f1c0 0320 	rsb	r3, r0, #32
 800c454:	280a      	cmp	r0, #10
 800c456:	600b      	str	r3, [r1, #0]
 800c458:	491f      	ldr	r1, [pc, #124]	; (800c4d8 <__b2d+0xa4>)
 800c45a:	dc17      	bgt.n	800c48c <__b2d+0x58>
 800c45c:	45c1      	cmp	r9, r8
 800c45e:	bf28      	it	cs
 800c460:	2200      	movcs	r2, #0
 800c462:	f1c0 0c0b 	rsb	ip, r0, #11
 800c466:	fa26 f30c 	lsr.w	r3, r6, ip
 800c46a:	bf38      	it	cc
 800c46c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c470:	ea43 0501 	orr.w	r5, r3, r1
 800c474:	f100 0315 	add.w	r3, r0, #21
 800c478:	fa06 f303 	lsl.w	r3, r6, r3
 800c47c:	fa22 f20c 	lsr.w	r2, r2, ip
 800c480:	ea43 0402 	orr.w	r4, r3, r2
 800c484:	4620      	mov	r0, r4
 800c486:	4629      	mov	r1, r5
 800c488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c48c:	45c1      	cmp	r9, r8
 800c48e:	bf2e      	itee	cs
 800c490:	2200      	movcs	r2, #0
 800c492:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c496:	f1a7 0808 	subcc.w	r8, r7, #8
 800c49a:	f1b0 030b 	subs.w	r3, r0, #11
 800c49e:	d016      	beq.n	800c4ce <__b2d+0x9a>
 800c4a0:	f1c3 0720 	rsb	r7, r3, #32
 800c4a4:	fa22 f107 	lsr.w	r1, r2, r7
 800c4a8:	45c8      	cmp	r8, r9
 800c4aa:	fa06 f603 	lsl.w	r6, r6, r3
 800c4ae:	ea46 0601 	orr.w	r6, r6, r1
 800c4b2:	bf94      	ite	ls
 800c4b4:	2100      	movls	r1, #0
 800c4b6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c4ba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c4be:	fa02 f003 	lsl.w	r0, r2, r3
 800c4c2:	40f9      	lsrs	r1, r7
 800c4c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4c8:	ea40 0401 	orr.w	r4, r0, r1
 800c4cc:	e7da      	b.n	800c484 <__b2d+0x50>
 800c4ce:	4614      	mov	r4, r2
 800c4d0:	ea46 0501 	orr.w	r5, r6, r1
 800c4d4:	e7d6      	b.n	800c484 <__b2d+0x50>
 800c4d6:	bf00      	nop
 800c4d8:	3ff00000 	.word	0x3ff00000

0800c4dc <__d2b>:
 800c4dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c4e6:	4690      	mov	r8, r2
 800c4e8:	461d      	mov	r5, r3
 800c4ea:	f7ff fc0d 	bl	800bd08 <_Balloc>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	b930      	cbnz	r0, 800c500 <__d2b+0x24>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	f240 310a 	movw	r1, #778	; 0x30a
 800c4f8:	4b24      	ldr	r3, [pc, #144]	; (800c58c <__d2b+0xb0>)
 800c4fa:	4825      	ldr	r0, [pc, #148]	; (800c590 <__d2b+0xb4>)
 800c4fc:	f000 fb40 	bl	800cb80 <__assert_func>
 800c500:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c504:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c508:	bb2d      	cbnz	r5, 800c556 <__d2b+0x7a>
 800c50a:	9301      	str	r3, [sp, #4]
 800c50c:	f1b8 0300 	subs.w	r3, r8, #0
 800c510:	d026      	beq.n	800c560 <__d2b+0x84>
 800c512:	4668      	mov	r0, sp
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	f7ff fd09 	bl	800bf2c <__lo0bits>
 800c51a:	9900      	ldr	r1, [sp, #0]
 800c51c:	b1f0      	cbz	r0, 800c55c <__d2b+0x80>
 800c51e:	9a01      	ldr	r2, [sp, #4]
 800c520:	f1c0 0320 	rsb	r3, r0, #32
 800c524:	fa02 f303 	lsl.w	r3, r2, r3
 800c528:	430b      	orrs	r3, r1
 800c52a:	40c2      	lsrs	r2, r0
 800c52c:	6163      	str	r3, [r4, #20]
 800c52e:	9201      	str	r2, [sp, #4]
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	bf14      	ite	ne
 800c536:	2102      	movne	r1, #2
 800c538:	2101      	moveq	r1, #1
 800c53a:	61a3      	str	r3, [r4, #24]
 800c53c:	6121      	str	r1, [r4, #16]
 800c53e:	b1c5      	cbz	r5, 800c572 <__d2b+0x96>
 800c540:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c544:	4405      	add	r5, r0
 800c546:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c54a:	603d      	str	r5, [r7, #0]
 800c54c:	6030      	str	r0, [r6, #0]
 800c54e:	4620      	mov	r0, r4
 800c550:	b002      	add	sp, #8
 800c552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c55a:	e7d6      	b.n	800c50a <__d2b+0x2e>
 800c55c:	6161      	str	r1, [r4, #20]
 800c55e:	e7e7      	b.n	800c530 <__d2b+0x54>
 800c560:	a801      	add	r0, sp, #4
 800c562:	f7ff fce3 	bl	800bf2c <__lo0bits>
 800c566:	2101      	movs	r1, #1
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	6121      	str	r1, [r4, #16]
 800c56c:	6163      	str	r3, [r4, #20]
 800c56e:	3020      	adds	r0, #32
 800c570:	e7e5      	b.n	800c53e <__d2b+0x62>
 800c572:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c576:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c57a:	6038      	str	r0, [r7, #0]
 800c57c:	6918      	ldr	r0, [r3, #16]
 800c57e:	f7ff fcb5 	bl	800beec <__hi0bits>
 800c582:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c586:	6031      	str	r1, [r6, #0]
 800c588:	e7e1      	b.n	800c54e <__d2b+0x72>
 800c58a:	bf00      	nop
 800c58c:	0800e990 	.word	0x0800e990
 800c590:	0800ea1c 	.word	0x0800ea1c

0800c594 <__ratio>:
 800c594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c598:	4688      	mov	r8, r1
 800c59a:	4669      	mov	r1, sp
 800c59c:	4681      	mov	r9, r0
 800c59e:	f7ff ff49 	bl	800c434 <__b2d>
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	4640      	mov	r0, r8
 800c5aa:	a901      	add	r1, sp, #4
 800c5ac:	f7ff ff42 	bl	800c434 <__b2d>
 800c5b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5b8:	468b      	mov	fp, r1
 800c5ba:	eba3 0c02 	sub.w	ip, r3, r2
 800c5be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5c2:	1a9b      	subs	r3, r3, r2
 800c5c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfd5      	itete	le
 800c5cc:	460a      	movle	r2, r1
 800c5ce:	462a      	movgt	r2, r5
 800c5d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5d8:	bfd8      	it	le
 800c5da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c5de:	465b      	mov	r3, fp
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f7f4 f8ab 	bl	8000740 <__aeabi_ddiv>
 800c5ea:	b003      	add	sp, #12
 800c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5f0 <__copybits>:
 800c5f0:	3901      	subs	r1, #1
 800c5f2:	b570      	push	{r4, r5, r6, lr}
 800c5f4:	1149      	asrs	r1, r1, #5
 800c5f6:	6914      	ldr	r4, [r2, #16]
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	f102 0314 	add.w	r3, r2, #20
 800c5fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c602:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c606:	1f05      	subs	r5, r0, #4
 800c608:	42a3      	cmp	r3, r4
 800c60a:	d30c      	bcc.n	800c626 <__copybits+0x36>
 800c60c:	1aa3      	subs	r3, r4, r2
 800c60e:	3b11      	subs	r3, #17
 800c610:	f023 0303 	bic.w	r3, r3, #3
 800c614:	3211      	adds	r2, #17
 800c616:	42a2      	cmp	r2, r4
 800c618:	bf88      	it	hi
 800c61a:	2300      	movhi	r3, #0
 800c61c:	4418      	add	r0, r3
 800c61e:	2300      	movs	r3, #0
 800c620:	4288      	cmp	r0, r1
 800c622:	d305      	bcc.n	800c630 <__copybits+0x40>
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	f853 6b04 	ldr.w	r6, [r3], #4
 800c62a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c62e:	e7eb      	b.n	800c608 <__copybits+0x18>
 800c630:	f840 3b04 	str.w	r3, [r0], #4
 800c634:	e7f4      	b.n	800c620 <__copybits+0x30>

0800c636 <__any_on>:
 800c636:	f100 0214 	add.w	r2, r0, #20
 800c63a:	6900      	ldr	r0, [r0, #16]
 800c63c:	114b      	asrs	r3, r1, #5
 800c63e:	4298      	cmp	r0, r3
 800c640:	b510      	push	{r4, lr}
 800c642:	db11      	blt.n	800c668 <__any_on+0x32>
 800c644:	dd0a      	ble.n	800c65c <__any_on+0x26>
 800c646:	f011 011f 	ands.w	r1, r1, #31
 800c64a:	d007      	beq.n	800c65c <__any_on+0x26>
 800c64c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c650:	fa24 f001 	lsr.w	r0, r4, r1
 800c654:	fa00 f101 	lsl.w	r1, r0, r1
 800c658:	428c      	cmp	r4, r1
 800c65a:	d10b      	bne.n	800c674 <__any_on+0x3e>
 800c65c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c660:	4293      	cmp	r3, r2
 800c662:	d803      	bhi.n	800c66c <__any_on+0x36>
 800c664:	2000      	movs	r0, #0
 800c666:	bd10      	pop	{r4, pc}
 800c668:	4603      	mov	r3, r0
 800c66a:	e7f7      	b.n	800c65c <__any_on+0x26>
 800c66c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c670:	2900      	cmp	r1, #0
 800c672:	d0f5      	beq.n	800c660 <__any_on+0x2a>
 800c674:	2001      	movs	r0, #1
 800c676:	e7f6      	b.n	800c666 <__any_on+0x30>

0800c678 <_calloc_r>:
 800c678:	b570      	push	{r4, r5, r6, lr}
 800c67a:	fba1 5402 	umull	r5, r4, r1, r2
 800c67e:	b934      	cbnz	r4, 800c68e <_calloc_r+0x16>
 800c680:	4629      	mov	r1, r5
 800c682:	f000 f875 	bl	800c770 <_malloc_r>
 800c686:	4606      	mov	r6, r0
 800c688:	b928      	cbnz	r0, 800c696 <_calloc_r+0x1e>
 800c68a:	4630      	mov	r0, r6
 800c68c:	bd70      	pop	{r4, r5, r6, pc}
 800c68e:	220c      	movs	r2, #12
 800c690:	2600      	movs	r6, #0
 800c692:	6002      	str	r2, [r0, #0]
 800c694:	e7f9      	b.n	800c68a <_calloc_r+0x12>
 800c696:	462a      	mov	r2, r5
 800c698:	4621      	mov	r1, r4
 800c69a:	f7fc fbf7 	bl	8008e8c <memset>
 800c69e:	e7f4      	b.n	800c68a <_calloc_r+0x12>

0800c6a0 <_free_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4605      	mov	r5, r0
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	d040      	beq.n	800c72a <_free_r+0x8a>
 800c6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ac:	1f0c      	subs	r4, r1, #4
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfb8      	it	lt
 800c6b2:	18e4      	addlt	r4, r4, r3
 800c6b4:	f000 faae 	bl	800cc14 <__malloc_lock>
 800c6b8:	4a1c      	ldr	r2, [pc, #112]	; (800c72c <_free_r+0x8c>)
 800c6ba:	6813      	ldr	r3, [r2, #0]
 800c6bc:	b933      	cbnz	r3, 800c6cc <_free_r+0x2c>
 800c6be:	6063      	str	r3, [r4, #4]
 800c6c0:	6014      	str	r4, [r2, #0]
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c8:	f000 baaa 	b.w	800cc20 <__malloc_unlock>
 800c6cc:	42a3      	cmp	r3, r4
 800c6ce:	d908      	bls.n	800c6e2 <_free_r+0x42>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	1821      	adds	r1, r4, r0
 800c6d4:	428b      	cmp	r3, r1
 800c6d6:	bf01      	itttt	eq
 800c6d8:	6819      	ldreq	r1, [r3, #0]
 800c6da:	685b      	ldreq	r3, [r3, #4]
 800c6dc:	1809      	addeq	r1, r1, r0
 800c6de:	6021      	streq	r1, [r4, #0]
 800c6e0:	e7ed      	b.n	800c6be <_free_r+0x1e>
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	b10b      	cbz	r3, 800c6ec <_free_r+0x4c>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d9fa      	bls.n	800c6e2 <_free_r+0x42>
 800c6ec:	6811      	ldr	r1, [r2, #0]
 800c6ee:	1850      	adds	r0, r2, r1
 800c6f0:	42a0      	cmp	r0, r4
 800c6f2:	d10b      	bne.n	800c70c <_free_r+0x6c>
 800c6f4:	6820      	ldr	r0, [r4, #0]
 800c6f6:	4401      	add	r1, r0
 800c6f8:	1850      	adds	r0, r2, r1
 800c6fa:	4283      	cmp	r3, r0
 800c6fc:	6011      	str	r1, [r2, #0]
 800c6fe:	d1e0      	bne.n	800c6c2 <_free_r+0x22>
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4401      	add	r1, r0
 800c706:	6011      	str	r1, [r2, #0]
 800c708:	6053      	str	r3, [r2, #4]
 800c70a:	e7da      	b.n	800c6c2 <_free_r+0x22>
 800c70c:	d902      	bls.n	800c714 <_free_r+0x74>
 800c70e:	230c      	movs	r3, #12
 800c710:	602b      	str	r3, [r5, #0]
 800c712:	e7d6      	b.n	800c6c2 <_free_r+0x22>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	1821      	adds	r1, r4, r0
 800c718:	428b      	cmp	r3, r1
 800c71a:	bf01      	itttt	eq
 800c71c:	6819      	ldreq	r1, [r3, #0]
 800c71e:	685b      	ldreq	r3, [r3, #4]
 800c720:	1809      	addeq	r1, r1, r0
 800c722:	6021      	streq	r1, [r4, #0]
 800c724:	6063      	str	r3, [r4, #4]
 800c726:	6054      	str	r4, [r2, #4]
 800c728:	e7cb      	b.n	800c6c2 <_free_r+0x22>
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20003718 	.word	0x20003718

0800c730 <sbrk_aligned>:
 800c730:	b570      	push	{r4, r5, r6, lr}
 800c732:	4e0e      	ldr	r6, [pc, #56]	; (800c76c <sbrk_aligned+0x3c>)
 800c734:	460c      	mov	r4, r1
 800c736:	6831      	ldr	r1, [r6, #0]
 800c738:	4605      	mov	r5, r0
 800c73a:	b911      	cbnz	r1, 800c742 <sbrk_aligned+0x12>
 800c73c:	f000 f9ee 	bl	800cb1c <_sbrk_r>
 800c740:	6030      	str	r0, [r6, #0]
 800c742:	4621      	mov	r1, r4
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f9e9 	bl	800cb1c <_sbrk_r>
 800c74a:	1c43      	adds	r3, r0, #1
 800c74c:	d00a      	beq.n	800c764 <sbrk_aligned+0x34>
 800c74e:	1cc4      	adds	r4, r0, #3
 800c750:	f024 0403 	bic.w	r4, r4, #3
 800c754:	42a0      	cmp	r0, r4
 800c756:	d007      	beq.n	800c768 <sbrk_aligned+0x38>
 800c758:	1a21      	subs	r1, r4, r0
 800c75a:	4628      	mov	r0, r5
 800c75c:	f000 f9de 	bl	800cb1c <_sbrk_r>
 800c760:	3001      	adds	r0, #1
 800c762:	d101      	bne.n	800c768 <sbrk_aligned+0x38>
 800c764:	f04f 34ff 	mov.w	r4, #4294967295
 800c768:	4620      	mov	r0, r4
 800c76a:	bd70      	pop	{r4, r5, r6, pc}
 800c76c:	2000371c 	.word	0x2000371c

0800c770 <_malloc_r>:
 800c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c774:	1ccd      	adds	r5, r1, #3
 800c776:	f025 0503 	bic.w	r5, r5, #3
 800c77a:	3508      	adds	r5, #8
 800c77c:	2d0c      	cmp	r5, #12
 800c77e:	bf38      	it	cc
 800c780:	250c      	movcc	r5, #12
 800c782:	2d00      	cmp	r5, #0
 800c784:	4607      	mov	r7, r0
 800c786:	db01      	blt.n	800c78c <_malloc_r+0x1c>
 800c788:	42a9      	cmp	r1, r5
 800c78a:	d905      	bls.n	800c798 <_malloc_r+0x28>
 800c78c:	230c      	movs	r3, #12
 800c78e:	2600      	movs	r6, #0
 800c790:	603b      	str	r3, [r7, #0]
 800c792:	4630      	mov	r0, r6
 800c794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c798:	4e2e      	ldr	r6, [pc, #184]	; (800c854 <_malloc_r+0xe4>)
 800c79a:	f000 fa3b 	bl	800cc14 <__malloc_lock>
 800c79e:	6833      	ldr	r3, [r6, #0]
 800c7a0:	461c      	mov	r4, r3
 800c7a2:	bb34      	cbnz	r4, 800c7f2 <_malloc_r+0x82>
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	f7ff ffc2 	bl	800c730 <sbrk_aligned>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	d14d      	bne.n	800c84e <_malloc_r+0xde>
 800c7b2:	6834      	ldr	r4, [r6, #0]
 800c7b4:	4626      	mov	r6, r4
 800c7b6:	2e00      	cmp	r6, #0
 800c7b8:	d140      	bne.n	800c83c <_malloc_r+0xcc>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4638      	mov	r0, r7
 800c7c0:	eb04 0803 	add.w	r8, r4, r3
 800c7c4:	f000 f9aa 	bl	800cb1c <_sbrk_r>
 800c7c8:	4580      	cmp	r8, r0
 800c7ca:	d13a      	bne.n	800c842 <_malloc_r+0xd2>
 800c7cc:	6821      	ldr	r1, [r4, #0]
 800c7ce:	3503      	adds	r5, #3
 800c7d0:	1a6d      	subs	r5, r5, r1
 800c7d2:	f025 0503 	bic.w	r5, r5, #3
 800c7d6:	3508      	adds	r5, #8
 800c7d8:	2d0c      	cmp	r5, #12
 800c7da:	bf38      	it	cc
 800c7dc:	250c      	movcc	r5, #12
 800c7de:	4638      	mov	r0, r7
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7ff ffa5 	bl	800c730 <sbrk_aligned>
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	d02b      	beq.n	800c842 <_malloc_r+0xd2>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	442b      	add	r3, r5
 800c7ee:	6023      	str	r3, [r4, #0]
 800c7f0:	e00e      	b.n	800c810 <_malloc_r+0xa0>
 800c7f2:	6822      	ldr	r2, [r4, #0]
 800c7f4:	1b52      	subs	r2, r2, r5
 800c7f6:	d41e      	bmi.n	800c836 <_malloc_r+0xc6>
 800c7f8:	2a0b      	cmp	r2, #11
 800c7fa:	d916      	bls.n	800c82a <_malloc_r+0xba>
 800c7fc:	1961      	adds	r1, r4, r5
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	6025      	str	r5, [r4, #0]
 800c802:	bf18      	it	ne
 800c804:	6059      	strne	r1, [r3, #4]
 800c806:	6863      	ldr	r3, [r4, #4]
 800c808:	bf08      	it	eq
 800c80a:	6031      	streq	r1, [r6, #0]
 800c80c:	5162      	str	r2, [r4, r5]
 800c80e:	604b      	str	r3, [r1, #4]
 800c810:	4638      	mov	r0, r7
 800c812:	f104 060b 	add.w	r6, r4, #11
 800c816:	f000 fa03 	bl	800cc20 <__malloc_unlock>
 800c81a:	f026 0607 	bic.w	r6, r6, #7
 800c81e:	1d23      	adds	r3, r4, #4
 800c820:	1af2      	subs	r2, r6, r3
 800c822:	d0b6      	beq.n	800c792 <_malloc_r+0x22>
 800c824:	1b9b      	subs	r3, r3, r6
 800c826:	50a3      	str	r3, [r4, r2]
 800c828:	e7b3      	b.n	800c792 <_malloc_r+0x22>
 800c82a:	6862      	ldr	r2, [r4, #4]
 800c82c:	42a3      	cmp	r3, r4
 800c82e:	bf0c      	ite	eq
 800c830:	6032      	streq	r2, [r6, #0]
 800c832:	605a      	strne	r2, [r3, #4]
 800c834:	e7ec      	b.n	800c810 <_malloc_r+0xa0>
 800c836:	4623      	mov	r3, r4
 800c838:	6864      	ldr	r4, [r4, #4]
 800c83a:	e7b2      	b.n	800c7a2 <_malloc_r+0x32>
 800c83c:	4634      	mov	r4, r6
 800c83e:	6876      	ldr	r6, [r6, #4]
 800c840:	e7b9      	b.n	800c7b6 <_malloc_r+0x46>
 800c842:	230c      	movs	r3, #12
 800c844:	4638      	mov	r0, r7
 800c846:	603b      	str	r3, [r7, #0]
 800c848:	f000 f9ea 	bl	800cc20 <__malloc_unlock>
 800c84c:	e7a1      	b.n	800c792 <_malloc_r+0x22>
 800c84e:	6025      	str	r5, [r4, #0]
 800c850:	e7de      	b.n	800c810 <_malloc_r+0xa0>
 800c852:	bf00      	nop
 800c854:	20003718 	.word	0x20003718

0800c858 <__ssputs_r>:
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	688e      	ldr	r6, [r1, #8]
 800c85e:	4682      	mov	sl, r0
 800c860:	429e      	cmp	r6, r3
 800c862:	460c      	mov	r4, r1
 800c864:	4690      	mov	r8, r2
 800c866:	461f      	mov	r7, r3
 800c868:	d838      	bhi.n	800c8dc <__ssputs_r+0x84>
 800c86a:	898a      	ldrh	r2, [r1, #12]
 800c86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c870:	d032      	beq.n	800c8d8 <__ssputs_r+0x80>
 800c872:	6825      	ldr	r5, [r4, #0]
 800c874:	6909      	ldr	r1, [r1, #16]
 800c876:	3301      	adds	r3, #1
 800c878:	eba5 0901 	sub.w	r9, r5, r1
 800c87c:	6965      	ldr	r5, [r4, #20]
 800c87e:	444b      	add	r3, r9
 800c880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c888:	106d      	asrs	r5, r5, #1
 800c88a:	429d      	cmp	r5, r3
 800c88c:	bf38      	it	cc
 800c88e:	461d      	movcc	r5, r3
 800c890:	0553      	lsls	r3, r2, #21
 800c892:	d531      	bpl.n	800c8f8 <__ssputs_r+0xa0>
 800c894:	4629      	mov	r1, r5
 800c896:	f7ff ff6b 	bl	800c770 <_malloc_r>
 800c89a:	4606      	mov	r6, r0
 800c89c:	b950      	cbnz	r0, 800c8b4 <__ssputs_r+0x5c>
 800c89e:	230c      	movs	r3, #12
 800c8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a4:	f8ca 3000 	str.w	r3, [sl]
 800c8a8:	89a3      	ldrh	r3, [r4, #12]
 800c8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ae:	81a3      	strh	r3, [r4, #12]
 800c8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b4:	464a      	mov	r2, r9
 800c8b6:	6921      	ldr	r1, [r4, #16]
 800c8b8:	f7fc fada 	bl	8008e70 <memcpy>
 800c8bc:	89a3      	ldrh	r3, [r4, #12]
 800c8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8c6:	81a3      	strh	r3, [r4, #12]
 800c8c8:	6126      	str	r6, [r4, #16]
 800c8ca:	444e      	add	r6, r9
 800c8cc:	6026      	str	r6, [r4, #0]
 800c8ce:	463e      	mov	r6, r7
 800c8d0:	6165      	str	r5, [r4, #20]
 800c8d2:	eba5 0509 	sub.w	r5, r5, r9
 800c8d6:	60a5      	str	r5, [r4, #8]
 800c8d8:	42be      	cmp	r6, r7
 800c8da:	d900      	bls.n	800c8de <__ssputs_r+0x86>
 800c8dc:	463e      	mov	r6, r7
 800c8de:	4632      	mov	r2, r6
 800c8e0:	4641      	mov	r1, r8
 800c8e2:	6820      	ldr	r0, [r4, #0]
 800c8e4:	f000 f97c 	bl	800cbe0 <memmove>
 800c8e8:	68a3      	ldr	r3, [r4, #8]
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	1b9b      	subs	r3, r3, r6
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	4433      	add	r3, r6
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	e7db      	b.n	800c8b0 <__ssputs_r+0x58>
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	f000 f997 	bl	800cc2c <_realloc_r>
 800c8fe:	4606      	mov	r6, r0
 800c900:	2800      	cmp	r0, #0
 800c902:	d1e1      	bne.n	800c8c8 <__ssputs_r+0x70>
 800c904:	4650      	mov	r0, sl
 800c906:	6921      	ldr	r1, [r4, #16]
 800c908:	f7ff feca 	bl	800c6a0 <_free_r>
 800c90c:	e7c7      	b.n	800c89e <__ssputs_r+0x46>
	...

0800c910 <_svfiprintf_r>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	4698      	mov	r8, r3
 800c916:	898b      	ldrh	r3, [r1, #12]
 800c918:	4607      	mov	r7, r0
 800c91a:	061b      	lsls	r3, r3, #24
 800c91c:	460d      	mov	r5, r1
 800c91e:	4614      	mov	r4, r2
 800c920:	b09d      	sub	sp, #116	; 0x74
 800c922:	d50e      	bpl.n	800c942 <_svfiprintf_r+0x32>
 800c924:	690b      	ldr	r3, [r1, #16]
 800c926:	b963      	cbnz	r3, 800c942 <_svfiprintf_r+0x32>
 800c928:	2140      	movs	r1, #64	; 0x40
 800c92a:	f7ff ff21 	bl	800c770 <_malloc_r>
 800c92e:	6028      	str	r0, [r5, #0]
 800c930:	6128      	str	r0, [r5, #16]
 800c932:	b920      	cbnz	r0, 800c93e <_svfiprintf_r+0x2e>
 800c934:	230c      	movs	r3, #12
 800c936:	603b      	str	r3, [r7, #0]
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	e0d1      	b.n	800cae2 <_svfiprintf_r+0x1d2>
 800c93e:	2340      	movs	r3, #64	; 0x40
 800c940:	616b      	str	r3, [r5, #20]
 800c942:	2300      	movs	r3, #0
 800c944:	9309      	str	r3, [sp, #36]	; 0x24
 800c946:	2320      	movs	r3, #32
 800c948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c94c:	2330      	movs	r3, #48	; 0x30
 800c94e:	f04f 0901 	mov.w	r9, #1
 800c952:	f8cd 800c 	str.w	r8, [sp, #12]
 800c956:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cafc <_svfiprintf_r+0x1ec>
 800c95a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c95e:	4623      	mov	r3, r4
 800c960:	469a      	mov	sl, r3
 800c962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c966:	b10a      	cbz	r2, 800c96c <_svfiprintf_r+0x5c>
 800c968:	2a25      	cmp	r2, #37	; 0x25
 800c96a:	d1f9      	bne.n	800c960 <_svfiprintf_r+0x50>
 800c96c:	ebba 0b04 	subs.w	fp, sl, r4
 800c970:	d00b      	beq.n	800c98a <_svfiprintf_r+0x7a>
 800c972:	465b      	mov	r3, fp
 800c974:	4622      	mov	r2, r4
 800c976:	4629      	mov	r1, r5
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff ff6d 	bl	800c858 <__ssputs_r>
 800c97e:	3001      	adds	r0, #1
 800c980:	f000 80aa 	beq.w	800cad8 <_svfiprintf_r+0x1c8>
 800c984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c986:	445a      	add	r2, fp
 800c988:	9209      	str	r2, [sp, #36]	; 0x24
 800c98a:	f89a 3000 	ldrb.w	r3, [sl]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 80a2 	beq.w	800cad8 <_svfiprintf_r+0x1c8>
 800c994:	2300      	movs	r3, #0
 800c996:	f04f 32ff 	mov.w	r2, #4294967295
 800c99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c99e:	f10a 0a01 	add.w	sl, sl, #1
 800c9a2:	9304      	str	r3, [sp, #16]
 800c9a4:	9307      	str	r3, [sp, #28]
 800c9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c9ac:	4654      	mov	r4, sl
 800c9ae:	2205      	movs	r2, #5
 800c9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b4:	4851      	ldr	r0, [pc, #324]	; (800cafc <_svfiprintf_r+0x1ec>)
 800c9b6:	f7ff f999 	bl	800bcec <memchr>
 800c9ba:	9a04      	ldr	r2, [sp, #16]
 800c9bc:	b9d8      	cbnz	r0, 800c9f6 <_svfiprintf_r+0xe6>
 800c9be:	06d0      	lsls	r0, r2, #27
 800c9c0:	bf44      	itt	mi
 800c9c2:	2320      	movmi	r3, #32
 800c9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9c8:	0711      	lsls	r1, r2, #28
 800c9ca:	bf44      	itt	mi
 800c9cc:	232b      	movmi	r3, #43	; 0x2b
 800c9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9d8:	d015      	beq.n	800ca06 <_svfiprintf_r+0xf6>
 800c9da:	4654      	mov	r4, sl
 800c9dc:	2000      	movs	r0, #0
 800c9de:	f04f 0c0a 	mov.w	ip, #10
 800c9e2:	9a07      	ldr	r2, [sp, #28]
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9ea:	3b30      	subs	r3, #48	; 0x30
 800c9ec:	2b09      	cmp	r3, #9
 800c9ee:	d94e      	bls.n	800ca8e <_svfiprintf_r+0x17e>
 800c9f0:	b1b0      	cbz	r0, 800ca20 <_svfiprintf_r+0x110>
 800c9f2:	9207      	str	r2, [sp, #28]
 800c9f4:	e014      	b.n	800ca20 <_svfiprintf_r+0x110>
 800c9f6:	eba0 0308 	sub.w	r3, r0, r8
 800c9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	46a2      	mov	sl, r4
 800ca02:	9304      	str	r3, [sp, #16]
 800ca04:	e7d2      	b.n	800c9ac <_svfiprintf_r+0x9c>
 800ca06:	9b03      	ldr	r3, [sp, #12]
 800ca08:	1d19      	adds	r1, r3, #4
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	9103      	str	r1, [sp, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	bfbb      	ittet	lt
 800ca12:	425b      	neglt	r3, r3
 800ca14:	f042 0202 	orrlt.w	r2, r2, #2
 800ca18:	9307      	strge	r3, [sp, #28]
 800ca1a:	9307      	strlt	r3, [sp, #28]
 800ca1c:	bfb8      	it	lt
 800ca1e:	9204      	strlt	r2, [sp, #16]
 800ca20:	7823      	ldrb	r3, [r4, #0]
 800ca22:	2b2e      	cmp	r3, #46	; 0x2e
 800ca24:	d10c      	bne.n	800ca40 <_svfiprintf_r+0x130>
 800ca26:	7863      	ldrb	r3, [r4, #1]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d135      	bne.n	800ca98 <_svfiprintf_r+0x188>
 800ca2c:	9b03      	ldr	r3, [sp, #12]
 800ca2e:	3402      	adds	r4, #2
 800ca30:	1d1a      	adds	r2, r3, #4
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	9203      	str	r2, [sp, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfb8      	it	lt
 800ca3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca3e:	9305      	str	r3, [sp, #20]
 800ca40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cb00 <_svfiprintf_r+0x1f0>
 800ca44:	2203      	movs	r2, #3
 800ca46:	4650      	mov	r0, sl
 800ca48:	7821      	ldrb	r1, [r4, #0]
 800ca4a:	f7ff f94f 	bl	800bcec <memchr>
 800ca4e:	b140      	cbz	r0, 800ca62 <_svfiprintf_r+0x152>
 800ca50:	2340      	movs	r3, #64	; 0x40
 800ca52:	eba0 000a 	sub.w	r0, r0, sl
 800ca56:	fa03 f000 	lsl.w	r0, r3, r0
 800ca5a:	9b04      	ldr	r3, [sp, #16]
 800ca5c:	3401      	adds	r4, #1
 800ca5e:	4303      	orrs	r3, r0
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca66:	2206      	movs	r2, #6
 800ca68:	4826      	ldr	r0, [pc, #152]	; (800cb04 <_svfiprintf_r+0x1f4>)
 800ca6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca6e:	f7ff f93d 	bl	800bcec <memchr>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d038      	beq.n	800cae8 <_svfiprintf_r+0x1d8>
 800ca76:	4b24      	ldr	r3, [pc, #144]	; (800cb08 <_svfiprintf_r+0x1f8>)
 800ca78:	bb1b      	cbnz	r3, 800cac2 <_svfiprintf_r+0x1b2>
 800ca7a:	9b03      	ldr	r3, [sp, #12]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	f023 0307 	bic.w	r3, r3, #7
 800ca82:	3308      	adds	r3, #8
 800ca84:	9303      	str	r3, [sp, #12]
 800ca86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca88:	4433      	add	r3, r6
 800ca8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca8c:	e767      	b.n	800c95e <_svfiprintf_r+0x4e>
 800ca8e:	460c      	mov	r4, r1
 800ca90:	2001      	movs	r0, #1
 800ca92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca96:	e7a5      	b.n	800c9e4 <_svfiprintf_r+0xd4>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	f04f 0c0a 	mov.w	ip, #10
 800ca9e:	4619      	mov	r1, r3
 800caa0:	3401      	adds	r4, #1
 800caa2:	9305      	str	r3, [sp, #20]
 800caa4:	4620      	mov	r0, r4
 800caa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caaa:	3a30      	subs	r2, #48	; 0x30
 800caac:	2a09      	cmp	r2, #9
 800caae:	d903      	bls.n	800cab8 <_svfiprintf_r+0x1a8>
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d0c5      	beq.n	800ca40 <_svfiprintf_r+0x130>
 800cab4:	9105      	str	r1, [sp, #20]
 800cab6:	e7c3      	b.n	800ca40 <_svfiprintf_r+0x130>
 800cab8:	4604      	mov	r4, r0
 800caba:	2301      	movs	r3, #1
 800cabc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac0:	e7f0      	b.n	800caa4 <_svfiprintf_r+0x194>
 800cac2:	ab03      	add	r3, sp, #12
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	462a      	mov	r2, r5
 800cac8:	4638      	mov	r0, r7
 800caca:	4b10      	ldr	r3, [pc, #64]	; (800cb0c <_svfiprintf_r+0x1fc>)
 800cacc:	a904      	add	r1, sp, #16
 800cace:	f7fc fa83 	bl	8008fd8 <_printf_float>
 800cad2:	1c42      	adds	r2, r0, #1
 800cad4:	4606      	mov	r6, r0
 800cad6:	d1d6      	bne.n	800ca86 <_svfiprintf_r+0x176>
 800cad8:	89ab      	ldrh	r3, [r5, #12]
 800cada:	065b      	lsls	r3, r3, #25
 800cadc:	f53f af2c 	bmi.w	800c938 <_svfiprintf_r+0x28>
 800cae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cae2:	b01d      	add	sp, #116	; 0x74
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae8:	ab03      	add	r3, sp, #12
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	462a      	mov	r2, r5
 800caee:	4638      	mov	r0, r7
 800caf0:	4b06      	ldr	r3, [pc, #24]	; (800cb0c <_svfiprintf_r+0x1fc>)
 800caf2:	a904      	add	r1, sp, #16
 800caf4:	f7fc fd0c 	bl	8009510 <_printf_i>
 800caf8:	e7eb      	b.n	800cad2 <_svfiprintf_r+0x1c2>
 800cafa:	bf00      	nop
 800cafc:	0800eb74 	.word	0x0800eb74
 800cb00:	0800eb7a 	.word	0x0800eb7a
 800cb04:	0800eb7e 	.word	0x0800eb7e
 800cb08:	08008fd9 	.word	0x08008fd9
 800cb0c:	0800c859 	.word	0x0800c859

0800cb10 <nan>:
 800cb10:	2000      	movs	r0, #0
 800cb12:	4901      	ldr	r1, [pc, #4]	; (800cb18 <nan+0x8>)
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	7ff80000 	.word	0x7ff80000

0800cb1c <_sbrk_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4d05      	ldr	r5, [pc, #20]	; (800cb38 <_sbrk_r+0x1c>)
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	602b      	str	r3, [r5, #0]
 800cb28:	f7f6 f888 	bl	8002c3c <_sbrk>
 800cb2c:	1c43      	adds	r3, r0, #1
 800cb2e:	d102      	bne.n	800cb36 <_sbrk_r+0x1a>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	b103      	cbz	r3, 800cb36 <_sbrk_r+0x1a>
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
 800cb38:	20003720 	.word	0x20003720

0800cb3c <strncmp>:
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	b510      	push	{r4, lr}
 800cb40:	b172      	cbz	r2, 800cb60 <strncmp+0x24>
 800cb42:	3901      	subs	r1, #1
 800cb44:	1884      	adds	r4, r0, r2
 800cb46:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb4e:	4290      	cmp	r0, r2
 800cb50:	d101      	bne.n	800cb56 <strncmp+0x1a>
 800cb52:	42a3      	cmp	r3, r4
 800cb54:	d101      	bne.n	800cb5a <strncmp+0x1e>
 800cb56:	1a80      	subs	r0, r0, r2
 800cb58:	bd10      	pop	{r4, pc}
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d1f3      	bne.n	800cb46 <strncmp+0xa>
 800cb5e:	e7fa      	b.n	800cb56 <strncmp+0x1a>
 800cb60:	4610      	mov	r0, r2
 800cb62:	e7f9      	b.n	800cb58 <strncmp+0x1c>

0800cb64 <__ascii_wctomb>:
 800cb64:	4603      	mov	r3, r0
 800cb66:	4608      	mov	r0, r1
 800cb68:	b141      	cbz	r1, 800cb7c <__ascii_wctomb+0x18>
 800cb6a:	2aff      	cmp	r2, #255	; 0xff
 800cb6c:	d904      	bls.n	800cb78 <__ascii_wctomb+0x14>
 800cb6e:	228a      	movs	r2, #138	; 0x8a
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	4770      	bx	lr
 800cb78:	2001      	movs	r0, #1
 800cb7a:	700a      	strb	r2, [r1, #0]
 800cb7c:	4770      	bx	lr
	...

0800cb80 <__assert_func>:
 800cb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb82:	4614      	mov	r4, r2
 800cb84:	461a      	mov	r2, r3
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <__assert_func+0x2c>)
 800cb88:	4605      	mov	r5, r0
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68d8      	ldr	r0, [r3, #12]
 800cb8e:	b14c      	cbz	r4, 800cba4 <__assert_func+0x24>
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <__assert_func+0x30>)
 800cb92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb96:	9100      	str	r1, [sp, #0]
 800cb98:	462b      	mov	r3, r5
 800cb9a:	4906      	ldr	r1, [pc, #24]	; (800cbb4 <__assert_func+0x34>)
 800cb9c:	f000 f80e 	bl	800cbbc <fiprintf>
 800cba0:	f000 fa8a 	bl	800d0b8 <abort>
 800cba4:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <__assert_func+0x38>)
 800cba6:	461c      	mov	r4, r3
 800cba8:	e7f3      	b.n	800cb92 <__assert_func+0x12>
 800cbaa:	bf00      	nop
 800cbac:	2000001c 	.word	0x2000001c
 800cbb0:	0800eb85 	.word	0x0800eb85
 800cbb4:	0800eb92 	.word	0x0800eb92
 800cbb8:	0800ebc0 	.word	0x0800ebc0

0800cbbc <fiprintf>:
 800cbbc:	b40e      	push	{r1, r2, r3}
 800cbbe:	b503      	push	{r0, r1, lr}
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	ab03      	add	r3, sp, #12
 800cbc4:	4805      	ldr	r0, [pc, #20]	; (800cbdc <fiprintf+0x20>)
 800cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbca:	6800      	ldr	r0, [r0, #0]
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f000 f883 	bl	800ccd8 <_vfiprintf_r>
 800cbd2:	b002      	add	sp, #8
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	2000001c 	.word	0x2000001c

0800cbe0 <memmove>:
 800cbe0:	4288      	cmp	r0, r1
 800cbe2:	b510      	push	{r4, lr}
 800cbe4:	eb01 0402 	add.w	r4, r1, r2
 800cbe8:	d902      	bls.n	800cbf0 <memmove+0x10>
 800cbea:	4284      	cmp	r4, r0
 800cbec:	4623      	mov	r3, r4
 800cbee:	d807      	bhi.n	800cc00 <memmove+0x20>
 800cbf0:	1e43      	subs	r3, r0, #1
 800cbf2:	42a1      	cmp	r1, r4
 800cbf4:	d008      	beq.n	800cc08 <memmove+0x28>
 800cbf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbfe:	e7f8      	b.n	800cbf2 <memmove+0x12>
 800cc00:	4601      	mov	r1, r0
 800cc02:	4402      	add	r2, r0
 800cc04:	428a      	cmp	r2, r1
 800cc06:	d100      	bne.n	800cc0a <memmove+0x2a>
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc12:	e7f7      	b.n	800cc04 <memmove+0x24>

0800cc14 <__malloc_lock>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__malloc_lock+0x8>)
 800cc16:	f000 bc0b 	b.w	800d430 <__retarget_lock_acquire_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	20003724 	.word	0x20003724

0800cc20 <__malloc_unlock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	; (800cc28 <__malloc_unlock+0x8>)
 800cc22:	f000 bc06 	b.w	800d432 <__retarget_lock_release_recursive>
 800cc26:	bf00      	nop
 800cc28:	20003724 	.word	0x20003724

0800cc2c <_realloc_r>:
 800cc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc30:	4680      	mov	r8, r0
 800cc32:	4614      	mov	r4, r2
 800cc34:	460e      	mov	r6, r1
 800cc36:	b921      	cbnz	r1, 800cc42 <_realloc_r+0x16>
 800cc38:	4611      	mov	r1, r2
 800cc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	f7ff bd97 	b.w	800c770 <_malloc_r>
 800cc42:	b92a      	cbnz	r2, 800cc50 <_realloc_r+0x24>
 800cc44:	f7ff fd2c 	bl	800c6a0 <_free_r>
 800cc48:	4625      	mov	r5, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc50:	f000 fc56 	bl	800d500 <_malloc_usable_size_r>
 800cc54:	4284      	cmp	r4, r0
 800cc56:	4607      	mov	r7, r0
 800cc58:	d802      	bhi.n	800cc60 <_realloc_r+0x34>
 800cc5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc5e:	d812      	bhi.n	800cc86 <_realloc_r+0x5a>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4640      	mov	r0, r8
 800cc64:	f7ff fd84 	bl	800c770 <_malloc_r>
 800cc68:	4605      	mov	r5, r0
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d0ed      	beq.n	800cc4a <_realloc_r+0x1e>
 800cc6e:	42bc      	cmp	r4, r7
 800cc70:	4622      	mov	r2, r4
 800cc72:	4631      	mov	r1, r6
 800cc74:	bf28      	it	cs
 800cc76:	463a      	movcs	r2, r7
 800cc78:	f7fc f8fa 	bl	8008e70 <memcpy>
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4640      	mov	r0, r8
 800cc80:	f7ff fd0e 	bl	800c6a0 <_free_r>
 800cc84:	e7e1      	b.n	800cc4a <_realloc_r+0x1e>
 800cc86:	4635      	mov	r5, r6
 800cc88:	e7df      	b.n	800cc4a <_realloc_r+0x1e>

0800cc8a <__sfputc_r>:
 800cc8a:	6893      	ldr	r3, [r2, #8]
 800cc8c:	b410      	push	{r4}
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	6093      	str	r3, [r2, #8]
 800cc94:	da07      	bge.n	800cca6 <__sfputc_r+0x1c>
 800cc96:	6994      	ldr	r4, [r2, #24]
 800cc98:	42a3      	cmp	r3, r4
 800cc9a:	db01      	blt.n	800cca0 <__sfputc_r+0x16>
 800cc9c:	290a      	cmp	r1, #10
 800cc9e:	d102      	bne.n	800cca6 <__sfputc_r+0x1c>
 800cca0:	bc10      	pop	{r4}
 800cca2:	f000 b949 	b.w	800cf38 <__swbuf_r>
 800cca6:	6813      	ldr	r3, [r2, #0]
 800cca8:	1c58      	adds	r0, r3, #1
 800ccaa:	6010      	str	r0, [r2, #0]
 800ccac:	7019      	strb	r1, [r3, #0]
 800ccae:	4608      	mov	r0, r1
 800ccb0:	bc10      	pop	{r4}
 800ccb2:	4770      	bx	lr

0800ccb4 <__sfputs_r>:
 800ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460f      	mov	r7, r1
 800ccba:	4614      	mov	r4, r2
 800ccbc:	18d5      	adds	r5, r2, r3
 800ccbe:	42ac      	cmp	r4, r5
 800ccc0:	d101      	bne.n	800ccc6 <__sfputs_r+0x12>
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	e007      	b.n	800ccd6 <__sfputs_r+0x22>
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccce:	f7ff ffdc 	bl	800cc8a <__sfputc_r>
 800ccd2:	1c43      	adds	r3, r0, #1
 800ccd4:	d1f3      	bne.n	800ccbe <__sfputs_r+0xa>
 800ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccd8 <_vfiprintf_r>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	460d      	mov	r5, r1
 800ccde:	4614      	mov	r4, r2
 800cce0:	4698      	mov	r8, r3
 800cce2:	4606      	mov	r6, r0
 800cce4:	b09d      	sub	sp, #116	; 0x74
 800cce6:	b118      	cbz	r0, 800ccf0 <_vfiprintf_r+0x18>
 800cce8:	6983      	ldr	r3, [r0, #24]
 800ccea:	b90b      	cbnz	r3, 800ccf0 <_vfiprintf_r+0x18>
 800ccec:	f000 fb02 	bl	800d2f4 <__sinit>
 800ccf0:	4b89      	ldr	r3, [pc, #548]	; (800cf18 <_vfiprintf_r+0x240>)
 800ccf2:	429d      	cmp	r5, r3
 800ccf4:	d11b      	bne.n	800cd2e <_vfiprintf_r+0x56>
 800ccf6:	6875      	ldr	r5, [r6, #4]
 800ccf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccfa:	07d9      	lsls	r1, r3, #31
 800ccfc:	d405      	bmi.n	800cd0a <_vfiprintf_r+0x32>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	059a      	lsls	r2, r3, #22
 800cd02:	d402      	bmi.n	800cd0a <_vfiprintf_r+0x32>
 800cd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd06:	f000 fb93 	bl	800d430 <__retarget_lock_acquire_recursive>
 800cd0a:	89ab      	ldrh	r3, [r5, #12]
 800cd0c:	071b      	lsls	r3, r3, #28
 800cd0e:	d501      	bpl.n	800cd14 <_vfiprintf_r+0x3c>
 800cd10:	692b      	ldr	r3, [r5, #16]
 800cd12:	b9eb      	cbnz	r3, 800cd50 <_vfiprintf_r+0x78>
 800cd14:	4629      	mov	r1, r5
 800cd16:	4630      	mov	r0, r6
 800cd18:	f000 f960 	bl	800cfdc <__swsetup_r>
 800cd1c:	b1c0      	cbz	r0, 800cd50 <_vfiprintf_r+0x78>
 800cd1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd20:	07dc      	lsls	r4, r3, #31
 800cd22:	d50e      	bpl.n	800cd42 <_vfiprintf_r+0x6a>
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	b01d      	add	sp, #116	; 0x74
 800cd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd2e:	4b7b      	ldr	r3, [pc, #492]	; (800cf1c <_vfiprintf_r+0x244>)
 800cd30:	429d      	cmp	r5, r3
 800cd32:	d101      	bne.n	800cd38 <_vfiprintf_r+0x60>
 800cd34:	68b5      	ldr	r5, [r6, #8]
 800cd36:	e7df      	b.n	800ccf8 <_vfiprintf_r+0x20>
 800cd38:	4b79      	ldr	r3, [pc, #484]	; (800cf20 <_vfiprintf_r+0x248>)
 800cd3a:	429d      	cmp	r5, r3
 800cd3c:	bf08      	it	eq
 800cd3e:	68f5      	ldreq	r5, [r6, #12]
 800cd40:	e7da      	b.n	800ccf8 <_vfiprintf_r+0x20>
 800cd42:	89ab      	ldrh	r3, [r5, #12]
 800cd44:	0598      	lsls	r0, r3, #22
 800cd46:	d4ed      	bmi.n	800cd24 <_vfiprintf_r+0x4c>
 800cd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd4a:	f000 fb72 	bl	800d432 <__retarget_lock_release_recursive>
 800cd4e:	e7e9      	b.n	800cd24 <_vfiprintf_r+0x4c>
 800cd50:	2300      	movs	r3, #0
 800cd52:	9309      	str	r3, [sp, #36]	; 0x24
 800cd54:	2320      	movs	r3, #32
 800cd56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd5a:	2330      	movs	r3, #48	; 0x30
 800cd5c:	f04f 0901 	mov.w	r9, #1
 800cd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cf24 <_vfiprintf_r+0x24c>
 800cd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd6c:	4623      	mov	r3, r4
 800cd6e:	469a      	mov	sl, r3
 800cd70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd74:	b10a      	cbz	r2, 800cd7a <_vfiprintf_r+0xa2>
 800cd76:	2a25      	cmp	r2, #37	; 0x25
 800cd78:	d1f9      	bne.n	800cd6e <_vfiprintf_r+0x96>
 800cd7a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd7e:	d00b      	beq.n	800cd98 <_vfiprintf_r+0xc0>
 800cd80:	465b      	mov	r3, fp
 800cd82:	4622      	mov	r2, r4
 800cd84:	4629      	mov	r1, r5
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff ff94 	bl	800ccb4 <__sfputs_r>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	f000 80aa 	beq.w	800cee6 <_vfiprintf_r+0x20e>
 800cd92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd94:	445a      	add	r2, fp
 800cd96:	9209      	str	r2, [sp, #36]	; 0x24
 800cd98:	f89a 3000 	ldrb.w	r3, [sl]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f000 80a2 	beq.w	800cee6 <_vfiprintf_r+0x20e>
 800cda2:	2300      	movs	r3, #0
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295
 800cda8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdac:	f10a 0a01 	add.w	sl, sl, #1
 800cdb0:	9304      	str	r3, [sp, #16]
 800cdb2:	9307      	str	r3, [sp, #28]
 800cdb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdb8:	931a      	str	r3, [sp, #104]	; 0x68
 800cdba:	4654      	mov	r4, sl
 800cdbc:	2205      	movs	r2, #5
 800cdbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc2:	4858      	ldr	r0, [pc, #352]	; (800cf24 <_vfiprintf_r+0x24c>)
 800cdc4:	f7fe ff92 	bl	800bcec <memchr>
 800cdc8:	9a04      	ldr	r2, [sp, #16]
 800cdca:	b9d8      	cbnz	r0, 800ce04 <_vfiprintf_r+0x12c>
 800cdcc:	06d1      	lsls	r1, r2, #27
 800cdce:	bf44      	itt	mi
 800cdd0:	2320      	movmi	r3, #32
 800cdd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdd6:	0713      	lsls	r3, r2, #28
 800cdd8:	bf44      	itt	mi
 800cdda:	232b      	movmi	r3, #43	; 0x2b
 800cddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde0:	f89a 3000 	ldrb.w	r3, [sl]
 800cde4:	2b2a      	cmp	r3, #42	; 0x2a
 800cde6:	d015      	beq.n	800ce14 <_vfiprintf_r+0x13c>
 800cde8:	4654      	mov	r4, sl
 800cdea:	2000      	movs	r0, #0
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	9a07      	ldr	r2, [sp, #28]
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdf8:	3b30      	subs	r3, #48	; 0x30
 800cdfa:	2b09      	cmp	r3, #9
 800cdfc:	d94e      	bls.n	800ce9c <_vfiprintf_r+0x1c4>
 800cdfe:	b1b0      	cbz	r0, 800ce2e <_vfiprintf_r+0x156>
 800ce00:	9207      	str	r2, [sp, #28]
 800ce02:	e014      	b.n	800ce2e <_vfiprintf_r+0x156>
 800ce04:	eba0 0308 	sub.w	r3, r0, r8
 800ce08:	fa09 f303 	lsl.w	r3, r9, r3
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	46a2      	mov	sl, r4
 800ce10:	9304      	str	r3, [sp, #16]
 800ce12:	e7d2      	b.n	800cdba <_vfiprintf_r+0xe2>
 800ce14:	9b03      	ldr	r3, [sp, #12]
 800ce16:	1d19      	adds	r1, r3, #4
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	9103      	str	r1, [sp, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	bfbb      	ittet	lt
 800ce20:	425b      	neglt	r3, r3
 800ce22:	f042 0202 	orrlt.w	r2, r2, #2
 800ce26:	9307      	strge	r3, [sp, #28]
 800ce28:	9307      	strlt	r3, [sp, #28]
 800ce2a:	bfb8      	it	lt
 800ce2c:	9204      	strlt	r2, [sp, #16]
 800ce2e:	7823      	ldrb	r3, [r4, #0]
 800ce30:	2b2e      	cmp	r3, #46	; 0x2e
 800ce32:	d10c      	bne.n	800ce4e <_vfiprintf_r+0x176>
 800ce34:	7863      	ldrb	r3, [r4, #1]
 800ce36:	2b2a      	cmp	r3, #42	; 0x2a
 800ce38:	d135      	bne.n	800cea6 <_vfiprintf_r+0x1ce>
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	3402      	adds	r4, #2
 800ce3e:	1d1a      	adds	r2, r3, #4
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	9203      	str	r2, [sp, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	bfb8      	it	lt
 800ce48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce4c:	9305      	str	r3, [sp, #20]
 800ce4e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cf28 <_vfiprintf_r+0x250>
 800ce52:	2203      	movs	r2, #3
 800ce54:	4650      	mov	r0, sl
 800ce56:	7821      	ldrb	r1, [r4, #0]
 800ce58:	f7fe ff48 	bl	800bcec <memchr>
 800ce5c:	b140      	cbz	r0, 800ce70 <_vfiprintf_r+0x198>
 800ce5e:	2340      	movs	r3, #64	; 0x40
 800ce60:	eba0 000a 	sub.w	r0, r0, sl
 800ce64:	fa03 f000 	lsl.w	r0, r3, r0
 800ce68:	9b04      	ldr	r3, [sp, #16]
 800ce6a:	3401      	adds	r4, #1
 800ce6c:	4303      	orrs	r3, r0
 800ce6e:	9304      	str	r3, [sp, #16]
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	2206      	movs	r2, #6
 800ce76:	482d      	ldr	r0, [pc, #180]	; (800cf2c <_vfiprintf_r+0x254>)
 800ce78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce7c:	f7fe ff36 	bl	800bcec <memchr>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d03f      	beq.n	800cf04 <_vfiprintf_r+0x22c>
 800ce84:	4b2a      	ldr	r3, [pc, #168]	; (800cf30 <_vfiprintf_r+0x258>)
 800ce86:	bb1b      	cbnz	r3, 800ced0 <_vfiprintf_r+0x1f8>
 800ce88:	9b03      	ldr	r3, [sp, #12]
 800ce8a:	3307      	adds	r3, #7
 800ce8c:	f023 0307 	bic.w	r3, r3, #7
 800ce90:	3308      	adds	r3, #8
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce96:	443b      	add	r3, r7
 800ce98:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9a:	e767      	b.n	800cd6c <_vfiprintf_r+0x94>
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	2001      	movs	r0, #1
 800cea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea4:	e7a5      	b.n	800cdf2 <_vfiprintf_r+0x11a>
 800cea6:	2300      	movs	r3, #0
 800cea8:	f04f 0c0a 	mov.w	ip, #10
 800ceac:	4619      	mov	r1, r3
 800ceae:	3401      	adds	r4, #1
 800ceb0:	9305      	str	r3, [sp, #20]
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceb8:	3a30      	subs	r2, #48	; 0x30
 800ceba:	2a09      	cmp	r2, #9
 800cebc:	d903      	bls.n	800cec6 <_vfiprintf_r+0x1ee>
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d0c5      	beq.n	800ce4e <_vfiprintf_r+0x176>
 800cec2:	9105      	str	r1, [sp, #20]
 800cec4:	e7c3      	b.n	800ce4e <_vfiprintf_r+0x176>
 800cec6:	4604      	mov	r4, r0
 800cec8:	2301      	movs	r3, #1
 800ceca:	fb0c 2101 	mla	r1, ip, r1, r2
 800cece:	e7f0      	b.n	800ceb2 <_vfiprintf_r+0x1da>
 800ced0:	ab03      	add	r3, sp, #12
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	462a      	mov	r2, r5
 800ced6:	4630      	mov	r0, r6
 800ced8:	4b16      	ldr	r3, [pc, #88]	; (800cf34 <_vfiprintf_r+0x25c>)
 800ceda:	a904      	add	r1, sp, #16
 800cedc:	f7fc f87c 	bl	8008fd8 <_printf_float>
 800cee0:	4607      	mov	r7, r0
 800cee2:	1c78      	adds	r0, r7, #1
 800cee4:	d1d6      	bne.n	800ce94 <_vfiprintf_r+0x1bc>
 800cee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cee8:	07d9      	lsls	r1, r3, #31
 800ceea:	d405      	bmi.n	800cef8 <_vfiprintf_r+0x220>
 800ceec:	89ab      	ldrh	r3, [r5, #12]
 800ceee:	059a      	lsls	r2, r3, #22
 800cef0:	d402      	bmi.n	800cef8 <_vfiprintf_r+0x220>
 800cef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef4:	f000 fa9d 	bl	800d432 <__retarget_lock_release_recursive>
 800cef8:	89ab      	ldrh	r3, [r5, #12]
 800cefa:	065b      	lsls	r3, r3, #25
 800cefc:	f53f af12 	bmi.w	800cd24 <_vfiprintf_r+0x4c>
 800cf00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf02:	e711      	b.n	800cd28 <_vfiprintf_r+0x50>
 800cf04:	ab03      	add	r3, sp, #12
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	462a      	mov	r2, r5
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	4b09      	ldr	r3, [pc, #36]	; (800cf34 <_vfiprintf_r+0x25c>)
 800cf0e:	a904      	add	r1, sp, #16
 800cf10:	f7fc fafe 	bl	8009510 <_printf_i>
 800cf14:	e7e4      	b.n	800cee0 <_vfiprintf_r+0x208>
 800cf16:	bf00      	nop
 800cf18:	0800ebe4 	.word	0x0800ebe4
 800cf1c:	0800ec04 	.word	0x0800ec04
 800cf20:	0800ebc4 	.word	0x0800ebc4
 800cf24:	0800eb74 	.word	0x0800eb74
 800cf28:	0800eb7a 	.word	0x0800eb7a
 800cf2c:	0800eb7e 	.word	0x0800eb7e
 800cf30:	08008fd9 	.word	0x08008fd9
 800cf34:	0800ccb5 	.word	0x0800ccb5

0800cf38 <__swbuf_r>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	460e      	mov	r6, r1
 800cf3c:	4614      	mov	r4, r2
 800cf3e:	4605      	mov	r5, r0
 800cf40:	b118      	cbz	r0, 800cf4a <__swbuf_r+0x12>
 800cf42:	6983      	ldr	r3, [r0, #24]
 800cf44:	b90b      	cbnz	r3, 800cf4a <__swbuf_r+0x12>
 800cf46:	f000 f9d5 	bl	800d2f4 <__sinit>
 800cf4a:	4b21      	ldr	r3, [pc, #132]	; (800cfd0 <__swbuf_r+0x98>)
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	d12b      	bne.n	800cfa8 <__swbuf_r+0x70>
 800cf50:	686c      	ldr	r4, [r5, #4]
 800cf52:	69a3      	ldr	r3, [r4, #24]
 800cf54:	60a3      	str	r3, [r4, #8]
 800cf56:	89a3      	ldrh	r3, [r4, #12]
 800cf58:	071a      	lsls	r2, r3, #28
 800cf5a:	d52f      	bpl.n	800cfbc <__swbuf_r+0x84>
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	b36b      	cbz	r3, 800cfbc <__swbuf_r+0x84>
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	6820      	ldr	r0, [r4, #0]
 800cf64:	b2f6      	uxtb	r6, r6
 800cf66:	1ac0      	subs	r0, r0, r3
 800cf68:	6963      	ldr	r3, [r4, #20]
 800cf6a:	4637      	mov	r7, r6
 800cf6c:	4283      	cmp	r3, r0
 800cf6e:	dc04      	bgt.n	800cf7a <__swbuf_r+0x42>
 800cf70:	4621      	mov	r1, r4
 800cf72:	4628      	mov	r0, r5
 800cf74:	f000 f92a 	bl	800d1cc <_fflush_r>
 800cf78:	bb30      	cbnz	r0, 800cfc8 <__swbuf_r+0x90>
 800cf7a:	68a3      	ldr	r3, [r4, #8]
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	60a3      	str	r3, [r4, #8]
 800cf82:	6823      	ldr	r3, [r4, #0]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	6022      	str	r2, [r4, #0]
 800cf88:	701e      	strb	r6, [r3, #0]
 800cf8a:	6963      	ldr	r3, [r4, #20]
 800cf8c:	4283      	cmp	r3, r0
 800cf8e:	d004      	beq.n	800cf9a <__swbuf_r+0x62>
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	07db      	lsls	r3, r3, #31
 800cf94:	d506      	bpl.n	800cfa4 <__swbuf_r+0x6c>
 800cf96:	2e0a      	cmp	r6, #10
 800cf98:	d104      	bne.n	800cfa4 <__swbuf_r+0x6c>
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f000 f915 	bl	800d1cc <_fflush_r>
 800cfa2:	b988      	cbnz	r0, 800cfc8 <__swbuf_r+0x90>
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa8:	4b0a      	ldr	r3, [pc, #40]	; (800cfd4 <__swbuf_r+0x9c>)
 800cfaa:	429c      	cmp	r4, r3
 800cfac:	d101      	bne.n	800cfb2 <__swbuf_r+0x7a>
 800cfae:	68ac      	ldr	r4, [r5, #8]
 800cfb0:	e7cf      	b.n	800cf52 <__swbuf_r+0x1a>
 800cfb2:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <__swbuf_r+0xa0>)
 800cfb4:	429c      	cmp	r4, r3
 800cfb6:	bf08      	it	eq
 800cfb8:	68ec      	ldreq	r4, [r5, #12]
 800cfba:	e7ca      	b.n	800cf52 <__swbuf_r+0x1a>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 f80c 	bl	800cfdc <__swsetup_r>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d0cb      	beq.n	800cf60 <__swbuf_r+0x28>
 800cfc8:	f04f 37ff 	mov.w	r7, #4294967295
 800cfcc:	e7ea      	b.n	800cfa4 <__swbuf_r+0x6c>
 800cfce:	bf00      	nop
 800cfd0:	0800ebe4 	.word	0x0800ebe4
 800cfd4:	0800ec04 	.word	0x0800ec04
 800cfd8:	0800ebc4 	.word	0x0800ebc4

0800cfdc <__swsetup_r>:
 800cfdc:	4b32      	ldr	r3, [pc, #200]	; (800d0a8 <__swsetup_r+0xcc>)
 800cfde:	b570      	push	{r4, r5, r6, lr}
 800cfe0:	681d      	ldr	r5, [r3, #0]
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	460c      	mov	r4, r1
 800cfe6:	b125      	cbz	r5, 800cff2 <__swsetup_r+0x16>
 800cfe8:	69ab      	ldr	r3, [r5, #24]
 800cfea:	b913      	cbnz	r3, 800cff2 <__swsetup_r+0x16>
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 f981 	bl	800d2f4 <__sinit>
 800cff2:	4b2e      	ldr	r3, [pc, #184]	; (800d0ac <__swsetup_r+0xd0>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	d10f      	bne.n	800d018 <__swsetup_r+0x3c>
 800cff8:	686c      	ldr	r4, [r5, #4]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d000:	0719      	lsls	r1, r3, #28
 800d002:	d42c      	bmi.n	800d05e <__swsetup_r+0x82>
 800d004:	06dd      	lsls	r5, r3, #27
 800d006:	d411      	bmi.n	800d02c <__swsetup_r+0x50>
 800d008:	2309      	movs	r3, #9
 800d00a:	6033      	str	r3, [r6, #0]
 800d00c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d010:	f04f 30ff 	mov.w	r0, #4294967295
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	e03e      	b.n	800d096 <__swsetup_r+0xba>
 800d018:	4b25      	ldr	r3, [pc, #148]	; (800d0b0 <__swsetup_r+0xd4>)
 800d01a:	429c      	cmp	r4, r3
 800d01c:	d101      	bne.n	800d022 <__swsetup_r+0x46>
 800d01e:	68ac      	ldr	r4, [r5, #8]
 800d020:	e7eb      	b.n	800cffa <__swsetup_r+0x1e>
 800d022:	4b24      	ldr	r3, [pc, #144]	; (800d0b4 <__swsetup_r+0xd8>)
 800d024:	429c      	cmp	r4, r3
 800d026:	bf08      	it	eq
 800d028:	68ec      	ldreq	r4, [r5, #12]
 800d02a:	e7e6      	b.n	800cffa <__swsetup_r+0x1e>
 800d02c:	0758      	lsls	r0, r3, #29
 800d02e:	d512      	bpl.n	800d056 <__swsetup_r+0x7a>
 800d030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d032:	b141      	cbz	r1, 800d046 <__swsetup_r+0x6a>
 800d034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d038:	4299      	cmp	r1, r3
 800d03a:	d002      	beq.n	800d042 <__swsetup_r+0x66>
 800d03c:	4630      	mov	r0, r6
 800d03e:	f7ff fb2f 	bl	800c6a0 <_free_r>
 800d042:	2300      	movs	r3, #0
 800d044:	6363      	str	r3, [r4, #52]	; 0x34
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	2300      	movs	r3, #0
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	6923      	ldr	r3, [r4, #16]
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f043 0308 	orr.w	r3, r3, #8
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	6923      	ldr	r3, [r4, #16]
 800d060:	b94b      	cbnz	r3, 800d076 <__swsetup_r+0x9a>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d06c:	d003      	beq.n	800d076 <__swsetup_r+0x9a>
 800d06e:	4621      	mov	r1, r4
 800d070:	4630      	mov	r0, r6
 800d072:	f000 fa05 	bl	800d480 <__smakebuf_r>
 800d076:	89a0      	ldrh	r0, [r4, #12]
 800d078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d07c:	f010 0301 	ands.w	r3, r0, #1
 800d080:	d00a      	beq.n	800d098 <__swsetup_r+0xbc>
 800d082:	2300      	movs	r3, #0
 800d084:	60a3      	str	r3, [r4, #8]
 800d086:	6963      	ldr	r3, [r4, #20]
 800d088:	425b      	negs	r3, r3
 800d08a:	61a3      	str	r3, [r4, #24]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	b943      	cbnz	r3, 800d0a2 <__swsetup_r+0xc6>
 800d090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d094:	d1ba      	bne.n	800d00c <__swsetup_r+0x30>
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	0781      	lsls	r1, r0, #30
 800d09a:	bf58      	it	pl
 800d09c:	6963      	ldrpl	r3, [r4, #20]
 800d09e:	60a3      	str	r3, [r4, #8]
 800d0a0:	e7f4      	b.n	800d08c <__swsetup_r+0xb0>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	e7f7      	b.n	800d096 <__swsetup_r+0xba>
 800d0a6:	bf00      	nop
 800d0a8:	2000001c 	.word	0x2000001c
 800d0ac:	0800ebe4 	.word	0x0800ebe4
 800d0b0:	0800ec04 	.word	0x0800ec04
 800d0b4:	0800ebc4 	.word	0x0800ebc4

0800d0b8 <abort>:
 800d0b8:	2006      	movs	r0, #6
 800d0ba:	b508      	push	{r3, lr}
 800d0bc:	f000 fa50 	bl	800d560 <raise>
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	f7f5 fd48 	bl	8002b56 <_exit>
	...

0800d0c8 <__sflush_r>:
 800d0c8:	898a      	ldrh	r2, [r1, #12]
 800d0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0cc:	4605      	mov	r5, r0
 800d0ce:	0710      	lsls	r0, r2, #28
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	d457      	bmi.n	800d184 <__sflush_r+0xbc>
 800d0d4:	684b      	ldr	r3, [r1, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	dc04      	bgt.n	800d0e4 <__sflush_r+0x1c>
 800d0da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dc01      	bgt.n	800d0e4 <__sflush_r+0x1c>
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0e6:	2e00      	cmp	r6, #0
 800d0e8:	d0fa      	beq.n	800d0e0 <__sflush_r+0x18>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0f0:	682f      	ldr	r7, [r5, #0]
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	d032      	beq.n	800d15c <__sflush_r+0x94>
 800d0f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	075a      	lsls	r2, r3, #29
 800d0fc:	d505      	bpl.n	800d10a <__sflush_r+0x42>
 800d0fe:	6863      	ldr	r3, [r4, #4]
 800d100:	1ac0      	subs	r0, r0, r3
 800d102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d104:	b10b      	cbz	r3, 800d10a <__sflush_r+0x42>
 800d106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d108:	1ac0      	subs	r0, r0, r3
 800d10a:	2300      	movs	r3, #0
 800d10c:	4602      	mov	r2, r0
 800d10e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d110:	4628      	mov	r0, r5
 800d112:	6a21      	ldr	r1, [r4, #32]
 800d114:	47b0      	blx	r6
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	d106      	bne.n	800d12a <__sflush_r+0x62>
 800d11c:	6829      	ldr	r1, [r5, #0]
 800d11e:	291d      	cmp	r1, #29
 800d120:	d82c      	bhi.n	800d17c <__sflush_r+0xb4>
 800d122:	4a29      	ldr	r2, [pc, #164]	; (800d1c8 <__sflush_r+0x100>)
 800d124:	40ca      	lsrs	r2, r1
 800d126:	07d6      	lsls	r6, r2, #31
 800d128:	d528      	bpl.n	800d17c <__sflush_r+0xb4>
 800d12a:	2200      	movs	r2, #0
 800d12c:	6062      	str	r2, [r4, #4]
 800d12e:	6922      	ldr	r2, [r4, #16]
 800d130:	04d9      	lsls	r1, r3, #19
 800d132:	6022      	str	r2, [r4, #0]
 800d134:	d504      	bpl.n	800d140 <__sflush_r+0x78>
 800d136:	1c42      	adds	r2, r0, #1
 800d138:	d101      	bne.n	800d13e <__sflush_r+0x76>
 800d13a:	682b      	ldr	r3, [r5, #0]
 800d13c:	b903      	cbnz	r3, 800d140 <__sflush_r+0x78>
 800d13e:	6560      	str	r0, [r4, #84]	; 0x54
 800d140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d142:	602f      	str	r7, [r5, #0]
 800d144:	2900      	cmp	r1, #0
 800d146:	d0cb      	beq.n	800d0e0 <__sflush_r+0x18>
 800d148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d14c:	4299      	cmp	r1, r3
 800d14e:	d002      	beq.n	800d156 <__sflush_r+0x8e>
 800d150:	4628      	mov	r0, r5
 800d152:	f7ff faa5 	bl	800c6a0 <_free_r>
 800d156:	2000      	movs	r0, #0
 800d158:	6360      	str	r0, [r4, #52]	; 0x34
 800d15a:	e7c2      	b.n	800d0e2 <__sflush_r+0x1a>
 800d15c:	6a21      	ldr	r1, [r4, #32]
 800d15e:	2301      	movs	r3, #1
 800d160:	4628      	mov	r0, r5
 800d162:	47b0      	blx	r6
 800d164:	1c41      	adds	r1, r0, #1
 800d166:	d1c7      	bne.n	800d0f8 <__sflush_r+0x30>
 800d168:	682b      	ldr	r3, [r5, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0c4      	beq.n	800d0f8 <__sflush_r+0x30>
 800d16e:	2b1d      	cmp	r3, #29
 800d170:	d001      	beq.n	800d176 <__sflush_r+0xae>
 800d172:	2b16      	cmp	r3, #22
 800d174:	d101      	bne.n	800d17a <__sflush_r+0xb2>
 800d176:	602f      	str	r7, [r5, #0]
 800d178:	e7b2      	b.n	800d0e0 <__sflush_r+0x18>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d180:	81a3      	strh	r3, [r4, #12]
 800d182:	e7ae      	b.n	800d0e2 <__sflush_r+0x1a>
 800d184:	690f      	ldr	r7, [r1, #16]
 800d186:	2f00      	cmp	r7, #0
 800d188:	d0aa      	beq.n	800d0e0 <__sflush_r+0x18>
 800d18a:	0793      	lsls	r3, r2, #30
 800d18c:	bf18      	it	ne
 800d18e:	2300      	movne	r3, #0
 800d190:	680e      	ldr	r6, [r1, #0]
 800d192:	bf08      	it	eq
 800d194:	694b      	ldreq	r3, [r1, #20]
 800d196:	1bf6      	subs	r6, r6, r7
 800d198:	600f      	str	r7, [r1, #0]
 800d19a:	608b      	str	r3, [r1, #8]
 800d19c:	2e00      	cmp	r6, #0
 800d19e:	dd9f      	ble.n	800d0e0 <__sflush_r+0x18>
 800d1a0:	4633      	mov	r3, r6
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	6a21      	ldr	r1, [r4, #32]
 800d1a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d1ac:	47e0      	blx	ip
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	dc06      	bgt.n	800d1c0 <__sflush_r+0xf8>
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	e790      	b.n	800d0e2 <__sflush_r+0x1a>
 800d1c0:	4407      	add	r7, r0
 800d1c2:	1a36      	subs	r6, r6, r0
 800d1c4:	e7ea      	b.n	800d19c <__sflush_r+0xd4>
 800d1c6:	bf00      	nop
 800d1c8:	20400001 	.word	0x20400001

0800d1cc <_fflush_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	690b      	ldr	r3, [r1, #16]
 800d1d0:	4605      	mov	r5, r0
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	b913      	cbnz	r3, 800d1dc <_fflush_r+0x10>
 800d1d6:	2500      	movs	r5, #0
 800d1d8:	4628      	mov	r0, r5
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	b118      	cbz	r0, 800d1e6 <_fflush_r+0x1a>
 800d1de:	6983      	ldr	r3, [r0, #24]
 800d1e0:	b90b      	cbnz	r3, 800d1e6 <_fflush_r+0x1a>
 800d1e2:	f000 f887 	bl	800d2f4 <__sinit>
 800d1e6:	4b14      	ldr	r3, [pc, #80]	; (800d238 <_fflush_r+0x6c>)
 800d1e8:	429c      	cmp	r4, r3
 800d1ea:	d11b      	bne.n	800d224 <_fflush_r+0x58>
 800d1ec:	686c      	ldr	r4, [r5, #4]
 800d1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0ef      	beq.n	800d1d6 <_fflush_r+0xa>
 800d1f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1f8:	07d0      	lsls	r0, r2, #31
 800d1fa:	d404      	bmi.n	800d206 <_fflush_r+0x3a>
 800d1fc:	0599      	lsls	r1, r3, #22
 800d1fe:	d402      	bmi.n	800d206 <_fflush_r+0x3a>
 800d200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d202:	f000 f915 	bl	800d430 <__retarget_lock_acquire_recursive>
 800d206:	4628      	mov	r0, r5
 800d208:	4621      	mov	r1, r4
 800d20a:	f7ff ff5d 	bl	800d0c8 <__sflush_r>
 800d20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d210:	4605      	mov	r5, r0
 800d212:	07da      	lsls	r2, r3, #31
 800d214:	d4e0      	bmi.n	800d1d8 <_fflush_r+0xc>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	059b      	lsls	r3, r3, #22
 800d21a:	d4dd      	bmi.n	800d1d8 <_fflush_r+0xc>
 800d21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d21e:	f000 f908 	bl	800d432 <__retarget_lock_release_recursive>
 800d222:	e7d9      	b.n	800d1d8 <_fflush_r+0xc>
 800d224:	4b05      	ldr	r3, [pc, #20]	; (800d23c <_fflush_r+0x70>)
 800d226:	429c      	cmp	r4, r3
 800d228:	d101      	bne.n	800d22e <_fflush_r+0x62>
 800d22a:	68ac      	ldr	r4, [r5, #8]
 800d22c:	e7df      	b.n	800d1ee <_fflush_r+0x22>
 800d22e:	4b04      	ldr	r3, [pc, #16]	; (800d240 <_fflush_r+0x74>)
 800d230:	429c      	cmp	r4, r3
 800d232:	bf08      	it	eq
 800d234:	68ec      	ldreq	r4, [r5, #12]
 800d236:	e7da      	b.n	800d1ee <_fflush_r+0x22>
 800d238:	0800ebe4 	.word	0x0800ebe4
 800d23c:	0800ec04 	.word	0x0800ec04
 800d240:	0800ebc4 	.word	0x0800ebc4

0800d244 <std>:
 800d244:	2300      	movs	r3, #0
 800d246:	b510      	push	{r4, lr}
 800d248:	4604      	mov	r4, r0
 800d24a:	e9c0 3300 	strd	r3, r3, [r0]
 800d24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d252:	6083      	str	r3, [r0, #8]
 800d254:	8181      	strh	r1, [r0, #12]
 800d256:	6643      	str	r3, [r0, #100]	; 0x64
 800d258:	81c2      	strh	r2, [r0, #14]
 800d25a:	6183      	str	r3, [r0, #24]
 800d25c:	4619      	mov	r1, r3
 800d25e:	2208      	movs	r2, #8
 800d260:	305c      	adds	r0, #92	; 0x5c
 800d262:	f7fb fe13 	bl	8008e8c <memset>
 800d266:	4b05      	ldr	r3, [pc, #20]	; (800d27c <std+0x38>)
 800d268:	6224      	str	r4, [r4, #32]
 800d26a:	6263      	str	r3, [r4, #36]	; 0x24
 800d26c:	4b04      	ldr	r3, [pc, #16]	; (800d280 <std+0x3c>)
 800d26e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <std+0x40>)
 800d272:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d274:	4b04      	ldr	r3, [pc, #16]	; (800d288 <std+0x44>)
 800d276:	6323      	str	r3, [r4, #48]	; 0x30
 800d278:	bd10      	pop	{r4, pc}
 800d27a:	bf00      	nop
 800d27c:	0800d599 	.word	0x0800d599
 800d280:	0800d5bb 	.word	0x0800d5bb
 800d284:	0800d5f3 	.word	0x0800d5f3
 800d288:	0800d617 	.word	0x0800d617

0800d28c <_cleanup_r>:
 800d28c:	4901      	ldr	r1, [pc, #4]	; (800d294 <_cleanup_r+0x8>)
 800d28e:	f000 b8af 	b.w	800d3f0 <_fwalk_reent>
 800d292:	bf00      	nop
 800d294:	0800d1cd 	.word	0x0800d1cd

0800d298 <__sfmoreglue>:
 800d298:	2268      	movs	r2, #104	; 0x68
 800d29a:	b570      	push	{r4, r5, r6, lr}
 800d29c:	1e4d      	subs	r5, r1, #1
 800d29e:	4355      	muls	r5, r2
 800d2a0:	460e      	mov	r6, r1
 800d2a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2a6:	f7ff fa63 	bl	800c770 <_malloc_r>
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	b140      	cbz	r0, 800d2c0 <__sfmoreglue+0x28>
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	e9c0 1600 	strd	r1, r6, [r0]
 800d2b4:	300c      	adds	r0, #12
 800d2b6:	60a0      	str	r0, [r4, #8]
 800d2b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2bc:	f7fb fde6 	bl	8008e8c <memset>
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}

0800d2c4 <__sfp_lock_acquire>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__sfp_lock_acquire+0x8>)
 800d2c6:	f000 b8b3 	b.w	800d430 <__retarget_lock_acquire_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	20003725 	.word	0x20003725

0800d2d0 <__sfp_lock_release>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__sfp_lock_release+0x8>)
 800d2d2:	f000 b8ae 	b.w	800d432 <__retarget_lock_release_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20003725 	.word	0x20003725

0800d2dc <__sinit_lock_acquire>:
 800d2dc:	4801      	ldr	r0, [pc, #4]	; (800d2e4 <__sinit_lock_acquire+0x8>)
 800d2de:	f000 b8a7 	b.w	800d430 <__retarget_lock_acquire_recursive>
 800d2e2:	bf00      	nop
 800d2e4:	20003726 	.word	0x20003726

0800d2e8 <__sinit_lock_release>:
 800d2e8:	4801      	ldr	r0, [pc, #4]	; (800d2f0 <__sinit_lock_release+0x8>)
 800d2ea:	f000 b8a2 	b.w	800d432 <__retarget_lock_release_recursive>
 800d2ee:	bf00      	nop
 800d2f0:	20003726 	.word	0x20003726

0800d2f4 <__sinit>:
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	f7ff fff0 	bl	800d2dc <__sinit_lock_acquire>
 800d2fc:	69a3      	ldr	r3, [r4, #24]
 800d2fe:	b11b      	cbz	r3, 800d308 <__sinit+0x14>
 800d300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d304:	f7ff bff0 	b.w	800d2e8 <__sinit_lock_release>
 800d308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d30c:	6523      	str	r3, [r4, #80]	; 0x50
 800d30e:	4b13      	ldr	r3, [pc, #76]	; (800d35c <__sinit+0x68>)
 800d310:	4a13      	ldr	r2, [pc, #76]	; (800d360 <__sinit+0x6c>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	62a2      	str	r2, [r4, #40]	; 0x28
 800d316:	42a3      	cmp	r3, r4
 800d318:	bf08      	it	eq
 800d31a:	2301      	moveq	r3, #1
 800d31c:	4620      	mov	r0, r4
 800d31e:	bf08      	it	eq
 800d320:	61a3      	streq	r3, [r4, #24]
 800d322:	f000 f81f 	bl	800d364 <__sfp>
 800d326:	6060      	str	r0, [r4, #4]
 800d328:	4620      	mov	r0, r4
 800d32a:	f000 f81b 	bl	800d364 <__sfp>
 800d32e:	60a0      	str	r0, [r4, #8]
 800d330:	4620      	mov	r0, r4
 800d332:	f000 f817 	bl	800d364 <__sfp>
 800d336:	2200      	movs	r2, #0
 800d338:	2104      	movs	r1, #4
 800d33a:	60e0      	str	r0, [r4, #12]
 800d33c:	6860      	ldr	r0, [r4, #4]
 800d33e:	f7ff ff81 	bl	800d244 <std>
 800d342:	2201      	movs	r2, #1
 800d344:	2109      	movs	r1, #9
 800d346:	68a0      	ldr	r0, [r4, #8]
 800d348:	f7ff ff7c 	bl	800d244 <std>
 800d34c:	2202      	movs	r2, #2
 800d34e:	2112      	movs	r1, #18
 800d350:	68e0      	ldr	r0, [r4, #12]
 800d352:	f7ff ff77 	bl	800d244 <std>
 800d356:	2301      	movs	r3, #1
 800d358:	61a3      	str	r3, [r4, #24]
 800d35a:	e7d1      	b.n	800d300 <__sinit+0xc>
 800d35c:	0800e780 	.word	0x0800e780
 800d360:	0800d28d 	.word	0x0800d28d

0800d364 <__sfp>:
 800d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d366:	4607      	mov	r7, r0
 800d368:	f7ff ffac 	bl	800d2c4 <__sfp_lock_acquire>
 800d36c:	4b1e      	ldr	r3, [pc, #120]	; (800d3e8 <__sfp+0x84>)
 800d36e:	681e      	ldr	r6, [r3, #0]
 800d370:	69b3      	ldr	r3, [r6, #24]
 800d372:	b913      	cbnz	r3, 800d37a <__sfp+0x16>
 800d374:	4630      	mov	r0, r6
 800d376:	f7ff ffbd 	bl	800d2f4 <__sinit>
 800d37a:	3648      	adds	r6, #72	; 0x48
 800d37c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d380:	3b01      	subs	r3, #1
 800d382:	d503      	bpl.n	800d38c <__sfp+0x28>
 800d384:	6833      	ldr	r3, [r6, #0]
 800d386:	b30b      	cbz	r3, 800d3cc <__sfp+0x68>
 800d388:	6836      	ldr	r6, [r6, #0]
 800d38a:	e7f7      	b.n	800d37c <__sfp+0x18>
 800d38c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d390:	b9d5      	cbnz	r5, 800d3c8 <__sfp+0x64>
 800d392:	4b16      	ldr	r3, [pc, #88]	; (800d3ec <__sfp+0x88>)
 800d394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d398:	60e3      	str	r3, [r4, #12]
 800d39a:	6665      	str	r5, [r4, #100]	; 0x64
 800d39c:	f000 f847 	bl	800d42e <__retarget_lock_init_recursive>
 800d3a0:	f7ff ff96 	bl	800d2d0 <__sfp_lock_release>
 800d3a4:	2208      	movs	r2, #8
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d3ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d3b0:	6025      	str	r5, [r4, #0]
 800d3b2:	61a5      	str	r5, [r4, #24]
 800d3b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d3b8:	f7fb fd68 	bl	8008e8c <memset>
 800d3bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d3c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d3c4:	4620      	mov	r0, r4
 800d3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c8:	3468      	adds	r4, #104	; 0x68
 800d3ca:	e7d9      	b.n	800d380 <__sfp+0x1c>
 800d3cc:	2104      	movs	r1, #4
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7ff ff62 	bl	800d298 <__sfmoreglue>
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	6030      	str	r0, [r6, #0]
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d1d5      	bne.n	800d388 <__sfp+0x24>
 800d3dc:	f7ff ff78 	bl	800d2d0 <__sfp_lock_release>
 800d3e0:	230c      	movs	r3, #12
 800d3e2:	603b      	str	r3, [r7, #0]
 800d3e4:	e7ee      	b.n	800d3c4 <__sfp+0x60>
 800d3e6:	bf00      	nop
 800d3e8:	0800e780 	.word	0x0800e780
 800d3ec:	ffff0001 	.word	0xffff0001

0800d3f0 <_fwalk_reent>:
 800d3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f4:	4606      	mov	r6, r0
 800d3f6:	4688      	mov	r8, r1
 800d3f8:	2700      	movs	r7, #0
 800d3fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d402:	f1b9 0901 	subs.w	r9, r9, #1
 800d406:	d505      	bpl.n	800d414 <_fwalk_reent+0x24>
 800d408:	6824      	ldr	r4, [r4, #0]
 800d40a:	2c00      	cmp	r4, #0
 800d40c:	d1f7      	bne.n	800d3fe <_fwalk_reent+0xe>
 800d40e:	4638      	mov	r0, r7
 800d410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d414:	89ab      	ldrh	r3, [r5, #12]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d907      	bls.n	800d42a <_fwalk_reent+0x3a>
 800d41a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d41e:	3301      	adds	r3, #1
 800d420:	d003      	beq.n	800d42a <_fwalk_reent+0x3a>
 800d422:	4629      	mov	r1, r5
 800d424:	4630      	mov	r0, r6
 800d426:	47c0      	blx	r8
 800d428:	4307      	orrs	r7, r0
 800d42a:	3568      	adds	r5, #104	; 0x68
 800d42c:	e7e9      	b.n	800d402 <_fwalk_reent+0x12>

0800d42e <__retarget_lock_init_recursive>:
 800d42e:	4770      	bx	lr

0800d430 <__retarget_lock_acquire_recursive>:
 800d430:	4770      	bx	lr

0800d432 <__retarget_lock_release_recursive>:
 800d432:	4770      	bx	lr

0800d434 <__swhatbuf_r>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	460e      	mov	r6, r1
 800d438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d43c:	4614      	mov	r4, r2
 800d43e:	2900      	cmp	r1, #0
 800d440:	461d      	mov	r5, r3
 800d442:	b096      	sub	sp, #88	; 0x58
 800d444:	da08      	bge.n	800d458 <__swhatbuf_r+0x24>
 800d446:	2200      	movs	r2, #0
 800d448:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d44c:	602a      	str	r2, [r5, #0]
 800d44e:	061a      	lsls	r2, r3, #24
 800d450:	d410      	bmi.n	800d474 <__swhatbuf_r+0x40>
 800d452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d456:	e00e      	b.n	800d476 <__swhatbuf_r+0x42>
 800d458:	466a      	mov	r2, sp
 800d45a:	f000 f903 	bl	800d664 <_fstat_r>
 800d45e:	2800      	cmp	r0, #0
 800d460:	dbf1      	blt.n	800d446 <__swhatbuf_r+0x12>
 800d462:	9a01      	ldr	r2, [sp, #4]
 800d464:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d468:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d46c:	425a      	negs	r2, r3
 800d46e:	415a      	adcs	r2, r3
 800d470:	602a      	str	r2, [r5, #0]
 800d472:	e7ee      	b.n	800d452 <__swhatbuf_r+0x1e>
 800d474:	2340      	movs	r3, #64	; 0x40
 800d476:	2000      	movs	r0, #0
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	b016      	add	sp, #88	; 0x58
 800d47c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d480 <__smakebuf_r>:
 800d480:	898b      	ldrh	r3, [r1, #12]
 800d482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d484:	079d      	lsls	r5, r3, #30
 800d486:	4606      	mov	r6, r0
 800d488:	460c      	mov	r4, r1
 800d48a:	d507      	bpl.n	800d49c <__smakebuf_r+0x1c>
 800d48c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	6123      	str	r3, [r4, #16]
 800d494:	2301      	movs	r3, #1
 800d496:	6163      	str	r3, [r4, #20]
 800d498:	b002      	add	sp, #8
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	466a      	mov	r2, sp
 800d49e:	ab01      	add	r3, sp, #4
 800d4a0:	f7ff ffc8 	bl	800d434 <__swhatbuf_r>
 800d4a4:	9900      	ldr	r1, [sp, #0]
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7ff f961 	bl	800c770 <_malloc_r>
 800d4ae:	b948      	cbnz	r0, 800d4c4 <__smakebuf_r+0x44>
 800d4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b4:	059a      	lsls	r2, r3, #22
 800d4b6:	d4ef      	bmi.n	800d498 <__smakebuf_r+0x18>
 800d4b8:	f023 0303 	bic.w	r3, r3, #3
 800d4bc:	f043 0302 	orr.w	r3, r3, #2
 800d4c0:	81a3      	strh	r3, [r4, #12]
 800d4c2:	e7e3      	b.n	800d48c <__smakebuf_r+0xc>
 800d4c4:	4b0d      	ldr	r3, [pc, #52]	; (800d4fc <__smakebuf_r+0x7c>)
 800d4c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	6020      	str	r0, [r4, #0]
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	81a3      	strh	r3, [r4, #12]
 800d4d2:	9b00      	ldr	r3, [sp, #0]
 800d4d4:	6120      	str	r0, [r4, #16]
 800d4d6:	6163      	str	r3, [r4, #20]
 800d4d8:	9b01      	ldr	r3, [sp, #4]
 800d4da:	b15b      	cbz	r3, 800d4f4 <__smakebuf_r+0x74>
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4e2:	f000 f8d1 	bl	800d688 <_isatty_r>
 800d4e6:	b128      	cbz	r0, 800d4f4 <__smakebuf_r+0x74>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	f023 0303 	bic.w	r3, r3, #3
 800d4ee:	f043 0301 	orr.w	r3, r3, #1
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	89a0      	ldrh	r0, [r4, #12]
 800d4f6:	4305      	orrs	r5, r0
 800d4f8:	81a5      	strh	r5, [r4, #12]
 800d4fa:	e7cd      	b.n	800d498 <__smakebuf_r+0x18>
 800d4fc:	0800d28d 	.word	0x0800d28d

0800d500 <_malloc_usable_size_r>:
 800d500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d504:	1f18      	subs	r0, r3, #4
 800d506:	2b00      	cmp	r3, #0
 800d508:	bfbc      	itt	lt
 800d50a:	580b      	ldrlt	r3, [r1, r0]
 800d50c:	18c0      	addlt	r0, r0, r3
 800d50e:	4770      	bx	lr

0800d510 <_raise_r>:
 800d510:	291f      	cmp	r1, #31
 800d512:	b538      	push	{r3, r4, r5, lr}
 800d514:	4604      	mov	r4, r0
 800d516:	460d      	mov	r5, r1
 800d518:	d904      	bls.n	800d524 <_raise_r+0x14>
 800d51a:	2316      	movs	r3, #22
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d526:	b112      	cbz	r2, 800d52e <_raise_r+0x1e>
 800d528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d52c:	b94b      	cbnz	r3, 800d542 <_raise_r+0x32>
 800d52e:	4620      	mov	r0, r4
 800d530:	f000 f830 	bl	800d594 <_getpid_r>
 800d534:	462a      	mov	r2, r5
 800d536:	4601      	mov	r1, r0
 800d538:	4620      	mov	r0, r4
 800d53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53e:	f000 b817 	b.w	800d570 <_kill_r>
 800d542:	2b01      	cmp	r3, #1
 800d544:	d00a      	beq.n	800d55c <_raise_r+0x4c>
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	d103      	bne.n	800d552 <_raise_r+0x42>
 800d54a:	2316      	movs	r3, #22
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	2001      	movs	r0, #1
 800d550:	e7e7      	b.n	800d522 <_raise_r+0x12>
 800d552:	2400      	movs	r4, #0
 800d554:	4628      	mov	r0, r5
 800d556:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d55a:	4798      	blx	r3
 800d55c:	2000      	movs	r0, #0
 800d55e:	e7e0      	b.n	800d522 <_raise_r+0x12>

0800d560 <raise>:
 800d560:	4b02      	ldr	r3, [pc, #8]	; (800d56c <raise+0xc>)
 800d562:	4601      	mov	r1, r0
 800d564:	6818      	ldr	r0, [r3, #0]
 800d566:	f7ff bfd3 	b.w	800d510 <_raise_r>
 800d56a:	bf00      	nop
 800d56c:	2000001c 	.word	0x2000001c

0800d570 <_kill_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	2300      	movs	r3, #0
 800d574:	4d06      	ldr	r5, [pc, #24]	; (800d590 <_kill_r+0x20>)
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	4611      	mov	r1, r2
 800d57c:	602b      	str	r3, [r5, #0]
 800d57e:	f7f5 fada 	bl	8002b36 <_kill>
 800d582:	1c43      	adds	r3, r0, #1
 800d584:	d102      	bne.n	800d58c <_kill_r+0x1c>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	b103      	cbz	r3, 800d58c <_kill_r+0x1c>
 800d58a:	6023      	str	r3, [r4, #0]
 800d58c:	bd38      	pop	{r3, r4, r5, pc}
 800d58e:	bf00      	nop
 800d590:	20003720 	.word	0x20003720

0800d594 <_getpid_r>:
 800d594:	f7f5 bac8 	b.w	8002b28 <_getpid>

0800d598 <__sread>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	460c      	mov	r4, r1
 800d59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a0:	f000 f894 	bl	800d6cc <_read_r>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	bfab      	itete	ge
 800d5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d5ac:	181b      	addge	r3, r3, r0
 800d5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5b2:	bfac      	ite	ge
 800d5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5b6:	81a3      	strhlt	r3, [r4, #12]
 800d5b8:	bd10      	pop	{r4, pc}

0800d5ba <__swrite>:
 800d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5be:	461f      	mov	r7, r3
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	05db      	lsls	r3, r3, #23
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4616      	mov	r6, r2
 800d5ca:	d505      	bpl.n	800d5d8 <__swrite+0x1e>
 800d5cc:	2302      	movs	r3, #2
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d4:	f000 f868 	bl	800d6a8 <_lseek_r>
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	4632      	mov	r2, r6
 800d5dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	f000 b817 	b.w	800d620 <_write_r>

0800d5f2 <__sseek>:
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fa:	f000 f855 	bl	800d6a8 <_lseek_r>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	bf15      	itete	ne
 800d604:	6560      	strne	r0, [r4, #84]	; 0x54
 800d606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d60e:	81a3      	strheq	r3, [r4, #12]
 800d610:	bf18      	it	ne
 800d612:	81a3      	strhne	r3, [r4, #12]
 800d614:	bd10      	pop	{r4, pc}

0800d616 <__sclose>:
 800d616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61a:	f000 b813 	b.w	800d644 <_close_r>
	...

0800d620 <_write_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4604      	mov	r4, r0
 800d624:	4608      	mov	r0, r1
 800d626:	4611      	mov	r1, r2
 800d628:	2200      	movs	r2, #0
 800d62a:	4d05      	ldr	r5, [pc, #20]	; (800d640 <_write_r+0x20>)
 800d62c:	602a      	str	r2, [r5, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	f7f5 fab8 	bl	8002ba4 <_write>
 800d634:	1c43      	adds	r3, r0, #1
 800d636:	d102      	bne.n	800d63e <_write_r+0x1e>
 800d638:	682b      	ldr	r3, [r5, #0]
 800d63a:	b103      	cbz	r3, 800d63e <_write_r+0x1e>
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	bd38      	pop	{r3, r4, r5, pc}
 800d640:	20003720 	.word	0x20003720

0800d644 <_close_r>:
 800d644:	b538      	push	{r3, r4, r5, lr}
 800d646:	2300      	movs	r3, #0
 800d648:	4d05      	ldr	r5, [pc, #20]	; (800d660 <_close_r+0x1c>)
 800d64a:	4604      	mov	r4, r0
 800d64c:	4608      	mov	r0, r1
 800d64e:	602b      	str	r3, [r5, #0]
 800d650:	f7f5 fac4 	bl	8002bdc <_close>
 800d654:	1c43      	adds	r3, r0, #1
 800d656:	d102      	bne.n	800d65e <_close_r+0x1a>
 800d658:	682b      	ldr	r3, [r5, #0]
 800d65a:	b103      	cbz	r3, 800d65e <_close_r+0x1a>
 800d65c:	6023      	str	r3, [r4, #0]
 800d65e:	bd38      	pop	{r3, r4, r5, pc}
 800d660:	20003720 	.word	0x20003720

0800d664 <_fstat_r>:
 800d664:	b538      	push	{r3, r4, r5, lr}
 800d666:	2300      	movs	r3, #0
 800d668:	4d06      	ldr	r5, [pc, #24]	; (800d684 <_fstat_r+0x20>)
 800d66a:	4604      	mov	r4, r0
 800d66c:	4608      	mov	r0, r1
 800d66e:	4611      	mov	r1, r2
 800d670:	602b      	str	r3, [r5, #0]
 800d672:	f7f5 fabe 	bl	8002bf2 <_fstat>
 800d676:	1c43      	adds	r3, r0, #1
 800d678:	d102      	bne.n	800d680 <_fstat_r+0x1c>
 800d67a:	682b      	ldr	r3, [r5, #0]
 800d67c:	b103      	cbz	r3, 800d680 <_fstat_r+0x1c>
 800d67e:	6023      	str	r3, [r4, #0]
 800d680:	bd38      	pop	{r3, r4, r5, pc}
 800d682:	bf00      	nop
 800d684:	20003720 	.word	0x20003720

0800d688 <_isatty_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	2300      	movs	r3, #0
 800d68c:	4d05      	ldr	r5, [pc, #20]	; (800d6a4 <_isatty_r+0x1c>)
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	602b      	str	r3, [r5, #0]
 800d694:	f7f5 fabc 	bl	8002c10 <_isatty>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d102      	bne.n	800d6a2 <_isatty_r+0x1a>
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	b103      	cbz	r3, 800d6a2 <_isatty_r+0x1a>
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	bd38      	pop	{r3, r4, r5, pc}
 800d6a4:	20003720 	.word	0x20003720

0800d6a8 <_lseek_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	4d05      	ldr	r5, [pc, #20]	; (800d6c8 <_lseek_r+0x20>)
 800d6b4:	602a      	str	r2, [r5, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	f7f5 fab4 	bl	8002c24 <_lseek>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_lseek_r+0x1e>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_lseek_r+0x1e>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	20003720 	.word	0x20003720

0800d6cc <_read_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	4608      	mov	r0, r1
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	4d05      	ldr	r5, [pc, #20]	; (800d6ec <_read_r+0x20>)
 800d6d8:	602a      	str	r2, [r5, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f7f5 fa45 	bl	8002b6a <_read>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_read_r+0x1e>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_read_r+0x1e>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	20003720 	.word	0x20003720

0800d6f0 <_init>:
 800d6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6f2:	bf00      	nop
 800d6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f6:	bc08      	pop	{r3}
 800d6f8:	469e      	mov	lr, r3
 800d6fa:	4770      	bx	lr

0800d6fc <_fini>:
 800d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fe:	bf00      	nop
 800d700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d702:	bc08      	pop	{r3}
 800d704:	469e      	mov	lr, r3
 800d706:	4770      	bx	lr
